/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/file-viewer-doc/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./node_modules/eslint-loader/index.js?!./packages/vendors/pptx/worker/pptx.worker.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack:///./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/d3/d3.js":
/*!*******************************!*\
  !*** ./node_modules/d3/d3.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {\n  var d3 = {\n    version: \"3.5.17\"\n  };\n  var d3_arraySlice = [].slice, d3_array = function(list) {\n    return d3_arraySlice.call(list);\n  };\n  var d3_document = this.document;\n  function d3_documentElement(node) {\n    return node && (node.ownerDocument || node.document || node).documentElement;\n  }\n  function d3_window(node) {\n    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n  }\n  if (d3_document) {\n    try {\n      d3_array(d3_document.documentElement.childNodes)[0].nodeType;\n    } catch (e) {\n      d3_array = function(list) {\n        var i = list.length, array = new Array(i);\n        while (i--) array[i] = list[i];\n        return array;\n      };\n    }\n  }\n  if (!Date.now) Date.now = function() {\n    return +new Date();\n  };\n  if (d3_document) {\n    try {\n      d3_document.createElement(\"DIV\").style.setProperty(\"opacity\", 0, \"\");\n    } catch (error) {\n      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n      d3_element_prototype.setAttribute = function(name, value) {\n        d3_element_setAttribute.call(this, name, value + \"\");\n      };\n      d3_element_prototype.setAttributeNS = function(space, local, value) {\n        d3_element_setAttributeNS.call(this, space, local, value + \"\");\n      };\n      d3_style_prototype.setProperty = function(name, value, priority) {\n        d3_style_setProperty.call(this, name, value + \"\", priority);\n      };\n    }\n  }\n  d3.ascending = d3_ascending;\n  function d3_ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n  d3.descending = function(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  };\n  d3.min = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;\n    }\n    return a;\n  };\n  d3.max = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;\n    }\n    return a;\n  };\n  d3.extent = function(array, f) {\n    var i = -1, n = array.length, a, b, c;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n    return [ a, c ];\n  };\n  function d3_number(x) {\n    return x === null ? NaN : +x;\n  }\n  function d3_numeric(x) {\n    return !isNaN(x);\n  }\n  d3.sum = function(array, f) {\n    var s = 0, n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = +array[i])) s += a;\n    } else {\n      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n    }\n    return s;\n  };\n  d3.mean = function(array, f) {\n    var s = 0, n = array.length, a, i = -1, j = n;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;\n    }\n    if (j) return s / j;\n  };\n  d3.quantile = function(values, p) {\n    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;\n    return e ? v + e * (values[h] - v) : v;\n  };\n  d3.median = function(array, f) {\n    var numbers = [], n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n    }\n    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n  };\n  d3.variance = function(array, f) {\n    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    } else {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n    if (j > 1) return s / (j - 1);\n  };\n  d3.deviation = function() {\n    var v = d3.variance.apply(this, arguments);\n    return v ? Math.sqrt(v) : v;\n  };\n  function d3_bisector(compare) {\n    return {\n      left: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n  var d3_bisect = d3_bisector(d3_ascending);\n  d3.bisectLeft = d3_bisect.left;\n  d3.bisect = d3.bisectRight = d3_bisect.right;\n  d3.bisector = function(f) {\n    return d3_bisector(f.length === 1 ? function(d, x) {\n      return d3_ascending(f(d), x);\n    } : f);\n  };\n  d3.shuffle = function(array, i0, i1) {\n    if ((m = arguments.length) < 3) {\n      i1 = array.length;\n      if (m < 2) i0 = 0;\n    }\n    var m = i1 - i0, t, i;\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n    }\n    return array;\n  };\n  d3.permute = function(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  };\n  d3.pairs = function(array) {\n    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];\n    return pairs;\n  };\n  d3.transpose = function(matrix) {\n    if (!(n = matrix.length)) return [];\n    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {\n      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {\n        row[j] = matrix[j][i];\n      }\n    }\n    return transpose;\n  };\n  function d3_transposeLength(d) {\n    return d.length;\n  }\n  d3.zip = function() {\n    return d3.transpose(arguments);\n  };\n  d3.keys = function(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  };\n  d3.values = function(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  };\n  d3.entries = function(map) {\n    var entries = [];\n    for (var key in map) entries.push({\n      key: key,\n      value: map[key]\n    });\n    return entries;\n  };\n  d3.merge = function(arrays) {\n    var n = arrays.length, m, i = -1, j = 0, merged, array;\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n    return merged;\n  };\n  var abs = Math.abs;\n  d3.range = function(start, stop, step) {\n    if (arguments.length < 3) {\n      step = 1;\n      if (arguments.length < 2) {\n        stop = start;\n        start = 0;\n      }\n    }\n    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n    start *= k, stop *= k, step *= k;\n    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n    return range;\n  };\n  function d3_range_integerScale(x) {\n    var k = 1;\n    while (x * k % 1) k *= 10;\n    return k;\n  }\n  function d3_class(ctor, properties) {\n    for (var key in properties) {\n      Object.defineProperty(ctor.prototype, key, {\n        value: properties[key],\n        enumerable: false\n      });\n    }\n  }\n  d3.map = function(object, f) {\n    var map = new d3_Map();\n    if (object instanceof d3_Map) {\n      object.forEach(function(key, value) {\n        map.set(key, value);\n      });\n    } else if (Array.isArray(object)) {\n      var i = -1, n = object.length, o;\n      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);\n    } else {\n      for (var key in object) map.set(key, object[key]);\n    }\n    return map;\n  };\n  function d3_Map() {\n    this._ = Object.create(null);\n  }\n  var d3_map_proto = \"__proto__\", d3_map_zero = \"\\x00\";\n  d3_class(d3_Map, {\n    has: d3_map_has,\n    get: function(key) {\n      return this._[d3_map_escape(key)];\n    },\n    set: function(key, value) {\n      return this._[d3_map_escape(key)] = value;\n    },\n    remove: d3_map_remove,\n    keys: d3_map_keys,\n    values: function() {\n      var values = [];\n      for (var key in this._) values.push(this._[key]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var key in this._) entries.push({\n        key: d3_map_unescape(key),\n        value: this._[key]\n      });\n      return entries;\n    },\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);\n    }\n  });\n  function d3_map_escape(key) {\n    return (key += \"\") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n  }\n  function d3_map_unescape(key) {\n    return (key += \"\")[0] === d3_map_zero ? key.slice(1) : key;\n  }\n  function d3_map_has(key) {\n    return d3_map_escape(key) in this._;\n  }\n  function d3_map_remove(key) {\n    return (key = d3_map_escape(key)) in this._ && delete this._[key];\n  }\n  function d3_map_keys() {\n    var keys = [];\n    for (var key in this._) keys.push(d3_map_unescape(key));\n    return keys;\n  }\n  function d3_map_size() {\n    var size = 0;\n    for (var key in this._) ++size;\n    return size;\n  }\n  function d3_map_empty() {\n    for (var key in this._) return false;\n    return true;\n  }\n  d3.nest = function() {\n    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;\n    function map(mapType, array, depth) {\n      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n          values.push(object);\n        } else {\n          valuesByKey.set(keyValue, [ object ]);\n        }\n      }\n      if (mapType) {\n        object = mapType();\n        setter = function(keyValue, values) {\n          object.set(keyValue, map(mapType, values, depth));\n        };\n      } else {\n        object = {};\n        setter = function(keyValue, values) {\n          object[keyValue] = map(mapType, values, depth);\n        };\n      }\n      valuesByKey.forEach(setter);\n      return object;\n    }\n    function entries(map, depth) {\n      if (depth >= keys.length) return map;\n      var array = [], sortKey = sortKeys[depth++];\n      map.forEach(function(key, keyMap) {\n        array.push({\n          key: key,\n          values: entries(keyMap, depth)\n        });\n      });\n      return sortKey ? array.sort(function(a, b) {\n        return sortKey(a.key, b.key);\n      }) : array;\n    }\n    nest.map = function(array, mapType) {\n      return map(mapType, array, 0);\n    };\n    nest.entries = function(array) {\n      return entries(map(d3.map, array, 0), 0);\n    };\n    nest.key = function(d) {\n      keys.push(d);\n      return nest;\n    };\n    nest.sortKeys = function(order) {\n      sortKeys[keys.length - 1] = order;\n      return nest;\n    };\n    nest.sortValues = function(order) {\n      sortValues = order;\n      return nest;\n    };\n    nest.rollup = function(f) {\n      rollup = f;\n      return nest;\n    };\n    return nest;\n  };\n  d3.set = function(array) {\n    var set = new d3_Set();\n    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);\n    return set;\n  };\n  function d3_Set() {\n    this._ = Object.create(null);\n  }\n  d3_class(d3_Set, {\n    has: d3_map_has,\n    add: function(key) {\n      this._[d3_map_escape(key += \"\")] = true;\n      return key;\n    },\n    remove: d3_map_remove,\n    values: d3_map_keys,\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key));\n    }\n  });\n  d3.behavior = {};\n  function d3_identity(d) {\n    return d;\n  }\n  d3.rebind = function(target, source) {\n    var i = 1, n = arguments.length, method;\n    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n    return target;\n  };\n  function d3_rebind(target, source, method) {\n    return function() {\n      var value = method.apply(source, arguments);\n      return value === source ? target : value;\n    };\n  }\n  function d3_vendorSymbol(object, name) {\n    if (name in object) return name;\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {\n      var prefixName = d3_vendorPrefixes[i] + name;\n      if (prefixName in object) return prefixName;\n    }\n  }\n  var d3_vendorPrefixes = [ \"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\" ];\n  function d3_noop() {}\n  d3.dispatch = function() {\n    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    return dispatch;\n  };\n  function d3_dispatch() {}\n  d3_dispatch.prototype.on = function(type, listener) {\n    var i = type.indexOf(\".\"), name = \"\";\n    if (i >= 0) {\n      name = type.slice(i + 1);\n      type = type.slice(0, i);\n    }\n    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);\n    if (arguments.length === 2) {\n      if (listener == null) for (type in this) {\n        if (this.hasOwnProperty(type)) this[type].on(name, null);\n      }\n      return this;\n    }\n  };\n  function d3_dispatch_event(dispatch) {\n    var listeners = [], listenerByName = new d3_Map();\n    function event() {\n      var z = listeners, i = -1, n = z.length, l;\n      while (++i < n) if (l = z[i].on) l.apply(this, arguments);\n      return dispatch;\n    }\n    event.on = function(name, listener) {\n      var l = listenerByName.get(name), i;\n      if (arguments.length < 2) return l && l.on;\n      if (l) {\n        l.on = null;\n        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n        listenerByName.remove(name);\n      }\n      if (listener) listeners.push(listenerByName.set(name, {\n        on: listener\n      }));\n      return dispatch;\n    };\n    return event;\n  }\n  d3.event = null;\n  function d3_eventPreventDefault() {\n    d3.event.preventDefault();\n  }\n  function d3_eventSource() {\n    var e = d3.event, s;\n    while (s = e.sourceEvent) e = s;\n    return e;\n  }\n  function d3_eventDispatch(target) {\n    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    dispatch.of = function(thiz, argumentz) {\n      return function(e1) {\n        try {\n          var e0 = e1.sourceEvent = d3.event;\n          e1.target = target;\n          d3.event = e1;\n          dispatch[e1.type].apply(thiz, argumentz);\n        } finally {\n          d3.event = e0;\n        }\n      };\n    };\n    return dispatch;\n  }\n  d3.requote = function(s) {\n    return s.replace(d3_requote_re, \"\\\\$&\");\n  };\n  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  var d3_subclass = {}.__proto__ ? function(object, prototype) {\n    object.__proto__ = prototype;\n  } : function(object, prototype) {\n    for (var property in prototype) object[property] = prototype[property];\n  };\n  function d3_selection(groups) {\n    d3_subclass(groups, d3_selectionPrototype);\n    return groups;\n  }\n  var d3_select = function(s, n) {\n    return n.querySelector(s);\n  }, d3_selectAll = function(s, n) {\n    return n.querySelectorAll(s);\n  }, d3_selectMatches = function(n, s) {\n    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, \"matchesSelector\")];\n    d3_selectMatches = function(n, s) {\n      return d3_selectMatcher.call(n, s);\n    };\n    return d3_selectMatches(n, s);\n  };\n  if (typeof Sizzle === \"function\") {\n    d3_select = function(s, n) {\n      return Sizzle(s, n)[0] || null;\n    };\n    d3_selectAll = Sizzle;\n    d3_selectMatches = Sizzle.matchesSelector;\n  }\n  d3.selection = function() {\n    return d3.select(d3_document.documentElement);\n  };\n  var d3_selectionPrototype = d3.selection.prototype = [];\n  d3_selectionPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, group, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selector(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_select(selector, this);\n    };\n  }\n  d3_selectionPrototype.selectAll = function(selector) {\n    var subgroups = [], subgroup, node;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n          subgroup.parentNode = node;\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selectorAll(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_selectAll(selector, this);\n    };\n  }\n  var d3_nsXhtml = \"http://www.w3.org/1999/xhtml\";\n  var d3_nsPrefix = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: d3_nsXhtml,\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n  d3.ns = {\n    prefix: d3_nsPrefix,\n    qualify: function(name) {\n      var i = name.indexOf(\":\"), prefix = name;\n      if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n        space: d3_nsPrefix[prefix],\n        local: name\n      } : name;\n    }\n  };\n  d3_selectionPrototype.attr = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node();\n        name = d3.ns.qualify(name);\n        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n      }\n      for (value in name) this.each(d3_selection_attr(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_attr(name, value));\n  };\n  function d3_selection_attr(name, value) {\n    name = d3.ns.qualify(name);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrConstant() {\n      this.setAttribute(name, value);\n    }\n    function attrConstantNS() {\n      this.setAttributeNS(name.space, name.local, value);\n    }\n    function attrFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);\n    }\n    function attrFunctionNS() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n    }\n    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n  }\n  function d3_collapse(s) {\n    return s.trim().replace(/\\s+/g, \" \");\n  }\n  d3_selectionPrototype.classed = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;\n        if (value = node.classList) {\n          while (++i < n) if (!value.contains(name[i])) return false;\n        } else {\n          value = node.getAttribute(\"class\");\n          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;\n        }\n        return true;\n      }\n      for (value in name) this.each(d3_selection_classed(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_classed(name, value));\n  };\n  function d3_selection_classedRe(name) {\n    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");\n  }\n  function d3_selection_classes(name) {\n    return (name + \"\").trim().split(/^|\\s+/);\n  }\n  function d3_selection_classed(name, value) {\n    name = d3_selection_classes(name).map(d3_selection_classedName);\n    var n = name.length;\n    function classedConstant() {\n      var i = -1;\n      while (++i < n) name[i](this, value);\n    }\n    function classedFunction() {\n      var i = -1, x = value.apply(this, arguments);\n      while (++i < n) name[i](this, x);\n    }\n    return typeof value === \"function\" ? classedFunction : classedConstant;\n  }\n  function d3_selection_classedName(name) {\n    var re = d3_selection_classedRe(name);\n    return function(node, value) {\n      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n      var c = node.getAttribute(\"class\") || \"\";\n      if (value) {\n        re.lastIndex = 0;\n        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));\n      } else {\n        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));\n      }\n    };\n  }\n  d3_selectionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));\n        return this;\n      }\n      if (n < 2) {\n        var node = this.node();\n        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);\n      }\n      priority = \"\";\n    }\n    return this.each(d3_selection_style(name, value, priority));\n  };\n  function d3_selection_style(name, value, priority) {\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleConstant() {\n      this.style.setProperty(name, value, priority);\n    }\n    function styleFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);\n    }\n    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;\n  }\n  d3_selectionPrototype.property = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") return this.node()[name];\n      for (value in name) this.each(d3_selection_property(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_property(name, value));\n  };\n  function d3_selection_property(name, value) {\n    function propertyNull() {\n      delete this[name];\n    }\n    function propertyConstant() {\n      this[name] = value;\n    }\n    function propertyFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) delete this[name]; else this[name] = x;\n    }\n    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;\n  }\n  d3_selectionPrototype.text = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.textContent = \"\";\n    } : function() {\n      this.textContent = value;\n    }) : this.node().textContent;\n  };\n  d3_selectionPrototype.html = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.innerHTML = \"\";\n    } : function() {\n      this.innerHTML = value;\n    }) : this.node().innerHTML;\n  };\n  d3_selectionPrototype.append = function(name) {\n    name = d3_selection_creator(name);\n    return this.select(function() {\n      return this.appendChild(name.apply(this, arguments));\n    });\n  };\n  function d3_selection_creator(name) {\n    function create() {\n      var document = this.ownerDocument, namespace = this.namespaceURI;\n      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);\n    }\n    function createNS() {\n      return this.ownerDocument.createElementNS(name.space, name.local);\n    }\n    return typeof name === \"function\" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;\n  }\n  d3_selectionPrototype.insert = function(name, before) {\n    name = d3_selection_creator(name);\n    before = d3_selection_selector(before);\n    return this.select(function() {\n      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n    });\n  };\n  d3_selectionPrototype.remove = function() {\n    return this.each(d3_selectionRemove);\n  };\n  function d3_selectionRemove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n  d3_selectionPrototype.data = function(value, key) {\n    var i = -1, n = this.length, group, node;\n    if (!arguments.length) {\n      value = new Array(n = (group = this[0]).length);\n      while (++i < n) {\n        if (node = group[i]) {\n          value[i] = node.__data__;\n        }\n      }\n      return value;\n    }\n    function bind(group, groupData) {\n      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n      if (key) {\n        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;\n        for (i = -1; ++i < n; ) {\n          if (node = group[i]) {\n            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {\n              exitNodes[i] = node;\n            } else {\n              nodeByKeyValue.set(keyValue, node);\n            }\n            keyValues[i] = keyValue;\n          }\n        }\n        for (i = -1; ++i < m; ) {\n          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          } else if (node !== true) {\n            updateNodes[i] = node;\n            node.__data__ = nodeData;\n          }\n          nodeByKeyValue.set(keyValue, true);\n        }\n        for (i = -1; ++i < n; ) {\n          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {\n            exitNodes[i] = group[i];\n          }\n        }\n      } else {\n        for (i = -1; ++i < n0; ) {\n          node = group[i];\n          nodeData = groupData[i];\n          if (node) {\n            node.__data__ = nodeData;\n            updateNodes[i] = node;\n          } else {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          }\n        }\n        for (;i < m; ++i) {\n          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n        }\n        for (;i < n; ++i) {\n          exitNodes[i] = group[i];\n        }\n      }\n      enterNodes.update = updateNodes;\n      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n      enter.push(enterNodes);\n      update.push(updateNodes);\n      exit.push(exitNodes);\n    }\n    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);\n    if (typeof value === \"function\") {\n      while (++i < n) {\n        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n      }\n    } else {\n      while (++i < n) {\n        bind(group = this[i], value);\n      }\n    }\n    update.enter = function() {\n      return enter;\n    };\n    update.exit = function() {\n      return exit;\n    };\n    return update;\n  };\n  function d3_selection_dataNode(data) {\n    return {\n      __data__: data\n    };\n  }\n  d3_selectionPrototype.datum = function(value) {\n    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");\n  };\n  d3_selectionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_filter(selector) {\n    return function() {\n      return d3_selectMatches(this, selector);\n    };\n  }\n  d3_selectionPrototype.order = function() {\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n    return this;\n  };\n  d3_selectionPrototype.sort = function(comparator) {\n    comparator = d3_selection_sortComparator.apply(this, arguments);\n    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);\n    return this.order();\n  };\n  function d3_selection_sortComparator(comparator) {\n    if (!arguments.length) comparator = d3_ascending;\n    return function(a, b) {\n      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;\n    };\n  }\n  d3_selectionPrototype.each = function(callback) {\n    return d3_selection_each(this, function(node, i, j) {\n      callback.call(node, node.__data__, i, j);\n    });\n  };\n  function d3_selection_each(groups, callback) {\n    for (var j = 0, m = groups.length; j < m; j++) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {\n        if (node = group[i]) callback(node, i, j);\n      }\n    }\n    return groups;\n  }\n  d3_selectionPrototype.call = function(callback) {\n    var args = d3_array(arguments);\n    callback.apply(args[0] = this, args);\n    return this;\n  };\n  d3_selectionPrototype.empty = function() {\n    return !this.node();\n  };\n  d3_selectionPrototype.node = function() {\n    for (var j = 0, m = this.length; j < m; j++) {\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n    return null;\n  };\n  d3_selectionPrototype.size = function() {\n    var n = 0;\n    d3_selection_each(this, function() {\n      ++n;\n    });\n    return n;\n  };\n  function d3_selection_enter(selection) {\n    d3_subclass(selection, d3_selection_enterPrototype);\n    return selection;\n  }\n  var d3_selection_enterPrototype = [];\n  d3.selection.enter = d3_selection_enter;\n  d3.selection.enter.prototype = d3_selection_enterPrototype;\n  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n  d3_selection_enterPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, upgroup, group, node;\n    for (var j = -1, m = this.length; ++j < m; ) {\n      upgroup = (group = this[j]).update;\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = group.parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n          subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  d3_selection_enterPrototype.insert = function(name, before) {\n    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);\n    return d3_selectionPrototype.insert.call(this, name, before);\n  };\n  function d3_selection_enterInsertBefore(enter) {\n    var i0, j0;\n    return function(d, i, j) {\n      var group = enter[j].update, n = group.length, node;\n      if (j != j0) j0 = j, i0 = 0;\n      if (i >= i0) i0 = i + 1;\n      while (!(node = group[i0]) && ++i0 < n) ;\n      return node;\n    };\n  }\n  d3.select = function(node) {\n    var group;\n    if (typeof node === \"string\") {\n      group = [ d3_select(node, d3_document) ];\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = [ node ];\n      group.parentNode = d3_documentElement(node);\n    }\n    return d3_selection([ group ]);\n  };\n  d3.selectAll = function(nodes) {\n    var group;\n    if (typeof nodes === \"string\") {\n      group = d3_array(d3_selectAll(nodes, d3_document));\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = d3_array(nodes);\n      group.parentNode = null;\n    }\n    return d3_selection([ group ]);\n  };\n  d3_selectionPrototype.on = function(type, listener, capture) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof type !== \"string\") {\n        if (n < 2) listener = false;\n        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));\n        return this;\n      }\n      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;\n      capture = false;\n    }\n    return this.each(d3_selection_on(type, listener, capture));\n  };\n  function d3_selection_on(type, listener, capture) {\n    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;\n    if (i > 0) type = type.slice(0, i);\n    var filter = d3_selection_onFilters.get(type);\n    if (filter) type = filter, wrap = d3_selection_onFilter;\n    function onRemove() {\n      var l = this[name];\n      if (l) {\n        this.removeEventListener(type, l, l.$);\n        delete this[name];\n      }\n    }\n    function onAdd() {\n      var l = wrap(listener, d3_array(arguments));\n      onRemove.call(this);\n      this.addEventListener(type, this[name] = l, l.$ = capture);\n      l._ = listener;\n    }\n    function removeAll() {\n      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;\n      for (var name in this) {\n        if (match = name.match(re)) {\n          var l = this[name];\n          this.removeEventListener(match[1], l, l.$);\n          delete this[name];\n        }\n      }\n    }\n    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n  }\n  var d3_selection_onFilters = d3.map({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n  });\n  if (d3_document) {\n    d3_selection_onFilters.forEach(function(k) {\n      if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);\n    });\n  }\n  function d3_selection_onListener(listener, argumentz) {\n    return function(e) {\n      var o = d3.event;\n      d3.event = e;\n      argumentz[0] = this.__data__;\n      try {\n        listener.apply(this, argumentz);\n      } finally {\n        d3.event = o;\n      }\n    };\n  }\n  function d3_selection_onFilter(listener, argumentz) {\n    var l = d3_selection_onListener(listener, argumentz);\n    return function(e) {\n      var target = this, related = e.relatedTarget;\n      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {\n        l.call(target, e);\n      }\n    };\n  }\n  var d3_event_dragSelect, d3_event_dragId = 0;\n  function d3_event_dragSuppress(node) {\n    var name = \".dragsuppress-\" + ++d3_event_dragId, click = \"click\" + name, w = d3.select(d3_window(node)).on(\"touchmove\" + name, d3_eventPreventDefault).on(\"dragstart\" + name, d3_eventPreventDefault).on(\"selectstart\" + name, d3_eventPreventDefault);\n    if (d3_event_dragSelect == null) {\n      d3_event_dragSelect = \"onselectstart\" in node ? false : d3_vendorSymbol(node.style, \"userSelect\");\n    }\n    if (d3_event_dragSelect) {\n      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];\n      style[d3_event_dragSelect] = \"none\";\n    }\n    return function(suppressClick) {\n      w.on(name, null);\n      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n      if (suppressClick) {\n        var off = function() {\n          w.on(click, null);\n        };\n        w.on(click, function() {\n          d3_eventPreventDefault();\n          off();\n        }, true);\n        setTimeout(off, 0);\n      }\n    };\n  }\n  d3.mouse = function(container) {\n    return d3_mousePoint(container, d3_eventSource());\n  };\n  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;\n  function d3_mousePoint(container, e) {\n    if (e.changedTouches) e = e.changedTouches[0];\n    var svg = container.ownerSVGElement || container;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      if (d3_mouse_bug44083 < 0) {\n        var window = d3_window(container);\n        if (window.scrollX || window.scrollY) {\n          svg = d3.select(\"body\").append(\"svg\").style({\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            margin: 0,\n            padding: 0,\n            border: \"none\"\n          }, \"important\");\n          var ctm = svg[0][0].getScreenCTM();\n          d3_mouse_bug44083 = !(ctm.f || ctm.e);\n          svg.remove();\n        }\n      }\n      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, \n      point.y = e.clientY;\n      point = point.matrixTransform(container.getScreenCTM().inverse());\n      return [ point.x, point.y ];\n    }\n    var rect = container.getBoundingClientRect();\n    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];\n  }\n  d3.touch = function(container, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;\n    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return d3_mousePoint(container, touch);\n      }\n    }\n  };\n  d3.behavior.drag = function() {\n    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, \"mousemove\", \"mouseup\"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, \"touchmove\", \"touchend\");\n    function drag() {\n      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", touchstart);\n    }\n    function dragstart(id, position, subject, move, end) {\n      return function() {\n        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \".drag\" + (dragId == null ? \"\" : \"-\" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);\n        if (origin) {\n          dragOffset = origin.apply(that, arguments);\n          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];\n        } else {\n          dragOffset = [ 0, 0 ];\n        }\n        dispatch({\n          type: \"dragstart\"\n        });\n        function moved() {\n          var position1 = position(parent, dragId), dx, dy;\n          if (!position1) return;\n          dx = position1[0] - position0[0];\n          dy = position1[1] - position0[1];\n          dragged |= dx | dy;\n          position0 = position1;\n          dispatch({\n            type: \"drag\",\n            x: position1[0] + dragOffset[0],\n            y: position1[1] + dragOffset[1],\n            dx: dx,\n            dy: dy\n          });\n        }\n        function ended() {\n          if (!position(parent, dragId)) return;\n          dragSubject.on(move + dragName, null).on(end + dragName, null);\n          dragRestore(dragged);\n          dispatch({\n            type: \"dragend\"\n          });\n        }\n      };\n    }\n    drag.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return drag;\n    };\n    return d3.rebind(drag, event, \"on\");\n  };\n  function d3_behavior_dragTouchId() {\n    return d3.event.changedTouches[0].identifier;\n  }\n  d3.touches = function(container, touches) {\n    if (arguments.length < 2) touches = d3_eventSource().touches;\n    return touches ? d3_array(touches).map(function(touch) {\n      var point = d3_mousePoint(container, touch);\n      point.identifier = touch.identifier;\n      return point;\n    }) : [];\n  };\n  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n  function d3_sgn(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  }\n  function d3_cross2d(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n  function d3_acos(x) {\n    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);\n  }\n  function d3_asin(x) {\n    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);\n  }\n  function d3_sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n  function d3_cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n  function d3_tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n  function d3_haversin(x) {\n    return (x = Math.sin(x / 2)) * x;\n  }\n  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;\n  d3.interpolateZoom = function(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;\n    if (d2 < ε2) {\n      S = Math.log(w1 / w0) / ρ;\n      i = function(t) {\n        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];\n      };\n    } else {\n      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / ρ;\n      i = function(t) {\n        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];\n      };\n    }\n    i.duration = S * 1e3;\n    return i;\n  };\n  d3.behavior.zoom = function() {\n    var view = {\n      x: 0,\n      y: 0,\n      k: 1\n    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \"mousedown.zoom\", mousemove = \"mousemove.zoom\", mouseup = \"mouseup.zoom\", mousewheelTimer, touchstart = \"touchstart.zoom\", touchtime, event = d3_eventDispatch(zoom, \"zoomstart\", \"zoom\", \"zoomend\"), x0, x1, y0, y1;\n    if (!d3_behavior_zoomWheel) {\n      d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n      }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return d3.event.wheelDelta;\n      }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {\n        return -d3.event.detail;\n      }, \"MozMousePixelScroll\");\n    }\n    function zoom(g) {\n      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \".zoom\", mousewheeled).on(\"dblclick.zoom\", dblclicked).on(touchstart, touchstarted);\n    }\n    zoom.event = function(g) {\n      g.each(function() {\n        var dispatch = event.of(this, arguments), view1 = view;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.zoom\", function() {\n            view = this.__chart__ || {\n              x: 0,\n              y: 0,\n              k: 1\n            };\n            zoomstarted(dispatch);\n          }).tween(\"zoom:zoom\", function() {\n            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n            return function(t) {\n              var l = i(t), k = dx / l[2];\n              this.__chart__ = view = {\n                x: cx - l[0] * k,\n                y: cy - l[1] * k,\n                k: k\n              };\n              zoomed(dispatch);\n            };\n          }).each(\"interrupt.zoom\", function() {\n            zoomended(dispatch);\n          }).each(\"end.zoom\", function() {\n            zoomended(dispatch);\n          });\n        } else {\n          this.__chart__ = view;\n          zoomstarted(dispatch);\n          zoomed(dispatch);\n          zoomended(dispatch);\n        }\n      });\n    };\n    zoom.translate = function(_) {\n      if (!arguments.length) return [ view.x, view.y ];\n      view = {\n        x: +_[0],\n        y: +_[1],\n        k: view.k\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scale = function(_) {\n      if (!arguments.length) return view.k;\n      view = {\n        x: view.x,\n        y: view.y,\n        k: null\n      };\n      scaleTo(+_);\n      rescale();\n      return zoom;\n    };\n    zoom.scaleExtent = function(_) {\n      if (!arguments.length) return scaleExtent;\n      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.center = function(_) {\n      if (!arguments.length) return center;\n      center = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.size = function(_) {\n      if (!arguments.length) return size;\n      size = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.duration = function(_) {\n      if (!arguments.length) return duration;\n      duration = +_;\n      return zoom;\n    };\n    zoom.x = function(z) {\n      if (!arguments.length) return x1;\n      x1 = z;\n      x0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    zoom.y = function(z) {\n      if (!arguments.length) return y1;\n      y1 = z;\n      y0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    function location(p) {\n      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];\n    }\n    function point(l) {\n      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];\n    }\n    function scaleTo(s) {\n      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n    }\n    function translateTo(p, l) {\n      l = point(l);\n      view.x += p[0] - l[0];\n      view.y += p[1] - l[1];\n    }\n    function zoomTo(that, p, l, k) {\n      that.__chart__ = {\n        x: view.x,\n        y: view.y,\n        k: view.k\n      };\n      scaleTo(Math.pow(2, k));\n      translateTo(center0 = p, l);\n      that = d3.select(that);\n      if (duration > 0) that = that.transition().duration(duration);\n      that.call(zoom.event);\n    }\n    function rescale() {\n      if (x1) x1.domain(x0.range().map(function(x) {\n        return (x - view.x) / view.k;\n      }).map(x0.invert));\n      if (y1) y1.domain(y0.range().map(function(y) {\n        return (y - view.y) / view.k;\n      }).map(y0.invert));\n    }\n    function zoomstarted(dispatch) {\n      if (!zooming++) dispatch({\n        type: \"zoomstart\"\n      });\n    }\n    function zoomed(dispatch) {\n      rescale();\n      dispatch({\n        type: \"zoom\",\n        scale: view.k,\n        translate: [ view.x, view.y ]\n      });\n    }\n    function zoomended(dispatch) {\n      if (!--zooming) dispatch({\n        type: \"zoomend\"\n      }), center0 = null;\n    }\n    function mousedowned() {\n      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);\n      d3_selection_interrupt.call(that);\n      zoomstarted(dispatch);\n      function moved() {\n        dragged = 1;\n        translateTo(d3.mouse(that), location0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        subject.on(mousemove, null).on(mouseup, null);\n        dragRestore(dragged);\n        zoomended(dispatch);\n      }\n    }\n    function touchstarted() {\n      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \".zoom-\" + d3.event.changedTouches[0].identifier, touchmove = \"touchmove\" + zoomName, touchend = \"touchend\" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);\n      started();\n      zoomstarted(dispatch);\n      subject.on(mousedown, null).on(touchstart, started);\n      function relocate() {\n        var touches = d3.touches(that);\n        scale0 = view.k;\n        touches.forEach(function(t) {\n          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n        });\n        return touches;\n      }\n      function started() {\n        var target = d3.event.target;\n        d3.select(target).on(touchmove, moved).on(touchend, ended);\n        targets.push(target);\n        var changed = d3.event.changedTouches;\n        for (var i = 0, n = changed.length; i < n; ++i) {\n          locations0[changed[i].identifier] = null;\n        }\n        var touches = relocate(), now = Date.now();\n        if (touches.length === 1) {\n          if (now - touchtime < 500) {\n            var p = touches[0];\n            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n            d3_eventPreventDefault();\n          }\n          touchtime = now;\n        } else if (touches.length > 1) {\n          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];\n          distance0 = dx * dx + dy * dy;\n        }\n      }\n      function moved() {\n        var touches = d3.touches(that), p0, l0, p1, l1;\n        d3_selection_interrupt.call(that);\n        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {\n          p1 = touches[i];\n          if (l1 = locations0[p1.identifier]) {\n            if (l0) break;\n            p0 = p1, l0 = l1;\n          }\n        }\n        if (l1) {\n          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);\n          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];\n          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];\n          scaleTo(scale1 * scale0);\n        }\n        touchtime = null;\n        translateTo(p0, l0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        if (d3.event.touches.length) {\n          var changed = d3.event.changedTouches;\n          for (var i = 0, n = changed.length; i < n; ++i) {\n            delete locations0[changed[i].identifier];\n          }\n          for (var identifier in locations0) {\n            return void relocate();\n          }\n        }\n        d3.selectAll(targets).on(zoomName, null);\n        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n        dragRestore();\n        zoomended(dispatch);\n      }\n    }\n    function mousewheeled() {\n      var dispatch = event.of(this, arguments);\n      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), \n      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);\n      mousewheelTimer = setTimeout(function() {\n        mousewheelTimer = null;\n        zoomended(dispatch);\n      }, 50);\n      d3_eventPreventDefault();\n      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n      translateTo(center0, translate0);\n      zoomed(dispatch);\n    }\n    function dblclicked() {\n      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;\n      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n    }\n    return d3.rebind(zoom, event, \"on\");\n  };\n  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;\n  d3.color = d3_color;\n  function d3_color() {}\n  d3_color.prototype.toString = function() {\n    return this.rgb() + \"\";\n  };\n  d3.hsl = d3_hsl;\n  function d3_hsl(h, s, l) {\n    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n  }\n  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n  d3_hslPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, this.l / k);\n  };\n  d3_hslPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, k * this.l);\n  };\n  d3_hslPrototype.rgb = function() {\n    return d3_hsl_rgb(this.h, this.s, this.l);\n  };\n  function d3_hsl_rgb(h, s, l) {\n    var m1, m2;\n    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;\n    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;\n    l = l < 0 ? 0 : l > 1 ? 1 : l;\n    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;\n    m1 = 2 * l - m2;\n    function v(h) {\n      if (h > 360) h -= 360; else if (h < 0) h += 360;\n      if (h < 60) return m1 + (m2 - m1) * h / 60;\n      if (h < 180) return m2;\n      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;\n      return m1;\n    }\n    function vv(h) {\n      return Math.round(v(h) * 255);\n    }\n    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n  }\n  d3.hcl = d3_hcl;\n  function d3_hcl(h, c, l) {\n    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n  }\n  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n  d3_hclPrototype.brighter = function(k) {\n    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.darker = function(k) {\n    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.rgb = function() {\n    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n  };\n  function d3_hcl_lab(h, c, l) {\n    if (isNaN(h)) h = 0;\n    if (isNaN(c)) c = 0;\n    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n  }\n  d3.lab = d3_lab;\n  function d3_lab(l, a, b) {\n    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n  }\n  var d3_lab_K = 18;\n  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;\n  var d3_labPrototype = d3_lab.prototype = new d3_color();\n  d3_labPrototype.brighter = function(k) {\n    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.darker = function(k) {\n    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.rgb = function() {\n    return d3_lab_rgb(this.l, this.a, this.b);\n  };\n  function d3_lab_rgb(l, a, b) {\n    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;\n    x = d3_lab_xyz(x) * d3_lab_X;\n    y = d3_lab_xyz(y) * d3_lab_Y;\n    z = d3_lab_xyz(z) * d3_lab_Z;\n    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n  }\n  function d3_lab_hcl(l, a, b) {\n    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n  }\n  function d3_lab_xyz(x) {\n    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n  }\n  function d3_xyz_lab(x) {\n    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n  }\n  function d3_xyz_rgb(r) {\n    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n  }\n  d3.rgb = d3_rgb;\n  function d3_rgb(r, g, b) {\n    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n  }\n  function d3_rgbNumber(value) {\n    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);\n  }\n  function d3_rgbString(value) {\n    return d3_rgbNumber(value) + \"\";\n  }\n  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n  d3_rgbPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    var r = this.r, g = this.g, b = this.b, i = 30;\n    if (!r && !g && !b) return new d3_rgb(i, i, i);\n    if (r && r < i) r = i;\n    if (g && g < i) g = i;\n    if (b && b < i) b = i;\n    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n  };\n  d3_rgbPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n  };\n  d3_rgbPrototype.hsl = function() {\n    return d3_rgb_hsl(this.r, this.g, this.b);\n  };\n  d3_rgbPrototype.toString = function() {\n    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n  };\n  function d3_rgb_hex(v) {\n    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n  }\n  function d3_rgb_parse(format, rgb, hsl) {\n    var r = 0, g = 0, b = 0, m1, m2, color;\n    m1 = /([a-z]+)\\((.*)\\)/.exec(format = format.toLowerCase());\n    if (m1) {\n      m2 = m1[2].split(\",\");\n      switch (m1[1]) {\n       case \"hsl\":\n        {\n          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n        }\n\n       case \"rgb\":\n        {\n          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n        }\n      }\n    }\n    if (color = d3_rgb_names.get(format)) {\n      return rgb(color.r, color.g, color.b);\n    }\n    if (format != null && format.charAt(0) === \"#\" && !isNaN(color = parseInt(format.slice(1), 16))) {\n      if (format.length === 4) {\n        r = (color & 3840) >> 4;\n        r = r >> 4 | r;\n        g = color & 240;\n        g = g >> 4 | g;\n        b = color & 15;\n        b = b << 4 | b;\n      } else if (format.length === 7) {\n        r = (color & 16711680) >> 16;\n        g = (color & 65280) >> 8;\n        b = color & 255;\n      }\n    }\n    return rgb(r, g, b);\n  }\n  function d3_rgb_hsl(r, g, b) {\n    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n    if (d) {\n      s = l < .5 ? d / (max + min) : d / (2 - max - min);\n      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n      h *= 60;\n    } else {\n      h = NaN;\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new d3_hsl(h, s, l);\n  }\n  function d3_rgb_lab(r, g, b) {\n    r = d3_rgb_xyz(r);\n    g = d3_rgb_xyz(g);\n    b = d3_rgb_xyz(b);\n    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n  }\n  function d3_rgb_xyz(r) {\n    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n  }\n  function d3_rgb_parseNumber(c) {\n    var f = parseFloat(c);\n    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;\n  }\n  var d3_rgb_names = d3.map({\n    aliceblue: 15792383,\n    antiquewhite: 16444375,\n    aqua: 65535,\n    aquamarine: 8388564,\n    azure: 15794175,\n    beige: 16119260,\n    bisque: 16770244,\n    black: 0,\n    blanchedalmond: 16772045,\n    blue: 255,\n    blueviolet: 9055202,\n    brown: 10824234,\n    burlywood: 14596231,\n    cadetblue: 6266528,\n    chartreuse: 8388352,\n    chocolate: 13789470,\n    coral: 16744272,\n    cornflowerblue: 6591981,\n    cornsilk: 16775388,\n    crimson: 14423100,\n    cyan: 65535,\n    darkblue: 139,\n    darkcyan: 35723,\n    darkgoldenrod: 12092939,\n    darkgray: 11119017,\n    darkgreen: 25600,\n    darkgrey: 11119017,\n    darkkhaki: 12433259,\n    darkmagenta: 9109643,\n    darkolivegreen: 5597999,\n    darkorange: 16747520,\n    darkorchid: 10040012,\n    darkred: 9109504,\n    darksalmon: 15308410,\n    darkseagreen: 9419919,\n    darkslateblue: 4734347,\n    darkslategray: 3100495,\n    darkslategrey: 3100495,\n    darkturquoise: 52945,\n    darkviolet: 9699539,\n    deeppink: 16716947,\n    deepskyblue: 49151,\n    dimgray: 6908265,\n    dimgrey: 6908265,\n    dodgerblue: 2003199,\n    firebrick: 11674146,\n    floralwhite: 16775920,\n    forestgreen: 2263842,\n    fuchsia: 16711935,\n    gainsboro: 14474460,\n    ghostwhite: 16316671,\n    gold: 16766720,\n    goldenrod: 14329120,\n    gray: 8421504,\n    green: 32768,\n    greenyellow: 11403055,\n    grey: 8421504,\n    honeydew: 15794160,\n    hotpink: 16738740,\n    indianred: 13458524,\n    indigo: 4915330,\n    ivory: 16777200,\n    khaki: 15787660,\n    lavender: 15132410,\n    lavenderblush: 16773365,\n    lawngreen: 8190976,\n    lemonchiffon: 16775885,\n    lightblue: 11393254,\n    lightcoral: 15761536,\n    lightcyan: 14745599,\n    lightgoldenrodyellow: 16448210,\n    lightgray: 13882323,\n    lightgreen: 9498256,\n    lightgrey: 13882323,\n    lightpink: 16758465,\n    lightsalmon: 16752762,\n    lightseagreen: 2142890,\n    lightskyblue: 8900346,\n    lightslategray: 7833753,\n    lightslategrey: 7833753,\n    lightsteelblue: 11584734,\n    lightyellow: 16777184,\n    lime: 65280,\n    limegreen: 3329330,\n    linen: 16445670,\n    magenta: 16711935,\n    maroon: 8388608,\n    mediumaquamarine: 6737322,\n    mediumblue: 205,\n    mediumorchid: 12211667,\n    mediumpurple: 9662683,\n    mediumseagreen: 3978097,\n    mediumslateblue: 8087790,\n    mediumspringgreen: 64154,\n    mediumturquoise: 4772300,\n    mediumvioletred: 13047173,\n    midnightblue: 1644912,\n    mintcream: 16121850,\n    mistyrose: 16770273,\n    moccasin: 16770229,\n    navajowhite: 16768685,\n    navy: 128,\n    oldlace: 16643558,\n    olive: 8421376,\n    olivedrab: 7048739,\n    orange: 16753920,\n    orangered: 16729344,\n    orchid: 14315734,\n    palegoldenrod: 15657130,\n    palegreen: 10025880,\n    paleturquoise: 11529966,\n    palevioletred: 14381203,\n    papayawhip: 16773077,\n    peachpuff: 16767673,\n    peru: 13468991,\n    pink: 16761035,\n    plum: 14524637,\n    powderblue: 11591910,\n    purple: 8388736,\n    rebeccapurple: 6697881,\n    red: 16711680,\n    rosybrown: 12357519,\n    royalblue: 4286945,\n    saddlebrown: 9127187,\n    salmon: 16416882,\n    sandybrown: 16032864,\n    seagreen: 3050327,\n    seashell: 16774638,\n    sienna: 10506797,\n    silver: 12632256,\n    skyblue: 8900331,\n    slateblue: 6970061,\n    slategray: 7372944,\n    slategrey: 7372944,\n    snow: 16775930,\n    springgreen: 65407,\n    steelblue: 4620980,\n    tan: 13808780,\n    teal: 32896,\n    thistle: 14204888,\n    tomato: 16737095,\n    turquoise: 4251856,\n    violet: 15631086,\n    wheat: 16113331,\n    white: 16777215,\n    whitesmoke: 16119285,\n    yellow: 16776960,\n    yellowgreen: 10145074\n  });\n  d3_rgb_names.forEach(function(key, value) {\n    d3_rgb_names.set(key, d3_rgbNumber(value));\n  });\n  function d3_functor(v) {\n    return typeof v === \"function\" ? v : function() {\n      return v;\n    };\n  }\n  d3.functor = d3_functor;\n  d3.xhr = d3_xhrType(d3_identity);\n  function d3_xhrType(response) {\n    return function(url, mimeType, callback) {\n      if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType, \n      mimeType = null;\n      return d3_xhr(url, mimeType, response, callback);\n    };\n  }\n  function d3_xhr(url, mimeType, response, callback) {\n    var xhr = {}, dispatch = d3.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"), headers = {}, request = new XMLHttpRequest(), responseType = null;\n    if (this.XDomainRequest && !(\"withCredentials\" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {\n      request.readyState > 3 && respond();\n    };\n    function respond() {\n      var status = request.status, result;\n      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {\n        try {\n          result = response.call(xhr, request);\n        } catch (e) {\n          dispatch.error.call(xhr, e);\n          return;\n        }\n        dispatch.load.call(xhr, result);\n      } else {\n        dispatch.error.call(xhr, request);\n      }\n    }\n    request.onprogress = function(event) {\n      var o = d3.event;\n      d3.event = event;\n      try {\n        dispatch.progress.call(xhr, request);\n      } finally {\n        d3.event = o;\n      }\n    };\n    xhr.header = function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers[name];\n      if (value == null) delete headers[name]; else headers[name] = value + \"\";\n      return xhr;\n    };\n    xhr.mimeType = function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return xhr;\n    };\n    xhr.responseType = function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return xhr;\n    };\n    xhr.response = function(value) {\n      response = value;\n      return xhr;\n    };\n    [ \"get\", \"post\" ].forEach(function(method) {\n      xhr[method] = function() {\n        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));\n      };\n    });\n    xhr.send = function(method, data, callback) {\n      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;\n      request.open(method, url, true);\n      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";\n      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);\n      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);\n      if (responseType != null) request.responseType = responseType;\n      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {\n        callback(null, request);\n      });\n      dispatch.beforesend.call(xhr, request);\n      request.send(data == null ? null : data);\n      return xhr;\n    };\n    xhr.abort = function() {\n      request.abort();\n      return xhr;\n    };\n    d3.rebind(xhr, dispatch, \"on\");\n    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n  }\n  function d3_xhr_fixCallback(callback) {\n    return callback.length === 1 ? function(error, request) {\n      callback(error == null ? request : null);\n    } : callback;\n  }\n  function d3_xhrHasResponse(request) {\n    var type = request.responseType;\n    return type && type !== \"text\" ? request.response : request.responseText;\n  }\n  d3.dsv = function(delimiter, mimeType) {\n    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);\n    function dsv(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n      xhr.row = function(_) {\n        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n      };\n      return xhr;\n    }\n    function response(request) {\n      return dsv.parse(request.responseText);\n    }\n    function typedResponse(f) {\n      return function(request) {\n        return dsv.parse(request.responseText, f);\n      };\n    }\n    dsv.parse = function(text, f) {\n      var o;\n      return dsv.parseRows(text, function(row, i) {\n        if (o) return o(row, i - 1);\n        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {\n          return JSON.stringify(name) + \": d[\" + i + \"]\";\n        }).join(\",\") + \"}\");\n        o = f ? function(row, i) {\n          return f(a(row), i);\n        } : a;\n      });\n    };\n    dsv.parseRows = function(text, f) {\n      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n      function token() {\n        if (I >= N) return EOF;\n        if (eol) return eol = false, EOL;\n        var j = I;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          var c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, '\"');\n        }\n        while (I < N) {\n          var c = text.charCodeAt(I++), k = 1;\n          if (c === 10) eol = true; else if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(I) === 10) ++I, ++k;\n          } else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n        return text.slice(j);\n      }\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n      return rows;\n    };\n    dsv.format = function(rows) {\n      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n      var fieldSet = new d3_Set(), fields = [];\n      rows.forEach(function(row) {\n        for (var field in row) {\n          if (!fieldSet.has(field)) {\n            fields.push(fieldSet.add(field));\n          }\n        }\n      });\n      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {\n        return fields.map(function(field) {\n          return formatValue(row[field]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    };\n    dsv.formatRows = function(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    };\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n    function formatValue(text) {\n      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;\n    }\n    return dsv;\n  };\n  d3.csv = d3.dsv(\",\", \"text/csv\");\n  d3.tsv = d3.dsv(\"\t\", \"text/tab-separated-values\");\n  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, \"requestAnimationFrame\")] || function(callback) {\n    setTimeout(callback, 17);\n  };\n  d3.timer = function() {\n    d3_timer.apply(this, arguments);\n  };\n  function d3_timer(callback, delay, then) {\n    var n = arguments.length;\n    if (n < 2) delay = 0;\n    if (n < 3) then = Date.now();\n    var time = then + delay, timer = {\n      c: callback,\n      t: time,\n      n: null\n    };\n    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;\n    d3_timer_queueTail = timer;\n    if (!d3_timer_interval) {\n      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n    return timer;\n  }\n  function d3_timer_step() {\n    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;\n    if (delay > 24) {\n      if (isFinite(delay)) {\n        clearTimeout(d3_timer_timeout);\n        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n      }\n      d3_timer_interval = 0;\n    } else {\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  }\n  d3.timer.flush = function() {\n    d3_timer_mark();\n    d3_timer_sweep();\n  };\n  function d3_timer_mark() {\n    var now = Date.now(), timer = d3_timer_queueHead;\n    while (timer) {\n      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;\n      timer = timer.n;\n    }\n    return now;\n  }\n  function d3_timer_sweep() {\n    var t0, t1 = d3_timer_queueHead, time = Infinity;\n    while (t1) {\n      if (t1.c) {\n        if (t1.t < time) time = t1.t;\n        t1 = (t0 = t1).n;\n      } else {\n        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n      }\n    }\n    d3_timer_queueTail = t0;\n    return time;\n  }\n  function d3_format_precision(x, p) {\n    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n  }\n  d3.round = function(x, n) {\n    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n  };\n  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n  d3.formatPrefix = function(value, precision) {\n    var i = 0;\n    if (value = +value) {\n      if (value < 0) value *= -1;\n      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n    }\n    return d3_formatPrefixes[8 + i / 3];\n  };\n  function d3_formatPrefix(d, i) {\n    var k = Math.pow(10, abs(8 - i) * 3);\n    return {\n      scale: i > 8 ? function(d) {\n        return d / k;\n      } : function(d) {\n        return d * k;\n      },\n      symbol: d\n    };\n  }\n  function d3_locale_numberFormat(locale) {\n    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {\n      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n      }\n      return t.reverse().join(locale_thousands);\n    } : d3_identity;\n    return function(specifier) {\n      var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"-\", symbol = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \"\", suffix = \"\", integer = false, exponent = true;\n      if (precision) precision = +precision.substring(1);\n      if (zfill || fill === \"0\" && align === \"=\") {\n        zfill = fill = \"0\";\n        align = \"=\";\n      }\n      switch (type) {\n       case \"n\":\n        comma = true;\n        type = \"g\";\n        break;\n\n       case \"%\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"f\";\n        break;\n\n       case \"p\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"r\";\n        break;\n\n       case \"b\":\n       case \"o\":\n       case \"x\":\n       case \"X\":\n        if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();\n\n       case \"c\":\n        exponent = false;\n\n       case \"d\":\n        integer = true;\n        precision = 0;\n        break;\n\n       case \"s\":\n        scale = -1;\n        type = \"r\";\n        break;\n      }\n      if (symbol === \"$\") prefix = locale_currency[0], suffix = locale_currency[1];\n      if (type == \"r\" && !precision) type = \"g\";\n      if (precision != null) {\n        if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n      }\n      type = d3_format_types.get(type) || d3_format_typeDefault;\n      var zcomma = zfill && comma;\n      return function(value) {\n        var fullSuffix = suffix;\n        if (integer && value % 1) return \"\";\n        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign === \"-\" ? \"\" : sign;\n        if (scale < 0) {\n          var unit = d3.formatPrefix(value, precision);\n          value = unit.scale(value);\n          fullSuffix = unit.symbol + suffix;\n        } else {\n          value *= scale;\n        }\n        value = type(value, precision);\n        var i = value.lastIndexOf(\".\"), before, after;\n        if (i < 0) {\n          var j = exponent ? value.lastIndexOf(\"e\") : -1;\n          if (j < 0) before = value, after = \"\"; else before = value.substring(0, j), after = value.substring(j);\n        } else {\n          before = value.substring(0, i);\n          after = locale_decimal + value.substring(i + 1);\n        }\n        if (!zfill && comma) before = formatGroup(before, Infinity);\n        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n        negative += prefix;\n        value = before + after;\n        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n      };\n    };\n  }\n  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n  var d3_format_types = d3.map({\n    b: function(x) {\n      return x.toString(2);\n    },\n    c: function(x) {\n      return String.fromCharCode(x);\n    },\n    o: function(x) {\n      return x.toString(8);\n    },\n    x: function(x) {\n      return x.toString(16);\n    },\n    X: function(x) {\n      return x.toString(16).toUpperCase();\n    },\n    g: function(x, p) {\n      return x.toPrecision(p);\n    },\n    e: function(x, p) {\n      return x.toExponential(p);\n    },\n    f: function(x, p) {\n      return x.toFixed(p);\n    },\n    r: function(x, p) {\n      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n    }\n  });\n  function d3_format_typeDefault(x) {\n    return x + \"\";\n  }\n  var d3_time = d3.time = {}, d3_date = Date;\n  function d3_date_utc() {\n    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n  }\n  d3_date_utc.prototype = {\n    getDate: function() {\n      return this._.getUTCDate();\n    },\n    getDay: function() {\n      return this._.getUTCDay();\n    },\n    getFullYear: function() {\n      return this._.getUTCFullYear();\n    },\n    getHours: function() {\n      return this._.getUTCHours();\n    },\n    getMilliseconds: function() {\n      return this._.getUTCMilliseconds();\n    },\n    getMinutes: function() {\n      return this._.getUTCMinutes();\n    },\n    getMonth: function() {\n      return this._.getUTCMonth();\n    },\n    getSeconds: function() {\n      return this._.getUTCSeconds();\n    },\n    getTime: function() {\n      return this._.getTime();\n    },\n    getTimezoneOffset: function() {\n      return 0;\n    },\n    valueOf: function() {\n      return this._.valueOf();\n    },\n    setDate: function() {\n      d3_time_prototype.setUTCDate.apply(this._, arguments);\n    },\n    setDay: function() {\n      d3_time_prototype.setUTCDay.apply(this._, arguments);\n    },\n    setFullYear: function() {\n      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n    },\n    setHours: function() {\n      d3_time_prototype.setUTCHours.apply(this._, arguments);\n    },\n    setMilliseconds: function() {\n      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n    },\n    setMinutes: function() {\n      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n    },\n    setMonth: function() {\n      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n    },\n    setSeconds: function() {\n      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n    },\n    setTime: function() {\n      d3_time_prototype.setTime.apply(this._, arguments);\n    }\n  };\n  var d3_time_prototype = Date.prototype;\n  function d3_time_interval(local, step, number) {\n    function round(date) {\n      var d0 = local(date), d1 = offset(d0, 1);\n      return date - d0 < d1 - date ? d0 : d1;\n    }\n    function ceil(date) {\n      step(date = local(new d3_date(date - 1)), 1);\n      return date;\n    }\n    function offset(date, k) {\n      step(date = new d3_date(+date), k);\n      return date;\n    }\n    function range(t0, t1, dt) {\n      var time = ceil(t0), times = [];\n      if (dt > 1) {\n        while (time < t1) {\n          if (!(number(time) % dt)) times.push(new Date(+time));\n          step(time, 1);\n        }\n      } else {\n        while (time < t1) times.push(new Date(+time)), step(time, 1);\n      }\n      return times;\n    }\n    function range_utc(t0, t1, dt) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = t0;\n        return range(utc, t1, dt);\n      } finally {\n        d3_date = Date;\n      }\n    }\n    local.floor = local;\n    local.round = round;\n    local.ceil = ceil;\n    local.offset = offset;\n    local.range = range;\n    var utc = local.utc = d3_time_interval_utc(local);\n    utc.floor = utc;\n    utc.round = d3_time_interval_utc(round);\n    utc.ceil = d3_time_interval_utc(ceil);\n    utc.offset = d3_time_interval_utc(offset);\n    utc.range = range_utc;\n    return local;\n  }\n  function d3_time_interval_utc(method) {\n    return function(date, k) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = date;\n        return method(utc, k)._;\n      } finally {\n        d3_date = Date;\n      }\n    };\n  }\n  d3_time.year = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setMonth(0, 1);\n    return date;\n  }, function(date, offset) {\n    date.setFullYear(date.getFullYear() + offset);\n  }, function(date) {\n    return date.getFullYear();\n  });\n  d3_time.years = d3_time.year.range;\n  d3_time.years.utc = d3_time.year.utc.range;\n  d3_time.day = d3_time_interval(function(date) {\n    var day = new d3_date(2e3, 0);\n    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    return day;\n  }, function(date, offset) {\n    date.setDate(date.getDate() + offset);\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n  d3_time.days = d3_time.day.range;\n  d3_time.days.utc = d3_time.day.utc.range;\n  d3_time.dayOfYear = function(date) {\n    var year = d3_time.year(date);\n    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n  };\n  [ \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\" ].forEach(function(day, i) {\n    i = 7 - i;\n    var interval = d3_time[day] = d3_time_interval(function(date) {\n      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n      return date;\n    }, function(date, offset) {\n      date.setDate(date.getDate() + Math.floor(offset) * 7);\n    }, function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n    });\n    d3_time[day + \"s\"] = interval.range;\n    d3_time[day + \"s\"].utc = interval.utc.range;\n    d3_time[day + \"OfYear\"] = function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n    };\n  });\n  d3_time.week = d3_time.sunday;\n  d3_time.weeks = d3_time.sunday.range;\n  d3_time.weeks.utc = d3_time.sunday.utc.range;\n  d3_time.weekOfYear = d3_time.sundayOfYear;\n  function d3_locale_timeFormat(locale) {\n    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n    function d3_time_format(template) {\n      var n = template.length;\n      function format(date) {\n        var string = [], i = -1, j = 0, c, p, f;\n        while (++i < n) {\n          if (template.charCodeAt(i) === 37) {\n            string.push(template.slice(j, i));\n            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n        string.push(template.slice(j, i));\n        return string.join(\"\");\n      }\n      format.parse = function(string) {\n        var d = {\n          y: 1900,\n          m: 0,\n          d: 1,\n          H: 0,\n          M: 0,\n          S: 0,\n          L: 0,\n          Z: null\n        }, i = d3_time_parse(d, template, string, 0);\n        if (i != string.length) return null;\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();\n        if (\"j\" in d) date.setFullYear(d.y, 0, d.j); else if (\"W\" in d || \"U\" in d) {\n          if (!(\"w\" in d)) d.w = \"W\" in d ? 1 : 0;\n          date.setFullYear(d.y, 0, 1);\n          date.setFullYear(d.y, 0, \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n        } else date.setFullYear(d.y, d.m, d.d);\n        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n        return localZ ? date._ : date;\n      };\n      format.toString = function() {\n        return template;\n      };\n      return format;\n    }\n    function d3_time_parse(date, template, string, j) {\n      var c, p, t, i = 0, n = template.length, m = string.length;\n      while (i < n) {\n        if (j >= m) return -1;\n        c = template.charCodeAt(i++);\n        if (c === 37) {\n          t = template.charAt(i++);\n          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n          if (!p || (j = p(date, string, j)) < 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n      return j;\n    }\n    d3_time_format.utc = function(template) {\n      var local = d3_time_format(template);\n      function format(date) {\n        try {\n          d3_date = d3_date_utc;\n          var utc = new d3_date();\n          utc._ = date;\n          return local(utc);\n        } finally {\n          d3_date = Date;\n        }\n      }\n      format.parse = function(string) {\n        try {\n          d3_date = d3_date_utc;\n          var date = local.parse(string);\n          return date && date._;\n        } finally {\n          d3_date = Date;\n        }\n      };\n      format.toString = local.toString;\n      return format;\n    };\n    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n    locale_periods.forEach(function(p, i) {\n      d3_time_periodLookup.set(p.toLowerCase(), i);\n    });\n    var d3_time_formats = {\n      a: function(d) {\n        return locale_shortDays[d.getDay()];\n      },\n      A: function(d) {\n        return locale_days[d.getDay()];\n      },\n      b: function(d) {\n        return locale_shortMonths[d.getMonth()];\n      },\n      B: function(d) {\n        return locale_months[d.getMonth()];\n      },\n      c: d3_time_format(locale_dateTime),\n      d: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      e: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      H: function(d, p) {\n        return d3_time_formatPad(d.getHours(), p, 2);\n      },\n      I: function(d, p) {\n        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n      },\n      j: function(d, p) {\n        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n      },\n      L: function(d, p) {\n        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n      },\n      m: function(d, p) {\n        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n      },\n      M: function(d, p) {\n        return d3_time_formatPad(d.getMinutes(), p, 2);\n      },\n      p: function(d) {\n        return locale_periods[+(d.getHours() >= 12)];\n      },\n      S: function(d, p) {\n        return d3_time_formatPad(d.getSeconds(), p, 2);\n      },\n      U: function(d, p) {\n        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n      },\n      w: function(d) {\n        return d.getDay();\n      },\n      W: function(d, p) {\n        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n      },\n      x: d3_time_format(locale_date),\n      X: d3_time_format(locale_time),\n      y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n      },\n      Y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n      },\n      Z: d3_time_zone,\n      \"%\": function() {\n        return \"%\";\n      }\n    };\n    var d3_time_parsers = {\n      a: d3_time_parseWeekdayAbbrev,\n      A: d3_time_parseWeekday,\n      b: d3_time_parseMonthAbbrev,\n      B: d3_time_parseMonth,\n      c: d3_time_parseLocaleFull,\n      d: d3_time_parseDay,\n      e: d3_time_parseDay,\n      H: d3_time_parseHour24,\n      I: d3_time_parseHour24,\n      j: d3_time_parseDayOfYear,\n      L: d3_time_parseMilliseconds,\n      m: d3_time_parseMonthNumber,\n      M: d3_time_parseMinutes,\n      p: d3_time_parseAmPm,\n      S: d3_time_parseSeconds,\n      U: d3_time_parseWeekNumberSunday,\n      w: d3_time_parseWeekdayNumber,\n      W: d3_time_parseWeekNumberMonday,\n      x: d3_time_parseLocaleDate,\n      X: d3_time_parseLocaleTime,\n      y: d3_time_parseYear,\n      Y: d3_time_parseFullYear,\n      Z: d3_time_parseZone,\n      \"%\": d3_time_parseLiteralPercent\n    };\n    function d3_time_parseWeekdayAbbrev(date, string, i) {\n      d3_time_dayAbbrevRe.lastIndex = 0;\n      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseWeekday(date, string, i) {\n      d3_time_dayRe.lastIndex = 0;\n      var n = d3_time_dayRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonthAbbrev(date, string, i) {\n      d3_time_monthAbbrevRe.lastIndex = 0;\n      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonth(date, string, i) {\n      d3_time_monthRe.lastIndex = 0;\n      var n = d3_time_monthRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseLocaleFull(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n    }\n    function d3_time_parseLocaleDate(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n    }\n    function d3_time_parseLocaleTime(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n    }\n    function d3_time_parseAmPm(date, string, i) {\n      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n      return n == null ? -1 : (date.p = n, i);\n    }\n    return d3_time_format;\n  }\n  var d3_time_formatPads = {\n    \"-\": \"\",\n    _: \" \",\n    \"0\": \"0\"\n  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;\n  function d3_time_formatPad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\", string = (sign ? -value : value) + \"\", length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n  function d3_time_formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");\n  }\n  function d3_time_formatLookup(names) {\n    var map = new d3_Map(), i = -1, n = names.length;\n    while (++i < n) map.set(names[i].toLowerCase(), i);\n    return map;\n  }\n  function d3_time_parseWeekdayNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n    return n ? (date.w = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberSunday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.U = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberMonday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.W = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseFullYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n    return n ? (date.y = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n  }\n  function d3_time_parseZone(date, string, i) {\n    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, \n    i + 5) : -1;\n  }\n  function d3_time_expandYear(d) {\n    return d + (d > 68 ? 1900 : 2e3);\n  }\n  function d3_time_parseMonthNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n  }\n  function d3_time_parseDay(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.d = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseDayOfYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.j = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseHour24(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.H = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMinutes(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.M = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseSeconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.S = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMilliseconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.L = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_zone(d) {\n    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = abs(z) / 60 | 0, zm = abs(z) % 60;\n    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);\n  }\n  function d3_time_parseLiteralPercent(date, string, i) {\n    d3_time_percentRe.lastIndex = 0;\n    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n  function d3_time_formatMulti(formats) {\n    var n = formats.length, i = -1;\n    while (++i < n) formats[i][0] = this(formats[i][0]);\n    return function(date) {\n      var i = 0, f = formats[i];\n      while (!f[1](date)) f = formats[++i];\n      return f[0](date);\n    };\n  }\n  d3.locale = function(locale) {\n    return {\n      numberFormat: d3_locale_numberFormat(locale),\n      timeFormat: d3_locale_timeFormat(locale)\n    };\n  };\n  var d3_locale_enUS = d3.locale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [ 3 ],\n    currency: [ \"$\", \"\" ],\n    dateTime: \"%a %b %e %X %Y\",\n    date: \"%m/%d/%Y\",\n    time: \"%H:%M:%S\",\n    periods: [ \"AM\", \"PM\" ],\n    days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],\n    shortDays: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],\n    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n    shortMonths: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\n  });\n  d3.format = d3_locale_enUS.numberFormat;\n  d3.geo = {};\n  function d3_adder() {}\n  d3_adder.prototype = {\n    s: 0,\n    t: 0,\n    add: function(y) {\n      d3_adderSum(y, this.t, d3_adderTemp);\n      d3_adderSum(d3_adderTemp.s, this.s, this);\n      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;\n    },\n    reset: function() {\n      this.s = this.t = 0;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n  var d3_adderTemp = new d3_adder();\n  function d3_adderSum(a, b, o) {\n    var x = o.s = a + b, bv = x - a, av = x - bv;\n    o.t = a - av + (b - bv);\n  }\n  d3.geo.stream = function(object, listener) {\n    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n      d3_geo_streamObjectType[object.type](object, listener);\n    } else {\n      d3_geo_streamGeometry(object, listener);\n    }\n  };\n  function d3_geo_streamGeometry(geometry, listener) {\n    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n    }\n  }\n  var d3_geo_streamObjectType = {\n    Feature: function(feature, listener) {\n      d3_geo_streamGeometry(feature.geometry, listener);\n    },\n    FeatureCollection: function(object, listener) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);\n    }\n  };\n  var d3_geo_streamGeometryType = {\n    Sphere: function(object, listener) {\n      listener.sphere();\n    },\n    Point: function(object, listener) {\n      object = object.coordinates;\n      listener.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, listener) {\n      d3_geo_streamLine(object.coordinates, listener, 0);\n    },\n    MultiLineString: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);\n    },\n    Polygon: function(object, listener) {\n      d3_geo_streamPolygon(object.coordinates, listener);\n    },\n    MultiPolygon: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);\n    },\n    GeometryCollection: function(object, listener) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);\n    }\n  };\n  function d3_geo_streamLine(coordinates, listener, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    listener.lineStart();\n    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n    listener.lineEnd();\n  }\n  function d3_geo_streamPolygon(coordinates, listener) {\n    var i = -1, n = coordinates.length;\n    listener.polygonStart();\n    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);\n    listener.polygonEnd();\n  }\n  d3.geo.area = function(object) {\n    d3_geo_areaSum = 0;\n    d3.geo.stream(object, d3_geo_area);\n    return d3_geo_areaSum;\n  };\n  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();\n  var d3_geo_area = {\n    sphere: function() {\n      d3_geo_areaSum += 4 * π;\n    },\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_areaRingSum.reset();\n      d3_geo_area.lineStart = d3_geo_areaRingStart;\n    },\n    polygonEnd: function() {\n      var area = 2 * d3_geo_areaRingSum;\n      d3_geo_areaSum += area < 0 ? 4 * π + area : area;\n      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n    }\n  };\n  function d3_geo_areaRingStart() {\n    var λ00, φ00, λ0, cosφ0, sinφ0;\n    d3_geo_area.point = function(λ, φ) {\n      d3_geo_area.point = nextPoint;\n      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), \n      sinφ0 = Math.sin(φ);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      φ = φ * d3_radians / 2 + π / 4;\n      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n      d3_geo_areaRingSum.add(Math.atan2(v, u));\n      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n    }\n    d3_geo_area.lineEnd = function() {\n      nextPoint(λ00, φ00);\n    };\n  }\n  function d3_geo_cartesian(spherical) {\n    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);\n    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];\n  }\n  function d3_geo_cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n  function d3_geo_cartesianCross(a, b) {\n    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];\n  }\n  function d3_geo_cartesianAdd(a, b) {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n  }\n  function d3_geo_cartesianScale(vector, k) {\n    return [ vector[0] * k, vector[1] * k, vector[2] * k ];\n  }\n  function d3_geo_cartesianNormalize(d) {\n    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l;\n    d[1] /= l;\n    d[2] /= l;\n  }\n  function d3_geo_spherical(cartesian) {\n    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];\n  }\n  function d3_geo_sphericalEqual(a, b) {\n    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;\n  }\n  d3.geo.bounds = function() {\n    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n    var bound = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        bound.point = ringPoint;\n        bound.lineStart = ringStart;\n        bound.lineEnd = ringEnd;\n        dλSum = 0;\n        d3_geo_area.polygonStart();\n      },\n      polygonEnd: function() {\n        d3_geo_area.polygonEnd();\n        bound.point = point;\n        bound.lineStart = lineStart;\n        bound.lineEnd = lineEnd;\n        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;\n        range[0] = λ0, range[1] = λ1;\n      }\n    };\n    function point(λ, φ) {\n      ranges.push(range = [ λ0 = λ, λ1 = λ ]);\n      if (φ < φ0) φ0 = φ;\n      if (φ > φ1) φ1 = φ;\n    }\n    function linePoint(λ, φ) {\n      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);\n      if (p0) {\n        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n        d3_geo_cartesianNormalize(inflection);\n        inflection = d3_geo_spherical(inflection);\n        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;\n        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = inflection[1] * d3_degrees;\n          if (φi > φ1) φ1 = φi;\n        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = -inflection[1] * d3_degrees;\n          if (φi < φ0) φ0 = φi;\n        } else {\n          if (φ < φ0) φ0 = φ;\n          if (φ > φ1) φ1 = φ;\n        }\n        if (antimeridian) {\n          if (λ < λ_) {\n            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n          } else {\n            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n          }\n        } else {\n          if (λ1 >= λ0) {\n            if (λ < λ0) λ0 = λ;\n            if (λ > λ1) λ1 = λ;\n          } else {\n            if (λ > λ_) {\n              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n            } else {\n              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n            }\n          }\n        }\n      } else {\n        point(λ, φ);\n      }\n      p0 = p, λ_ = λ;\n    }\n    function lineStart() {\n      bound.point = linePoint;\n    }\n    function lineEnd() {\n      range[0] = λ0, range[1] = λ1;\n      bound.point = point;\n      p0 = null;\n    }\n    function ringPoint(λ, φ) {\n      if (p0) {\n        var dλ = λ - λ_;\n        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;\n      } else λ__ = λ, φ__ = φ;\n      d3_geo_area.point(λ, φ);\n      linePoint(λ, φ);\n    }\n    function ringStart() {\n      d3_geo_area.lineStart();\n    }\n    function ringEnd() {\n      ringPoint(λ__, φ__);\n      d3_geo_area.lineEnd();\n      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);\n      range[0] = λ0, range[1] = λ1;\n      p0 = null;\n    }\n    function angle(λ0, λ1) {\n      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;\n    }\n    function compareRanges(a, b) {\n      return a[0] - b[0];\n    }\n    function withinRange(x, range) {\n      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n    }\n    return function(feature) {\n      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n      ranges = [];\n      d3.geo.stream(feature, bound);\n      var n = ranges.length;\n      if (n) {\n        ranges.sort(compareRanges);\n        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {\n          b = ranges[i];\n          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n          } else {\n            merged.push(a = b);\n          }\n        }\n        var best = -Infinity, dλ;\n        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {\n          b = merged[i];\n          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];\n        }\n      }\n      ranges = range = null;\n      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];\n    };\n  }();\n  d3.geo.centroid = function(object) {\n    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n    d3.geo.stream(object, d3_geo_centroid);\n    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;\n    if (m < ε2) {\n      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n      m = x * x + y * y + z * z;\n      if (m < ε2) return [ NaN, NaN ];\n    }\n    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];\n  };\n  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n  var d3_geo_centroid = {\n    sphere: d3_noop,\n    point: d3_geo_centroidPoint,\n    lineStart: d3_geo_centroidLineStart,\n    lineEnd: d3_geo_centroidLineEnd,\n    polygonStart: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n    }\n  };\n  function d3_geo_centroidPoint(λ, φ) {\n    λ *= d3_radians;\n    var cosφ = Math.cos(φ *= d3_radians);\n    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n  }\n  function d3_geo_centroidPointXYZ(x, y, z) {\n    ++d3_geo_centroidW0;\n    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n  }\n  function d3_geo_centroidLineStart() {\n    var x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroid.point = nextPoint;\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_centroidLineEnd() {\n    d3_geo_centroid.point = d3_geo_centroidPoint;\n  }\n  function d3_geo_centroidRingStart() {\n    var λ00, φ00, x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ00 = λ, φ00 = φ;\n      d3_geo_centroid.point = nextPoint;\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    d3_geo_centroid.lineEnd = function() {\n      nextPoint(λ00, φ00);\n      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n      d3_geo_centroid.point = d3_geo_centroidPoint;\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);\n      d3_geo_centroidX2 += v * cx;\n      d3_geo_centroidY2 += v * cy;\n      d3_geo_centroidZ2 += v * cz;\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_compose(a, b) {\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n    return compose;\n  }\n  function d3_true() {\n    return true;\n  }\n  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n    var subject = [], clip = [];\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n];\n      if (d3_geo_sphericalEqual(p0, p1)) {\n        listener.lineStart();\n        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);\n        listener.lineEnd();\n        return;\n      }\n      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n    });\n    clip.sort(compare);\n    d3_geo_clipPolygonLinkCircular(subject);\n    d3_geo_clipPolygonLinkCircular(clip);\n    if (!subject.length) return;\n    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {\n      clip[i].e = entry = !entry;\n    }\n    var start = subject[0], points, point;\n    while (1) {\n      var current = start, isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      listener.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, listener);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, listener);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      listener.lineEnd();\n    }\n  }\n  function d3_geo_clipPolygonLinkCircular(array) {\n    if (!(n = array.length)) return;\n    var n, i = 0, a = array[0], b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other;\n    this.e = entry;\n    this.v = false;\n    this.n = this.p = null;\n  }\n  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n    return function(rotate, listener) {\n      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = d3.merge(segments);\n          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n          if (segments.length) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n          } else if (clipStartInside) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            interpolate(null, null, 1, listener);\n            listener.lineEnd();\n          }\n          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          listener.polygonStart();\n          listener.lineStart();\n          interpolate(null, null, 1, listener);\n          listener.lineEnd();\n          listener.polygonEnd();\n        }\n      };\n      function point(λ, φ) {\n        var point = rotate(λ, φ);\n        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n      }\n      function pointLine(λ, φ) {\n        var point = rotate(λ, φ);\n        line.point(point[0], point[1]);\n      }\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n      var segments;\n      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n      function pointRing(λ, φ) {\n        ring.push([ λ, φ ]);\n        var point = rotate(λ, φ);\n        ringListener.point(point[0], point[1]);\n      }\n      function ringStart() {\n        ringListener.lineStart();\n        ring = [];\n      }\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringListener.lineEnd();\n        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n        if (!n) return;\n        if (clean & 1) {\n          segment = ringSegments[0];\n          var n = segment.length - 1, i = -1, point;\n          if (n > 0) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            while (++i < n) listener.point((point = segment[i])[0], point[1]);\n            listener.lineEnd();\n          }\n          return;\n        }\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n      }\n      return clip;\n    };\n  }\n  function d3_geo_clipSegmentLength1(segment) {\n    return segment.length > 1;\n  }\n  function d3_geo_clipBufferListener() {\n    var lines = [], line;\n    return {\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      point: function(λ, φ) {\n        line.push([ λ, φ ]);\n      },\n      lineEnd: d3_noop,\n      buffer: function() {\n        var buffer = lines;\n        lines = [];\n        line = null;\n        return buffer;\n      },\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      }\n    };\n  }\n  function d3_geo_clipSort(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n  }\n  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n  function d3_geo_clipAntimeridianLine(listener) {\n    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;\n    return {\n      lineStart: function() {\n        listener.lineStart();\n        clean = 1;\n      },\n      point: function(λ1, φ1) {\n        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);\n        if (abs(dλ - π) < ε) {\n          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          listener.point(λ1, φ0);\n          clean = 0;\n        } else if (sλ0 !== sλ1 && dλ >= π) {\n          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;\n          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;\n          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          clean = 0;\n        }\n        listener.point(λ0 = λ1, φ0 = φ1);\n        sλ0 = sλ1;\n      },\n      lineEnd: function() {\n        listener.lineEnd();\n        λ0 = φ0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean;\n      }\n    };\n  }\n  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);\n    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n  }\n  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n    var φ;\n    if (from == null) {\n      φ = direction * halfπ;\n      listener.point(-π, φ);\n      listener.point(0, φ);\n      listener.point(π, φ);\n      listener.point(π, 0);\n      listener.point(π, -φ);\n      listener.point(0, -φ);\n      listener.point(-π, -φ);\n      listener.point(-π, 0);\n      listener.point(-π, φ);\n    } else if (abs(from[0] - to[0]) > ε) {\n      var s = from[0] < to[0] ? π : -π;\n      φ = direction * s / 2;\n      listener.point(-s, φ);\n      listener.point(0, φ);\n      listener.point(s, φ);\n    } else {\n      listener.point(to[0], to[1]);\n    }\n  }\n  function d3_geo_pointInPolygon(point, polygon) {\n    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n    d3_geo_areaRingSum.reset();\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      var ring = polygon[i], m = ring.length;\n      if (!m) continue;\n      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n      while (true) {\n        if (j === m) j = 0;\n        point = ring[j];\n        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;\n        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {\n          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n          d3_geo_cartesianNormalize(arc);\n          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n          d3_geo_cartesianNormalize(intersection);\n          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);\n          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ dλ >= 0 ? 1 : -1;\n          }\n        }\n        if (!j++) break;\n        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n      }\n    }\n    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;\n  }\n  function d3_geo_clipCircle(radius) {\n    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);\n    function visible(λ, φ) {\n      return Math.cos(λ) * Math.cos(φ) > cr;\n    }\n    function clipLine(listener) {\n      var point0, c0, v0, v00, clean;\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(λ, φ) {\n          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n          if (!point0 && (v00 = v0 = v)) listener.lineStart();\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n              point1[0] += ε;\n              point1[1] += ε;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              listener.lineStart();\n              point2 = intersect(point1, point0);\n              listener.point(point2[0], point2[1]);\n            } else {\n              point2 = intersect(point0, point1);\n              listener.point(point2[0], point2[1]);\n              listener.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n              } else {\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n            listener.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) listener.lineEnd();\n          point0 = null;\n        },\n        clean: function() {\n          return clean | (v00 && v0) << 1;\n        }\n      };\n    }\n    function intersect(a, b, two) {\n      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);\n      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n      if (!determinant) return !two && a;\n      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n      d3_geo_cartesianAdd(A, B);\n      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n      if (t2 < 0) return;\n      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);\n      d3_geo_cartesianAdd(q, A);\n      q = d3_geo_spherical(q);\n      if (!two) return q;\n      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;\n      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;\n      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;\n      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;\n      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n        d3_geo_cartesianAdd(q1, A);\n        return [ q, d3_geo_spherical(q1) ];\n      }\n    }\n    function code(λ, φ) {\n      var r = smallRadius ? radius : π - radius, code = 0;\n      if (λ < -r) code |= 1; else if (λ > r) code |= 2;\n      if (φ < -r) code |= 4; else if (φ > r) code |= 8;\n      return code;\n    }\n  }\n  function d3_geom_clipLine(x0, y0, x1, y1) {\n    return function(line) {\n      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n      r = x0 - ax;\n      if (!dx && r > 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dx > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = x1 - ax;\n      if (!dx && r < 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dx > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      r = y0 - ay;\n      if (!dy && r > 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dy > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = y1 - ay;\n      if (!dy && r < 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dy > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      if (t0 > 0) line.a = {\n        x: ax + t0 * dx,\n        y: ay + t0 * dy\n      };\n      if (t1 < 1) line.b = {\n        x: ax + t1 * dx,\n        y: ay + t1 * dy\n      };\n      return line;\n    };\n  }\n  var d3_geo_clipExtentMAX = 1e9;\n  d3.geo.clipExtent = function() {\n    var x0, y0, x1, y1, stream, clip, clipExtent = {\n      stream: function(output) {\n        if (stream) stream.valid = false;\n        stream = clip(output);\n        stream.valid = true;\n        return stream;\n      },\n      extent: function(_) {\n        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n        if (stream) stream.valid = false, stream = null;\n        return clipExtent;\n      }\n    };\n    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);\n  };\n  function d3_geo_clipExtent(x0, y0, x1, y1) {\n    return function(listener) {\n      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          listener = bufferListener;\n          segments = [];\n          polygon = [];\n          clean = true;\n        },\n        polygonEnd: function() {\n          listener = listener_;\n          segments = d3.merge(segments);\n          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;\n          if (inside || visible) {\n            listener.polygonStart();\n            if (inside) {\n              listener.lineStart();\n              interpolate(null, null, 1, listener);\n              listener.lineEnd();\n            }\n            if (visible) {\n              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n            }\n            listener.polygonEnd();\n          }\n          segments = polygon = ring = null;\n        }\n      };\n      function insidePolygon(p) {\n        var wn = 0, n = polygon.length, y = p[1];\n        for (var i = 0; i < n; ++i) {\n          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {\n            b = v[j];\n            if (a[1] <= y) {\n              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;\n            } else {\n              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;\n            }\n            a = b;\n          }\n        }\n        return wn !== 0;\n      }\n      function interpolate(from, to, direction, listener) {\n        var a = 0, a1 = 0;\n        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n          do {\n            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n          } while ((a = (a + direction + 4) % 4) !== a1);\n        } else {\n          listener.point(to[0], to[1]);\n        }\n      }\n      function pointVisible(x, y) {\n        return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n      }\n      function point(x, y) {\n        if (pointVisible(x, y)) listener.point(x, y);\n      }\n      var x__, y__, v__, x_, y_, v_, first, clean;\n      function lineStart() {\n        clip.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferListener.rejoin();\n          segments.push(bufferListener.buffer());\n        }\n        clip.point = point;\n        if (v_) listener.lineEnd();\n      }\n      function linePoint(x, y) {\n        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n        var v = pointVisible(x, y);\n        if (polygon) ring.push([ x, y ]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            listener.lineStart();\n            listener.point(x, y);\n          }\n        } else {\n          if (v && v_) listener.point(x, y); else {\n            var l = {\n              a: {\n                x: x_,\n                y: y_\n              },\n              b: {\n                x: x,\n                y: y\n              }\n            };\n            if (clipLine(l)) {\n              if (!v_) {\n                listener.lineStart();\n                listener.point(l.a.x, l.a.y);\n              }\n              listener.point(l.b.x, l.b.y);\n              if (!v) listener.lineEnd();\n              clean = false;\n            } else if (v) {\n              listener.lineStart();\n              listener.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n      return clip;\n    };\n    function corner(p, direction) {\n      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n    }\n    function compare(a, b) {\n      return comparePoints(a.x, b.x);\n    }\n    function comparePoints(a, b) {\n      var ca = corner(a, 1), cb = corner(b, 1);\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }\n  }\n  function d3_geo_conic(projectAt) {\n    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);\n    p.parallels = function(_) {\n      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];\n      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n    };\n    return p;\n  }\n  function d3_geo_conicEqualArea(φ0, φ1) {\n    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;\n    function forward(λ, φ) {\n      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = ρ0 - y;\n      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEqualArea = function() {\n    return d3_geo_conic(d3_geo_conicEqualArea);\n  }).raw = d3_geo_conicEqualArea;\n  d3.geo.albers = function() {\n    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);\n  };\n  d3.geo.albersUsa = function() {\n    var lower48 = d3.geo.albers();\n    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);\n    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);\n    var point, pointStream = {\n      point: function(x, y) {\n        point = [ x, y ];\n      }\n    }, lower48Point, alaskaPoint, hawaiiPoint;\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      point = null;\n      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);\n      return point;\n    }\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n    };\n    albersUsa.stream = function(stream) {\n      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n      return {\n        point: function(x, y) {\n          lower48Stream.point(x, y);\n          alaskaStream.point(x, y);\n          hawaiiStream.point(x, y);\n        },\n        sphere: function() {\n          lower48Stream.sphere();\n          alaskaStream.sphere();\n          hawaiiStream.sphere();\n        },\n        lineStart: function() {\n          lower48Stream.lineStart();\n          alaskaStream.lineStart();\n          hawaiiStream.lineStart();\n        },\n        lineEnd: function() {\n          lower48Stream.lineEnd();\n          alaskaStream.lineEnd();\n          hawaiiStream.lineEnd();\n        },\n        polygonStart: function() {\n          lower48Stream.polygonStart();\n          alaskaStream.polygonStart();\n          hawaiiStream.polygonStart();\n        },\n        polygonEnd: function() {\n          lower48Stream.polygonEnd();\n          alaskaStream.polygonEnd();\n          hawaiiStream.polygonEnd();\n        }\n      };\n    };\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_);\n      alaska.precision(_);\n      hawaii.precision(_);\n      return albersUsa;\n    };\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_);\n      alaska.scale(_ * .35);\n      hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      return albersUsa;\n    };\n    return albersUsa.scale(1070);\n  };\n  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_pathAreaPolygon = 0;\n      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n    }\n  };\n  function d3_geo_pathAreaRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathArea.point = function(x, y) {\n      d3_geo_pathArea.point = nextPoint;\n      x00 = x0 = x, y00 = y0 = y;\n    };\n    function nextPoint(x, y) {\n      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n      x0 = x, y0 = y;\n    }\n    d3_geo_pathArea.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n  var d3_geo_pathBounds = {\n    point: d3_geo_pathBoundsPoint,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_pathBoundsPoint(x, y) {\n    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n  }\n  function d3_geo_pathBuffer() {\n    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = d3_geo_pathBufferCircle(_);\n        return stream;\n      },\n      result: function() {\n        if (buffer.length) {\n          var result = buffer.join(\"\");\n          buffer = [];\n          return result;\n        }\n      }\n    };\n    function point(x, y) {\n      buffer.push(\"M\", x, \",\", y, pointCircle);\n    }\n    function pointLineStart(x, y) {\n      buffer.push(\"M\", x, \",\", y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      buffer.push(\"L\", x, \",\", y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      buffer.push(\"Z\");\n    }\n    return stream;\n  }\n  function d3_geo_pathBufferCircle(radius) {\n    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n  }\n  var d3_geo_pathCentroid = {\n    point: d3_geo_pathCentroidPoint,\n    lineStart: d3_geo_pathCentroidLineStart,\n    lineEnd: d3_geo_pathCentroidLineEnd,\n    polygonStart: function() {\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n    }\n  };\n  function d3_geo_pathCentroidPoint(x, y) {\n    d3_geo_centroidX0 += x;\n    d3_geo_centroidY0 += y;\n    ++d3_geo_centroidZ0;\n  }\n  function d3_geo_pathCentroidLineStart() {\n    var x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n  }\n  function d3_geo_pathCentroidLineEnd() {\n    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n  }\n  function d3_geo_pathCentroidRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      z = y0 * x - x0 * y;\n      d3_geo_centroidX2 += z * (x0 + x);\n      d3_geo_centroidY2 += z * (y0 + y);\n      d3_geo_centroidZ2 += z * 3;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n    d3_geo_pathCentroid.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  function d3_geo_pathContext(context) {\n    var pointRadius = 4.5;\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n      result: d3_noop\n    };\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, τ);\n    }\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      context.closePath();\n    }\n    return stream;\n  }\n  function d3_geo_resample(project) {\n    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;\n    function resample(stream) {\n      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n    }\n    function resampleNone(stream) {\n      return d3_geo_transformPoint(stream, function(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      });\n    }\n    function resampleRecursive(stream) {\n      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n      var resample = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          stream.polygonStart();\n          resample.lineStart = ringStart;\n        },\n        polygonEnd: function() {\n          stream.polygonEnd();\n          resample.lineStart = lineStart;\n        }\n      };\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n      function lineStart() {\n        x0 = NaN;\n        resample.point = linePoint;\n        stream.lineStart();\n      }\n      function linePoint(λ, φ) {\n        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n      function lineEnd() {\n        resample.point = point;\n        stream.lineEnd();\n      }\n      function ringStart() {\n        lineStart();\n        resample.point = ringPoint;\n        resample.lineEnd = ringEnd;\n      }\n      function ringPoint(λ, φ) {\n        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resample.point = linePoint;\n      }\n      function ringEnd() {\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n        resample.lineEnd = lineEnd;\n        lineEnd();\n      }\n      return resample;\n    }\n    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n      if (d2 > 4 * δ2 && depth--) {\n        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    resample.precision = function(_) {\n      if (!arguments.length) return Math.sqrt(δ2);\n      maxDepth = (δ2 = _ * _) > 0 && 16;\n      return resample;\n    };\n    return resample;\n  }\n  d3.geo.path = function() {\n    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n        d3.geo.stream(object, cacheStream);\n      }\n      return contextStream.result();\n    }\n    path.area = function(object) {\n      d3_geo_pathAreaSum = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n      return d3_geo_pathAreaSum;\n    };\n    path.centroid = function(object) {\n      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n    };\n    path.bounds = function(object) {\n      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];\n    };\n    path.projection = function(_) {\n      if (!arguments.length) return projection;\n      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n      return reset();\n    };\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return reset();\n    };\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n    function reset() {\n      cacheStream = null;\n      return path;\n    }\n    return path.projection(d3.geo.albersUsa()).context(null);\n  };\n  function d3_geo_pathProjectStream(project) {\n    var resample = d3_geo_resample(function(x, y) {\n      return project([ x * d3_degrees, y * d3_degrees ]);\n    });\n    return function(stream) {\n      return d3_geo_projectionRadians(resample(stream));\n    };\n  }\n  d3.geo.transform = function(methods) {\n    return {\n      stream: function(stream) {\n        var transform = new d3_geo_transform(stream);\n        for (var k in methods) transform[k] = methods[k];\n        return transform;\n      }\n    };\n  };\n  function d3_geo_transform(stream) {\n    this.stream = stream;\n  }\n  d3_geo_transform.prototype = {\n    point: function(x, y) {\n      this.stream.point(x, y);\n    },\n    sphere: function() {\n      this.stream.sphere();\n    },\n    lineStart: function() {\n      this.stream.lineStart();\n    },\n    lineEnd: function() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function() {\n      this.stream.polygonEnd();\n    }\n  };\n  function d3_geo_transformPoint(stream, point) {\n    return {\n      point: point,\n      sphere: function() {\n        stream.sphere();\n      },\n      lineStart: function() {\n        stream.lineStart();\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n      },\n      polygonStart: function() {\n        stream.polygonStart();\n      },\n      polygonEnd: function() {\n        stream.polygonEnd();\n      }\n    };\n  }\n  d3.geo.projection = d3_geo_projection;\n  d3.geo.projectionMutator = d3_geo_projectionMutator;\n  function d3_geo_projection(project) {\n    return d3_geo_projectionMutator(function() {\n      return project;\n    })();\n  }\n  function d3_geo_projectionMutator(projectAt) {\n    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {\n      x = project(x, y);\n      return [ x[0] * k + δx, δy - x[1] * k ];\n    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n    function projection(point) {\n      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n      return [ point[0] * k + δx, δy - point[1] * k ];\n    }\n    function invert(point) {\n      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];\n    }\n    projection.stream = function(output) {\n      if (stream) stream.valid = false;\n      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n      stream.valid = true;\n      return stream;\n    };\n    projection.clipAngle = function(_) {\n      if (!arguments.length) return clipAngle;\n      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n      return invalidate();\n    };\n    projection.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent;\n      clipExtent = _;\n      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n      return invalidate();\n    };\n    projection.scale = function(_) {\n      if (!arguments.length) return k;\n      k = +_;\n      return reset();\n    };\n    projection.translate = function(_) {\n      if (!arguments.length) return [ x, y ];\n      x = +_[0];\n      y = +_[1];\n      return reset();\n    };\n    projection.center = function(_) {\n      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];\n      λ = _[0] % 360 * d3_radians;\n      φ = _[1] % 360 * d3_radians;\n      return reset();\n    };\n    projection.rotate = function(_) {\n      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];\n      δλ = _[0] % 360 * d3_radians;\n      δφ = _[1] % 360 * d3_radians;\n      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;\n      return reset();\n    };\n    d3.rebind(projection, projectResample, \"precision\");\n    function reset() {\n      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n      var center = project(λ, φ);\n      δx = x - center[0] * k;\n      δy = y + center[1] * k;\n      return invalidate();\n    }\n    function invalidate() {\n      if (stream) stream.valid = false, stream = null;\n      return projection;\n    }\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return reset();\n    };\n  }\n  function d3_geo_projectionRadians(stream) {\n    return d3_geo_transformPoint(stream, function(x, y) {\n      stream.point(x * d3_radians, y * d3_radians);\n    });\n  }\n  function d3_geo_equirectangular(λ, φ) {\n    return [ λ, φ ];\n  }\n  (d3.geo.equirectangular = function() {\n    return d3_geo_projection(d3_geo_equirectangular);\n  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n  d3.geo.rotation = function(rotate) {\n    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    }\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    };\n    return forward;\n  };\n  function d3_geo_identityRotation(λ, φ) {\n    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n  }\n  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n  function d3_geo_rotation(δλ, δφ, δγ) {\n    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n  }\n  function d3_geo_forwardRotationλ(δλ) {\n    return function(λ, φ) {\n      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n    };\n  }\n  function d3_geo_rotationλ(δλ) {\n    var rotation = d3_geo_forwardRotationλ(δλ);\n    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n    return rotation;\n  }\n  function d3_geo_rotationφγ(δφ, δγ) {\n    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);\n    function rotation(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];\n    }\n    rotation.invert = function(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];\n    };\n    return rotation;\n  }\n  d3.geo.circle = function() {\n    var origin = [ 0, 0 ], angle, precision = 6, interpolate;\n    function circle() {\n      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n      interpolate(null, null, 1, {\n        point: function(x, y) {\n          ring.push(x = rotate(x, y));\n          x[0] *= d3_degrees, x[1] *= d3_degrees;\n        }\n      });\n      return {\n        type: \"Polygon\",\n        coordinates: [ ring ]\n      };\n    }\n    circle.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return circle;\n    };\n    circle.angle = function(x) {\n      if (!arguments.length) return angle;\n      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n      return circle;\n    };\n    circle.precision = function(_) {\n      if (!arguments.length) return precision;\n      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n      return circle;\n    };\n    return circle.angle(90);\n  };\n  function d3_geo_circleInterpolate(radius, precision) {\n    var cr = Math.cos(radius), sr = Math.sin(radius);\n    return function(from, to, direction, listener) {\n      var step = direction * precision;\n      if (from != null) {\n        from = d3_geo_circleAngle(cr, from);\n        to = d3_geo_circleAngle(cr, to);\n        if (direction > 0 ? from < to : from > to) from += direction * τ;\n      } else {\n        from = radius + direction * τ;\n        to = radius - .5 * step;\n      }\n      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {\n        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);\n      }\n    };\n  }\n  function d3_geo_circleAngle(cr, point) {\n    var a = d3_geo_cartesian(point);\n    a[0] -= cr;\n    d3_geo_cartesianNormalize(a);\n    var angle = d3_acos(-a[1]);\n    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n  }\n  d3.geo.distance = function(a, b) {\n    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n  };\n  d3.geo.graticule = function() {\n    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;\n    function graticule() {\n      return {\n        type: \"MultiLineString\",\n        coordinates: lines()\n      };\n    }\n    function lines() {\n      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n        return abs(x % DX) > ε;\n      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {\n        return abs(y % DY) > ε;\n      }).map(y));\n    }\n    graticule.lines = function() {\n      return lines().map(function(coordinates) {\n        return {\n          type: \"LineString\",\n          coordinates: coordinates\n        };\n      });\n    };\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]\n      };\n    };\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.minorExtent();\n      return graticule.majorExtent(_).minorExtent(_);\n    };\n    graticule.majorExtent = function(_) {\n      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.minorExtent = function(_) {\n      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.minorStep();\n      return graticule.majorStep(_).minorStep(_);\n    };\n    graticule.majorStep = function(_) {\n      if (!arguments.length) return [ DX, DY ];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n    graticule.minorStep = function(_) {\n      if (!arguments.length) return [ dx, dy ];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = d3_geo_graticuleX(y0, y1, 90);\n      y = d3_geo_graticuleY(x0, x1, precision);\n      X = d3_geo_graticuleX(Y0, Y1, 90);\n      Y = d3_geo_graticuleY(X0, X1, precision);\n      return graticule;\n    };\n    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n  };\n  function d3_geo_graticuleX(y0, y1, dy) {\n    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n    return function(x) {\n      return y.map(function(y) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_geo_graticuleY(x0, x1, dx) {\n    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n    return function(y) {\n      return x.map(function(x) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_source(d) {\n    return d.source;\n  }\n  function d3_target(d) {\n    return d.target;\n  }\n  d3.geo.greatArc = function() {\n    var source = d3_source, source_, target = d3_target, target_;\n    function greatArc() {\n      return {\n        type: \"LineString\",\n        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]\n      };\n    }\n    greatArc.distance = function() {\n      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n    };\n    greatArc.source = function(_) {\n      if (!arguments.length) return source;\n      source = _, source_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.target = function(_) {\n      if (!arguments.length) return target;\n      target = _, target_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.precision = function() {\n      return arguments.length ? greatArc : 0;\n    };\n    return greatArc;\n  };\n  d3.geo.interpolate = function(source, target) {\n    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n  };\n  function d3_geo_interpolate(x0, y0, x1, y1) {\n    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n    var interpolate = d ? function(t) {\n      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];\n    } : function() {\n      return [ x0 * d3_degrees, y0 * d3_degrees ];\n    };\n    interpolate.distance = d;\n    return interpolate;\n  }\n  d3.geo.length = function(object) {\n    d3_geo_lengthSum = 0;\n    d3.geo.stream(object, d3_geo_length);\n    return d3_geo_lengthSum;\n  };\n  var d3_geo_lengthSum;\n  var d3_geo_length = {\n    sphere: d3_noop,\n    point: d3_noop,\n    lineStart: d3_geo_lengthLineStart,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_lengthLineStart() {\n    var λ0, sinφ0, cosφ0;\n    d3_geo_length.point = function(λ, φ) {\n      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n      d3_geo_length.point = nextPoint;\n    };\n    d3_geo_length.lineEnd = function() {\n      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n    };\n    function nextPoint(λ, φ) {\n      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n    }\n  }\n  function d3_geo_azimuthal(scale, angle) {\n    function azimuthal(λ, φ) {\n      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);\n      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];\n    }\n    azimuthal.invert = function(x, y) {\n      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);\n      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];\n    };\n    return azimuthal;\n  }\n  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {\n    return Math.sqrt(2 / (1 + cosλcosφ));\n  }, function(ρ) {\n    return 2 * Math.asin(ρ / 2);\n  });\n  (d3.geo.azimuthalEqualArea = function() {\n    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n  }).raw = d3_geo_azimuthalEqualArea;\n  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {\n    var c = Math.acos(cosλcosφ);\n    return c && c / Math.sin(c);\n  }, d3_identity);\n  (d3.geo.azimuthalEquidistant = function() {\n    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n  }).raw = d3_geo_azimuthalEquidistant;\n  function d3_geo_conicConformal(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), t = function(φ) {\n      return Math.tan(π / 4 + φ / 2);\n    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n    if (!n) return d3_geo_mercator;\n    function forward(λ, φ) {\n      if (F > 0) {\n        if (φ < -halfπ + ε) φ = -halfπ + ε;\n      } else {\n        if (φ > halfπ - ε) φ = halfπ - ε;\n      }\n      var ρ = F / Math.pow(t(φ), n);\n      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];\n    };\n    return forward;\n  }\n  (d3.geo.conicConformal = function() {\n    return d3_geo_conic(d3_geo_conicConformal);\n  }).raw = d3_geo_conicConformal;\n  function d3_geo_conicEquidistant(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;\n    if (abs(n) < ε) return d3_geo_equirectangular;\n    function forward(λ, φ) {\n      var ρ = G - φ;\n      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = G - y;\n      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEquidistant = function() {\n    return d3_geo_conic(d3_geo_conicEquidistant);\n  }).raw = d3_geo_conicEquidistant;\n  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / cosλcosφ;\n  }, Math.atan);\n  (d3.geo.gnomonic = function() {\n    return d3_geo_projection(d3_geo_gnomonic);\n  }).raw = d3_geo_gnomonic;\n  function d3_geo_mercator(λ, φ) {\n    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];\n  }\n  d3_geo_mercator.invert = function(x, y) {\n    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];\n  };\n  function d3_geo_mercatorProjection(project) {\n    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;\n    m.scale = function() {\n      var v = scale.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.translate = function() {\n      var v = translate.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.clipExtent = function(_) {\n      var v = clipExtent.apply(m, arguments);\n      if (v === m) {\n        if (clipAuto = _ == null) {\n          var k = π * scale(), t = translate();\n          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);\n        }\n      } else if (clipAuto) {\n        v = null;\n      }\n      return v;\n    };\n    return m.clipExtent(null);\n  }\n  (d3.geo.mercator = function() {\n    return d3_geo_mercatorProjection(d3_geo_mercator);\n  }).raw = d3_geo_mercator;\n  var d3_geo_orthographic = d3_geo_azimuthal(function() {\n    return 1;\n  }, Math.asin);\n  (d3.geo.orthographic = function() {\n    return d3_geo_projection(d3_geo_orthographic);\n  }).raw = d3_geo_orthographic;\n  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / (1 + cosλcosφ);\n  }, function(ρ) {\n    return 2 * Math.atan(ρ);\n  });\n  (d3.geo.stereographic = function() {\n    return d3_geo_projection(d3_geo_stereographic);\n  }).raw = d3_geo_stereographic;\n  function d3_geo_transverseMercator(λ, φ) {\n    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];\n  }\n  d3_geo_transverseMercator.invert = function(x, y) {\n    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];\n  };\n  (d3.geo.transverseMercator = function() {\n    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n    projection.center = function(_) {\n      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);\n    };\n    projection.rotate = function(_) {\n      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), \n      [ _[0], _[1], _[2] - 90 ]);\n    };\n    return rotate([ 0, 0, 90 ]);\n  }).raw = d3_geo_transverseMercator;\n  d3.geom = {};\n  function d3_geom_pointX(d) {\n    return d[0];\n  }\n  function d3_geom_pointY(d) {\n    return d[1];\n  }\n  d3.geom.hull = function(vertices) {\n    var x = d3_geom_pointX, y = d3_geom_pointY;\n    if (arguments.length) return hull(vertices);\n    function hull(data) {\n      if (data.length < 3) return [];\n      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];\n      for (i = 0; i < n; i++) {\n        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);\n      }\n      points.sort(d3_geom_hullOrder);\n      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);\n      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);\n      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);\n      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);\n      return polygon;\n    }\n    hull.x = function(_) {\n      return arguments.length ? (x = _, hull) : x;\n    };\n    hull.y = function(_) {\n      return arguments.length ? (y = _, hull) : y;\n    };\n    return hull;\n  };\n  function d3_geom_hullUpper(points) {\n    var n = points.length, hull = [ 0, 1 ], hs = 2;\n    for (var i = 2; i < n; i++) {\n      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;\n      hull[hs++] = i;\n    }\n    return hull.slice(0, hs);\n  }\n  function d3_geom_hullOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n  d3.geom.polygon = function(coordinates) {\n    d3_subclass(coordinates, d3_geom_polygonPrototype);\n    return coordinates;\n  };\n  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n  d3_geom_polygonPrototype.area = function() {\n    var i = -1, n = this.length, a, b = this[n - 1], area = 0;\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n    return area * .5;\n  };\n  d3_geom_polygonPrototype.centroid = function(k) {\n    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;\n    if (!arguments.length) k = -1 / (6 * this.area());\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n    return [ x * k, y * k ];\n  };\n  d3_geom_polygonPrototype.clip = function(subject) {\n    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n    while (++i < n) {\n      input = subject.slice();\n      subject.length = 0;\n      b = this[i];\n      c = input[(m = input.length - closed) - 1];\n      j = -1;\n      while (++j < m) {\n        d = input[j];\n        if (d3_geom_polygonInside(d, a, b)) {\n          if (!d3_geom_polygonInside(c, a, b)) {\n            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n          }\n          subject.push(d);\n        } else if (d3_geom_polygonInside(c, a, b)) {\n          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n        }\n        c = d;\n      }\n      if (closed) subject.push(subject[0]);\n      a = b;\n    }\n    return subject;\n  };\n  function d3_geom_polygonInside(p, a, b) {\n    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);\n  }\n  function d3_geom_polygonIntersect(c, d, a, b) {\n    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n    return [ x1 + ua * x21, y1 + ua * y21 ];\n  }\n  function d3_geom_polygonClosed(coordinates) {\n    var a = coordinates[0], b = coordinates[coordinates.length - 1];\n    return !(a[0] - b[0] || a[1] - b[1]);\n  }\n  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n  function d3_geom_voronoiBeach() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.edge = this.site = this.circle = null;\n  }\n  function d3_geom_voronoiCreateBeach(site) {\n    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n    beach.site = site;\n    return beach;\n  }\n  function d3_geom_voronoiDetachBeach(beach) {\n    d3_geom_voronoiDetachCircle(beach);\n    d3_geom_voronoiBeaches.remove(beach);\n    d3_geom_voronoiBeachPool.push(beach);\n    d3_geom_voronoiRedBlackNode(beach);\n  }\n  function d3_geom_voronoiRemoveBeach(beach) {\n    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {\n      x: x,\n      y: y\n    }, previous = beach.P, next = beach.N, disappearing = [ beach ];\n    d3_geom_voronoiDetachBeach(beach);\n    var lArc = previous;\n    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      d3_geom_voronoiDetachBeach(lArc);\n      lArc = previous;\n    }\n    disappearing.unshift(lArc);\n    d3_geom_voronoiDetachCircle(lArc);\n    var rArc = next;\n    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      d3_geom_voronoiDetachBeach(rArc);\n      rArc = next;\n    }\n    disappearing.push(rArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var nArcs = disappearing.length, iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiAddBeach(site) {\n    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;\n    while (node) {\n      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n      if (dxl > ε) node = node.L; else {\n        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n        if (dxr > ε) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -ε) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -ε) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n    var newArc = d3_geom_voronoiCreateBeach(site);\n    d3_geom_voronoiBeaches.insert(lArc, newArc);\n    if (!lArc && !rArc) return;\n    if (lArc === rArc) {\n      d3_geom_voronoiDetachCircle(lArc);\n      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n      d3_geom_voronoiBeaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      d3_geom_voronoiAttachCircle(lArc);\n      d3_geom_voronoiAttachCircle(rArc);\n      return;\n    }\n    if (!rArc) {\n      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      return;\n    }\n    d3_geom_voronoiDetachCircle(lArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n      x: (cy * hb - by * hc) / d + ax,\n      y: (bx * hc - cx * hb) / d + ay\n    };\n    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;\n    if (!pby2) return rfocx;\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n    site = lArc.site;\n    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;\n    if (!plby2) return lfocx;\n    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n    return (rfocx + lfocx) / 2;\n  }\n  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site.y === directrix ? site.x : Infinity;\n  }\n  function d3_geom_voronoiCell(site) {\n    this.site = site;\n    this.edges = [];\n  }\n  d3_geom_voronoiCell.prototype.prepare = function() {\n    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;\n    while (iHalfEdge--) {\n      edge = halfEdges[iHalfEdge].edge;\n      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n    }\n    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n    return halfEdges.length;\n  };\n  function d3_geom_voronoiCloseCells(extent) {\n    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n    while (iCell--) {\n      cell = cells[iCell];\n      if (!cell || !cell.prepare()) continue;\n      halfEdges = cell.edges;\n      nHalfEdges = halfEdges.length;\n      iHalfEdge = 0;\n      while (iHalfEdge < nHalfEdges) {\n        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {\n          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n            x: x0,\n            y: abs(x2 - x0) < ε ? y2 : y1\n          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {\n            x: abs(y2 - y1) < ε ? x2 : x1,\n            y: y1\n          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {\n            x: x1,\n            y: abs(x2 - x1) < ε ? y2 : y0\n          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {\n            x: abs(y2 - y0) < ε ? x2 : x0,\n            y: y0\n          } : null), cell.site, null));\n          ++nHalfEdges;\n        }\n      }\n    }\n  }\n  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n    return b.angle - a.angle;\n  }\n  function d3_geom_voronoiCircle() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.x = this.y = this.arc = this.site = this.cy = null;\n  }\n  function d3_geom_voronoiAttachCircle(arc) {\n    var lArc = arc.P, rArc = arc.N;\n    if (!lArc || !rArc) return;\n    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\n    if (lSite === rSite) return;\n    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -ε2) return;\n    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = cy + Math.sqrt(x * x + y * y);\n    circle.cy = cy;\n    arc.circle = circle;\n    var before = null, node = d3_geom_voronoiCircles._;\n    while (node) {\n      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n        if (node.L) node = node.L; else {\n          before = node.P;\n          break;\n        }\n      } else {\n        if (node.R) node = node.R; else {\n          before = node;\n          break;\n        }\n      }\n    }\n    d3_geom_voronoiCircles.insert(before, circle);\n    if (!before) d3_geom_voronoiFirstCircle = circle;\n  }\n  function d3_geom_voronoiDetachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n      d3_geom_voronoiCircles.remove(circle);\n      d3_geom_voronoiCirclePool.push(circle);\n      d3_geom_voronoiRedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n  function d3_geom_voronoiClipEdges(extent) {\n    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n    while (i--) {\n      e = edges[i];\n      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {\n        e.a = e.b = null;\n        edges.splice(i, 1);\n      }\n    }\n  }\n  function d3_geom_voronoiConnectEdge(edge, extent) {\n    var vb = edge.b;\n    if (vb) return true;\n    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!va) va = {\n          x: fx,\n          y: y0\n        }; else if (va.y >= y1) return;\n        vb = {\n          x: fx,\n          y: y1\n        };\n      } else {\n        if (!va) va = {\n          x: fx,\n          y: y1\n        }; else if (va.y < y0) return;\n        vb = {\n          x: fx,\n          y: y0\n        };\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!va) va = {\n            x: (y0 - fb) / fm,\n            y: y0\n          }; else if (va.y >= y1) return;\n          vb = {\n            x: (y1 - fb) / fm,\n            y: y1\n          };\n        } else {\n          if (!va) va = {\n            x: (y1 - fb) / fm,\n            y: y1\n          }; else if (va.y < y0) return;\n          vb = {\n            x: (y0 - fb) / fm,\n            y: y0\n          };\n        }\n      } else {\n        if (ly < ry) {\n          if (!va) va = {\n            x: x0,\n            y: fm * x0 + fb\n          }; else if (va.x >= x1) return;\n          vb = {\n            x: x1,\n            y: fm * x1 + fb\n          };\n        } else {\n          if (!va) va = {\n            x: x1,\n            y: fm * x1 + fb\n          }; else if (va.x < x0) return;\n          vb = {\n            x: x0,\n            y: fm * x0 + fb\n          };\n        }\n      }\n    }\n    edge.a = va;\n    edge.b = vb;\n    return true;\n  }\n  function d3_geom_voronoiEdge(lSite, rSite) {\n    this.l = lSite;\n    this.r = rSite;\n    this.a = this.b = null;\n  }\n  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n    d3_geom_voronoiEdges.push(edge);\n    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n    return edge;\n  }\n  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, null);\n    edge.a = va;\n    edge.b = vb;\n    d3_geom_voronoiEdges.push(edge);\n    return edge;\n  }\n  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n    if (!edge.a && !edge.b) {\n      edge.a = vertex;\n      edge.l = lSite;\n      edge.r = rSite;\n    } else if (edge.l === rSite) {\n      edge.b = vertex;\n    } else {\n      edge.a = vertex;\n    }\n  }\n  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n    var va = edge.a, vb = edge.b;\n    this.edge = edge;\n    this.site = lSite;\n    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n  }\n  d3_geom_voronoiHalfEdge.prototype = {\n    start: function() {\n      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n    },\n    end: function() {\n      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n    }\n  };\n  function d3_geom_voronoiRedBlackTree() {\n    this._ = null;\n  }\n  function d3_geom_voronoiRedBlackNode(node) {\n    node.U = node.C = node.L = node.R = node.P = node.N = null;\n  }\n  d3_geom_voronoiRedBlackTree.prototype = {\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = d3_geom_voronoiRedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              d3_geom_voronoiRedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n      var parent = node.U, sibling, left = node.L, right = node.R, next, red;\n      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);\n      if (parent) {\n        if (parent.L === node) parent.L = next; else parent.R = next;\n      } else {\n        this._ = next;\n      }\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) {\n        node.C = false;\n        return;\n      }\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n      if (node) node.C = false;\n    }\n  };\n  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n    var p = node, q = node.R, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n    var p = node, q = node.L, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n  function d3_geom_voronoiRedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n  function d3_geom_voronoi(sites, bbox) {\n    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;\n    d3_geom_voronoiEdges = [];\n    d3_geom_voronoiCells = new Array(sites.length);\n    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n    while (true) {\n      circle = d3_geom_voronoiFirstCircle;\n      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {\n        if (site.x !== x0 || site.y !== y0) {\n          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n          d3_geom_voronoiAddBeach(site);\n          x0 = site.x, y0 = site.y;\n        }\n        site = sites.pop();\n      } else if (circle) {\n        d3_geom_voronoiRemoveBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n    var diagram = {\n      cells: d3_geom_voronoiCells,\n      edges: d3_geom_voronoiEdges\n    };\n    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n    return diagram;\n  }\n  function d3_geom_voronoiVertexOrder(a, b) {\n    return b.y - a.y || b.x - a.x;\n  }\n  d3.geom.voronoi = function(points) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;\n    if (points) return voronoi(points);\n    function voronoi(data) {\n      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {\n        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {\n          var s = e.start();\n          return [ s.x, s.y ];\n        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n        polygon.point = data[i];\n      });\n      return polygons;\n    }\n    function sites(data) {\n      return data.map(function(d, i) {\n        return {\n          x: Math.round(fx(d, i) / ε) * ε,\n          y: Math.round(fy(d, i) / ε) * ε,\n          i: i\n        };\n      });\n    }\n    voronoi.links = function(data) {\n      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {\n        return edge.l && edge.r;\n      }).map(function(edge) {\n        return {\n          source: data[edge.l.i],\n          target: data[edge.r.i]\n        };\n      });\n    };\n    voronoi.triangles = function(data) {\n      var triangles = [];\n      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {\n        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n        while (++j < m) {\n          e0 = e1;\n          s0 = s1;\n          e1 = edges[j].edge;\n          s1 = e1.l === site ? e1.r : e1.l;\n          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {\n            triangles.push([ data[i], data[s0.i], data[s1.i] ]);\n          }\n        }\n      });\n      return triangles;\n    };\n    voronoi.x = function(_) {\n      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n    };\n    voronoi.y = function(_) {\n      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n    };\n    voronoi.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n      return voronoi;\n    };\n    voronoi.size = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];\n      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);\n    };\n    return voronoi;\n  };\n  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];\n  function d3_geom_voronoiTriangleArea(a, b, c) {\n    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n  }\n  d3.geom.delaunay = function(vertices) {\n    return d3.geom.voronoi().triangles(vertices);\n  };\n  d3.geom.quadtree = function(points, x1, y1, x2, y2) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, compat;\n    if (compat = arguments.length) {\n      x = d3_geom_quadtreeCompatX;\n      y = d3_geom_quadtreeCompatY;\n      if (compat === 3) {\n        y2 = y1;\n        x2 = x1;\n        y1 = x1 = 0;\n      }\n      return quadtree(points);\n    }\n    function quadtree(data) {\n      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;\n      if (x1 != null) {\n        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n      } else {\n        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n        xs = [], ys = [];\n        n = data.length;\n        if (compat) for (i = 0; i < n; ++i) {\n          d = data[i];\n          if (d.x < x1_) x1_ = d.x;\n          if (d.y < y1_) y1_ = d.y;\n          if (d.x > x2_) x2_ = d.x;\n          if (d.y > y2_) y2_ = d.y;\n          xs.push(d.x);\n          ys.push(d.y);\n        } else for (i = 0; i < n; ++i) {\n          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);\n          if (x_ < x1_) x1_ = x_;\n          if (y_ < y1_) y1_ = y_;\n          if (x_ > x2_) x2_ = x_;\n          if (y_ > y2_) y2_ = y_;\n          xs.push(x_);\n          ys.push(y_);\n        }\n      }\n      var dx = x2_ - x1_, dy = y2_ - y1_;\n      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;\n      function insert(n, d, x, y, x1, y1, x2, y2) {\n        if (isNaN(x) || isNaN(y)) return;\n        if (n.leaf) {\n          var nx = n.x, ny = n.y;\n          if (nx != null) {\n            if (abs(nx - x) + abs(ny - y) < .01) {\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            } else {\n              var nPoint = n.point;\n              n.x = n.y = n.point = null;\n              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            }\n          } else {\n            n.x = x, n.y = y, n.point = d;\n          }\n        } else {\n          insertChild(n, d, x, y, x1, y1, x2, y2);\n        }\n      }\n      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;\n        n.leaf = false;\n        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n        if (right) x1 = xm; else x2 = xm;\n        if (below) y1 = ym; else y2 = ym;\n        insert(n, d, x, y, x1, y1, x2, y2);\n      }\n      var root = d3_geom_quadtreeNode();\n      root.add = function(d) {\n        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n      };\n      root.visit = function(f) {\n        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n      };\n      root.find = function(point) {\n        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n      };\n      i = -1;\n      if (x1 == null) {\n        while (++i < n) {\n          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n        }\n        --i;\n      } else data.forEach(root.add);\n      xs = ys = data = d = null;\n      return root;\n    }\n    quadtree.x = function(_) {\n      return arguments.length ? (x = _, quadtree) : x;\n    };\n    quadtree.y = function(_) {\n      return arguments.length ? (y = _, quadtree) : y;\n    };\n    quadtree.extent = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], \n      y2 = +_[1][1];\n      return quadtree;\n    };\n    quadtree.size = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n      return quadtree;\n    };\n    return quadtree;\n  };\n  function d3_geom_quadtreeCompatX(d) {\n    return d.x;\n  }\n  function d3_geom_quadtreeCompatY(d) {\n    return d.y;\n  }\n  function d3_geom_quadtreeNode() {\n    return {\n      leaf: true,\n      nodes: [],\n      point: null,\n      x: null,\n      y: null\n    };\n  }\n  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n    if (!f(node, x1, y1, x2, y2)) {\n      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;\n      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n    }\n  }\n  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n    var minDistance2 = Infinity, closestPoint;\n    (function find(node, x1, y1, x2, y2) {\n      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\n      if (point = node.point) {\n        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;\n        if (distance2 < minDistance2) {\n          var distance = Math.sqrt(minDistance2 = distance2);\n          x0 = x - distance, y0 = y - distance;\n          x3 = x + distance, y3 = y + distance;\n          closestPoint = point;\n        }\n      }\n      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;\n      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {\n        if (node = children[i & 3]) switch (i & 3) {\n         case 0:\n          find(node, x1, y1, xm, ym);\n          break;\n\n         case 1:\n          find(node, xm, y1, x2, ym);\n          break;\n\n         case 2:\n          find(node, x1, ym, xm, y2);\n          break;\n\n         case 3:\n          find(node, xm, ym, x2, y2);\n          break;\n        }\n      }\n    })(root, x0, y0, x3, y3);\n    return closestPoint;\n  }\n  d3.interpolateRgb = d3_interpolateRgb;\n  function d3_interpolateRgb(a, b) {\n    a = d3.rgb(a);\n    b = d3.rgb(b);\n    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;\n    return function(t) {\n      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n    };\n  }\n  d3.interpolateObject = d3_interpolateObject;\n  function d3_interpolateObject(a, b) {\n    var i = {}, c = {}, k;\n    for (k in a) {\n      if (k in b) {\n        i[k] = d3_interpolate(a[k], b[k]);\n      } else {\n        c[k] = a[k];\n      }\n    }\n    for (k in b) {\n      if (!(k in a)) {\n        c[k] = b[k];\n      }\n    }\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n  d3.interpolateNumber = d3_interpolateNumber;\n  function d3_interpolateNumber(a, b) {\n    a = +a, b = +b;\n    return function(t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n  d3.interpolateString = d3_interpolateString;\n  function d3_interpolateString(a, b) {\n    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n    a = a + \"\", b = b + \"\";\n    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) {\n        if (s[i]) s[i] += bm; else s[++i] = bm;\n      } else {\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: d3_interpolateNumber(am, bm)\n        });\n      }\n      bi = d3_interpolate_numberB.lastIndex;\n    }\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; else s[++i] = bs;\n    }\n    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {\n      return b(t) + \"\";\n    }) : function() {\n      return b;\n    } : (b = q.length, function(t) {\n      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    });\n  }\n  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \"g\");\n  d3.interpolate = d3_interpolate;\n  function d3_interpolate(a, b) {\n    var i = d3.interpolators.length, f;\n    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;\n    return f;\n  }\n  d3.interpolators = [ function(a, b) {\n    var t = typeof b;\n    return (t === \"string\" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\\(|hsl\\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \"object\" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n  } ];\n  d3.interpolateArray = d3_interpolateArray;\n  function d3_interpolateArray(a, b) {\n    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;\n    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));\n    for (;i < na; ++i) c[i] = a[i];\n    for (;i < nb; ++i) c[i] = b[i];\n    return function(t) {\n      for (i = 0; i < n0; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n  var d3_ease_default = function() {\n    return d3_identity;\n  };\n  var d3_ease = d3.map({\n    linear: d3_ease_default,\n    poly: d3_ease_poly,\n    quad: function() {\n      return d3_ease_quad;\n    },\n    cubic: function() {\n      return d3_ease_cubic;\n    },\n    sin: function() {\n      return d3_ease_sin;\n    },\n    exp: function() {\n      return d3_ease_exp;\n    },\n    circle: function() {\n      return d3_ease_circle;\n    },\n    elastic: d3_ease_elastic,\n    back: d3_ease_back,\n    bounce: function() {\n      return d3_ease_bounce;\n    }\n  });\n  var d3_ease_mode = d3.map({\n    \"in\": d3_identity,\n    out: d3_ease_reverse,\n    \"in-out\": d3_ease_reflect,\n    \"out-in\": function(f) {\n      return d3_ease_reflect(d3_ease_reverse(f));\n    }\n  });\n  d3.ease = function(name) {\n    var i = name.indexOf(\"-\"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : \"in\";\n    t = d3_ease.get(t) || d3_ease_default;\n    m = d3_ease_mode.get(m) || d3_identity;\n    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n  };\n  function d3_ease_clamp(f) {\n    return function(t) {\n      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);\n    };\n  }\n  function d3_ease_reverse(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n  function d3_ease_reflect(f) {\n    return function(t) {\n      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n    };\n  }\n  function d3_ease_quad(t) {\n    return t * t;\n  }\n  function d3_ease_cubic(t) {\n    return t * t * t;\n  }\n  function d3_ease_cubicInOut(t) {\n    if (t <= 0) return 0;\n    if (t >= 1) return 1;\n    var t2 = t * t, t3 = t2 * t;\n    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n  }\n  function d3_ease_poly(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n  function d3_ease_sin(t) {\n    return 1 - Math.cos(t * halfπ);\n  }\n  function d3_ease_exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  function d3_ease_circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  function d3_ease_elastic(a, p) {\n    var s;\n    if (arguments.length < 2) p = .45;\n    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n    };\n  }\n  function d3_ease_back(s) {\n    if (!s) s = 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n  function d3_ease_bounce(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }\n  d3.interpolateHcl = d3_interpolateHcl;\n  function d3_interpolateHcl(a, b) {\n    a = d3.hcl(a);\n    b = d3.hcl(b);\n    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;\n    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateHsl = d3_interpolateHsl;\n  function d3_interpolateHsl(a, b) {\n    a = d3.hsl(a);\n    b = d3.hsl(b);\n    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;\n    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateLab = d3_interpolateLab;\n  function d3_interpolateLab(a, b) {\n    a = d3.lab(a);\n    b = d3.lab(b);\n    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;\n    return function(t) {\n      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";\n    };\n  }\n  d3.interpolateRound = d3_interpolateRound;\n  function d3_interpolateRound(a, b) {\n    b -= a;\n    return function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n  d3.transform = function(string) {\n    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");\n    return (d3.transform = function(string) {\n      if (string != null) {\n        g.setAttribute(\"transform\", string);\n        var t = g.transform.baseVal.consolidate();\n      }\n      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n    })(string);\n  };\n  function d3_transform(m) {\n    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n    if (r0[0] * r1[1] < r1[0] * r0[1]) {\n      r0[0] *= -1;\n      r0[1] *= -1;\n      kx *= -1;\n      kz *= -1;\n    }\n    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n    this.translate = [ m.e, m.f ];\n    this.scale = [ kx, ky ];\n    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n  }\n  d3_transform.prototype.toString = function() {\n    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n  };\n  function d3_transformDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n  function d3_transformNormalize(a) {\n    var k = Math.sqrt(d3_transformDot(a, a));\n    if (k) {\n      a[0] /= k;\n      a[1] /= k;\n    }\n    return k;\n  }\n  function d3_transformCombine(a, b, k) {\n    a[0] += k * b[0];\n    a[1] += k * b[1];\n    return a;\n  }\n  var d3_transformIdentity = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0\n  };\n  d3.interpolateTransform = d3_interpolateTransform;\n  function d3_interpolateTransformPop(s) {\n    return s.length ? s.pop() + \",\" : \"\";\n  }\n  function d3_interpolateTranslate(ta, tb, s, q) {\n    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {\n      var i = s.push(\"translate(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ta[0], tb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ta[1], tb[1])\n      });\n    } else if (tb[0] || tb[1]) {\n      s.push(\"translate(\" + tb + \")\");\n    }\n  }\n  function d3_interpolateRotate(ra, rb, s, q) {\n    if (ra !== rb) {\n      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"rotate(\", null, \")\") - 2,\n        x: d3_interpolateNumber(ra, rb)\n      });\n    } else if (rb) {\n      s.push(d3_interpolateTransformPop(s) + \"rotate(\" + rb + \")\");\n    }\n  }\n  function d3_interpolateSkew(wa, wb, s, q) {\n    if (wa !== wb) {\n      q.push({\n        i: s.push(d3_interpolateTransformPop(s) + \"skewX(\", null, \")\") - 2,\n        x: d3_interpolateNumber(wa, wb)\n      });\n    } else if (wb) {\n      s.push(d3_interpolateTransformPop(s) + \"skewX(\" + wb + \")\");\n    }\n  }\n  function d3_interpolateScale(ka, kb, s, q) {\n    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {\n      var i = s.push(d3_interpolateTransformPop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({\n        i: i - 4,\n        x: d3_interpolateNumber(ka[0], kb[0])\n      }, {\n        i: i - 2,\n        x: d3_interpolateNumber(ka[1], kb[1])\n      });\n    } else if (kb[0] !== 1 || kb[1] !== 1) {\n      s.push(d3_interpolateTransformPop(s) + \"scale(\" + kb + \")\");\n    }\n  }\n  function d3_interpolateTransform(a, b) {\n    var s = [], q = [];\n    a = d3.transform(a), b = d3.transform(b);\n    d3_interpolateTranslate(a.translate, b.translate, s, q);\n    d3_interpolateRotate(a.rotate, b.rotate, s, q);\n    d3_interpolateSkew(a.skew, b.skew, s, q);\n    d3_interpolateScale(a.scale, b.scale, s, q);\n    a = b = null;\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  }\n  function d3_uninterpolateNumber(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return (x - a) / b;\n    };\n  }\n  function d3_uninterpolateClamp(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return Math.max(0, Math.min(1, (x - a) / b));\n    };\n  }\n  d3.layout = {};\n  d3.layout.bundle = function() {\n    return function(links) {\n      var paths = [], i = -1, n = links.length;\n      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));\n      return paths;\n    };\n  };\n  function d3_layout_bundlePath(link) {\n    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n    while (start !== lca) {\n      start = start.parent;\n      points.push(start);\n    }\n    var k = points.length;\n    while (end !== lca) {\n      points.splice(k, 0, end);\n      end = end.parent;\n    }\n    return points;\n  }\n  function d3_layout_bundleAncestors(node) {\n    var ancestors = [], parent = node.parent;\n    while (parent != null) {\n      ancestors.push(node);\n      node = parent;\n      parent = parent.parent;\n    }\n    ancestors.push(node);\n    return ancestors;\n  }\n  function d3_layout_bundleLeastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n    while (aNode === bNode) {\n      sharedNode = aNode;\n      aNode = aNodes.pop();\n      bNode = bNodes.pop();\n    }\n    return sharedNode;\n  }\n  d3.layout.chord = function() {\n    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n    function relayout() {\n      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n      chords = [];\n      groups = [];\n      k = 0, i = -1;\n      while (++i < n) {\n        x = 0, j = -1;\n        while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(d3.range(n));\n        k += x;\n      }\n      if (sortGroups) {\n        groupIndex.sort(function(a, b) {\n          return sortGroups(groupSums[a], groupSums[b]);\n        });\n      }\n      if (sortSubgroups) {\n        subgroupIndex.forEach(function(d, i) {\n          d.sort(function(a, b) {\n            return sortSubgroups(matrix[i][a], matrix[i][b]);\n          });\n        });\n      }\n      k = (τ - padding * n) / k;\n      x = 0, i = -1;\n      while (++i < n) {\n        x0 = x, j = -1;\n        while (++j < n) {\n          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;\n          subgroups[di + \"-\" + dj] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: groupSums[di]\n        };\n        x += padding;\n      }\n      i = -1;\n      while (++i < n) {\n        j = i - 1;\n        while (++j < n) {\n          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value ? {\n              source: target,\n              target: source\n            } : {\n              source: source,\n              target: target\n            });\n          }\n        }\n      }\n      if (sortChords) resort();\n    }\n    function resort() {\n      chords.sort(function(a, b) {\n        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n      });\n    }\n    chord.matrix = function(x) {\n      if (!arguments.length) return matrix;\n      n = (matrix = x) && matrix.length;\n      chords = groups = null;\n      return chord;\n    };\n    chord.padding = function(x) {\n      if (!arguments.length) return padding;\n      padding = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortGroups = function(x) {\n      if (!arguments.length) return sortGroups;\n      sortGroups = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortSubgroups = function(x) {\n      if (!arguments.length) return sortSubgroups;\n      sortSubgroups = x;\n      chords = null;\n      return chord;\n    };\n    chord.sortChords = function(x) {\n      if (!arguments.length) return sortChords;\n      sortChords = x;\n      if (chords) resort();\n      return chord;\n    };\n    chord.chords = function() {\n      if (!chords) relayout();\n      return chords;\n    };\n    chord.groups = function() {\n      if (!groups) relayout();\n      return groups;\n    };\n    return chord;\n  };\n  d3.layout.force = function() {\n    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n    function repulse(node) {\n      return function(quad, x1, _, x2) {\n        if (quad.point !== node) {\n          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;\n          if (dw * dw / theta2 < dn) {\n            if (dn < chargeDistance2) {\n              var k = quad.charge / dn;\n              node.px -= dx * k;\n              node.py -= dy * k;\n            }\n            return true;\n          }\n          if (quad.point && dn && dn < chargeDistance2) {\n            var k = quad.pointCharge / dn;\n            node.px -= dx * k;\n            node.py -= dy * k;\n          }\n        }\n        return !quad.charge;\n      };\n    }\n    force.tick = function() {\n      if ((alpha *= .99) < .005) {\n        timer = null;\n        event.end({\n          type: \"end\",\n          alpha: alpha = 0\n        });\n        return true;\n      }\n      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        s = o.source;\n        t = o.target;\n        x = t.x - s.x;\n        y = t.y - s.y;\n        if (l = x * x + y * y) {\n          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n          x *= l;\n          y *= l;\n          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);\n          t.y -= y * k;\n          s.x += x * (k = 1 - k);\n          s.y += y * k;\n        }\n      }\n      if (k = alpha * gravity) {\n        x = size[0] / 2;\n        y = size[1] / 2;\n        i = -1;\n        if (k) while (++i < n) {\n          o = nodes[i];\n          o.x += (x - o.x) * k;\n          o.y += (y - o.y) * k;\n        }\n      }\n      if (charge) {\n        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n        i = -1;\n        while (++i < n) {\n          if (!(o = nodes[i]).fixed) {\n            q.visit(repulse(o));\n          }\n        }\n      }\n      i = -1;\n      while (++i < n) {\n        o = nodes[i];\n        if (o.fixed) {\n          o.x = o.px;\n          o.y = o.py;\n        } else {\n          o.x -= (o.px - (o.px = o.x)) * friction;\n          o.y -= (o.py - (o.py = o.y)) * friction;\n        }\n      }\n      event.tick({\n        type: \"tick\",\n        alpha: alpha\n      });\n    };\n    force.nodes = function(x) {\n      if (!arguments.length) return nodes;\n      nodes = x;\n      return force;\n    };\n    force.links = function(x) {\n      if (!arguments.length) return links;\n      links = x;\n      return force;\n    };\n    force.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return force;\n    };\n    force.linkDistance = function(x) {\n      if (!arguments.length) return linkDistance;\n      linkDistance = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.distance = force.linkDistance;\n    force.linkStrength = function(x) {\n      if (!arguments.length) return linkStrength;\n      linkStrength = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.friction = function(x) {\n      if (!arguments.length) return friction;\n      friction = +x;\n      return force;\n    };\n    force.charge = function(x) {\n      if (!arguments.length) return charge;\n      charge = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.chargeDistance = function(x) {\n      if (!arguments.length) return Math.sqrt(chargeDistance2);\n      chargeDistance2 = x * x;\n      return force;\n    };\n    force.gravity = function(x) {\n      if (!arguments.length) return gravity;\n      gravity = +x;\n      return force;\n    };\n    force.theta = function(x) {\n      if (!arguments.length) return Math.sqrt(theta2);\n      theta2 = x * x;\n      return force;\n    };\n    force.alpha = function(x) {\n      if (!arguments.length) return alpha;\n      x = +x;\n      if (alpha) {\n        if (x > 0) {\n          alpha = x;\n        } else {\n          timer.c = null, timer.t = NaN, timer = null;\n          event.end({\n            type: \"end\",\n            alpha: alpha = 0\n          });\n        }\n      } else if (x > 0) {\n        event.start({\n          type: \"start\",\n          alpha: alpha = x\n        });\n        timer = d3_timer(force.tick);\n      }\n      return force;\n    };\n    force.start = function() {\n      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;\n      for (i = 0; i < n; ++i) {\n        (o = nodes[i]).index = i;\n        o.weight = 0;\n      }\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        if (typeof o.source == \"number\") o.source = nodes[o.source];\n        if (typeof o.target == \"number\") o.target = nodes[o.target];\n        ++o.source.weight;\n        ++o.target.weight;\n      }\n      for (i = 0; i < n; ++i) {\n        o = nodes[i];\n        if (isNaN(o.x)) o.x = position(\"x\", w);\n        if (isNaN(o.y)) o.y = position(\"y\", h);\n        if (isNaN(o.px)) o.px = o.x;\n        if (isNaN(o.py)) o.py = o.y;\n      }\n      distances = [];\n      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n      strengths = [];\n      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n      charges = [];\n      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n      function position(dimension, size) {\n        if (!neighbors) {\n          neighbors = new Array(n);\n          for (j = 0; j < n; ++j) {\n            neighbors[j] = [];\n          }\n          for (j = 0; j < m; ++j) {\n            var o = links[j];\n            neighbors[o.source.index].push(o.target);\n            neighbors[o.target.index].push(o.source);\n          }\n        }\n        var candidates = neighbors[i], j = -1, l = candidates.length, x;\n        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;\n        return Math.random() * size;\n      }\n      return force.resume();\n    };\n    force.resume = function() {\n      return force.alpha(.1);\n    };\n    force.stop = function() {\n      return force.alpha(0);\n    };\n    force.drag = function() {\n      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n      if (!arguments.length) return drag;\n      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);\n    };\n    function dragmove(d) {\n      d.px = d3.event.x, d.py = d3.event.y;\n      force.resume();\n    }\n    return d3.rebind(force, event, \"on\");\n  };\n  function d3_layout_forceDragstart(d) {\n    d.fixed |= 2;\n  }\n  function d3_layout_forceDragend(d) {\n    d.fixed &= ~6;\n  }\n  function d3_layout_forceMouseover(d) {\n    d.fixed |= 4;\n    d.px = d.x, d.py = d.y;\n  }\n  function d3_layout_forceMouseout(d) {\n    d.fixed &= ~4;\n  }\n  function d3_layout_forceAccumulate(quad, alpha, charges) {\n    var cx = 0, cy = 0;\n    quad.charge = 0;\n    if (!quad.leaf) {\n      var nodes = quad.nodes, n = nodes.length, i = -1, c;\n      while (++i < n) {\n        c = nodes[i];\n        if (c == null) continue;\n        d3_layout_forceAccumulate(c, alpha, charges);\n        quad.charge += c.charge;\n        cx += c.charge * c.cx;\n        cy += c.charge * c.cy;\n      }\n    }\n    if (quad.point) {\n      if (!quad.leaf) {\n        quad.point.x += Math.random() - .5;\n        quad.point.y += Math.random() - .5;\n      }\n      var k = alpha * charges[quad.point.index];\n      quad.charge += quad.pointCharge = k;\n      cx += k * quad.point.x;\n      cy += k * quad.point.y;\n    }\n    quad.cx = cx / quad.charge;\n    quad.cy = cy / quad.charge;\n  }\n  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;\n  d3.layout.hierarchy = function() {\n    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;\n    function hierarchy(root) {\n      var stack = [ root ], nodes = [], node;\n      root.depth = 0;\n      while ((node = stack.pop()) != null) {\n        nodes.push(node);\n        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {\n          var n, childs, child;\n          while (--n >= 0) {\n            stack.push(child = childs[n]);\n            child.parent = node;\n            child.depth = node.depth + 1;\n          }\n          if (value) node.value = 0;\n          node.children = childs;\n        } else {\n          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          delete node.children;\n        }\n      }\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var childs, parent;\n        if (sort && (childs = node.children)) childs.sort(sort);\n        if (value && (parent = node.parent)) parent.value += node.value;\n      });\n      return nodes;\n    }\n    hierarchy.sort = function(x) {\n      if (!arguments.length) return sort;\n      sort = x;\n      return hierarchy;\n    };\n    hierarchy.children = function(x) {\n      if (!arguments.length) return children;\n      children = x;\n      return hierarchy;\n    };\n    hierarchy.value = function(x) {\n      if (!arguments.length) return value;\n      value = x;\n      return hierarchy;\n    };\n    hierarchy.revalue = function(root) {\n      if (value) {\n        d3_layout_hierarchyVisitBefore(root, function(node) {\n          if (node.children) node.value = 0;\n        });\n        d3_layout_hierarchyVisitAfter(root, function(node) {\n          var parent;\n          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          if (parent = node.parent) parent.value += node.value;\n        });\n      }\n      return root;\n    };\n    return hierarchy;\n  };\n  function d3_layout_hierarchyRebind(object, hierarchy) {\n    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");\n    object.nodes = object;\n    object.links = d3_layout_hierarchyLinks;\n    return object;\n  }\n  function d3_layout_hierarchyVisitBefore(node, callback) {\n    var nodes = [ node ];\n    while ((node = nodes.pop()) != null) {\n      callback(node);\n      if ((children = node.children) && (n = children.length)) {\n        var n, children;\n        while (--n >= 0) nodes.push(children[n]);\n      }\n    }\n  }\n  function d3_layout_hierarchyVisitAfter(node, callback) {\n    var nodes = [ node ], nodes2 = [];\n    while ((node = nodes.pop()) != null) {\n      nodes2.push(node);\n      if ((children = node.children) && (n = children.length)) {\n        var i = -1, n, children;\n        while (++i < n) nodes.push(children[i]);\n      }\n    }\n    while ((node = nodes2.pop()) != null) {\n      callback(node);\n    }\n  }\n  function d3_layout_hierarchyChildren(d) {\n    return d.children;\n  }\n  function d3_layout_hierarchyValue(d) {\n    return d.value;\n  }\n  function d3_layout_hierarchySort(a, b) {\n    return b.value - a.value;\n  }\n  function d3_layout_hierarchyLinks(nodes) {\n    return d3.merge(nodes.map(function(parent) {\n      return (parent.children || []).map(function(child) {\n        return {\n          source: parent,\n          target: child\n        };\n      });\n    }));\n  }\n  d3.layout.partition = function() {\n    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];\n    function position(node, x, dx, dy) {\n      var children = node.children;\n      node.x = x;\n      node.y = node.depth * dy;\n      node.dx = dx;\n      node.dy = dy;\n      if (children && (n = children.length)) {\n        var i = -1, n, c, d;\n        dx = node.value ? dx / node.value : 0;\n        while (++i < n) {\n          position(c = children[i], x, d = c.value * dx, dy);\n          x += d;\n        }\n      }\n    }\n    function depth(node) {\n      var children = node.children, d = 0;\n      if (children && (n = children.length)) {\n        var i = -1, n;\n        while (++i < n) d = Math.max(d, depth(children[i]));\n      }\n      return 1 + d;\n    }\n    function partition(d, i) {\n      var nodes = hierarchy.call(this, d, i);\n      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n      return nodes;\n    }\n    partition.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return partition;\n    };\n    return d3_layout_hierarchyRebind(partition, hierarchy);\n  };\n  d3.layout.pie = function() {\n    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;\n    function pie(data) {\n      var n = data.length, values = data.map(function(d, i) {\n        return +value.call(pie, d, i);\n      }), a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \"function\" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;\n      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {\n        return values[j] - values[i];\n      } : function(i, j) {\n        return sort(data[i], data[j]);\n      });\n      index.forEach(function(i) {\n        arcs[i] = {\n          data: data[i],\n          value: v = values[i],\n          startAngle: a,\n          endAngle: a += v * k + pa,\n          padAngle: p\n        };\n      });\n      return arcs;\n    }\n    pie.value = function(_) {\n      if (!arguments.length) return value;\n      value = _;\n      return pie;\n    };\n    pie.sort = function(_) {\n      if (!arguments.length) return sort;\n      sort = _;\n      return pie;\n    };\n    pie.startAngle = function(_) {\n      if (!arguments.length) return startAngle;\n      startAngle = _;\n      return pie;\n    };\n    pie.endAngle = function(_) {\n      if (!arguments.length) return endAngle;\n      endAngle = _;\n      return pie;\n    };\n    pie.padAngle = function(_) {\n      if (!arguments.length) return padAngle;\n      padAngle = _;\n      return pie;\n    };\n    return pie;\n  };\n  var d3_layout_pieSortByValue = {};\n  d3.layout.stack = function() {\n    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n    function stack(data, index) {\n      if (!(n = data.length)) return data;\n      var series = data.map(function(d, i) {\n        return values.call(stack, d, i);\n      });\n      var points = series.map(function(d) {\n        return d.map(function(v, i) {\n          return [ x.call(stack, v, i), y.call(stack, v, i) ];\n        });\n      });\n      var orders = order.call(stack, points, index);\n      series = d3.permute(series, orders);\n      points = d3.permute(points, orders);\n      var offsets = offset.call(stack, points, index);\n      var m = series[0].length, n, i, j, o;\n      for (j = 0; j < m; ++j) {\n        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n        for (i = 1; i < n; ++i) {\n          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n        }\n      }\n      return data;\n    }\n    stack.values = function(x) {\n      if (!arguments.length) return values;\n      values = x;\n      return stack;\n    };\n    stack.order = function(x) {\n      if (!arguments.length) return order;\n      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n      return stack;\n    };\n    stack.offset = function(x) {\n      if (!arguments.length) return offset;\n      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n      return stack;\n    };\n    stack.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      return stack;\n    };\n    stack.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      return stack;\n    };\n    stack.out = function(z) {\n      if (!arguments.length) return out;\n      out = z;\n      return stack;\n    };\n    return stack;\n  };\n  function d3_layout_stackX(d) {\n    return d.x;\n  }\n  function d3_layout_stackY(d) {\n    return d.y;\n  }\n  function d3_layout_stackOut(d, y0, y) {\n    d.y0 = y0;\n    d.y = y;\n  }\n  var d3_layout_stackOrders = d3.map({\n    \"inside-out\": function(data) {\n      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n        return max[a] - max[b];\n      }), top = 0, bottom = 0, tops = [], bottoms = [];\n      for (i = 0; i < n; ++i) {\n        j = index[i];\n        if (top < bottom) {\n          top += sums[j];\n          tops.push(j);\n        } else {\n          bottom += sums[j];\n          bottoms.push(j);\n        }\n      }\n      return bottoms.reverse().concat(tops);\n    },\n    reverse: function(data) {\n      return d3.range(data.length).reverse();\n    },\n    \"default\": d3_layout_stackOrderDefault\n  });\n  var d3_layout_stackOffsets = d3.map({\n    silhouette: function(data) {\n      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o > max) max = o;\n        sums.push(o);\n      }\n      for (j = 0; j < m; ++j) {\n        y0[j] = (max - sums[j]) / 2;\n      }\n      return y0;\n    },\n    wiggle: function(data) {\n      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];\n      y0[0] = o = o0 = 0;\n      for (j = 1; j < m; ++j) {\n        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];\n        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {\n          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {\n            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n          }\n          s2 += s3 * data[i][j][1];\n        }\n        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n        if (o < o0) o0 = o;\n      }\n      for (j = 0; j < m; ++j) y0[j] -= o0;\n      return y0;\n    },\n    expand: function(data) {\n      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;\n      }\n      for (j = 0; j < m; ++j) y0[j] = 0;\n      return y0;\n    },\n    zero: d3_layout_stackOffsetZero\n  });\n  function d3_layout_stackOrderDefault(data) {\n    return d3.range(data.length);\n  }\n  function d3_layout_stackOffsetZero(data) {\n    var j = -1, m = data[0].length, y0 = [];\n    while (++j < m) y0[j] = 0;\n    return y0;\n  }\n  function d3_layout_stackMaxIndex(array) {\n    var i = 1, j = 0, v = array[0][1], k, n = array.length;\n    for (;i < n; ++i) {\n      if ((k = array[i][1]) > v) {\n        j = i;\n        v = k;\n      }\n    }\n    return j;\n  }\n  function d3_layout_stackReduceSum(d) {\n    return d.reduce(d3_layout_stackSum, 0);\n  }\n  function d3_layout_stackSum(p, d) {\n    return p + d[1];\n  }\n  d3.layout.histogram = function() {\n    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;\n    function histogram(data, i) {\n      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n      while (++i < m) {\n        bin = bins[i] = [];\n        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n        bin.y = 0;\n      }\n      if (m > 0) {\n        i = -1;\n        while (++i < n) {\n          x = values[i];\n          if (x >= range[0] && x <= range[1]) {\n            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n            bin.y += k;\n            bin.push(data[i]);\n          }\n        }\n      }\n      return bins;\n    }\n    histogram.value = function(x) {\n      if (!arguments.length) return valuer;\n      valuer = x;\n      return histogram;\n    };\n    histogram.range = function(x) {\n      if (!arguments.length) return ranger;\n      ranger = d3_functor(x);\n      return histogram;\n    };\n    histogram.bins = function(x) {\n      if (!arguments.length) return binner;\n      binner = typeof x === \"number\" ? function(range) {\n        return d3_layout_histogramBinFixed(range, x);\n      } : d3_functor(x);\n      return histogram;\n    };\n    histogram.frequency = function(x) {\n      if (!arguments.length) return frequency;\n      frequency = !!x;\n      return histogram;\n    };\n    return histogram;\n  };\n  function d3_layout_histogramBinSturges(range, values) {\n    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n  }\n  function d3_layout_histogramBinFixed(range, n) {\n    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];\n    while (++x <= n) f[x] = m * x + b;\n    return f;\n  }\n  function d3_layout_histogramRange(values) {\n    return [ d3.min(values), d3.max(values) ];\n  }\n  d3.layout.pack = function() {\n    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;\n    function pack(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \"function\" ? radius : function() {\n        return radius;\n      };\n      root.x = root.y = 0;\n      d3_layout_hierarchyVisitAfter(root, function(d) {\n        d.r = +r(d.value);\n      });\n      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n      if (padding) {\n        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r += dr;\n        });\n        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r -= dr;\n        });\n      }\n      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n      return nodes;\n    }\n    pack.size = function(_) {\n      if (!arguments.length) return size;\n      size = _;\n      return pack;\n    };\n    pack.radius = function(_) {\n      if (!arguments.length) return radius;\n      radius = _ == null || typeof _ === \"function\" ? _ : +_;\n      return pack;\n    };\n    pack.padding = function(_) {\n      if (!arguments.length) return padding;\n      padding = +_;\n      return pack;\n    };\n    return d3_layout_hierarchyRebind(pack, hierarchy);\n  };\n  function d3_layout_packSort(a, b) {\n    return a.value - b.value;\n  }\n  function d3_layout_packInsert(a, b) {\n    var c = a._pack_next;\n    a._pack_next = b;\n    b._pack_prev = a;\n    b._pack_next = c;\n    c._pack_prev = b;\n  }\n  function d3_layout_packSplice(a, b) {\n    a._pack_next = b;\n    b._pack_prev = a;\n  }\n  function d3_layout_packIntersects(a, b) {\n    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;\n    return .999 * dr * dr > dx * dx + dy * dy;\n  }\n  function d3_layout_packSiblings(node) {\n    if (!(nodes = node.children) || !(n = nodes.length)) return;\n    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;\n    function bound(node) {\n      xMin = Math.min(node.x - node.r, xMin);\n      xMax = Math.max(node.x + node.r, xMax);\n      yMin = Math.min(node.y - node.r, yMin);\n      yMax = Math.max(node.y + node.r, yMax);\n    }\n    nodes.forEach(d3_layout_packLink);\n    a = nodes[0];\n    a.x = -a.r;\n    a.y = 0;\n    bound(a);\n    if (n > 1) {\n      b = nodes[1];\n      b.x = b.r;\n      b.y = 0;\n      bound(b);\n      if (n > 2) {\n        c = nodes[2];\n        d3_layout_packPlace(a, b, c);\n        bound(c);\n        d3_layout_packInsert(a, c);\n        a._pack_prev = c;\n        d3_layout_packInsert(c, b);\n        b = a._pack_next;\n        for (i = 3; i < n; i++) {\n          d3_layout_packPlace(a, b, c = nodes[i]);\n          var isect = 0, s1 = 1, s2 = 1;\n          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n            if (d3_layout_packIntersects(j, c)) {\n              isect = 1;\n              break;\n            }\n          }\n          if (isect == 1) {\n            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n              if (d3_layout_packIntersects(k, c)) {\n                break;\n              }\n            }\n          }\n          if (isect) {\n            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);\n            i--;\n          } else {\n            d3_layout_packInsert(a, c);\n            b = c;\n            bound(c);\n          }\n        }\n      }\n    }\n    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;\n    for (i = 0; i < n; i++) {\n      c = nodes[i];\n      c.x -= cx;\n      c.y -= cy;\n      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n    }\n    node.r = cr;\n    nodes.forEach(d3_layout_packUnlink);\n  }\n  function d3_layout_packLink(node) {\n    node._pack_next = node._pack_prev = node;\n  }\n  function d3_layout_packUnlink(node) {\n    delete node._pack_next;\n    delete node._pack_prev;\n  }\n  function d3_layout_packTransform(node, x, y, k) {\n    var children = node.children;\n    node.x = x += k * node.x;\n    node.y = y += k * node.y;\n    node.r *= k;\n    if (children) {\n      var i = -1, n = children.length;\n      while (++i < n) d3_layout_packTransform(children[i], x, y, k);\n    }\n  }\n  function d3_layout_packPlace(a, b, c) {\n    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;\n    if (db && (dx || dy)) {\n      var da = b.r + c.r, dc = dx * dx + dy * dy;\n      da *= da;\n      db *= db;\n      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = a.x + x * dx + y * dy;\n      c.y = a.y + x * dy - y * dx;\n    } else {\n      c.x = a.x + db;\n      c.y = a.y;\n    }\n  }\n  d3.layout.tree = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n    function tree(d, i) {\n      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);\n      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {\n        var left = root0, right = root0, bottom = root0;\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n      return nodes;\n    }\n    function wrapTree(root0) {\n      var root1 = {\n        A: null,\n        children: [ root0 ]\n      }, queue = [ root1 ], node1;\n      while ((node1 = queue.pop()) != null) {\n        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {\n          queue.push((children[i] = child = {\n            _: children[i],\n            parent: node1,\n            children: (child = children[i].children) && child.slice() || [],\n            A: null,\n            a: null,\n            z: 0,\n            m: 0,\n            c: 0,\n            s: 0,\n            t: null,\n            i: i\n          }).a = child);\n        }\n      }\n      return root1.children[0];\n    }\n    function firstWalk(v) {\n      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;\n      if (children.length) {\n        d3_layout_treeShift(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {\n          vom = d3_layout_treeLeft(vom);\n          vop = d3_layout_treeRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !d3_layout_treeRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !d3_layout_treeLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n    function sizeNode(node) {\n      node.x *= size[0];\n      node.y = node.depth * size[1];\n    }\n    tree.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return tree;\n    };\n    tree.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null ? sizeNode : null;\n      return tree;\n    };\n    tree.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) == null ? null : sizeNode;\n      return tree;\n    };\n    return d3_layout_hierarchyRebind(tree, hierarchy);\n  };\n  function d3_layout_treeSeparation(a, b) {\n    return a.parent == b.parent ? 1 : 2;\n  }\n  function d3_layout_treeLeft(v) {\n    var children = v.children;\n    return children.length ? children[0] : v.t;\n  }\n  function d3_layout_treeRight(v) {\n    var children = v.children, n;\n    return (n = children.length) ? children[n - 1] : v.t;\n  }\n  function d3_layout_treeMove(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n  function d3_layout_treeShift(v) {\n    var shift = 0, change = 0, children = v.children, i = children.length, w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n  function d3_layout_treeAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n  d3.layout.cluster = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n    function cluster(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var children = node.children;\n        if (children && children.length) {\n          node.x = d3_layout_clusterX(children);\n          node.y = d3_layout_clusterY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {\n        node.x = (node.x - root.x) * size[0];\n        node.y = (root.y - node.y) * size[1];\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * size[0];\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n      });\n      return nodes;\n    }\n    cluster.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return cluster;\n    };\n    cluster.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null;\n      return cluster;\n    };\n    cluster.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) != null;\n      return cluster;\n    };\n    return d3_layout_hierarchyRebind(cluster, hierarchy);\n  };\n  function d3_layout_clusterY(children) {\n    return 1 + d3.max(children, function(child) {\n      return child.y;\n    });\n  }\n  function d3_layout_clusterX(children) {\n    return children.reduce(function(x, child) {\n      return x + child.x;\n    }, 0) / children.length;\n  }\n  function d3_layout_clusterLeft(node) {\n    var children = node.children;\n    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;\n  }\n  function d3_layout_clusterRight(node) {\n    var children = node.children, n;\n    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n  }\n  d3.layout.treemap = function() {\n    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n    function scale(children, k) {\n      var i = -1, n = children.length, child, area;\n      while (++i < n) {\n        area = (child = children[i]).value * (k < 0 ? 0 : k);\n        child.area = isNaN(area) || area <= 0 ? 0 : area;\n      }\n    }\n    function squarify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while ((n = remaining.length) > 0) {\n          row.push(child = remaining[n - 1]);\n          row.area += child.area;\n          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {\n            remaining.pop();\n            best = score;\n          } else {\n            row.area -= row.pop().area;\n            position(row, u, rect, false);\n            u = Math.min(rect.dx, rect.dy);\n            row.length = row.area = 0;\n            best = Infinity;\n          }\n        }\n        if (row.length) {\n          position(row, u, rect, true);\n          row.length = row.area = 0;\n        }\n        children.forEach(squarify);\n      }\n    }\n    function stickify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), remaining = children.slice(), child, row = [];\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while (child = remaining.pop()) {\n          row.push(child);\n          row.area += child.area;\n          if (child.z != null) {\n            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n            row.length = row.area = 0;\n          }\n        }\n        children.forEach(stickify);\n      }\n    }\n    function worst(row, u) {\n      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;\n      while (++i < n) {\n        if (!(r = row[i].area)) continue;\n        if (r < rmin) rmin = r;\n        if (r > rmax) rmax = r;\n      }\n      s *= s;\n      u *= u;\n      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n    }\n    function position(row, u, rect, flush) {\n      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;\n      if (u == rect.dx) {\n        if (flush || v > rect.dy) v = rect.dy;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dy = v;\n          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n        }\n        o.z = true;\n        o.dx += rect.x + rect.dx - x;\n        rect.y += v;\n        rect.dy -= v;\n      } else {\n        if (flush || v > rect.dx) v = rect.dx;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dx = v;\n          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n        }\n        o.z = false;\n        o.dy += rect.y + rect.dy - y;\n        rect.x += v;\n        rect.dx -= v;\n      }\n    }\n    function treemap(d) {\n      var nodes = stickies || hierarchy(d), root = nodes[0];\n      root.x = root.y = 0;\n      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;\n      if (stickies) hierarchy.revalue(root);\n      scale([ root ], root.dx * root.dy / root.value);\n      (stickies ? stickify : squarify)(root);\n      if (sticky) stickies = nodes;\n      return nodes;\n    }\n    treemap.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return treemap;\n    };\n    treemap.padding = function(x) {\n      if (!arguments.length) return padding;\n      function padFunction(node) {\n        var p = x.call(treemap, node, node.depth);\n        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n      }\n      function padConstant(node) {\n        return d3_layout_treemapPad(node, x);\n      }\n      var type;\n      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ], \n      padConstant) : padConstant;\n      return treemap;\n    };\n    treemap.round = function(x) {\n      if (!arguments.length) return round != Number;\n      round = x ? Math.round : Number;\n      return treemap;\n    };\n    treemap.sticky = function(x) {\n      if (!arguments.length) return sticky;\n      sticky = x;\n      stickies = null;\n      return treemap;\n    };\n    treemap.ratio = function(x) {\n      if (!arguments.length) return ratio;\n      ratio = x;\n      return treemap;\n    };\n    treemap.mode = function(x) {\n      if (!arguments.length) return mode;\n      mode = x + \"\";\n      return treemap;\n    };\n    return d3_layout_hierarchyRebind(treemap, hierarchy);\n  };\n  function d3_layout_treemapPadNull(node) {\n    return {\n      x: node.x,\n      y: node.y,\n      dx: node.dx,\n      dy: node.dy\n    };\n  }\n  function d3_layout_treemapPad(node, padding) {\n    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n    if (dx < 0) {\n      x += dx / 2;\n      dx = 0;\n    }\n    if (dy < 0) {\n      y += dy / 2;\n      dy = 0;\n    }\n    return {\n      x: x,\n      y: y,\n      dx: dx,\n      dy: dy\n    };\n  }\n  d3.random = {\n    normal: function(µ, σ) {\n      var n = arguments.length;\n      if (n < 2) σ = 1;\n      if (n < 1) µ = 0;\n      return function() {\n        var x, y, r;\n        do {\n          x = Math.random() * 2 - 1;\n          y = Math.random() * 2 - 1;\n          r = x * x + y * y;\n        } while (!r || r > 1);\n        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n      };\n    },\n    logNormal: function() {\n      var random = d3.random.normal.apply(d3, arguments);\n      return function() {\n        return Math.exp(random());\n      };\n    },\n    bates: function(m) {\n      var random = d3.random.irwinHall(m);\n      return function() {\n        return random() / m;\n      };\n    },\n    irwinHall: function(m) {\n      return function() {\n        for (var s = 0, j = 0; j < m; j++) s += Math.random();\n        return s;\n      };\n    }\n  };\n  d3.scale = {};\n  function d3_scaleExtent(domain) {\n    var start = domain[0], stop = domain[domain.length - 1];\n    return start < stop ? [ start, stop ] : [ stop, start ];\n  }\n  function d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n  }\n  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);\n    return function(x) {\n      return i(u(x));\n    };\n  }\n  function d3_scale_nice(domain, nice) {\n    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;\n    if (x1 < x0) {\n      dx = i0, i0 = i1, i1 = dx;\n      dx = x0, x0 = x1, x1 = dx;\n    }\n    domain[i0] = nice.floor(x0);\n    domain[i1] = nice.ceil(x1);\n    return domain;\n  }\n  function d3_scale_niceStep(step) {\n    return step ? {\n      floor: function(x) {\n        return Math.floor(x / step) * step;\n      },\n      ceil: function(x) {\n        return Math.ceil(x / step) * step;\n      }\n    } : d3_scale_niceIdentity;\n  }\n  var d3_scale_niceIdentity = {\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;\n    if (domain[k] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n    while (++j <= k) {\n      u.push(uninterpolate(domain[j - 1], domain[j]));\n      i.push(interpolate(range[j - 1], range[j]));\n    }\n    return function(x) {\n      var j = d3.bisect(domain, x, 1, k) - 1;\n      return i[j](u[j](x));\n    };\n  }\n  d3.scale.linear = function() {\n    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);\n  };\n  function d3_scale_linear(domain, range, interpolate, clamp) {\n    var output, input;\n    function rescale() {\n      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n      output = linear(domain, range, uninterpolate, interpolate);\n      input = linear(range, domain, uninterpolate, d3_interpolate);\n      return scale;\n    }\n    function scale(x) {\n      return output(x);\n    }\n    scale.invert = function(y) {\n      return input(y);\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(Number);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.rangeRound = function(x) {\n      return scale.range(x).interpolate(d3_interpolateRound);\n    };\n    scale.clamp = function(x) {\n      if (!arguments.length) return clamp;\n      clamp = x;\n      return rescale();\n    };\n    scale.interpolate = function(x) {\n      if (!arguments.length) return interpolate;\n      interpolate = x;\n      return rescale();\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      d3_scale_linearNice(domain, m);\n      return rescale();\n    };\n    scale.copy = function() {\n      return d3_scale_linear(domain, range, interpolate, clamp);\n    };\n    return rescale();\n  }\n  function d3_scale_linearRebind(scale, linear) {\n    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");\n  }\n  function d3_scale_linearNice(domain, m) {\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n    return domain;\n  }\n  function d3_scale_linearTickRange(domain, m) {\n    if (m == null) m = 10;\n    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;\n    extent[0] = Math.ceil(extent[0] / step) * step;\n    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n    extent[2] = step;\n    return extent;\n  }\n  function d3_scale_linearTicks(domain, m) {\n    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n  }\n  function d3_scale_linearTickFormat(domain, m, format) {\n    var range = d3_scale_linearTickRange(domain, m);\n    if (format) {\n      var match = d3_format_re.exec(format);\n      match.shift();\n      if (match[8] === \"s\") {\n        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n        if (!match[7]) match[7] = \".\" + d3_scale_linearPrecision(prefix.scale(range[2]));\n        match[8] = \"f\";\n        format = d3.format(match.join(\"\"));\n        return function(d) {\n          return format(prefix.scale(d)) + prefix.symbol;\n        };\n      }\n      if (!match[7]) match[7] = \".\" + d3_scale_linearFormatPrecision(match[8], range);\n      format = match.join(\"\");\n    } else {\n      format = \",.\" + d3_scale_linearPrecision(range[2]) + \"f\";\n    }\n    return d3.format(format);\n  }\n  var d3_scale_linearFormatSignificant = {\n    s: 1,\n    g: 1,\n    p: 1,\n    r: 1,\n    e: 1\n  };\n  function d3_scale_linearPrecision(value) {\n    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n  }\n  function d3_scale_linearFormatPrecision(type, range) {\n    var p = d3_scale_linearPrecision(range[2]);\n    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \"e\") : p - (type === \"%\") * 2;\n  }\n  d3.scale.log = function() {\n    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);\n  };\n  function d3_scale_log(linear, base, positive, domain) {\n    function log(x) {\n      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);\n    }\n    function pow(x) {\n      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n    }\n    function scale(x) {\n      return linear(log(x));\n    }\n    scale.invert = function(x) {\n      return pow(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      positive = x[0] >= 0;\n      linear.domain((domain = x.map(Number)).map(log));\n      return scale;\n    };\n    scale.base = function(_) {\n      if (!arguments.length) return base;\n      base = +_;\n      linear.domain(domain.map(log));\n      return scale;\n    };\n    scale.nice = function() {\n      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n      linear.domain(niced);\n      domain = niced.map(pow);\n      return scale;\n    };\n    scale.ticks = function() {\n      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n      if (isFinite(j - i)) {\n        if (positive) {\n          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);\n          ticks.push(pow(i));\n        } else {\n          ticks.push(pow(i));\n          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);\n        }\n        for (i = 0; ticks[i] < u; i++) {}\n        for (j = ticks.length; ticks[j - 1] > v; j--) {}\n        ticks = ticks.slice(i, j);\n      }\n      return ticks;\n    };\n    scale.tickFormat = function(n, format) {\n      if (!arguments.length) return d3_scale_logFormat;\n      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== \"function\") format = d3.format(format);\n      var k = Math.max(1, base * n / scale.ticks().length);\n      return function(d) {\n        var i = d / pow(Math.round(log(d)));\n        if (i * base < base - .5) i *= base;\n        return i <= k ? format(d) : \"\";\n      };\n    };\n    scale.copy = function() {\n      return d3_scale_log(linear.copy(), base, positive, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  var d3_scale_logFormat = d3.format(\".0e\"), d3_scale_logNiceNegative = {\n    floor: function(x) {\n      return -Math.ceil(-x);\n    },\n    ceil: function(x) {\n      return -Math.floor(-x);\n    }\n  };\n  d3.scale.pow = function() {\n    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);\n  };\n  function d3_scale_pow(linear, exponent, domain) {\n    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);\n    function scale(x) {\n      return linear(powp(x));\n    }\n    scale.invert = function(x) {\n      return powb(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      linear.domain((domain = x.map(Number)).map(powp));\n      return scale;\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      return scale.domain(d3_scale_linearNice(domain, m));\n    };\n    scale.exponent = function(x) {\n      if (!arguments.length) return exponent;\n      powp = d3_scale_powPow(exponent = x);\n      powb = d3_scale_powPow(1 / exponent);\n      linear.domain(domain.map(powp));\n      return scale;\n    };\n    scale.copy = function() {\n      return d3_scale_pow(linear.copy(), exponent, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_scale_powPow(e) {\n    return function(x) {\n      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n    };\n  }\n  d3.scale.sqrt = function() {\n    return d3.scale.pow().exponent(.5);\n  };\n  d3.scale.ordinal = function() {\n    return d3_scale_ordinal([], {\n      t: \"range\",\n      a: [ [] ]\n    });\n  };\n  function d3_scale_ordinal(domain, ranger) {\n    var index, range, rangeBand;\n    function scale(x) {\n      return range[((index.get(x) || (ranger.t === \"range\" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n    }\n    function steps(start, step) {\n      return d3.range(domain.length).map(function(i) {\n        return start + step * i;\n      });\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = [];\n      index = new d3_Map();\n      var i = -1, n = x.length, xi;\n      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n      return scale[ranger.t].apply(scale, ranger.a);\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      rangeBand = 0;\n      ranger = {\n        t: \"range\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangePoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, \n      0) : (stop - start) / (domain.length - 1 + padding);\n      range = steps(start + step * padding / 2, step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangePoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundPoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), \n      0) : (stop - start) / (domain.length - 1 + padding) | 0;\n      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangeRoundPoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n      range = steps(start + step * outerPadding, step);\n      if (reverse) range.reverse();\n      rangeBand = step * (1 - padding);\n      ranger = {\n        t: \"rangeBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n      if (reverse) range.reverse();\n      rangeBand = Math.round(step * (1 - padding));\n      ranger = {\n        t: \"rangeRoundBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBand = function() {\n      return rangeBand;\n    };\n    scale.rangeExtent = function() {\n      return d3_scaleExtent(ranger.a[0]);\n    };\n    scale.copy = function() {\n      return d3_scale_ordinal(domain, ranger);\n    };\n    return scale.domain(domain);\n  }\n  d3.scale.category10 = function() {\n    return d3.scale.ordinal().range(d3_category10);\n  };\n  d3.scale.category20 = function() {\n    return d3.scale.ordinal().range(d3_category20);\n  };\n  d3.scale.category20b = function() {\n    return d3.scale.ordinal().range(d3_category20b);\n  };\n  d3.scale.category20c = function() {\n    return d3.scale.ordinal().range(d3_category20c);\n  };\n  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n  d3.scale.quantile = function() {\n    return d3_scale_quantile([], []);\n  };\n  function d3_scale_quantile(domain, range) {\n    var thresholds;\n    function rescale() {\n      var k = 0, q = range.length;\n      thresholds = [];\n      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);\n      return scale;\n    }\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.quantiles = function() {\n      return thresholds;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantile(domain, range);\n    };\n    return rescale();\n  }\n  d3.scale.quantize = function() {\n    return d3_scale_quantize(0, 1, [ 0, 1 ]);\n  };\n  function d3_scale_quantize(x0, x1, range) {\n    var kx, i;\n    function scale(x) {\n      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n    }\n    function rescale() {\n      kx = range.length / (x1 - x0);\n      i = range.length - 1;\n      return scale;\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return [ x0, x1 ];\n      x0 = +x[0];\n      x1 = +x[x.length - 1];\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      y = y < 0 ? NaN : y / kx + x0;\n      return [ y, y + 1 / kx ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantize(x0, x1, range);\n    };\n    return rescale();\n  }\n  d3.scale.threshold = function() {\n    return d3_scale_threshold([ .5 ], [ 0, 1 ]);\n  };\n  function d3_scale_threshold(domain, range) {\n    function scale(x) {\n      if (x <= x) return range[d3.bisect(domain, x)];\n    }\n    scale.domain = function(_) {\n      if (!arguments.length) return domain;\n      domain = _;\n      return scale;\n    };\n    scale.range = function(_) {\n      if (!arguments.length) return range;\n      range = _;\n      return scale;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return [ domain[y - 1], domain[y] ];\n    };\n    scale.copy = function() {\n      return d3_scale_threshold(domain, range);\n    };\n    return scale;\n  }\n  d3.scale.identity = function() {\n    return d3_scale_identity([ 0, 1 ]);\n  };\n  function d3_scale_identity(domain) {\n    function identity(x) {\n      return +x;\n    }\n    identity.invert = identity;\n    identity.domain = identity.range = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(identity);\n      return identity;\n    };\n    identity.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    identity.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    identity.copy = function() {\n      return d3_scale_identity(domain);\n    };\n    return identity;\n  }\n  d3.svg = {};\n  function d3_zero() {\n    return 0;\n  }\n  d3.svg.arc = function() {\n    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n    function arc() {\n      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;\n      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;\n      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \"\") + \"Z\";\n      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];\n      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n        if (!cw) p1 *= -1;\n        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n      }\n      if (r1) {\n        x0 = r1 * Math.cos(a0 + p1);\n        y0 = r1 * Math.sin(a0 + p1);\n        x1 = r1 * Math.cos(a1 - p1);\n        y1 = r1 * Math.sin(a1 - p1);\n        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;\n        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n          var h1 = (a0 + a1) / 2;\n          x0 = r1 * Math.cos(h1);\n          y0 = r1 * Math.sin(h1);\n          x1 = y1 = null;\n        }\n      } else {\n        x0 = y0 = 0;\n      }\n      if (r0) {\n        x2 = r0 * Math.cos(a1 - p0);\n        y2 = r0 * Math.sin(a1 - p0);\n        x3 = r0 * Math.cos(a0 + p0);\n        y3 = r0 * Math.sin(a0 + p0);\n        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;\n        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n          var h0 = (a0 + a1) / 2;\n          x2 = r0 * Math.cos(h0);\n          y2 = r0 * Math.sin(h0);\n          x3 = y3 = null;\n        }\n      } else {\n        x2 = y2 = 0;\n      }\n      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {\n        cr = r0 < r1 ^ cw ? 0 : 1;\n        var rc1 = rc, rc0 = rc;\n        if (da < π) {\n          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));\n          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));\n        }\n        if (x1 != null) {\n          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n          if (rc === rc1) {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t30[1], \"A\", r1, \",\", r1, \" 0 \", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \",\", cw, \" \", t12[1], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t12[0]);\n          } else {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 1,\", cr, \" \", t12[0]);\n          }\n        } else {\n          path.push(\"M\", x0, \",\", y0);\n        }\n        if (x3 != null) {\n          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n          if (rc === rc0) {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t21[1], \"A\", r0, \",\", r0, \" 0 \", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \",\", 1 - cw, \" \", t03[1], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          } else {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          }\n        } else {\n          path.push(\"L\", x2, \",\", y2);\n        }\n      } else {\n        path.push(\"M\", x0, \",\", y0);\n        if (x1 != null) path.push(\"A\", r1, \",\", r1, \" 0 \", l1, \",\", cw, \" \", x1, \",\", y1);\n        path.push(\"L\", x2, \",\", y2);\n        if (x3 != null) path.push(\"A\", r0, \",\", r0, \" 0 \", l0, \",\", 1 - cw, \" \", x3, \",\", y3);\n      }\n      path.push(\"Z\");\n      return path.join(\"\");\n    }\n    function circleSegment(r1, cw) {\n      return \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + r1;\n    }\n    arc.innerRadius = function(v) {\n      if (!arguments.length) return innerRadius;\n      innerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.outerRadius = function(v) {\n      if (!arguments.length) return outerRadius;\n      outerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.cornerRadius = function(v) {\n      if (!arguments.length) return cornerRadius;\n      cornerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.padRadius = function(v) {\n      if (!arguments.length) return padRadius;\n      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n      return arc;\n    };\n    arc.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return arc;\n    };\n    arc.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return arc;\n    };\n    arc.padAngle = function(v) {\n      if (!arguments.length) return padAngle;\n      padAngle = d3_functor(v);\n      return arc;\n    };\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n      return [ Math.cos(a) * r, Math.sin(a) * r ];\n    };\n    return arc;\n  };\n  var d3_svg_arcAuto = \"auto\";\n  function d3_svg_arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n  function d3_svg_arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n  function d3_svg_arcStartAngle(d) {\n    return d.startAngle;\n  }\n  function d3_svg_arcEndAngle(d) {\n    return d.endAngle;\n  }\n  function d3_svg_arcPadAngle(d) {\n    return d && d.padAngle;\n  }\n  function d3_svg_arcSweep(x0, y0, x1, y1) {\n    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;\n  }\n  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];\n  }\n  function d3_svg_line(projection) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n    function line(data) {\n      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points), tension));\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);\n        } else if (points.length) {\n          segment();\n          points = [];\n        }\n      }\n      if (points.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    line.x = function(_) {\n      if (!arguments.length) return x;\n      x = _;\n      return line;\n    };\n    line.y = function(_) {\n      if (!arguments.length) return y;\n      y = _;\n      return line;\n    };\n    line.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return line;\n    };\n    line.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      return line;\n    };\n    line.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return line;\n    };\n    return line;\n  }\n  d3.svg.line = function() {\n    return d3_svg_line(d3_identity);\n  };\n  var d3_svg_lineInterpolators = d3.map({\n    linear: d3_svg_lineLinear,\n    \"linear-closed\": d3_svg_lineLinearClosed,\n    step: d3_svg_lineStep,\n    \"step-before\": d3_svg_lineStepBefore,\n    \"step-after\": d3_svg_lineStepAfter,\n    basis: d3_svg_lineBasis,\n    \"basis-open\": d3_svg_lineBasisOpen,\n    \"basis-closed\": d3_svg_lineBasisClosed,\n    bundle: d3_svg_lineBundle,\n    cardinal: d3_svg_lineCardinal,\n    \"cardinal-open\": d3_svg_lineCardinalOpen,\n    \"cardinal-closed\": d3_svg_lineCardinalClosed,\n    monotone: d3_svg_lineMonotone\n  });\n  d3_svg_lineInterpolators.forEach(function(key, value) {\n    value.key = key;\n    value.closed = /-closed$/.test(key);\n  });\n  function d3_svg_lineLinear(points) {\n    return points.length > 1 ? points.join(\"L\") : points + \"Z\";\n  }\n  function d3_svg_lineLinearClosed(points) {\n    return points.join(\"L\") + \"Z\";\n  }\n  function d3_svg_lineStep(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p[0] + (p = points[i])[0]) / 2, \"V\", p[1]);\n    if (n > 1) path.push(\"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepBefore(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepAfter(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineCardinalOpen(points, tension) {\n    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineCardinalClosed(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));\n  }\n  function d3_svg_lineCardinal(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineHermite(points, tangents) {\n    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {\n      return d3_svg_lineLinear(points);\n    }\n    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n    if (quad) {\n      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];\n      p0 = points[1];\n      pi = 2;\n    }\n    if (tangents.length > 1) {\n      t = tangents[1];\n      p = points[pi];\n      pi++;\n      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      for (var i = 2; i < tangents.length; i++, pi++) {\n        p = points[pi];\n        t = tangents[i];\n        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      }\n    }\n    if (quad) {\n      var lp = points[pi];\n      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];\n    }\n    return path;\n  }\n  function d3_svg_lineCardinalTangents(points, tension) {\n    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;\n    while (++i < n) {\n      p0 = p1;\n      p1 = p2;\n      p2 = points[i];\n      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineBasis(points) {\n    if (points.length < 3) return d3_svg_lineLinear(points);\n    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0, \"L\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    points.push(points[n - 1]);\n    while (++i <= n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    points.pop();\n    path.push(\"L\", pi);\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisOpen(points) {\n    if (points.length < 4) return d3_svg_lineLinear(points);\n    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];\n    while (++i < 3) {\n      pi = points[i];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n    --i;\n    while (++i < n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisClosed(points) {\n    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];\n    while (++i < 4) {\n      pi = points[i % n];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    --i;\n    while (++i < m) {\n      pi = points[i % n];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBundle(points, tension) {\n    var n = points.length - 1;\n    if (n) {\n      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;\n      while (++i <= n) {\n        p = points[i];\n        t = i / n;\n        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n      }\n    }\n    return d3_svg_lineBasis(points);\n  }\n  function d3_svg_lineDot4(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n  function d3_svg_lineBasisBezier(path, x, y) {\n    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n  }\n  function d3_svg_lineSlope(p0, p1) {\n    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n  }\n  function d3_svg_lineFiniteDifferences(points) {\n    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);\n    while (++i < j) {\n      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n    }\n    m[i] = d;\n    return m;\n  }\n  function d3_svg_lineMonotoneTangents(points) {\n    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;\n    while (++i < j) {\n      d = d3_svg_lineSlope(points[i], points[i + 1]);\n      if (abs(d) < ε) {\n        m[i] = m[i + 1] = 0;\n      } else {\n        a = m[i] / d;\n        b = m[i + 1] / d;\n        s = a * a + b * b;\n        if (s > 9) {\n          s = d * 3 / Math.sqrt(s);\n          m[i] = s * a;\n          m[i + 1] = s * b;\n        }\n      }\n    }\n    i = -1;\n    while (++i <= j) {\n      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n      tangents.push([ s || 0, m[i] * s || 0 ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineMonotone(points) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n  }\n  d3.svg.line.radial = function() {\n    var line = d3_svg_line(d3_svg_lineRadial);\n    line.radius = line.x, delete line.x;\n    line.angle = line.y, delete line.y;\n    return line;\n  };\n  function d3_svg_lineRadial(points) {\n    var point, i = -1, n = points.length, r, a;\n    while (++i < n) {\n      point = points[i];\n      r = point[0];\n      a = point[1] - halfπ;\n      point[0] = r * Math.cos(a);\n      point[1] = r * Math.sin(a);\n    }\n    return points;\n  }\n  function d3_svg_area(projection) {\n    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n    function area(data) {\n      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n        return x;\n      } : d3_functor(x1), fy1 = y0 === y1 ? function() {\n        return y;\n      } : d3_functor(y1), x, y;\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);\n          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);\n        } else if (points0.length) {\n          segment();\n          points0 = [];\n          points1 = [];\n        }\n      }\n      if (points0.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    area.x = function(_) {\n      if (!arguments.length) return x1;\n      x0 = x1 = _;\n      return area;\n    };\n    area.x0 = function(_) {\n      if (!arguments.length) return x0;\n      x0 = _;\n      return area;\n    };\n    area.x1 = function(_) {\n      if (!arguments.length) return x1;\n      x1 = _;\n      return area;\n    };\n    area.y = function(_) {\n      if (!arguments.length) return y1;\n      y0 = y1 = _;\n      return area;\n    };\n    area.y0 = function(_) {\n      if (!arguments.length) return y0;\n      y0 = _;\n      return area;\n    };\n    area.y1 = function(_) {\n      if (!arguments.length) return y1;\n      y1 = _;\n      return area;\n    };\n    area.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return area;\n    };\n    area.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      interpolateReverse = interpolate.reverse || interpolate;\n      L = interpolate.closed ? \"M\" : \"L\";\n      return area;\n    };\n    area.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return area;\n    };\n    return area;\n  }\n  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n  d3.svg.area = function() {\n    return d3_svg_area(d3_identity);\n  };\n  d3.svg.area.radial = function() {\n    var area = d3_svg_area(d3_svg_lineRadial);\n    area.radius = area.x, delete area.x;\n    area.innerRadius = area.x0, delete area.x0;\n    area.outerRadius = area.x1, delete area.x1;\n    area.angle = area.y, delete area.y;\n    area.startAngle = area.y0, delete area.y0;\n    area.endAngle = area.y1, delete area.y1;\n    return area;\n  };\n  d3.svg.chord = function() {\n    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n    function chord(d, i) {\n      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);\n      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n    }\n    function subgroup(self, f, d, i) {\n      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n      return {\n        r: r,\n        a0: a0,\n        a1: a1,\n        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],\n        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]\n      };\n    }\n    function equals(a, b) {\n      return a.a0 == b.a0 && a.a1 == b.a1;\n    }\n    function arc(r, p, a) {\n      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;\n    }\n    function curve(r0, p0, r1, p1) {\n      return \"Q 0,0 \" + p1;\n    }\n    chord.radius = function(v) {\n      if (!arguments.length) return radius;\n      radius = d3_functor(v);\n      return chord;\n    };\n    chord.source = function(v) {\n      if (!arguments.length) return source;\n      source = d3_functor(v);\n      return chord;\n    };\n    chord.target = function(v) {\n      if (!arguments.length) return target;\n      target = d3_functor(v);\n      return chord;\n    };\n    chord.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return chord;\n    };\n    chord.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return chord;\n    };\n    return chord;\n  };\n  function d3_svg_chordRadius(d) {\n    return d.radius;\n  }\n  d3.svg.diagonal = function() {\n    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;\n    function diagonal(d, i) {\n      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {\n        x: p0.x,\n        y: m\n      }, {\n        x: p3.x,\n        y: m\n      }, p3 ];\n      p = p.map(projection);\n      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];\n    }\n    diagonal.source = function(x) {\n      if (!arguments.length) return source;\n      source = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.target = function(x) {\n      if (!arguments.length) return target;\n      target = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.projection = function(x) {\n      if (!arguments.length) return projection;\n      projection = x;\n      return diagonal;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalProjection(d) {\n    return [ d.x, d.y ];\n  }\n  d3.svg.diagonal.radial = function() {\n    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;\n    diagonal.projection = function(x) {\n      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalRadialProjection(projection) {\n    return function() {\n      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;\n      return [ r * Math.cos(a), r * Math.sin(a) ];\n    };\n  }\n  d3.svg.symbol = function() {\n    var type = d3_svg_symbolType, size = d3_svg_symbolSize;\n    function symbol(d, i) {\n      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n    }\n    symbol.type = function(x) {\n      if (!arguments.length) return type;\n      type = d3_functor(x);\n      return symbol;\n    };\n    symbol.size = function(x) {\n      if (!arguments.length) return size;\n      size = d3_functor(x);\n      return symbol;\n    };\n    return symbol;\n  };\n  function d3_svg_symbolSize() {\n    return 64;\n  }\n  function d3_svg_symbolType() {\n    return \"circle\";\n  }\n  function d3_svg_symbolCircle(size) {\n    var r = Math.sqrt(size / π);\n    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";\n  }\n  var d3_svg_symbols = d3.map({\n    circle: d3_svg_symbolCircle,\n    cross: function(size) {\n      var r = Math.sqrt(size / 5) / 2;\n      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n    },\n    diamond: function(size) {\n      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;\n      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";\n    },\n    square: function(size) {\n      var r = Math.sqrt(size) / 2;\n      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";\n    },\n    \"triangle-down\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";\n    },\n    \"triangle-up\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";\n    }\n  });\n  d3.svg.symbolTypes = d3_svg_symbols.keys();\n  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n  d3_selectionPrototype.transition = function(name) {\n    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n      time: Date.now(),\n      ease: d3_ease_cubicInOut,\n      delay: 0,\n      duration: 250\n    };\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_selectionPrototype.interrupt = function(name) {\n    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));\n  };\n  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());\n  function d3_selection_interruptNS(ns) {\n    return function() {\n      var lock, activeId, active;\n      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        if (--lock.count) delete lock[activeId]; else delete this[ns];\n        lock.active += .5;\n        active.event && active.event.interrupt.call(this, this.__data__, active.index);\n      }\n    };\n  }\n  function d3_transition(groups, ns, id) {\n    d3_subclass(groups, d3_transitionPrototype);\n    groups.namespace = ns;\n    groups.id = id;\n    return groups;\n  }\n  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;\n  d3_transitionPrototype.call = d3_selectionPrototype.call;\n  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n  d3_transitionPrototype.node = d3_selectionPrototype.node;\n  d3_transitionPrototype.size = d3_selectionPrototype.size;\n  d3.transition = function(selection, name) {\n    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);\n  };\n  d3.transition.prototype = d3_transitionPrototype;\n  d3_transitionPrototype.select = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n          subgroup.push(subnode);\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.selectAll = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          transition = node[ns][id];\n          subnodes = selector.call(node, node.__data__, i, j);\n          subgroups.push(subgroup = []);\n          for (var k = -1, o = subnodes.length; ++k < o; ) {\n            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n            subgroup.push(subnode);\n          }\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_transition(subgroups, this.namespace, this.id);\n  };\n  d3_transitionPrototype.tween = function(name, tween) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);\n    return d3_selection_each(this, tween == null ? function(node) {\n      node[ns][id].tween.remove(name);\n    } : function(node) {\n      node[ns][id].tween.set(name, tween);\n    });\n  };\n  function d3_transition_tween(groups, name, value, tween) {\n    var id = groups.id, ns = groups.namespace;\n    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n    } : (value = tween(value), function(node) {\n      node[ns][id].tween.set(name, value);\n    }));\n  }\n  d3_transitionPrototype.attr = function(nameNS, value) {\n    if (arguments.length < 2) {\n      for (value in nameNS) this.attr(value, nameNS[value]);\n      return this;\n    }\n    var interpolate = nameNS == \"transform\" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrTween(b) {\n      return b == null ? attrNull : (b += \"\", function() {\n        var a = this.getAttribute(name), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttribute(name, i(t));\n        });\n      });\n    }\n    function attrTweenNS(b) {\n      return b == null ? attrNullNS : (b += \"\", function() {\n        var a = this.getAttributeNS(name.space, name.local), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttributeNS(name.space, name.local, i(t));\n        });\n      });\n    }\n    return d3_transition_tween(this, \"attr.\" + nameNS, value, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.attrTween = function(nameNS, tween) {\n    var name = d3.ns.qualify(nameNS);\n    function attrTween(d, i) {\n      var f = tween.call(this, d, i, this.getAttribute(name));\n      return f && function(t) {\n        this.setAttribute(name, f(t));\n      };\n    }\n    function attrTweenNS(d, i) {\n      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n      return f && function(t) {\n        this.setAttributeNS(name.space, name.local, f(t));\n      };\n    }\n    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.style(priority, name[priority], value);\n        return this;\n      }\n      priority = \"\";\n    }\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleString(b) {\n      return b == null ? styleNull : (b += \"\", function() {\n        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;\n        return a !== b && (i = d3_interpolate(a, b), function(t) {\n          this.style.setProperty(name, i(t), priority);\n        });\n      });\n    }\n    return d3_transition_tween(this, \"style.\" + name, value, styleString);\n  };\n  d3_transitionPrototype.styleTween = function(name, tween, priority) {\n    if (arguments.length < 3) priority = \"\";\n    function styleTween(d, i) {\n      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));\n      return f && function(t) {\n        this.style.setProperty(name, f(t), priority);\n      };\n    }\n    return this.tween(\"style.\" + name, styleTween);\n  };\n  d3_transitionPrototype.text = function(value) {\n    return d3_transition_tween(this, \"text\", value, d3_transition_text);\n  };\n  function d3_transition_text(b) {\n    if (b == null) b = \"\";\n    return function() {\n      this.textContent = b;\n    };\n  }\n  d3_transitionPrototype.remove = function() {\n    var ns = this.namespace;\n    return this.each(\"end.transition\", function() {\n      var p;\n      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);\n    });\n  };\n  d3_transitionPrototype.ease = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].ease;\n    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);\n    return d3_selection_each(this, function(node) {\n      node[ns][id].ease = value;\n    });\n  };\n  d3_transitionPrototype.delay = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].delay;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n    } : (value = +value, function(node) {\n      node[ns][id].delay = value;\n    }));\n  };\n  d3_transitionPrototype.duration = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].duration;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n    } : (value = Math.max(1, value), function(node) {\n      node[ns][id].duration = value;\n    }));\n  };\n  d3_transitionPrototype.each = function(type, listener) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) {\n      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;\n      try {\n        d3_transitionInheritId = id;\n        d3_selection_each(this, function(node, i, j) {\n          d3_transitionInherit = node[ns][id];\n          type.call(node, node.__data__, i, j);\n        });\n      } finally {\n        d3_transitionInherit = inherit;\n        d3_transitionInheritId = inheritId;\n      }\n    } else {\n      d3_selection_each(this, function(node) {\n        var transition = node[ns][id];\n        (transition.event || (transition.event = d3.dispatch(\"start\", \"end\", \"interrupt\"))).on(type, listener);\n      });\n    }\n    return this;\n  };\n  d3_transitionPrototype.transition = function() {\n    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if (node = group[i]) {\n          transition = node[ns][id0];\n          d3_transitionNode(node, i, ns, id1, {\n            time: transition.time,\n            ease: transition.ease,\n            delay: transition.delay + transition.duration,\n            duration: transition.duration\n          });\n        }\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id1);\n  };\n  function d3_transitionNamespace(name) {\n    return name == null ? \"__transition__\" : \"__transition_\" + name + \"__\";\n  }\n  function d3_transitionNode(node, i, ns, id, inherit) {\n    var lock = node[ns] || (node[ns] = {\n      active: 0,\n      count: 0\n    }), transition = lock[id], time, timer, duration, ease, tweens;\n    function schedule(elapsed) {\n      var delay = transition.delay;\n      timer.t = delay + time;\n      if (delay <= elapsed) return start(elapsed - delay);\n      timer.c = start;\n    }\n    function start(elapsed) {\n      var activeId = lock.active, active = lock[activeId];\n      if (active) {\n        active.timer.c = null;\n        active.timer.t = NaN;\n        --lock.count;\n        delete lock[activeId];\n        active.event && active.event.interrupt.call(node, node.__data__, active.index);\n      }\n      for (var cancelId in lock) {\n        if (+cancelId < id) {\n          var cancel = lock[cancelId];\n          cancel.timer.c = null;\n          cancel.timer.t = NaN;\n          --lock.count;\n          delete lock[cancelId];\n        }\n      }\n      timer.c = tick;\n      d3_timer(function() {\n        if (timer.c && tick(elapsed || 1)) {\n          timer.c = null;\n          timer.t = NaN;\n        }\n        return 1;\n      }, 0, time);\n      lock.active = id;\n      transition.event && transition.event.start.call(node, node.__data__, i);\n      tweens = [];\n      transition.tween.forEach(function(key, value) {\n        if (value = value.call(node, node.__data__, i)) {\n          tweens.push(value);\n        }\n      });\n      ease = transition.ease;\n      duration = transition.duration;\n    }\n    function tick(elapsed) {\n      var t = elapsed / duration, e = ease(t), n = tweens.length;\n      while (n > 0) {\n        tweens[--n].call(node, e);\n      }\n      if (t >= 1) {\n        transition.event && transition.event.end.call(node, node.__data__, i);\n        if (--lock.count) delete lock[id]; else delete node[ns];\n        return 1;\n      }\n    }\n    if (!transition) {\n      time = inherit.time;\n      timer = d3_timer(schedule, 0, time);\n      transition = lock[id] = {\n        tween: new d3_Map(),\n        time: time,\n        timer: timer,\n        delay: inherit.delay,\n        duration: inherit.duration,\n        ease: inherit.ease,\n        index: i\n      };\n      inherit = null;\n      ++lock.count;\n    }\n  }\n  d3.svg.axis = function() {\n    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n    function axis(g) {\n      g.each(function() {\n        var g = d3.select(this);\n        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();\n        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\".tick\").data(ticks, scale1), tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", ε), tickExit = d3.transition(tick.exit()).style(\"opacity\", ε).remove(), tickUpdate = d3.transition(tick.order()).style(\"opacity\", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n        var range = d3_scaleRange(scale1), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), \n        d3.transition(path));\n        tickEnter.append(\"line\");\n        tickEnter.append(\"text\");\n        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\"), sign = orient === \"top\" || orient === \"left\" ? -1 : 1, x1, x2, y1, y2;\n        if (orient === \"bottom\" || orient === \"top\") {\n          tickTransform = d3_svg_axisX, x1 = \"x\", y1 = \"y\", x2 = \"x2\", y2 = \"y2\";\n          text.attr(\"dy\", sign < 0 ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\");\n          pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + sign * outerTickSize + \"V0H\" + range[1] + \"V\" + sign * outerTickSize);\n        } else {\n          tickTransform = d3_svg_axisY, x1 = \"y\", y1 = \"x\", x2 = \"y2\", y2 = \"x2\";\n          text.attr(\"dy\", \".32em\").style(\"text-anchor\", sign < 0 ? \"end\" : \"start\");\n          pathUpdate.attr(\"d\", \"M\" + sign * outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * outerTickSize);\n        }\n        lineEnter.attr(y2, sign * innerTickSize);\n        textEnter.attr(y1, sign * tickSpacing);\n        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n        if (scale1.rangeBand) {\n          var x = scale1, dx = x.rangeBand() / 2;\n          scale0 = scale1 = function(d) {\n            return x(d) + dx;\n          };\n        } else if (scale0.rangeBand) {\n          scale0 = scale1;\n        } else {\n          tickExit.call(tickTransform, scale1, scale0);\n        }\n        tickEnter.call(tickTransform, scale0, scale1);\n        tickUpdate.call(tickTransform, scale1, scale1);\n      });\n    }\n    axis.scale = function(x) {\n      if (!arguments.length) return scale;\n      scale = x;\n      return axis;\n    };\n    axis.orient = function(x) {\n      if (!arguments.length) return orient;\n      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;\n      return axis;\n    };\n    axis.ticks = function() {\n      if (!arguments.length) return tickArguments_;\n      tickArguments_ = d3_array(arguments);\n      return axis;\n    };\n    axis.tickValues = function(x) {\n      if (!arguments.length) return tickValues;\n      tickValues = x;\n      return axis;\n    };\n    axis.tickFormat = function(x) {\n      if (!arguments.length) return tickFormat_;\n      tickFormat_ = x;\n      return axis;\n    };\n    axis.tickSize = function(x) {\n      var n = arguments.length;\n      if (!n) return innerTickSize;\n      innerTickSize = +x;\n      outerTickSize = +arguments[n - 1];\n      return axis;\n    };\n    axis.innerTickSize = function(x) {\n      if (!arguments.length) return innerTickSize;\n      innerTickSize = +x;\n      return axis;\n    };\n    axis.outerTickSize = function(x) {\n      if (!arguments.length) return outerTickSize;\n      outerTickSize = +x;\n      return axis;\n    };\n    axis.tickPadding = function(x) {\n      if (!arguments.length) return tickPadding;\n      tickPadding = +x;\n      return axis;\n    };\n    axis.tickSubdivide = function() {\n      return arguments.length && axis;\n    };\n    return axis;\n  };\n  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  };\n  function d3_svg_axisX(selection, x0, x1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = x0(d);\n      return \"translate(\" + (isFinite(v0) ? v0 : x1(d)) + \",0)\";\n    });\n  }\n  function d3_svg_axisY(selection, y0, y1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = y0(d);\n      return \"translate(0,\" + (isFinite(v0) ? v0 : y1(d)) + \")\";\n    });\n  }\n  d3.svg.brush = function() {\n    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n    function brush(g) {\n      g.each(function() {\n        var g = d3.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);\n        var background = g.selectAll(\".background\").data([ 0 ]);\n        background.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n        g.selectAll(\".extent\").data([ 0 ]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");\n        var resize = g.selectAll(\".resize\").data(resizes, d3_identity);\n        resize.exit().remove();\n        resize.enter().append(\"g\").attr(\"class\", function(d) {\n          return \"resize \" + d;\n        }).style(\"cursor\", function(d) {\n          return d3_svg_brushCursor[d];\n        }).append(\"rect\").attr(\"x\", function(d) {\n          return /[ew]$/.test(d) ? -3 : null;\n        }).attr(\"y\", function(d) {\n          return /^[ns]/.test(d) ? -3 : null;\n        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");\n        resize.style(\"display\", brush.empty() ? \"none\" : null);\n        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;\n        if (x) {\n          range = d3_scaleRange(x);\n          backgroundUpdate.attr(\"x\", range[0]).attr(\"width\", range[1] - range[0]);\n          redrawX(gUpdate);\n        }\n        if (y) {\n          range = d3_scaleRange(y);\n          backgroundUpdate.attr(\"y\", range[0]).attr(\"height\", range[1] - range[0]);\n          redrawY(gUpdate);\n        }\n        redraw(gUpdate);\n      });\n    }\n    brush.event = function(g) {\n      g.each(function() {\n        var event_ = event.of(this, arguments), extent1 = {\n          x: xExtent,\n          y: yExtent,\n          i: xExtentDomain,\n          j: yExtentDomain\n        }, extent0 = this.__chart__ || extent1;\n        this.__chart__ = extent1;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.brush\", function() {\n            xExtentDomain = extent0.i;\n            yExtentDomain = extent0.j;\n            xExtent = extent0.x;\n            yExtent = extent0.y;\n            event_({\n              type: \"brushstart\"\n            });\n          }).tween(\"brush:brush\", function() {\n            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);\n            xExtentDomain = yExtentDomain = null;\n            return function(t) {\n              xExtent = extent1.x = xi(t);\n              yExtent = extent1.y = yi(t);\n              event_({\n                type: \"brush\",\n                mode: \"resize\"\n              });\n            };\n          }).each(\"end.brush\", function() {\n            xExtentDomain = extent1.i;\n            yExtentDomain = extent1.j;\n            event_({\n              type: \"brush\",\n              mode: \"resize\"\n            });\n            event_({\n              type: \"brushend\"\n            });\n          });\n        } else {\n          event_({\n            type: \"brushstart\"\n          });\n          event_({\n            type: \"brush\",\n            mode: \"resize\"\n          });\n          event_({\n            type: \"brushend\"\n          });\n        }\n      });\n    };\n    function redraw(g) {\n      g.selectAll(\".resize\").attr(\"transform\", function(d) {\n        return \"translate(\" + xExtent[+/e$/.test(d)] + \",\" + yExtent[+/^s/.test(d)] + \")\";\n      });\n    }\n    function redrawX(g) {\n      g.select(\".extent\").attr(\"x\", xExtent[0]);\n      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", xExtent[1] - xExtent[0]);\n    }\n    function redrawY(g) {\n      g.select(\".extent\").attr(\"y\", yExtent[0]);\n      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", yExtent[1] - yExtent[0]);\n    }\n    function brushstart() {\n      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;\n      var w = d3.select(d3_window(target)).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);\n      if (d3.event.changedTouches) {\n        w.on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend);\n      } else {\n        w.on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend);\n      }\n      g.interrupt().selectAll(\"*\").interrupt();\n      if (dragging) {\n        origin[0] = xExtent[0] - origin[0];\n        origin[1] = yExtent[0] - origin[1];\n      } else if (resizing) {\n        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);\n        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];\n        origin[0] = xExtent[ex];\n        origin[1] = yExtent[ey];\n      } else if (d3.event.altKey) center = origin.slice();\n      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);\n      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));\n      event_({\n        type: \"brushstart\"\n      });\n      brushmove();\n      function keydown() {\n        if (d3.event.keyCode == 32) {\n          if (!dragging) {\n            center = null;\n            origin[0] -= xExtent[1];\n            origin[1] -= yExtent[1];\n            dragging = 2;\n          }\n          d3_eventPreventDefault();\n        }\n      }\n      function keyup() {\n        if (d3.event.keyCode == 32 && dragging == 2) {\n          origin[0] += xExtent[1];\n          origin[1] += yExtent[1];\n          dragging = 0;\n          d3_eventPreventDefault();\n        }\n      }\n      function brushmove() {\n        var point = d3.mouse(target), moved = false;\n        if (offset) {\n          point[0] += offset[0];\n          point[1] += offset[1];\n        }\n        if (!dragging) {\n          if (d3.event.altKey) {\n            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];\n            origin[0] = xExtent[+(point[0] < center[0])];\n            origin[1] = yExtent[+(point[1] < center[1])];\n          } else center = null;\n        }\n        if (resizingX && move1(point, x, 0)) {\n          redrawX(g);\n          moved = true;\n        }\n        if (resizingY && move1(point, y, 1)) {\n          redrawY(g);\n          moved = true;\n        }\n        if (moved) {\n          redraw(g);\n          event_({\n            type: \"brush\",\n            mode: dragging ? \"move\" : \"resize\"\n          });\n        }\n      }\n      function move1(point, scale, i) {\n        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n        if (dragging) {\n          r0 -= position;\n          r1 -= size + position;\n        }\n        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n        if (dragging) {\n          max = (min += position) + size;\n        } else {\n          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n          if (position < min) {\n            max = min;\n            min = position;\n          } else {\n            max = position;\n          }\n        }\n        if (extent[0] != min || extent[1] != max) {\n          if (i) yExtentDomain = null; else xExtentDomain = null;\n          extent[0] = min;\n          extent[1] = max;\n          return true;\n        }\n      }\n      function brushend() {\n        brushmove();\n        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);\n        d3.select(\"body\").style(\"cursor\", null);\n        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n        dragRestore();\n        event_({\n          type: \"brushend\"\n        });\n      }\n    }\n    brush.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.clamp = function(z) {\n      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;\n      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;\n      return brush;\n    };\n    brush.extent = function(z) {\n      var x0, x1, y0, y1, t;\n      if (!arguments.length) {\n        if (x) {\n          if (xExtentDomain) {\n            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n          } else {\n            x0 = xExtent[0], x1 = xExtent[1];\n            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n          }\n        }\n        if (y) {\n          if (yExtentDomain) {\n            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n          } else {\n            y0 = yExtent[0], y1 = yExtent[1];\n            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n          }\n        }\n        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];\n      }\n      if (x) {\n        x0 = z[0], x1 = z[1];\n        if (y) x0 = x0[0], x1 = x1[0];\n        xExtentDomain = [ x0, x1 ];\n        if (x.invert) x0 = x(x0), x1 = x(x1);\n        if (x1 < x0) t = x0, x0 = x1, x1 = t;\n        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];\n      }\n      if (y) {\n        y0 = z[0], y1 = z[1];\n        if (x) y0 = y0[1], y1 = y1[1];\n        yExtentDomain = [ y0, y1 ];\n        if (y.invert) y0 = y(y0), y1 = y(y1);\n        if (y1 < y0) t = y0, y0 = y1, y1 = t;\n        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];\n      }\n      return brush;\n    };\n    brush.clear = function() {\n      if (!brush.empty()) {\n        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];\n        xExtentDomain = yExtentDomain = null;\n      }\n      return brush;\n    };\n    brush.empty = function() {\n      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];\n    };\n    return d3.rebind(brush, event, \"on\");\n  };\n  var d3_svg_brushCursor = {\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];\n  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n  var d3_time_formatUtc = d3_time_format.utc;\n  var d3_time_formatIso = d3_time_formatUtc(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n  d3_time_format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n  function d3_time_formatIsoNative(date) {\n    return date.toISOString();\n  }\n  d3_time_formatIsoNative.parse = function(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  };\n  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n  d3_time.second = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 1e3) * 1e3);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n  }, function(date) {\n    return date.getSeconds();\n  });\n  d3_time.seconds = d3_time.second.range;\n  d3_time.seconds.utc = d3_time.second.utc.range;\n  d3_time.minute = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 6e4) * 6e4);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n  }, function(date) {\n    return date.getMinutes();\n  });\n  d3_time.minutes = d3_time.minute.range;\n  d3_time.minutes.utc = d3_time.minute.utc.range;\n  d3_time.hour = d3_time_interval(function(date) {\n    var timezone = date.getTimezoneOffset() / 60;\n    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n  }, function(date) {\n    return date.getHours();\n  });\n  d3_time.hours = d3_time.hour.range;\n  d3_time.hours.utc = d3_time.hour.utc.range;\n  d3_time.month = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setDate(1);\n    return date;\n  }, function(date, offset) {\n    date.setMonth(date.getMonth() + offset);\n  }, function(date) {\n    return date.getMonth();\n  });\n  d3_time.months = d3_time.month.range;\n  d3_time.months.utc = d3_time.month.utc.range;\n  function d3_time_scale(linear, methods, format) {\n    function scale(x) {\n      return linear(x);\n    }\n    scale.invert = function(x) {\n      return d3_time_scaleDate(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n      linear.domain(x);\n      return scale;\n    };\n    function tickMethod(extent, count) {\n      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);\n      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {\n        return d / 31536e6;\n      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n    }\n    scale.nice = function(interval, skip) {\n      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" && tickMethod(extent, interval);\n      if (method) interval = method[0], skip = method[1];\n      function skipped(date) {\n        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n      }\n      return scale.domain(d3_scale_nice(domain, skip > 1 ? {\n        floor: function(date) {\n          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);\n          return date;\n        },\n        ceil: function(date) {\n          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);\n          return date;\n        }\n      } : interval));\n    };\n    scale.ticks = function(interval, skip) {\n      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" ? tickMethod(extent, interval) : !interval.range && [ {\n        range: interval\n      }, skip ];\n      if (method) interval = method[0], skip = method[1];\n      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);\n    };\n    scale.tickFormat = function() {\n      return format;\n    };\n    scale.copy = function() {\n      return d3_time_scale(linear.copy(), methods, format);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_time_scaleDate(t) {\n    return new Date(t);\n  }\n  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \".%L\", function(d) {\n    return d.getMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getDay() && d.getDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  var d3_time_scaleMilliseconds = {\n    range: function(start, stop, step) {\n      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n    },\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  d3_time_scaleLocalMethods.year = d3_time.year;\n  d3_time.scale = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n  };\n  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {\n    return [ m[0].utc, m[1] ];\n  });\n  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \".%L\", function(d) {\n    return d.getUTCMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getUTCSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getUTCMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getUTCHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getUTCDay() && d.getUTCDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getUTCDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getUTCMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n  d3_time.scale.utc = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n  };\n  d3.text = d3_xhrType(function(request) {\n    return request.responseText;\n  });\n  d3.json = function(url, callback) {\n    return d3_xhr(url, \"application/json\", d3_json, callback);\n  };\n  function d3_json(request) {\n    return JSON.parse(request.responseText);\n  }\n  d3.html = function(url, callback) {\n    return d3_xhr(url, \"text/html\", d3_html, callback);\n  };\n  function d3_html(request) {\n    var range = d3_document.createRange();\n    range.selectNode(d3_document.body);\n    return range.createContextualFragment(request.responseText);\n  }\n  d3.xml = d3_xhrType(function(request) {\n    return request.responseXML;\n  });\n  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else {}\n}();\n\n//# sourceURL=webpack:///./node_modules/d3/d3.js?");

/***/ }),

/***/ "./node_modules/eslint-loader/index.js?!./packages/vendors/pptx/worker/pptx.worker.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/eslint-loader??ref--14-0!./packages/vendors/pptx/worker/pptx.worker.js ***!
  \*********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../process */ \"./packages/vendors/pptx/process.js\");\n\n\n\n\nObject(_process__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\n  (func) => {\n    self.onmessage = (e) => func(e.data)\n  },\n  (msg) => self.postMessage(msg)\n)\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_process__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n\n//# sourceURL=webpack:///./packages/vendors/pptx/worker/pptx.worker.js?./node_modules/eslint-loader??ref--14-0");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack:///./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack:///./node_modules/isarray/index.js?");

/***/ }),

/***/ "./node_modules/jszip/dist/jszip.min.js":
/*!**********************************************!*\
  !*** ./node_modules/jszip/dist/jszip.min.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer, global, process) {var require;var require;/*!\n\nJSZip v3.10.1 - A JavaScript class for generating and reading zip files\n<http://stuartk.com/jszip>\n\n(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>\nDual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.\n\nJSZip uses the library pako released under the MIT license :\nhttps://github.com/nodeca/pako/blob/main/LICENSE\n*/\n\n!function(e){if(true)module.exports=e();else {}}(function(){return function s(a,o,h){function u(r,e){if(!o[r]){if(!a[r]){var t=\"function\"==typeof require&&require;if(!e&&t)return require(r,!0);if(l)return l(r,!0);var n=new Error(\"Cannot find module '\"+r+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}var i=o[r]={exports:{}};a[r][0].call(i.exports,function(e){var t=a[r][1][e];return u(t||e)},i,i.exports,s,a,o,h)}return o[r].exports}for(var l=\"function\"==typeof require&&require,e=0;e<h.length;e++)u(h[e]);return u}({1:[function(e,t,r){\"use strict\";var d=e(\"./utils\"),c=e(\"./support\"),p=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";r.encode=function(e){for(var t,r,n,i,s,a,o,h=[],u=0,l=e.length,f=l,c=\"string\"!==d.getTypeOf(e);u<e.length;)f=l-u,n=c?(t=e[u++],r=u<l?e[u++]:0,u<l?e[u++]:0):(t=e.charCodeAt(u++),r=u<l?e.charCodeAt(u++):0,u<l?e.charCodeAt(u++):0),i=t>>2,s=(3&t)<<4|r>>4,a=1<f?(15&r)<<2|n>>6:64,o=2<f?63&n:64,h.push(p.charAt(i)+p.charAt(s)+p.charAt(a)+p.charAt(o));return h.join(\"\")},r.decode=function(e){var t,r,n,i,s,a,o=0,h=0,u=\"data:\";if(e.substr(0,u.length)===u)throw new Error(\"Invalid base64 input, it looks like a data url.\");var l,f=3*(e=e.replace(/[^A-Za-z0-9+/=]/g,\"\")).length/4;if(e.charAt(e.length-1)===p.charAt(64)&&f--,e.charAt(e.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error(\"Invalid base64 input, bad content length.\");for(l=c.uint8array?new Uint8Array(0|f):new Array(0|f);o<e.length;)t=p.indexOf(e.charAt(o++))<<2|(i=p.indexOf(e.charAt(o++)))>>4,r=(15&i)<<4|(s=p.indexOf(e.charAt(o++)))>>2,n=(3&s)<<6|(a=p.indexOf(e.charAt(o++))),l[h++]=t,64!==s&&(l[h++]=r),64!==a&&(l[h++]=n);return l}},{\"./support\":30,\"./utils\":32}],2:[function(e,t,r){\"use strict\";var n=e(\"./external\"),i=e(\"./stream/DataWorker\"),s=e(\"./stream/Crc32Probe\"),a=e(\"./stream/DataLengthProbe\");function o(e,t,r,n,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=i}o.prototype={getContentWorker:function(){var e=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a(\"data_length\")),t=this;return e.on(\"end\",function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error(\"Bug : uncompressed data size mismatch\")}),e},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo(\"compressedSize\",this.compressedSize).withStreamInfo(\"uncompressedSize\",this.uncompressedSize).withStreamInfo(\"crc32\",this.crc32).withStreamInfo(\"compression\",this.compression)}},o.createWorkerFrom=function(e,t,r){return e.pipe(new s).pipe(new a(\"uncompressedSize\")).pipe(t.compressWorker(r)).pipe(new a(\"compressedSize\")).withStreamInfo(\"compression\",t)},t.exports=o},{\"./external\":6,\"./stream/Crc32Probe\":25,\"./stream/DataLengthProbe\":26,\"./stream/DataWorker\":27}],3:[function(e,t,r){\"use strict\";var n=e(\"./stream/GenericWorker\");r.STORE={magic:\"\\0\\0\",compressWorker:function(){return new n(\"STORE compression\")},uncompressWorker:function(){return new n(\"STORE decompression\")}},r.DEFLATE=e(\"./flate\")},{\"./flate\":7,\"./stream/GenericWorker\":28}],4:[function(e,t,r){\"use strict\";var n=e(\"./utils\");var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?\"string\"!==n.getTypeOf(e)?function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return-1^e}(0|t,e,e.length,0):function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t.charCodeAt(a))];return-1^e}(0|t,e,e.length,0):0}},{\"./utils\":32}],5:[function(e,t,r){\"use strict\";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(e,t,r){\"use strict\";var n=null;n=\"undefined\"!=typeof Promise?Promise:e(\"lie\"),t.exports={Promise:n}},{lie:37}],7:[function(e,t,r){\"use strict\";var n=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Uint32Array,i=e(\"pako\"),s=e(\"./utils\"),a=e(\"./stream/GenericWorker\"),o=n?\"uint8array\":\"array\";function h(e,t){a.call(this,\"FlateWorker/\"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}r.magic=\"\\b\\0\",s.inherits(h,a),h.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,e.data),!1)},h.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},h.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},h.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta})}},r.compressWorker=function(e){return new h(\"Deflate\",e)},r.uncompressWorker=function(){return new h(\"Inflate\",{})}},{\"./stream/GenericWorker\":28,\"./utils\":32,pako:38}],8:[function(e,t,r){\"use strict\";function A(e,t){var r,n=\"\";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function n(e,t,r,n,i,s){var a,o,h=e.file,u=e.compression,l=s!==O.utf8encode,f=I.transformTo(\"string\",s(h.name)),c=I.transformTo(\"string\",O.utf8encode(h.name)),d=h.comment,p=I.transformTo(\"string\",s(d)),m=I.transformTo(\"string\",O.utf8encode(d)),_=c.length!==h.name.length,g=m.length!==d.length,b=\"\",v=\"\",y=\"\",w=h.dir,k=h.date,x={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(x.crc32=e.crc32,x.compressedSize=e.compressedSize,x.uncompressedSize=e.uncompressedSize);var S=0;t&&(S|=8),l||!_&&!g||(S|=2048);var z=0,C=0;w&&(z|=16),\"UNIX\"===i?(C=798,z|=function(e,t){var r=e;return e||(r=t?16893:33204),(65535&r)<<16}(h.unixPermissions,w)):(C=20,z|=function(e){return 63&(e||0)}(h.dosPermissions)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v=A(1,1)+A(B(f),4)+c,b+=\"up\"+A(v.length,2)+v),g&&(y=A(1,1)+A(B(p),4)+m,b+=\"uc\"+A(y.length,2)+y);var E=\"\";return E+=\"\\n\\0\",E+=A(S,2),E+=u.magic,E+=A(a,2),E+=A(o,2),E+=A(x.crc32,4),E+=A(x.compressedSize,4),E+=A(x.uncompressedSize,4),E+=A(f.length,2),E+=A(b.length,2),{fileRecord:R.LOCAL_FILE_HEADER+E+f+b,dirRecord:R.CENTRAL_FILE_HEADER+A(C,2)+E+A(p.length,2)+\"\\0\\0\\0\\0\"+A(z,4)+A(n,4)+f+b+p}}var I=e(\"../utils\"),i=e(\"../stream/GenericWorker\"),O=e(\"../utf8\"),B=e(\"../crc32\"),R=e(\"../signature\");function s(e,t,r,n){i.call(this,\"ZipFileWorker\"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}I.inherits(s,i),s.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,i.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}))},s.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=n(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},s.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,r=n(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),t)this.push({data:function(e){return R.DATA_DESCRIPTOR+A(e.crc32,4)+A(e.compressedSize,4)+A(e.uncompressedSize,4)}(e),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},s.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r=this.bytesWritten-e,n=function(e,t,r,n,i){var s=I.transformTo(\"string\",i(n));return R.CENTRAL_DIRECTORY_END+\"\\0\\0\\0\\0\"+A(e,2)+A(e,2)+A(t,4)+A(r,4)+A(s.length,2)+s}(this.dirRecords.length,r,e,this.zipComment,this.encodeFileName);this.push({data:n,meta:{percent:100}})},s.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},s.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on(\"data\",function(e){t.processChunk(e)}),e.on(\"end\",function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()}),e.on(\"error\",function(e){t.error(e)}),this},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},s.prototype.error=function(e){var t=this._sources;if(!i.prototype.error.call(this,e))return!1;for(var r=0;r<t.length;r++)try{t[r].error(e)}catch(e){}return!0},s.prototype.lock=function(){i.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=s},{\"../crc32\":4,\"../signature\":23,\"../stream/GenericWorker\":28,\"../utf8\":31,\"../utils\":32}],9:[function(e,t,r){\"use strict\";var u=e(\"../compressions\"),n=e(\"./ZipFileWorker\");r.generateWorker=function(e,a,t){var o=new n(a.streamFiles,t,a.platform,a.encodeFileName),h=0;try{e.forEach(function(e,t){h++;var r=function(e,t){var r=e||t,n=u[r];if(!n)throw new Error(r+\" is not a valid compression method !\");return n}(t.options.compression,a.compression),n=t.options.compressionOptions||a.compressionOptions||{},i=t.dir,s=t.date;t._compressWorker(r,n).withStreamInfo(\"file\",{name:e,dir:i,date:s,comment:t.comment||\"\",unixPermissions:t.unixPermissions,dosPermissions:t.dosPermissions}).pipe(o)}),o.entriesCount=h}catch(e){o.error(e)}return o}},{\"../compressions\":3,\"./ZipFileWorker\":8}],10:[function(e,t,r){\"use strict\";function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error(\"The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.\");this.files=Object.create(null),this.comment=null,this.root=\"\",this.clone=function(){var e=new n;for(var t in this)\"function\"!=typeof this[t]&&(e[t]=this[t]);return e}}(n.prototype=e(\"./object\")).loadAsync=e(\"./load\"),n.support=e(\"./support\"),n.defaults=e(\"./defaults\"),n.version=\"3.10.1\",n.loadAsync=function(e,t){return(new n).loadAsync(e,t)},n.external=e(\"./external\"),t.exports=n},{\"./defaults\":5,\"./external\":6,\"./load\":11,\"./object\":15,\"./support\":30}],11:[function(e,t,r){\"use strict\";var u=e(\"./utils\"),i=e(\"./external\"),n=e(\"./utf8\"),s=e(\"./zipEntries\"),a=e(\"./stream/Crc32Probe\"),l=e(\"./nodejsUtils\");function f(n){return new i.Promise(function(e,t){var r=n.decompressed.getContentWorker().pipe(new a);r.on(\"error\",function(e){t(e)}).on(\"end\",function(){r.streamInfo.crc32!==n.decompressed.crc32?t(new Error(\"Corrupted zip : CRC32 mismatch\")):e()}).resume()})}t.exports=function(e,o){var h=this;return o=u.extend(o||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:n.utf8decode}),l.isNode&&l.isStream(e)?i.Promise.reject(new Error(\"JSZip can't accept a stream when loading a zip file.\")):u.prepareContent(\"the loaded zip file\",e,!0,o.optimizedBinaryString,o.base64).then(function(e){var t=new s(o);return t.load(e),t}).then(function(e){var t=[i.Promise.resolve(e)],r=e.files;if(o.checkCRC32)for(var n=0;n<r.length;n++)t.push(f(r[n]));return i.Promise.all(t)}).then(function(e){for(var t=e.shift(),r=t.files,n=0;n<r.length;n++){var i=r[n],s=i.fileNameStr,a=u.resolve(i.fileNameStr);h.file(a,i.decompressed,{binary:!0,optimizedBinaryString:!0,date:i.date,dir:i.dir,comment:i.fileCommentStr.length?i.fileCommentStr:null,unixPermissions:i.unixPermissions,dosPermissions:i.dosPermissions,createFolders:o.createFolders}),i.dir||(h.file(a).unsafeOriginalName=s)}return t.zipComment.length&&(h.comment=t.zipComment),h})}},{\"./external\":6,\"./nodejsUtils\":14,\"./stream/Crc32Probe\":25,\"./utf8\":31,\"./utils\":32,\"./zipEntries\":33}],12:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"../stream/GenericWorker\");function s(e,t){i.call(this,\"Nodejs stream input adapter for \"+e),this._upstreamEnded=!1,this._bindStream(t)}n.inherits(s,i),s.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on(\"data\",function(e){t.push({data:e,meta:{percent:0}})}).on(\"error\",function(e){t.isPaused?this.generatedError=e:t.error(e)}).on(\"end\",function(){t.isPaused?t._upstreamEnded=!0:t.end()})},s.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=s},{\"../stream/GenericWorker\":28,\"../utils\":32}],13:[function(e,t,r){\"use strict\";var i=e(\"readable-stream\").Readable;function n(e,t,r){i.call(this,t),this._helper=e;var n=this;e.on(\"data\",function(e,t){n.push(e)||n._helper.pause(),r&&r(t)}).on(\"error\",function(e){n.emit(\"error\",e)}).on(\"end\",function(){n.push(null)})}e(\"../utils\").inherits(n,i),n.prototype._read=function(){this._helper.resume()},t.exports=n},{\"../utils\":32,\"readable-stream\":16}],14:[function(e,t,r){\"use strict\";t.exports={isNode:\"undefined\"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if(\"number\"==typeof e)throw new Error('The \"data\" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&\"function\"==typeof e.on&&\"function\"==typeof e.pause&&\"function\"==typeof e.resume}}},{}],15:[function(e,t,r){\"use strict\";function s(e,t,r){var n,i=u.getTypeOf(t),s=u.extend(r||{},f);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),\"string\"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(e=g(e)),s.createFolders&&(n=_(e))&&b.call(this,n,!0);var a=\"string\"===i&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!a),(t instanceof c&&0===t.uncompressedSize||s.dir||!t||0===t.length)&&(s.base64=!1,s.binary=!0,t=\"\",s.compression=\"STORE\",i=\"string\");var o=null;o=t instanceof c||t instanceof l?t:p.isNode&&p.isStream(t)?new m(e,t):u.prepareContent(e,t,s.binary,s.optimizedBinaryString,s.base64);var h=new d(e,o,s);this.files[e]=h}var i=e(\"./utf8\"),u=e(\"./utils\"),l=e(\"./stream/GenericWorker\"),a=e(\"./stream/StreamHelper\"),f=e(\"./defaults\"),c=e(\"./compressedObject\"),d=e(\"./zipObject\"),o=e(\"./generate\"),p=e(\"./nodejsUtils\"),m=e(\"./nodejs/NodejsStreamInputAdapter\"),_=function(e){\"/\"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf(\"/\");return 0<t?e.substring(0,t):\"\"},g=function(e){return\"/\"!==e.slice(-1)&&(e+=\"/\"),e},b=function(e,t){return t=void 0!==t?t:f.createFolders,e=g(e),this.files[e]||s.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function h(e){return\"[object RegExp]\"===Object.prototype.toString.call(e)}var n={load:function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},forEach:function(e){var t,r,n;for(t in this.files)n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n)},filter:function(r){var n=[];return this.forEach(function(e,t){r(e,t)&&n.push(t)}),n},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,s.call(this,e,t,r),this;if(h(e)){var n=e;return this.filter(function(e,t){return!t.dir&&n.test(e)})}var i=this.files[this.root+e];return i&&!i.dir?i:null},folder:function(r){if(!r)return this;if(h(r))return this.filter(function(e,t){return t.dir&&r.test(e)});var e=this.root+r,t=b.call(this,e),n=this.clone();return n.root=t.name,n},remove:function(r){r=this.root+r;var e=this.files[r];if(e||(\"/\"!==r.slice(-1)&&(r+=\"/\"),e=this.files[r]),e&&!e.dir)delete this.files[r];else for(var t=this.filter(function(e,t){return t.name.slice(0,r.length)===r}),n=0;n<t.length;n++)delete this.files[t[n].name];return this},generate:function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},generateInternalStream:function(e){var t,r={};try{if((r=u.extend(e||{},{streamFiles:!1,compression:\"STORE\",compressionOptions:null,type:\"\",platform:\"DOS\",comment:null,mimeType:\"application/zip\",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),\"binarystring\"===r.type&&(r.type=\"string\"),!r.type)throw new Error(\"No output type specified.\");u.checkSupport(r.type),\"darwin\"!==r.platform&&\"freebsd\"!==r.platform&&\"linux\"!==r.platform&&\"sunos\"!==r.platform||(r.platform=\"UNIX\"),\"win32\"===r.platform&&(r.platform=\"DOS\");var n=r.comment||this.comment||\"\";t=o.generateWorker(this,r,n)}catch(e){(t=new l(\"error\")).error(e)}return new a(t,r.type||\"string\",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type=\"nodebuffer\"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=n},{\"./compressedObject\":2,\"./defaults\":5,\"./generate\":9,\"./nodejs/NodejsStreamInputAdapter\":12,\"./nodejsUtils\":14,\"./stream/GenericWorker\":28,\"./stream/StreamHelper\":29,\"./utf8\":31,\"./utils\":32,\"./zipObject\":35}],16:[function(e,t,r){\"use strict\";t.exports=e(\"stream\")},{stream:void 0}],17:[function(e,t,r){\"use strict\";var n=e(\"./DataReader\");function i(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e(\"../utils\").inherits(i,n),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===t&&this.data[s+1]===r&&this.data[s+2]===n&&this.data[s+3]===i)return s-this.zero;return-1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.readData(4);return t===s[0]&&r===s[1]&&n===s[2]&&i===s[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./DataReader\":18}],18:[function(e,t,r){\"use strict\";var n=e(\"../utils\");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error(\"End of data reached (data length = \"+this.length+\", asked index = \"+e+\"). Corrupted zip ?\")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo(\"string\",this.readData(e))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i},{\"../utils\":32}],19:[function(e,t,r){\"use strict\";var n=e(\"./Uint8ArrayReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./Uint8ArrayReader\":21}],20:[function(e,t,r){\"use strict\";var n=e(\"./DataReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./DataReader\":18}],21:[function(e,t,r){\"use strict\";var n=e(\"./ArrayReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./ArrayReader\":17}],22:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"../support\"),s=e(\"./ArrayReader\"),a=e(\"./StringReader\"),o=e(\"./NodeBufferReader\"),h=e(\"./Uint8ArrayReader\");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),\"string\"!==t||i.uint8array?\"nodebuffer\"===t?new o(e):i.uint8array?new h(n.transformTo(\"uint8array\",e)):new s(n.transformTo(\"array\",e)):new a(e)}},{\"../support\":30,\"../utils\":32,\"./ArrayReader\":17,\"./NodeBufferReader\":19,\"./StringReader\":20,\"./Uint8ArrayReader\":21}],23:[function(e,t,r){\"use strict\";r.LOCAL_FILE_HEADER=\"PK\u0003\u0004\",r.CENTRAL_FILE_HEADER=\"PK\u0001\u0002\",r.CENTRAL_DIRECTORY_END=\"PK\u0005\u0006\",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR=\"PK\u0006\u0007\",r.ZIP64_CENTRAL_DIRECTORY_END=\"PK\u0006\u0006\",r.DATA_DESCRIPTOR=\"PK\u0007\\b\"},{}],24:[function(e,t,r){\"use strict\";var n=e(\"./GenericWorker\"),i=e(\"../utils\");function s(e){n.call(this,\"ConvertWorker to \"+e),this.destType=e}i.inherits(s,n),s.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta})},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],25:[function(e,t,r){\"use strict\";var n=e(\"./GenericWorker\"),i=e(\"../crc32\");function s(){n.call(this,\"Crc32Probe\"),this.withStreamInfo(\"crc32\",0)}e(\"../utils\").inherits(s,n),s.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=s},{\"../crc32\":4,\"../utils\":32,\"./GenericWorker\":28}],26:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"./GenericWorker\");function s(e){i.call(this,\"DataLengthProbe for \"+e),this.propName=e,this.withStreamInfo(e,0)}n.inherits(s,i),s.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}i.prototype.processChunk.call(this,e)},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],27:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"./GenericWorker\");function s(e){i.call(this,\"DataWorker\");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type=\"\",this._tickScheduled=!1,e.then(function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat()},function(e){t.error(e)})}n.inherits(s,i),s.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case\"string\":e=this.data.substring(this.index,t);break;case\"uint8array\":e=this.data.subarray(this.index,t);break;case\"array\":case\"nodebuffer\":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],28:[function(e,t,r){\"use strict\";function n(e){this.name=e||\"default\",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(e){this.emit(\"data\",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit(\"end\"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit(\"error\",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit(\"error\",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on(\"data\",function(e){t.processChunk(e)}),e.on(\"end\",function(){t.end()}),e.on(\"error\",function(e){t.error(e)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e=\"Worker \"+this.name;return this.previous?this.previous+\" -> \"+e:e}},t.exports=n},{}],29:[function(e,t,r){\"use strict\";var h=e(\"../utils\"),i=e(\"./ConvertWorker\"),s=e(\"./GenericWorker\"),u=e(\"../base64\"),n=e(\"../support\"),a=e(\"../external\"),o=null;if(n.nodestream)try{o=e(\"../nodejs/NodejsStreamOutputAdapter\")}catch(e){}function l(e,o){return new a.Promise(function(t,r){var n=[],i=e._internalType,s=e._outputType,a=e._mimeType;e.on(\"data\",function(e,t){n.push(e),o&&o(t)}).on(\"error\",function(e){n=[],r(e)}).on(\"end\",function(){try{var e=function(e,t,r){switch(e){case\"blob\":return h.newBlob(h.transformTo(\"arraybuffer\",t),r);case\"base64\":return u.encode(t);default:return h.transformTo(e,t)}}(s,function(e,t){var r,n=0,i=null,s=0;for(r=0;r<t.length;r++)s+=t[r].length;switch(e){case\"string\":return t.join(\"\");case\"array\":return Array.prototype.concat.apply([],t);case\"uint8array\":for(i=new Uint8Array(s),r=0;r<t.length;r++)i.set(t[r],n),n+=t[r].length;return i;case\"nodebuffer\":return Buffer.concat(t);default:throw new Error(\"concat : unsupported type '\"+e+\"'\")}}(i,n),a);t(e)}catch(e){r(e)}n=[]}).resume()})}function f(e,t,r){var n=t;switch(t){case\"blob\":case\"arraybuffer\":n=\"uint8array\";break;case\"base64\":n=\"string\"}try{this._internalType=n,this._outputType=t,this._mimeType=r,h.checkSupport(n),this._worker=e.pipe(new i(n)),e.lock()}catch(e){this._worker=new s(\"error\"),this._worker.error(e)}}f.prototype={accumulate:function(e){return l(this,e)},on:function(e,t){var r=this;return\"data\"===e?this._worker.on(e,function(e){t.call(r,e.data,e.meta)}):this._worker.on(e,function(){h.delay(t,arguments,r)}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(h.checkSupport(\"nodestream\"),\"nodebuffer\"!==this._outputType)throw new Error(this._outputType+\" is not supported by this method\");return new o(this,{objectMode:\"nodebuffer\"!==this._outputType},e)}},t.exports=f},{\"../base64\":1,\"../external\":6,\"../nodejs/NodejsStreamOutputAdapter\":13,\"../support\":30,\"../utils\":32,\"./ConvertWorker\":24,\"./GenericWorker\":28}],30:[function(e,t,r){\"use strict\";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer=\"undefined\"!=typeof ArrayBuffer&&\"undefined\"!=typeof Uint8Array,r.nodebuffer=\"undefined\"!=typeof Buffer,r.uint8array=\"undefined\"!=typeof Uint8Array,\"undefined\"==typeof ArrayBuffer)r.blob=!1;else{var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:\"application/zip\"}).size}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=0===i.getBlob(\"application/zip\").size}catch(e){r.blob=!1}}}try{r.nodestream=!!e(\"readable-stream\").Readable}catch(e){r.nodestream=!1}},{\"readable-stream\":16}],31:[function(e,t,s){\"use strict\";for(var o=e(\"./utils\"),h=e(\"./support\"),r=e(\"./nodejsUtils\"),n=e(\"./stream/GenericWorker\"),u=new Array(256),i=0;i<256;i++)u[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;u[254]=u[254]=1;function a(){n.call(this,\"utf-8 decode\"),this.leftOver=null}function l(){n.call(this,\"utf-8 encode\")}s.utf8encode=function(e){return h.nodebuffer?r.newBufferFrom(e,\"utf-8\"):function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=h.uint8array?new Uint8Array(o):new Array(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t}(e)},s.utf8decode=function(e){return h.nodebuffer?o.transformTo(\"nodebuffer\",e).toString(\"utf-8\"):function(e){var t,r,n,i,s=e.length,a=new Array(2*s);for(t=r=0;t<s;)if((n=e[t++])<128)a[r++]=n;else if(4<(i=u[n]))a[r++]=65533,t+=i-1;else{for(n&=2===i?31:3===i?15:7;1<i&&t<s;)n=n<<6|63&e[t++],i--;1<i?a[r++]=65533:n<65536?a[r++]=n:(n-=65536,a[r++]=55296|n>>10&1023,a[r++]=56320|1023&n)}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(e=o.transformTo(h.uint8array?\"uint8array\":\"array\",e))},o.inherits(a,n),a.prototype.processChunk=function(e){var t=o.transformTo(h.uint8array?\"uint8array\":\"array\",e.data);if(this.leftOver&&this.leftOver.length){if(h.uint8array){var r=t;(t=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),t.set(r,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var n=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t}(t),i=t;n!==t.length&&(h.uint8array?(i=t.subarray(0,n),this.leftOver=t.subarray(n,t.length)):(i=t.slice(0,n),this.leftOver=t.slice(n,t.length))),this.push({data:s.utf8decode(i),meta:e.meta})},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},s.Utf8DecodeWorker=a,o.inherits(l,n),l.prototype.processChunk=function(e){this.push({data:s.utf8encode(e.data),meta:e.meta})},s.Utf8EncodeWorker=l},{\"./nodejsUtils\":14,\"./stream/GenericWorker\":28,\"./support\":30,\"./utils\":32}],32:[function(e,t,a){\"use strict\";var o=e(\"./support\"),h=e(\"./base64\"),r=e(\"./nodejsUtils\"),u=e(\"./external\");function n(e){return e}function l(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}e(\"setimmediate\"),a.newBlob=function(t,r){a.checkSupport(\"blob\");try{return new Blob([t],{type:r})}catch(e){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(t),n.getBlob(r)}catch(e){throw new Error(\"Bug : can't construct the Blob.\")}}};var i={stringifyByChunk:function(e,t,r){var n=[],i=0,s=e.length;if(s<=r)return String.fromCharCode.apply(null,e);for(;i<s;)\"array\"===t||\"nodebuffer\"===t?n.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+r,s)))):n.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+r,s)))),i+=r;return n.join(\"\")},stringifyByChar:function(e){for(var t=\"\",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return o.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return o.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(e){return!1}}()}};function s(e){var t=65536,r=a.getTypeOf(e),n=!0;if(\"uint8array\"===r?n=i.applyCanBeUsed.uint8array:\"nodebuffer\"===r&&(n=i.applyCanBeUsed.nodebuffer),n)for(;1<t;)try{return i.stringifyByChunk(e,r,t)}catch(e){t=Math.floor(t/2)}return i.stringifyByChar(e)}function f(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}a.applyFromCharCode=s;var c={};c.string={string:n,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return c.string.uint8array(e).buffer},uint8array:function(e){return l(e,new Uint8Array(e.length))},nodebuffer:function(e){return l(e,r.allocBuffer(e.length))}},c.array={string:s,array:n,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(e)}},c.arraybuffer={string:function(e){return s(new Uint8Array(e))},array:function(e){return f(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:n,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(new Uint8Array(e))}},c.uint8array={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:n,nodebuffer:function(e){return r.newBufferFrom(e)}},c.nodebuffer={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return c.nodebuffer.uint8array(e).buffer},uint8array:function(e){return f(e,new Uint8Array(e.length))},nodebuffer:n},a.transformTo=function(e,t){if(t=t||\"\",!e)return t;a.checkSupport(e);var r=a.getTypeOf(t);return c[r][e](t)},a.resolve=function(e){for(var t=e.split(\"/\"),r=[],n=0;n<t.length;n++){var i=t[n];\".\"===i||\"\"===i&&0!==n&&n!==t.length-1||(\"..\"===i?r.pop():r.push(i))}return r.join(\"/\")},a.getTypeOf=function(e){return\"string\"==typeof e?\"string\":\"[object Array]\"===Object.prototype.toString.call(e)?\"array\":o.nodebuffer&&r.isBuffer(e)?\"nodebuffer\":o.uint8array&&e instanceof Uint8Array?\"uint8array\":o.arraybuffer&&e instanceof ArrayBuffer?\"arraybuffer\":void 0},a.checkSupport=function(e){if(!o[e.toLowerCase()])throw new Error(e+\" is not supported by this platform\")},a.MAX_VALUE_16BITS=65535,a.MAX_VALUE_32BITS=-1,a.pretty=function(e){var t,r,n=\"\";for(r=0;r<(e||\"\").length;r++)n+=\"\\\\x\"+((t=e.charCodeAt(r))<16?\"0\":\"\")+t.toString(16).toUpperCase();return n},a.delay=function(e,t,r){setImmediate(function(){e.apply(r||null,t||[])})},a.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r},a.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},a.prepareContent=function(r,e,n,i,s){return u.Promise.resolve(e).then(function(n){return o.blob&&(n instanceof Blob||-1!==[\"[object File]\",\"[object Blob]\"].indexOf(Object.prototype.toString.call(n)))&&\"undefined\"!=typeof FileReader?new u.Promise(function(t,r){var e=new FileReader;e.onload=function(e){t(e.target.result)},e.onerror=function(e){r(e.target.error)},e.readAsArrayBuffer(n)}):n}).then(function(e){var t=a.getTypeOf(e);return t?(\"arraybuffer\"===t?e=a.transformTo(\"uint8array\",e):\"string\"===t&&(s?e=h.decode(e):n&&!0!==i&&(e=function(e){return l(e,o.uint8array?new Uint8Array(e.length):new Array(e.length))}(e))),e):u.Promise.reject(new Error(\"Can't read the data of '\"+r+\"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?\"))})}},{\"./base64\":1,\"./external\":6,\"./nodejsUtils\":14,\"./support\":30,setimmediate:54}],33:[function(e,t,r){\"use strict\";var n=e(\"./reader/readerFor\"),i=e(\"./utils\"),s=e(\"./signature\"),a=e(\"./zipEntry\"),o=e(\"./support\");function h(e){this.files=[],this.loadOptions=e}h.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error(\"Corrupted zip or bug: unexpected signature (\"+i.pretty(t)+\", expected \"+i.pretty(e)+\")\")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=o.uint8array?\"uint8array\":\"array\",r=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error(\"Multi-volumes zip are not supported\")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error(\"Corrupted zip or bug: expected \"+this.centralDirRecords+\" records in central dir, got \"+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(e<0)throw!this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error(\"Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html\"):new Error(\"Corrupted zip: can't find end of central directory\");this.reader.setIndex(e);var t=e;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory locator\");if(this.reader.setIndex(e),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory\");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,s.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error(\"Corrupted zip: missing \"+Math.abs(n)+\" bytes.\")},prepareReader:function(e){this.reader=n(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=h},{\"./reader/readerFor\":22,\"./signature\":23,\"./support\":30,\"./utils\":32,\"./zipEntry\":34}],34:[function(e,t,r){\"use strict\";var n=e(\"./reader/readerFor\"),s=e(\"./utils\"),i=e(\"./compressedObject\"),a=e(\"./crc32\"),o=e(\"./utf8\"),h=e(\"./compressions\"),u=e(\"./support\");function l(e,t){this.options=e,this.loadOptions=t}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error(\"Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)\");if(null===(t=function(e){for(var t in h)if(Object.prototype.hasOwnProperty.call(h,t)&&h[t].magic===e)return h[t];return null}(this.compressionMethod)))throw new Error(\"Corrupted zip : compression \"+s.pretty(this.compressionMethod)+\" unknown (inner file : \"+s.transformTo(\"string\",this.fileName)+\")\");this.decompressed=new i(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error(\"Encrypted zip are not supported\");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||\"/\"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var e=n(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(e){var t,r,n,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(i)},handleUTF8:function(){var e=u.uint8array?\"uint8array\":\"array\";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var r=s.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var i=s.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(i)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileName)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileComment)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null}},t.exports=l},{\"./compressedObject\":2,\"./compressions\":3,\"./crc32\":4,\"./reader/readerFor\":22,\"./support\":30,\"./utf8\":31,\"./utils\":32}],35:[function(e,t,r){\"use strict\";function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var s=e(\"./stream/StreamHelper\"),i=e(\"./stream/DataWorker\"),a=e(\"./utf8\"),o=e(\"./compressedObject\"),h=e(\"./stream/GenericWorker\");n.prototype={internalStream:function(e){var t=null,r=\"string\";try{if(!e)throw new Error(\"No output type specified.\");var n=\"string\"===(r=e.toLowerCase())||\"text\"===r;\"binarystring\"!==r&&\"text\"!==r||(r=\"string\"),t=this._decompressWorker();var i=!this._dataBinary;i&&!n&&(t=t.pipe(new a.Utf8EncodeWorker)),!i&&n&&(t=t.pipe(new a.Utf8DecodeWorker))}catch(e){(t=new h(\"error\")).error(e)}return new s(t,r,\"\")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||\"nodebuffer\").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof o&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof h?this._data:new i(this._data)}};for(var u=[\"asText\",\"asBinary\",\"asNodeBuffer\",\"asUint8Array\",\"asArrayBuffer\"],l=function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},f=0;f<u.length;f++)n.prototype[u[f]]=l;t.exports=n},{\"./compressedObject\":2,\"./stream/DataWorker\":27,\"./stream/GenericWorker\":28,\"./stream/StreamHelper\":29,\"./utf8\":31}],36:[function(e,l,t){(function(t){\"use strict\";var r,n,e=t.MutationObserver||t.WebKitMutationObserver;if(e){var i=0,s=new e(u),a=t.document.createTextNode(\"\");s.observe(a,{characterData:!0}),r=function(){a.data=i=++i%2}}else if(t.setImmediate||void 0===t.MessageChannel)r=\"document\"in t&&\"onreadystatechange\"in t.document.createElement(\"script\")?function(){var e=t.document.createElement(\"script\");e.onreadystatechange=function(){u(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},t.document.documentElement.appendChild(e)}:function(){setTimeout(u,0)};else{var o=new t.MessageChannel;o.port1.onmessage=u,r=function(){o.port2.postMessage(0)}}var h=[];function u(){var e,t;n=!0;for(var r=h.length;r;){for(t=h,h=[],e=-1;++e<r;)t[e]();r=h.length}n=!1}l.exports=function(e){1!==h.push(e)||n||r()}}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],37:[function(e,t,r){\"use strict\";var i=e(\"immediate\");function u(){}var l={},s=[\"REJECTED\"],a=[\"FULFILLED\"],n=[\"PENDING\"];function o(e){if(\"function\"!=typeof e)throw new TypeError(\"resolver must be a function\");this.state=n,this.queue=[],this.outcome=void 0,e!==u&&d(this,e)}function h(e,t,r){this.promise=e,\"function\"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),\"function\"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function f(t,r,n){i(function(){var e;try{e=r(n)}catch(e){return l.reject(t,e)}e===t?l.reject(t,new TypeError(\"Cannot resolve promise with itself\")):l.resolve(t,e)})}function c(e){var t=e&&e.then;if(e&&(\"object\"==typeof e||\"function\"==typeof e)&&\"function\"==typeof t)return function(){t.apply(e,arguments)}}function d(t,e){var r=!1;function n(e){r||(r=!0,l.reject(t,e))}function i(e){r||(r=!0,l.resolve(t,e))}var s=p(function(){e(i,n)});\"error\"===s.status&&n(s.value)}function p(e,t){var r={};try{r.value=e(t),r.status=\"success\"}catch(e){r.status=\"error\",r.value=e}return r}(t.exports=o).prototype.finally=function(t){if(\"function\"!=typeof t)return this;var r=this.constructor;return this.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})})},o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){if(\"function\"!=typeof e&&this.state===a||\"function\"!=typeof t&&this.state===s)return this;var r=new this.constructor(u);this.state!==n?f(r,this.state===a?e:t,this.outcome):this.queue.push(new h(r,e,t));return r},h.prototype.callFulfilled=function(e){l.resolve(this.promise,e)},h.prototype.otherCallFulfilled=function(e){f(this.promise,this.onFulfilled,e)},h.prototype.callRejected=function(e){l.reject(this.promise,e)},h.prototype.otherCallRejected=function(e){f(this.promise,this.onRejected,e)},l.resolve=function(e,t){var r=p(c,t);if(\"error\"===r.status)return l.reject(e,r.value);var n=r.value;if(n)d(e,n);else{e.state=a,e.outcome=t;for(var i=-1,s=e.queue.length;++i<s;)e.queue[i].callFulfilled(t)}return e},l.reject=function(e,t){e.state=s,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},o.resolve=function(e){if(e instanceof this)return e;return l.resolve(new this(u),e)},o.reject=function(e){var t=new this(u);return l.reject(t,e)},o.all=function(e){var r=this;if(\"[object Array]\"!==Object.prototype.toString.call(e))return this.reject(new TypeError(\"must be an array\"));var n=e.length,i=!1;if(!n)return this.resolve([]);var s=new Array(n),a=0,t=-1,o=new this(u);for(;++t<n;)h(e[t],t);return o;function h(e,t){r.resolve(e).then(function(e){s[t]=e,++a!==n||i||(i=!0,l.resolve(o,s))},function(e){i||(i=!0,l.reject(o,e))})}},o.race=function(e){var t=this;if(\"[object Array]\"!==Object.prototype.toString.call(e))return this.reject(new TypeError(\"must be an array\"));var r=e.length,n=!1;if(!r)return this.resolve([]);var i=-1,s=new this(u);for(;++i<r;)a=e[i],t.resolve(a).then(function(e){n||(n=!0,l.resolve(s,e))},function(e){n||(n=!0,l.reject(s,e))});var a;return s}},{immediate:36}],38:[function(e,t,r){\"use strict\";var n={};(0,e(\"./lib/utils/common\").assign)(n,e(\"./lib/deflate\"),e(\"./lib/inflate\"),e(\"./lib/zlib/constants\")),t.exports=n},{\"./lib/deflate\":39,\"./lib/inflate\":40,\"./lib/utils/common\":41,\"./lib/zlib/constants\":44}],39:[function(e,t,r){\"use strict\";var a=e(\"./zlib/deflate\"),o=e(\"./utils/common\"),h=e(\"./utils/strings\"),i=e(\"./zlib/messages\"),s=e(\"./zlib/zstream\"),u=Object.prototype.toString,l=0,f=-1,c=0,d=8;function p(e){if(!(this instanceof p))return new p(e);this.options=o.assign({level:f,method:d,chunkSize:16384,windowBits:15,memLevel:8,strategy:c,to:\"\"},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==l)throw new Error(i[r]);if(t.header&&a.deflateSetHeader(this.strm,t.header),t.dictionary){var n;if(n=\"string\"==typeof t.dictionary?h.string2buf(t.dictionary):\"[object ArrayBuffer]\"===u.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=a.deflateSetDictionary(this.strm,n))!==l)throw new Error(i[r]);this._dict_set=!0}}function n(e,t){var r=new p(t);if(r.push(e,!0),r.err)throw r.msg||i[r.err];return r.result}p.prototype.push=function(e,t){var r,n,i=this.strm,s=this.options.chunkSize;if(this.ended)return!1;n=t===~~t?t:!0===t?4:0,\"string\"==typeof e?i.input=h.string2buf(e):\"[object ArrayBuffer]\"===u.call(e)?i.input=new Uint8Array(e):i.input=e,i.next_in=0,i.avail_in=i.input.length;do{if(0===i.avail_out&&(i.output=new o.Buf8(s),i.next_out=0,i.avail_out=s),1!==(r=a.deflate(i,n))&&r!==l)return this.onEnd(r),!(this.ended=!0);0!==i.avail_out&&(0!==i.avail_in||4!==n&&2!==n)||(\"string\"===this.options.to?this.onData(h.buf2binstring(o.shrinkBuf(i.output,i.next_out))):this.onData(o.shrinkBuf(i.output,i.next_out)))}while((0<i.avail_in||0===i.avail_out)&&1!==r);return 4===n?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===l):2!==n||(this.onEnd(l),!(i.avail_out=0))},p.prototype.onData=function(e){this.chunks.push(e)},p.prototype.onEnd=function(e){e===l&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Deflate=p,r.deflate=n,r.deflateRaw=function(e,t){return(t=t||{}).raw=!0,n(e,t)},r.gzip=function(e,t){return(t=t||{}).gzip=!0,n(e,t)}},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/deflate\":46,\"./zlib/messages\":51,\"./zlib/zstream\":53}],40:[function(e,t,r){\"use strict\";var c=e(\"./zlib/inflate\"),d=e(\"./utils/common\"),p=e(\"./utils/strings\"),m=e(\"./zlib/constants\"),n=e(\"./zlib/messages\"),i=e(\"./zlib/zstream\"),s=e(\"./zlib/gzheader\"),_=Object.prototype.toString;function a(e){if(!(this instanceof a))return new a(e);this.options=d.assign({chunkSize:16384,windowBits:0,to:\"\"},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new i,this.strm.avail_out=0;var r=c.inflateInit2(this.strm,t.windowBits);if(r!==m.Z_OK)throw new Error(n[r]);this.header=new s,c.inflateGetHeader(this.strm,this.header)}function o(e,t){var r=new a(t);if(r.push(e,!0),r.err)throw r.msg||n[r.err];return r.result}a.prototype.push=function(e,t){var r,n,i,s,a,o,h=this.strm,u=this.options.chunkSize,l=this.options.dictionary,f=!1;if(this.ended)return!1;n=t===~~t?t:!0===t?m.Z_FINISH:m.Z_NO_FLUSH,\"string\"==typeof e?h.input=p.binstring2buf(e):\"[object ArrayBuffer]\"===_.call(e)?h.input=new Uint8Array(e):h.input=e,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new d.Buf8(u),h.next_out=0,h.avail_out=u),(r=c.inflate(h,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&l&&(o=\"string\"==typeof l?p.string2buf(l):\"[object ArrayBuffer]\"===_.call(l)?new Uint8Array(l):l,r=c.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===f&&(r=m.Z_OK,f=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&r!==m.Z_STREAM_END&&(0!==h.avail_in||n!==m.Z_FINISH&&n!==m.Z_SYNC_FLUSH)||(\"string\"===this.options.to?(i=p.utf8border(h.output,h.next_out),s=h.next_out-i,a=p.buf2string(h.output,i),h.next_out=s,h.avail_out=u-s,s&&d.arraySet(h.output,h.output,i,s,0),this.onData(a)):this.onData(d.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(f=!0)}while((0<h.avail_in||0===h.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(n=m.Z_FINISH),n===m.Z_FINISH?(r=c.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):n!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(h.avail_out=0))},a.prototype.onData=function(e){this.chunks.push(e)},a.prototype.onEnd=function(e){e===m.Z_OK&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=d.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Inflate=a,r.inflate=o,r.inflateRaw=function(e,t){return(t=t||{}).raw=!0,o(e,t)},r.ungzip=o},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/constants\":44,\"./zlib/gzheader\":47,\"./zlib/inflate\":49,\"./zlib/messages\":51,\"./zlib/zstream\":53}],41:[function(e,t,r){\"use strict\";var n=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if(\"object\"!=typeof r)throw new TypeError(r+\"must be non-object\");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n])}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){var t,r,n,i,s,a;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(a=new Uint8Array(n),t=i=0,r=e.length;t<r;t++)s=e[t],a.set(s,i),i+=s.length;return a}},s={arraySet:function(e,t,r,n,i){for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){return[].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s))},r.setTyped(n)},{}],42:[function(e,t,r){\"use strict\";var h=e(\"./common\"),i=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(e){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){s=!1}for(var u=new h.Buf8(256),n=0;n<256;n++)u[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;function l(e,t){if(t<65537&&(e.subarray&&s||!e.subarray&&i))return String.fromCharCode.apply(null,h.shrinkBuf(e,t));for(var r=\"\",n=0;n<t;n++)r+=String.fromCharCode(e[n]);return r}u[254]=u[254]=1,r.string2buf=function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=new h.Buf8(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t},r.buf2binstring=function(e){return l(e,e.length)},r.binstring2buf=function(e){for(var t=new h.Buf8(e.length),r=0,n=t.length;r<n;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,i,s,a=t||e.length,o=new Array(2*a);for(r=n=0;r<a;)if((i=e[r++])<128)o[n++]=i;else if(4<(s=u[i]))o[n++]=65533,r+=s-1;else{for(i&=2===s?31:3===s?15:7;1<s&&r<a;)i=i<<6|63&e[r++],s--;1<s?o[n++]=65533:i<65536?o[n++]=i:(i-=65536,o[n++]=55296|i>>10&1023,o[n++]=56320|1023&i)}return l(o,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t}},{\"./common\":41}],43:[function(e,t,r){\"use strict\";t.exports=function(e,t,r,n){for(var i=65535&e|0,s=e>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(i=i+t[n++]|0)|0,--a;);i%=65521,s%=65521}return i|s<<16|0}},{}],44:[function(e,t,r){\"use strict\";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,r){\"use strict\";var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return-1^e}},{}],46:[function(e,t,r){\"use strict\";var h,c=e(\"../utils/common\"),u=e(\"./trees\"),d=e(\"./adler32\"),p=e(\"./crc32\"),n=e(\"./messages\"),l=0,f=4,m=0,_=-2,g=-1,b=4,i=2,v=8,y=9,s=286,a=30,o=19,w=2*s+1,k=15,x=3,S=258,z=S+x+1,C=42,E=113,A=1,I=2,O=3,B=4;function R(e,t){return e.msg=n[t],t}function T(e){return(e<<1)-(4<e?9:0)}function D(e){for(var t=e.length;0<=--t;)e[t]=0}function F(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(c.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function N(e,t){u._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,F(e.strm)}function U(e,t){e.pending_buf[e.pending++]=t}function P(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function L(e,t){var r,n,i=e.max_chain_length,s=e.strstart,a=e.prev_length,o=e.nice_match,h=e.strstart>e.w_size-z?e.strstart-(e.w_size-z):0,u=e.window,l=e.w_mask,f=e.prev,c=e.strstart+S,d=u[s+a-1],p=u[s+a];e.prev_length>=e.good_match&&(i>>=2),o>e.lookahead&&(o=e.lookahead);do{if(u[(r=t)+a]===p&&u[r+a-1]===d&&u[r]===u[s]&&u[++r]===u[s+1]){s+=2,r++;do{}while(u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&s<c);if(n=S-(c-s),s=c-S,a<n){if(e.match_start=t,o<=(a=n))break;d=u[s+a-1],p=u[s+a]}}}while((t=f[t&l])>h&&0!=--i);return a<=e.lookahead?a:e.lookahead}function j(e){var t,r,n,i,s,a,o,h,u,l,f=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=f+(f-z)){for(c.arraySet(e.window,e.window,f,f,0),e.match_start-=f,e.strstart-=f,e.block_start-=f,t=r=e.hash_size;n=e.head[--t],e.head[t]=f<=n?n-f:0,--r;);for(t=r=f;n=e.prev[--t],e.prev[t]=f<=n?n-f:0,--r;);i+=f}if(0===e.strm.avail_in)break;if(a=e.strm,o=e.window,h=e.strstart+e.lookahead,u=i,l=void 0,l=a.avail_in,u<l&&(l=u),r=0===l?0:(a.avail_in-=l,c.arraySet(o,a.input,a.next_in,l,h),1===a.state.wrap?a.adler=d(a.adler,o,l,h):2===a.state.wrap&&(a.adler=p(a.adler,o,l,h)),a.next_in+=l,a.total_in+=l,l),e.lookahead+=r,e.lookahead+e.insert>=x)for(s=e.strstart-e.insert,e.ins_h=e.window[s],e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+x-1])&e.hash_mask,e.prev[s&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=s,s++,e.insert--,!(e.lookahead+e.insert<x)););}while(e.lookahead<z&&0!==e.strm.avail_in)}function Z(e,t){for(var r,n;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r)),e.match_length>=x)if(n=u._tr_tally(e,e.strstart-e.match_start,e.match_length-x),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=x){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function W(e,t){for(var r,n,i;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=x-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r),e.match_length<=5&&(1===e.strategy||e.match_length===x&&4096<e.strstart-e.match_start)&&(e.match_length=x-1)),e.prev_length>=x&&e.match_length<=e.prev_length){for(i=e.strstart+e.lookahead-x,n=u._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-x),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=x-1,e.strstart++,n&&(N(e,!1),0===e.strm.avail_out))return A}else if(e.match_available){if((n=u._tr_tally(e,0,e.window[e.strstart-1]))&&N(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return A}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=u._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function M(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}function H(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=v,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new c.Buf16(2*w),this.dyn_dtree=new c.Buf16(2*(2*a+1)),this.bl_tree=new c.Buf16(2*(2*o+1)),D(this.dyn_ltree),D(this.dyn_dtree),D(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new c.Buf16(k+1),this.heap=new c.Buf16(2*s+1),D(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new c.Buf16(2*s+1),D(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function G(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=i,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?C:E,e.adler=2===t.wrap?0:1,t.last_flush=l,u._tr_init(t),m):R(e,_)}function K(e){var t=G(e);return t===m&&function(e){e.window_size=2*e.w_size,D(e.head),e.max_lazy_match=h[e.level].max_lazy,e.good_match=h[e.level].good_length,e.nice_match=h[e.level].nice_length,e.max_chain_length=h[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=x-1,e.match_available=0,e.ins_h=0}(e.state),t}function Y(e,t,r,n,i,s){if(!e)return _;var a=1;if(t===g&&(t=6),n<0?(a=0,n=-n):15<n&&(a=2,n-=16),i<1||y<i||r!==v||n<8||15<n||t<0||9<t||s<0||b<s)return R(e,_);8===n&&(n=9);var o=new H;return(e.state=o).strm=e,o.wrap=a,o.gzhead=null,o.w_bits=n,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=i+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+x-1)/x),o.window=new c.Buf8(2*o.w_size),o.head=new c.Buf16(o.hash_size),o.prev=new c.Buf16(o.w_size),o.lit_bufsize=1<<i+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new c.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=t,o.strategy=s,o.method=r,K(e)}h=[new M(0,0,0,0,function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(j(e),0===e.lookahead&&t===l)return A;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,N(e,!1),0===e.strm.avail_out))return A;if(e.strstart-e.block_start>=e.w_size-z&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):(e.strstart>e.block_start&&(N(e,!1),e.strm.avail_out),A)}),new M(4,4,8,4,Z),new M(4,5,16,8,Z),new M(4,6,32,32,Z),new M(4,4,16,16,W),new M(8,16,32,32,W),new M(8,16,128,128,W),new M(8,32,128,256,W),new M(32,128,258,1024,W),new M(32,258,258,4096,W)],r.deflateInit=function(e,t){return Y(e,t,v,15,8,0)},r.deflateInit2=Y,r.deflateReset=K,r.deflateResetKeep=G,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?_:(e.state.gzhead=t,m):_},r.deflate=function(e,t){var r,n,i,s;if(!e||!e.state||5<t||t<0)return e?R(e,_):_;if(n=e.state,!e.output||!e.input&&0!==e.avail_in||666===n.status&&t!==f)return R(e,0===e.avail_out?-5:_);if(n.strm=e,r=n.last_flush,n.last_flush=t,n.status===C)if(2===n.wrap)e.adler=0,U(n,31),U(n,139),U(n,8),n.gzhead?(U(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),U(n,255&n.gzhead.time),U(n,n.gzhead.time>>8&255),U(n,n.gzhead.time>>16&255),U(n,n.gzhead.time>>24&255),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(U(n,255&n.gzhead.extra.length),U(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=p(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69):(U(n,0),U(n,0),U(n,0),U(n,0),U(n,0),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,3),n.status=E);else{var a=v+(n.w_bits-8<<4)<<8;a|=(2<=n.strategy||n.level<2?0:n.level<6?1:6===n.level?2:3)<<6,0!==n.strstart&&(a|=32),a+=31-a%31,n.status=E,P(n,a),0!==n.strstart&&(P(n,e.adler>>>16),P(n,65535&e.adler)),e.adler=1}if(69===n.status)if(n.gzhead.extra){for(i=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending!==n.pending_buf_size));)U(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=73)}else n.status=73;if(73===n.status)if(n.gzhead.name){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,U(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.gzindex=0,n.status=91)}else n.status=91;if(91===n.status)if(n.gzhead.comment){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,U(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.status=103)}else n.status=103;if(103===n.status&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&F(e),n.pending+2<=n.pending_buf_size&&(U(n,255&e.adler),U(n,e.adler>>8&255),e.adler=0,n.status=E)):n.status=E),0!==n.pending){if(F(e),0===e.avail_out)return n.last_flush=-1,m}else if(0===e.avail_in&&T(t)<=T(r)&&t!==f)return R(e,-5);if(666===n.status&&0!==e.avail_in)return R(e,-5);if(0!==e.avail_in||0!==n.lookahead||t!==l&&666!==n.status){var o=2===n.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(j(e),0===e.lookahead)){if(t===l)return A;break}if(e.match_length=0,r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):3===n.strategy?function(e,t){for(var r,n,i,s,a=e.window;;){if(e.lookahead<=S){if(j(e),e.lookahead<=S&&t===l)return A;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=x&&0<e.strstart&&(n=a[i=e.strstart-1])===a[++i]&&n===a[++i]&&n===a[++i]){s=e.strstart+S;do{}while(n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&i<s);e.match_length=S-(s-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=x?(r=u._tr_tally(e,1,e.match_length-x),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):h[n.level].func(n,t);if(o!==O&&o!==B||(n.status=666),o===A||o===O)return 0===e.avail_out&&(n.last_flush=-1),m;if(o===I&&(1===t?u._tr_align(n):5!==t&&(u._tr_stored_block(n,0,0,!1),3===t&&(D(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),F(e),0===e.avail_out))return n.last_flush=-1,m}return t!==f?m:n.wrap<=0?1:(2===n.wrap?(U(n,255&e.adler),U(n,e.adler>>8&255),U(n,e.adler>>16&255),U(n,e.adler>>24&255),U(n,255&e.total_in),U(n,e.total_in>>8&255),U(n,e.total_in>>16&255),U(n,e.total_in>>24&255)):(P(n,e.adler>>>16),P(n,65535&e.adler)),F(e),0<n.wrap&&(n.wrap=-n.wrap),0!==n.pending?m:1)},r.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==C&&69!==t&&73!==t&&91!==t&&103!==t&&t!==E&&666!==t?R(e,_):(e.state=null,t===E?R(e,-3):m):_},r.deflateSetDictionary=function(e,t){var r,n,i,s,a,o,h,u,l=t.length;if(!e||!e.state)return _;if(2===(s=(r=e.state).wrap)||1===s&&r.status!==C||r.lookahead)return _;for(1===s&&(e.adler=d(e.adler,t,l,0)),r.wrap=0,l>=r.w_size&&(0===s&&(D(r.head),r.strstart=0,r.block_start=0,r.insert=0),u=new c.Buf8(r.w_size),c.arraySet(u,t,l-r.w_size,r.w_size,0),t=u,l=r.w_size),a=e.avail_in,o=e.next_in,h=e.input,e.avail_in=l,e.next_in=0,e.input=t,j(r);r.lookahead>=x;){for(n=r.strstart,i=r.lookahead-(x-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+x-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--i;);r.strstart=n,r.lookahead=x-1,j(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=x-1,r.match_available=0,e.next_in=o,e.input=h,e.avail_in=a,r.wrap=s,m},r.deflateInfo=\"pako deflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./messages\":51,\"./trees\":52}],47:[function(e,t,r){\"use strict\";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,r){\"use strict\";t.exports=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C;r=e.state,n=e.next_in,z=e.input,i=n+(e.avail_in-5),s=e.next_out,C=e.output,a=s-(t-e.avail_out),o=s+(e.avail_out-257),h=r.dmax,u=r.wsize,l=r.whave,f=r.wnext,c=r.window,d=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;e:do{p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=m[d&g];t:for(;;){if(d>>>=y=v>>>24,p-=y,0===(y=v>>>16&255))C[s++]=65535&v;else{if(!(16&y)){if(0==(64&y)){v=m[(65535&v)+(d&(1<<y)-1)];continue t}if(32&y){r.mode=12;break e}e.msg=\"invalid literal/length code\",r.mode=30;break e}w=65535&v,(y&=15)&&(p<y&&(d+=z[n++]<<p,p+=8),w+=d&(1<<y)-1,d>>>=y,p-=y),p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=_[d&b];r:for(;;){if(d>>>=y=v>>>24,p-=y,!(16&(y=v>>>16&255))){if(0==(64&y)){v=_[(65535&v)+(d&(1<<y)-1)];continue r}e.msg=\"invalid distance code\",r.mode=30;break e}if(k=65535&v,p<(y&=15)&&(d+=z[n++]<<p,(p+=8)<y&&(d+=z[n++]<<p,p+=8)),h<(k+=d&(1<<y)-1)){e.msg=\"invalid distance too far back\",r.mode=30;break e}if(d>>>=y,p-=y,(y=s-a)<k){if(l<(y=k-y)&&r.sane){e.msg=\"invalid distance too far back\",r.mode=30;break e}if(S=c,(x=0)===f){if(x+=u-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C}}else if(f<y){if(x+=u+f-y,(y-=f)<w){for(w-=y;C[s++]=c[x++],--y;);if(x=0,f<w){for(w-=y=f;C[s++]=c[x++],--y;);x=s-k,S=C}}}else if(x+=f-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C}for(;2<w;)C[s++]=S[x++],C[s++]=S[x++],C[s++]=S[x++],w-=3;w&&(C[s++]=S[x++],1<w&&(C[s++]=S[x++]))}else{for(x=s-k;C[s++]=C[x++],C[s++]=C[x++],C[s++]=C[x++],2<(w-=3););w&&(C[s++]=C[x++],1<w&&(C[s++]=C[x++]))}break}}break}}while(n<i&&s<o);n-=w=p>>3,d&=(1<<(p-=w<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=s<o?o-s+257:257-(s-o),r.hold=d,r.bits=p}},{}],49:[function(e,t,r){\"use strict\";var I=e(\"../utils/common\"),O=e(\"./adler32\"),B=e(\"./crc32\"),R=e(\"./inffast\"),T=e(\"./inftrees\"),D=1,F=2,N=0,U=-2,P=1,n=852,i=592;function L(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function a(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg=\"\",t.wrap&&(e.adler=1&t.wrap),t.mode=P,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new I.Buf32(n),t.distcode=t.distdyn=new I.Buf32(i),t.sane=1,t.back=-1,N):U}function o(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,a(e)):U}function h(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?U:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,o(e))):U}function u(e,t){var r,n;return e?(n=new s,(e.state=n).window=null,(r=h(e,t))!==N&&(e.state=null),r):U}var l,f,c=!0;function j(e){if(c){var t;for(l=new I.Buf32(512),f=new I.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(T(D,e.lens,0,288,l,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;T(F,e.lens,0,32,f,0,e.work,{bits:5}),c=!1}e.lencode=l,e.lenbits=9,e.distcode=f,e.distbits=5}function Z(e,t,r,n){var i,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),n>=s.wsize?(I.arraySet(s.window,t,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(n<(i=s.wsize-s.wnext)&&(i=n),I.arraySet(s.window,t,r-n,i,s.wnext),(n-=i)?(I.arraySet(s.window,t,r-n,n,0),s.wnext=n,s.whave=s.wsize):(s.wnext+=i,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=i))),0}r.inflateReset=o,r.inflateReset2=h,r.inflateResetKeep=a,r.inflateInit=function(e){return u(e,15)},r.inflateInit2=u,r.inflate=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C=0,E=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return U;12===(r=e.state).mode&&(r.mode=13),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,f=o,c=h,x=N;e:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(2&r.wrap&&35615===u){E[r.check=0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0),l=u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&u)<<8)+(u>>8))%31){e.msg=\"incorrect header check\",r.mode=30;break}if(8!=(15&u)){e.msg=\"unknown compression method\",r.mode=30;break}if(l-=4,k=8+(15&(u>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){e.msg=\"invalid window size\",r.mode=30;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=512&u?10:12,l=u=0;break;case 2:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(r.flags=u,8!=(255&r.flags)){e.msg=\"unknown compression method\",r.mode=30;break}if(57344&r.flags){e.msg=\"unknown header flags set\",r.mode=30;break}r.head&&(r.head.text=u>>8&1),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=3;case 3:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.head&&(r.head.time=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,E[2]=u>>>16&255,E[3]=u>>>24&255,r.check=B(r.check,E,4,0)),l=u=0,r.mode=4;case 4:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.head&&(r.head.xflags=255&u,r.head.os=u>>8),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=5;case 5:if(1024&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.length=u,r.head&&(r.head.extra_len=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(d=r.length)&&(d=o),d&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,n,s,d,k)),512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,r.length-=d),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u!==(65535&r.check)){e.msg=\"header crc mismatch\",r.mode=30;break}l=u=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}e.adler=r.check=L(u),l=u=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){u>>>=7&l,l-=7&l,r.mode=27;break}for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}switch(r.last=1&u,l-=1,3&(u>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==t)break;u>>>=2,l-=2;break e;case 2:r.mode=17;break;case 3:e.msg=\"invalid block type\",r.mode=30}u>>>=2,l-=2;break;case 14:for(u>>>=7&l,l-=7&l;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if((65535&u)!=(u>>>16^65535)){e.msg=\"invalid stored block lengths\",r.mode=30;break}if(r.length=65535&u,l=u=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(d=r.length){if(o<d&&(d=o),h<d&&(d=h),0===d)break e;I.arraySet(i,n,s,d,a),o-=d,s+=d,h-=d,a+=d,r.length-=d;break}r.mode=12;break;case 17:for(;l<14;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(r.nlen=257+(31&u),u>>>=5,l-=5,r.ndist=1+(31&u),u>>>=5,l-=5,r.ncode=4+(15&u),u>>>=4,l-=4,286<r.nlen||30<r.ndist){e.msg=\"too many length or distance symbols\",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.lens[A[r.have++]]=7&u,u>>>=3,l-=3}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=T(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg=\"invalid code lengths set\",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(b<16)u>>>=_,l-=_,r.lens[r.have++]=b;else{if(16===b){for(z=_+2;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u>>>=_,l-=_,0===r.have){e.msg=\"invalid bit length repeat\",r.mode=30;break}k=r.lens[r.have-1],d=3+(3&u),u>>>=2,l-=2}else if(17===b){for(z=_+3;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}l-=_,k=0,d=3+(7&(u>>>=_)),u>>>=3,l-=3}else{for(z=_+7;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}l-=_,k=0,d=11+(127&(u>>>=_)),u>>>=7,l-=7}if(r.have+d>r.nlen+r.ndist){e.msg=\"invalid bit length repeat\",r.mode=30;break}for(;d--;)r.lens[r.have++]=k}}if(30===r.mode)break;if(0===r.lens[256]){e.msg=\"invalid code -- missing end-of-block\",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=T(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg=\"invalid literal/lengths set\",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=T(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){e.msg=\"invalid distances set\",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=o&&258<=h){e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,R(e,c),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(g&&0==(240&g)){for(v=_,y=g,w=b;g=(C=r.lencode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,r.length=b,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){e.msg=\"invalid literal/length code\",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.length+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;g=(C=r.distcode[u&(1<<r.distbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(0==(240&g)){for(v=_,y=g,w=b;g=(C=r.distcode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,64&g){e.msg=\"invalid distance code\",r.mode=30;break}r.offset=b,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.offset+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg=\"invalid distance too far back\",r.mode=30;break}r.mode=25;case 25:if(0===h)break e;if(d=c-h,r.offset>d){if((d=r.offset-d)>r.whave&&r.sane){e.msg=\"invalid distance too far back\",r.mode=30;break}p=d>r.wnext?(d-=r.wnext,r.wsize-d):r.wnext-d,d>r.length&&(d=r.length),m=r.window}else m=i,p=a-r.offset,d=r.length;for(h<d&&(d=h),h-=d,r.length-=d;i[a++]=m[p++],--d;);0===r.length&&(r.mode=21);break;case 26:if(0===h)break e;i[a++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;l<32;){if(0===o)break e;o--,u|=n[s++]<<l,l+=8}if(c-=h,e.total_out+=c,r.total+=c,c&&(e.adler=r.check=r.flags?B(r.check,i,c,a-c):O(r.check,i,c,a-c)),c=h,(r.flags?u:L(u))!==r.check){e.msg=\"incorrect data check\",r.mode=30;break}l=u=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u!==(4294967295&r.total)){e.msg=\"incorrect length check\",r.mode=30;break}l=u=0}r.mode=29;case 29:x=1;break e;case 30:x=-3;break e;case 31:return-4;case 32:default:return U}return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,(r.wsize||c!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&Z(e,e.output,e.next_out,c-e.avail_out)?(r.mode=31,-4):(f-=e.avail_in,c-=e.avail_out,e.total_in+=f,e.total_out+=c,r.total+=c,r.wrap&&c&&(e.adler=r.check=r.flags?B(r.check,i,c,e.next_out-c):O(r.check,i,c,e.next_out-c)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==f&&0===c||4===t)&&x===N&&(x=-5),x)},r.inflateEnd=function(e){if(!e||!e.state)return U;var t=e.state;return t.window&&(t.window=null),e.state=null,N},r.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?U:((r.head=t).done=!1,N):U},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,t,n,0)!==r.check?-3:Z(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo=\"pako inflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./inffast\":48,\"./inftrees\":50}],50:[function(e,t,r){\"use strict\";var D=e(\"../utils/common\"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,n,i,s,a,o){var h,u,l,f,c,d,p,m,_,g=o.bits,b=0,v=0,y=0,w=0,k=0,x=0,S=0,z=0,C=0,E=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),R=null,T=0;for(b=0;b<=15;b++)O[b]=0;for(v=0;v<n;v++)O[t[r+v]]++;for(k=g,w=15;1<=w&&0===O[w];w--);if(w<k&&(k=w),0===w)return i[s++]=20971520,i[s++]=20971520,o.bits=1,0;for(y=1;y<w&&0===O[y];y++);for(k<y&&(k=y),b=z=1;b<=15;b++)if(z<<=1,(z-=O[b])<0)return-1;if(0<z&&(0===e||1!==w))return-1;for(B[1]=0,b=1;b<15;b++)B[b+1]=B[b]+O[b];for(v=0;v<n;v++)0!==t[r+v]&&(a[B[t[r+v]]++]=v);if(d=0===e?(A=R=a,19):1===e?(A=F,I-=257,R=N,T-=257,256):(A=U,R=P,-1),b=y,c=s,S=v=E=0,l=-1,f=(C=1<<(x=k))-1,1===e&&852<C||2===e&&592<C)return 1;for(;;){for(p=b-S,_=a[v]<d?(m=0,a[v]):a[v]>d?(m=R[T+a[v]],A[I+a[v]]):(m=96,0),h=1<<b-S,y=u=1<<x;i[c+(E>>S)+(u-=h)]=p<<24|m<<16|_|0,0!==u;);for(h=1<<b-1;E&h;)h>>=1;if(0!==h?(E&=h-1,E+=h):E=0,v++,0==--O[b]){if(b===w)break;b=t[r+a[v]]}if(k<b&&(E&f)!==l){for(0===S&&(S=k),c+=y,z=1<<(x=b-S);x+S<w&&!((z-=O[x+S])<=0);)x++,z<<=1;if(C+=1<<x,1===e&&852<C||2===e&&592<C)return 1;i[l=E&f]=k<<24|x<<16|c-s|0}}return 0!==E&&(i[c+E]=b-S<<24|64<<16|0),o.bits=k,0}},{\"../utils/common\":41}],51:[function(e,t,r){\"use strict\";t.exports={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"}},{}],52:[function(e,t,r){\"use strict\";var i=e(\"../utils/common\"),o=0,h=1;function n(e){for(var t=e.length;0<=--t;)e[t]=0}var s=0,a=29,u=256,l=u+1+a,f=30,c=19,_=2*l+1,g=15,d=16,p=7,m=256,b=16,v=17,y=18,w=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],k=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],x=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],z=new Array(2*(l+2));n(z);var C=new Array(2*f);n(C);var E=new Array(512);n(E);var A=new Array(256);n(A);var I=new Array(a);n(I);var O,B,R,T=new Array(f);function D(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}function F(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function N(e){return e<256?E[e]:E[256+(e>>>7)]}function U(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function P(e,t,r){e.bi_valid>d-r?(e.bi_buf|=t<<e.bi_valid&65535,U(e,e.bi_buf),e.bi_buf=t>>d-e.bi_valid,e.bi_valid+=r-d):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function L(e,t,r){P(e,r[2*t],r[2*t+1])}function j(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function Z(e,t,r){var n,i,s=new Array(g+1),a=0;for(n=1;n<=g;n++)s[n]=a=a+r[n-1]<<1;for(i=0;i<=t;i++){var o=e[2*i+1];0!==o&&(e[2*i]=j(s[o]++,o))}}function W(e){var t;for(t=0;t<l;t++)e.dyn_ltree[2*t]=0;for(t=0;t<f;t++)e.dyn_dtree[2*t]=0;for(t=0;t<c;t++)e.bl_tree[2*t]=0;e.dyn_ltree[2*m]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function M(e){8<e.bi_valid?U(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function H(e,t,r,n){var i=2*t,s=2*r;return e[i]<e[s]||e[i]===e[s]&&n[t]<=n[r]}function G(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&H(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!H(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function K(e,t,r){var n,i,s,a,o=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*o]<<8|e.pending_buf[e.d_buf+2*o+1],i=e.pending_buf[e.l_buf+o],o++,0===n?L(e,i,t):(L(e,(s=A[i])+u+1,t),0!==(a=w[s])&&P(e,i-=I[s],a),L(e,s=N(--n),r),0!==(a=k[s])&&P(e,n-=T[s],a)),o<e.last_lit;);L(e,m,t)}function Y(e,t){var r,n,i,s=t.dyn_tree,a=t.stat_desc.static_tree,o=t.stat_desc.has_stree,h=t.stat_desc.elems,u=-1;for(e.heap_len=0,e.heap_max=_,r=0;r<h;r++)0!==s[2*r]?(e.heap[++e.heap_len]=u=r,e.depth[r]=0):s[2*r+1]=0;for(;e.heap_len<2;)s[2*(i=e.heap[++e.heap_len]=u<2?++u:0)]=1,e.depth[i]=0,e.opt_len--,o&&(e.static_len-=a[2*i+1]);for(t.max_code=u,r=e.heap_len>>1;1<=r;r--)G(e,s,r);for(i=h;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],G(e,s,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,s[2*i]=s[2*r]+s[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,s[2*r+1]=s[2*n+1]=i,e.heap[1]=i++,G(e,s,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,s,a,o,h=t.dyn_tree,u=t.max_code,l=t.stat_desc.static_tree,f=t.stat_desc.has_stree,c=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,p=t.stat_desc.max_length,m=0;for(s=0;s<=g;s++)e.bl_count[s]=0;for(h[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<_;r++)p<(s=h[2*h[2*(n=e.heap[r])+1]+1]+1)&&(s=p,m++),h[2*n+1]=s,u<n||(e.bl_count[s]++,a=0,d<=n&&(a=c[n-d]),o=h[2*n],e.opt_len+=o*(s+a),f&&(e.static_len+=o*(l[2*n+1]+a)));if(0!==m){do{for(s=p-1;0===e.bl_count[s];)s--;e.bl_count[s]--,e.bl_count[s+1]+=2,e.bl_count[p]--,m-=2}while(0<m);for(s=p;0!==s;s--)for(n=e.bl_count[s];0!==n;)u<(i=e.heap[--r])||(h[2*i+1]!==s&&(e.opt_len+=(s-h[2*i+1])*h[2*i],h[2*i+1]=s),n--)}}(e,t),Z(s,u,e.bl_count)}function X(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=t[2*(n+1)+1],++o<h&&i===a||(o<u?e.bl_tree[2*i]+=o:0!==i?(i!==s&&e.bl_tree[2*i]++,e.bl_tree[2*b]++):o<=10?e.bl_tree[2*v]++:e.bl_tree[2*y]++,s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4))}function V(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),n=0;n<=r;n++)if(i=a,a=t[2*(n+1)+1],!(++o<h&&i===a)){if(o<u)for(;L(e,i,e.bl_tree),0!=--o;);else 0!==i?(i!==s&&(L(e,i,e.bl_tree),o--),L(e,b,e.bl_tree),P(e,o-3,2)):o<=10?(L(e,v,e.bl_tree),P(e,o-3,3)):(L(e,y,e.bl_tree),P(e,o-11,7));s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4)}}n(T);var q=!1;function J(e,t,r,n){P(e,(s<<1)+(n?1:0),3),function(e,t,r,n){M(e),n&&(U(e,r),U(e,~r)),i.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}(e,t,r,!0)}r._tr_init=function(e){q||(function(){var e,t,r,n,i,s=new Array(g+1);for(n=r=0;n<a-1;n++)for(I[n]=r,e=0;e<1<<w[n];e++)A[r++]=n;for(A[r-1]=n,n=i=0;n<16;n++)for(T[n]=i,e=0;e<1<<k[n];e++)E[i++]=n;for(i>>=7;n<f;n++)for(T[n]=i<<7,e=0;e<1<<k[n]-7;e++)E[256+i++]=n;for(t=0;t<=g;t++)s[t]=0;for(e=0;e<=143;)z[2*e+1]=8,e++,s[8]++;for(;e<=255;)z[2*e+1]=9,e++,s[9]++;for(;e<=279;)z[2*e+1]=7,e++,s[7]++;for(;e<=287;)z[2*e+1]=8,e++,s[8]++;for(Z(z,l+1,s),e=0;e<f;e++)C[2*e+1]=5,C[2*e]=j(e,5);O=new D(z,w,u+1,l,g),B=new D(C,k,0,f,g),R=new D(new Array(0),x,0,c,p)}(),q=!0),e.l_desc=new F(e.dyn_ltree,O),e.d_desc=new F(e.dyn_dtree,B),e.bl_desc=new F(e.bl_tree,R),e.bi_buf=0,e.bi_valid=0,W(e)},r._tr_stored_block=J,r._tr_flush_block=function(e,t,r,n){var i,s,a=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return o;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return h;for(t=32;t<u;t++)if(0!==e.dyn_ltree[2*t])return h;return o}(e)),Y(e,e.l_desc),Y(e,e.d_desc),a=function(e){var t;for(X(e,e.dyn_ltree,e.l_desc.max_code),X(e,e.dyn_dtree,e.d_desc.max_code),Y(e,e.bl_desc),t=c-1;3<=t&&0===e.bl_tree[2*S[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=i&&(i=s)):i=s=r+5,r+4<=i&&-1!==t?J(e,t,r,n):4===e.strategy||s===i?(P(e,2+(n?1:0),3),K(e,z,C)):(P(e,4+(n?1:0),3),function(e,t,r,n){var i;for(P(e,t-257,5),P(e,r-1,5),P(e,n-4,4),i=0;i<n;i++)P(e,e.bl_tree[2*S[i]+1],3);V(e,e.dyn_ltree,t-1),V(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),K(e,e.dyn_ltree,e.dyn_dtree)),W(e),n&&M(e)},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(A[r]+u+1)]++,e.dyn_dtree[2*N(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){P(e,2,3),L(e,m,z),function(e){16===e.bi_valid?(U(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},{\"../utils/common\":41}],53:[function(e,t,r){\"use strict\";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,r){(function(e){!function(r,n){\"use strict\";if(!r.setImmediate){var i,s,t,a,o=1,h={},u=!1,l=r.document,e=Object.getPrototypeOf&&Object.getPrototypeOf(r);e=e&&e.setTimeout?e:r,i=\"[object process]\"==={}.toString.call(r.process)?function(e){process.nextTick(function(){c(e)})}:function(){if(r.postMessage&&!r.importScripts){var e=!0,t=r.onmessage;return r.onmessage=function(){e=!1},r.postMessage(\"\",\"*\"),r.onmessage=t,e}}()?(a=\"setImmediate$\"+Math.random()+\"$\",r.addEventListener?r.addEventListener(\"message\",d,!1):r.attachEvent(\"onmessage\",d),function(e){r.postMessage(a+e,\"*\")}):r.MessageChannel?((t=new MessageChannel).port1.onmessage=function(e){c(e.data)},function(e){t.port2.postMessage(e)}):l&&\"onreadystatechange\"in l.createElement(\"script\")?(s=l.documentElement,function(e){var t=l.createElement(\"script\");t.onreadystatechange=function(){c(e),t.onreadystatechange=null,s.removeChild(t),t=null},s.appendChild(t)}):function(e){setTimeout(c,0,e)},e.setImmediate=function(e){\"function\"!=typeof e&&(e=new Function(\"\"+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var n={callback:e,args:t};return h[o]=n,i(o),o++},e.clearImmediate=f}function f(e){delete h[e]}function c(e){if(u)setTimeout(c,0,e);else{var t=h[e];if(t){u=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{f(e),u=!1}}}}function d(e){e.source===r&&\"string\"==typeof e.data&&0===e.data.indexOf(a)&&c(+e.data.slice(a.length))}}(\"undefined\"==typeof self?void 0===e?this:e:self)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}]},{},[10])(10)});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../node-libs-browser/mock/process.js */ \"./node_modules/node-libs-browser/mock/process.js\")))\n\n//# sourceURL=webpack:///./node_modules/jszip/dist/jszip.min.js?");

/***/ }),

/***/ "./node_modules/node-libs-browser/mock/empty.js":
/*!******************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/empty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n\n//# sourceURL=webpack:///./node_modules/node-libs-browser/mock/empty.js?");

/***/ }),

/***/ "./node_modules/node-libs-browser/mock/process.js":
/*!********************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/process.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.nextTick = function nextTick(fn) {\n    var args = Array.prototype.slice.call(arguments);\n    args.shift();\n    setTimeout(function () {\n        fn.apply(null, args);\n    }, 0);\n};\n\nexports.platform = exports.arch = \nexports.execPath = exports.title = 'browser';\nexports.pid = 1;\nexports.browser = true;\nexports.env = {};\nexports.argv = [];\n\nexports.binding = function (name) {\n\tthrow new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    exports.cwd = function () { return cwd };\n    exports.chdir = function (dir) {\n        if (!path) path = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\");\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\nexports.exit = exports.kill = \nexports.umask = exports.dlopen = \nexports.uptime = exports.memoryUsage = \nexports.uvCounters = function() {};\nexports.features = {};\n\n\n//# sourceURL=webpack:///./node_modules/node-libs-browser/mock/process.js?");

/***/ }),

/***/ "./node_modules/nvd3/build/nv.d3.js":
/*!******************************************!*\
  !*** ./node_modules/nvd3/build/nv.d3.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* nvd3 version 1.8.6 (https://github.com/novus/nvd3) 2017-08-23 */\n(function(){\n\n// set up main nv object\nvar nv = {};\n\n// the major global objects under the nv namespace\nnv.dev = false; //set false when in production\nnv.tooltip = nv.tooltip || {}; // For the tooltip system\nnv.utils = nv.utils || {}; // Utility subsystem\nnv.models = nv.models || {}; //stores all the possible models/components\nnv.charts = {}; //stores all the ready to use charts\nnv.logs = {}; //stores some statistics and potential error messages\nnv.dom = {}; //DOM manipulation functions\n\n// Node/CommonJS - require D3\nif ( true && typeof(d3) == 'undefined') {\n    d3 = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n}\n\nnv.dispatch = d3.dispatch('render_start', 'render_end');\n\n// Function bind polyfill\n// Needed ONLY for phantomJS as it's missing until version 2.0 which is unreleased as of this comment\n// https://github.com/ariya/phantomjs/issues/10522\n// http://kangax.github.io/compat-table/es5/#Function.prototype.bind\n// phantomJS is used for running the test suite\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function (oThis) {\n        if (typeof this !== \"function\") {\n            // closest thing possible to the ECMAScript 5 internal IsCallable function\n            throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n        }\n\n        var aArgs = Array.prototype.slice.call(arguments, 1),\n            fToBind = this,\n            fNOP = function () {},\n            fBound = function () {\n                return fToBind.apply(this instanceof fNOP && oThis\n                        ? this\n                        : oThis,\n                    aArgs.concat(Array.prototype.slice.call(arguments)));\n            };\n\n        fNOP.prototype = this.prototype;\n        fBound.prototype = new fNOP();\n        return fBound;\n    };\n}\n\n//  Development render timers - disabled if dev = false\nif (nv.dev) {\n    nv.dispatch.on('render_start', function(e) {\n        nv.logs.startTime = +new Date();\n    });\n\n    nv.dispatch.on('render_end', function(e) {\n        nv.logs.endTime = +new Date();\n        nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;\n        nv.log('total', nv.logs.totalTime); // used for development, to keep track of graph generation times\n    });\n}\n\n// Logs all arguments, and returns the last so you can test things in place\n// Note: in IE8 console.log is an object not a function, and if modernizr is used\n// then calling Function.prototype.bind with with anything other than a function\n// causes a TypeError to be thrown.\nnv.log = function() {\n    if (nv.dev && window.console && console.log && console.log.apply)\n        console.log.apply(console, arguments);\n    else if (nv.dev && window.console && typeof console.log == \"function\" && Function.prototype.bind) {\n        var log = Function.prototype.bind.call(console.log, console);\n        log.apply(console, arguments);\n    }\n    return arguments[arguments.length - 1];\n};\n\n// print console warning, should be used by deprecated functions\nnv.deprecated = function(name, info) {\n    if (console && console.warn) {\n        console.warn('nvd3 warning: `' + name + '` has been deprecated. ', info || '');\n    }\n};\n\n// The nv.render function is used to queue up chart rendering\n// in non-blocking async functions.\n// When all queued charts are done rendering, nv.dispatch.render_end is invoked.\nnv.render = function render(step) {\n    // number of graphs to generate in each timeout loop\n    step = step || 1;\n\n    nv.render.active = true;\n    nv.dispatch.render_start();\n\n    var renderLoop = function() {\n        var chart, graph;\n\n        for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {\n            chart = graph.generate();\n            if (typeof graph.callback == typeof(Function)) graph.callback(chart);\n        }\n\n        nv.render.queue.splice(0, i);\n\n        if (nv.render.queue.length) {\n            setTimeout(renderLoop);\n        }\n        else {\n            nv.dispatch.render_end();\n            nv.render.active = false;\n        }\n    };\n\n    setTimeout(renderLoop);\n};\n\nnv.render.active = false;\nnv.render.queue = [];\n\n/*\nAdds a chart to the async rendering queue. This method can take arguments in two forms:\nnv.addGraph({\n    generate: <Function>\n    callback: <Function>\n})\n\nor\n\nnv.addGraph(<generate Function>, <callback Function>)\n\nThe generate function should contain code that creates the NVD3 model, sets options\non it, adds data to an SVG element, and invokes the chart model. The generate function\nshould return the chart model.  See examples/lineChart.html for a usage example.\n\nThe callback function is optional, and it is called when the generate function completes.\n*/\nnv.addGraph = function(obj) {\n    if (typeof arguments[0] === typeof(Function)) {\n        obj = {generate: arguments[0], callback: arguments[1]};\n    }\n\n    nv.render.queue.push(obj);\n\n    if (!nv.render.active) {\n        nv.render();\n    }\n};\n\n// Node/CommonJS exports\nif (true) {\n  module.exports = nv;\n}\n\nif (typeof(window) !== 'undefined') {\n  window.nv = nv;\n}\n/* Facade for queueing DOM write operations\r\n * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n * if available.\r\n * This could easily be extended to support alternate\r\n * implementations in the future.\r\n */\r\nnv.dom.write = function(callback) {\r\n\tif (window.fastdom !== undefined) {\r\n\t\treturn fastdom.mutate(callback);\r\n\t}\r\n\treturn callback();\r\n};\r\n\r\n/* Facade for queueing DOM read operations\r\n * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n * if available.\r\n * This could easily be extended to support alternate\r\n * implementations in the future.\r\n */\r\nnv.dom.read = function(callback) {\r\n\tif (window.fastdom !== undefined) {\r\n\t\treturn fastdom.measure(callback);\r\n\t}\r\n\treturn callback();\r\n};\r\n/* Utility class to handle creation of an interactive layer.\n This places a rectangle on top of the chart. When you mouse move over it, it sends a dispatch\n containing the X-coordinate. It can also render a vertical line where the mouse is located.\n\n dispatch.elementMousemove is the important event to latch onto.  It is fired whenever the mouse moves over\n the rectangle. The dispatch is given one object which contains the mouseX/Y location.\n It also has 'pointXValue', which is the conversion of mouseX to the x-axis scale.\n */\nnv.interactiveGuideline = function() {\n    \"use strict\";\n\n    var margin = { left: 0, top: 0 } //Pass the chart's top and left magins. Used to calculate the mouseX/Y.\n        ,   width = null\n        ,   height = null\n        ,   xScale = d3.scale.linear()\n        ,   dispatch = d3.dispatch('elementMousemove', 'elementMouseout', 'elementClick', 'elementDblclick', 'elementMouseDown', 'elementMouseUp')\n        ,   showGuideLine = true\n        ,   svgContainer = null // Must pass the chart's svg, we'll use its mousemove event.\n        ,   tooltip = nv.models.tooltip()\n        ,   isMSIE =  window.ActiveXObject// Checkt if IE by looking for activeX. (excludes IE11)\n    ;\n\n    tooltip\n        .duration(0)\n        .hideDelay(0)\n        .hidden(false);\n\n    function layer(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this);\n            var availableWidth = (width || 960), availableHeight = (height || 400);\n            var wrap = container.selectAll(\"g.nv-wrap.nv-interactiveLineLayer\")\n                .data([data]);\n            var wrapEnter = wrap.enter()\n                .append(\"g\").attr(\"class\", \" nv-wrap nv-interactiveLineLayer\");\n            wrapEnter.append(\"g\").attr(\"class\",\"nv-interactiveGuideLine\");\n\n            if (!svgContainer) {\n                return;\n            }\n\n            function mouseHandler() {\n                var mouseX = d3.event.clientX - this.getBoundingClientRect().left;\n                var mouseY = d3.event.clientY - this.getBoundingClientRect().top;\n\n                var subtractMargin = true;\n                var mouseOutAnyReason = false;\n                if (isMSIE) {\n                    /*\n                     D3.js (or maybe SVG.getScreenCTM) has a nasty bug in Internet Explorer 10.\n                     d3.mouse() returns incorrect X,Y mouse coordinates when mouse moving\n                     over a rect in IE 10.\n                     However, d3.event.offsetX/Y also returns the mouse coordinates\n                     relative to the triggering <rect>. So we use offsetX/Y on IE.\n                     */\n                    mouseX = d3.event.offsetX;\n                    mouseY = d3.event.offsetY;\n\n                    /*\n                     On IE, if you attach a mouse event listener to the <svg> container,\n                     it will actually trigger it for all the child elements (like <path>, <circle>, etc).\n                     When this happens on IE, the offsetX/Y is set to where ever the child element\n                     is located.\n                     As a result, we do NOT need to subtract margins to figure out the mouse X/Y\n                     position under this scenario. Removing the line below *will* cause\n                     the interactive layer to not work right on IE.\n                     */\n                    if(d3.event.target.tagName !== \"svg\") {\n                        subtractMargin = false;\n                    }\n\n                    if (d3.event.target.className.baseVal.match(\"nv-legend\")) {\n                        mouseOutAnyReason = true;\n                    }\n\n                }\n\n                if(subtractMargin) {\n                    mouseX -= margin.left;\n                    mouseY -= margin.top;\n                }\n\n                /* If mouseX/Y is outside of the chart's bounds,\n                 trigger a mouseOut event.\n                 */\n                if (d3.event.type === 'mouseout'\n                    || mouseX < 0 || mouseY < 0\n                    || mouseX > availableWidth || mouseY > availableHeight\n                    || (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined)\n                    || mouseOutAnyReason\n                    ) {\n\n                    if (isMSIE) {\n                        if (d3.event.relatedTarget\n                            && d3.event.relatedTarget.ownerSVGElement === undefined\n                            && (d3.event.relatedTarget.className === undefined\n                                || d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass))) {\n\n                            return;\n                        }\n                    }\n                    dispatch.elementMouseout({\n                        mouseX: mouseX,\n                        mouseY: mouseY\n                    });\n                    layer.renderGuideLine(null); //hide the guideline\n                    tooltip.hidden(true);\n                    return;\n                } else {\n                    tooltip.hidden(false);\n                }\n\n\n                var scaleIsOrdinal = typeof xScale.rangeBands === 'function';\n                var pointXValue = undefined;\n\n                // Ordinal scale has no invert method\n                if (scaleIsOrdinal) {\n                    var elementIndex = d3.bisect(xScale.range(), mouseX) - 1;\n                    // Check if mouseX is in the range band\n                    if (xScale.range()[elementIndex] + xScale.rangeBand() >= mouseX) {\n                        pointXValue = xScale.domain()[d3.bisect(xScale.range(), mouseX) - 1];\n                    }\n                    else {\n                        dispatch.elementMouseout({\n                            mouseX: mouseX,\n                            mouseY: mouseY\n                        });\n                        layer.renderGuideLine(null); //hide the guideline\n                        tooltip.hidden(true);\n                        return;\n                    }\n                }\n                else {\n                    pointXValue = xScale.invert(mouseX);\n                }\n\n                dispatch.elementMousemove({\n                    mouseX: mouseX,\n                    mouseY: mouseY,\n                    pointXValue: pointXValue\n                });\n\n                //If user double clicks the layer, fire a elementDblclick\n                if (d3.event.type === \"dblclick\") {\n                    dispatch.elementDblclick({\n                        mouseX: mouseX,\n                        mouseY: mouseY,\n                        pointXValue: pointXValue\n                    });\n                }\n\n                // if user single clicks the layer, fire elementClick\n                if (d3.event.type === 'click') {\n                    dispatch.elementClick({\n                        mouseX: mouseX,\n                        mouseY: mouseY,\n                        pointXValue: pointXValue\n                    });\n                }\n\n                // if user presses mouse down the layer, fire elementMouseDown\n                if (d3.event.type === 'mousedown') {\n                \tdispatch.elementMouseDown({\n                \t\tmouseX: mouseX,\n                \t\tmouseY: mouseY,\n                \t\tpointXValue: pointXValue\n                \t});\n                }\n\n                // if user presses mouse down the layer, fire elementMouseUp\n                if (d3.event.type === 'mouseup') {\n                \tdispatch.elementMouseUp({\n                \t\tmouseX: mouseX,\n                \t\tmouseY: mouseY,\n                \t\tpointXValue: pointXValue\n                \t});\n                }\n            }\n\n            svgContainer\n                .on(\"touchmove\",mouseHandler)\n                .on(\"mousemove\",mouseHandler, true)\n                .on(\"mouseout\" ,mouseHandler,true)\n                .on(\"mousedown\" ,mouseHandler,true)\n                .on(\"mouseup\" ,mouseHandler,true)\n                .on(\"dblclick\" ,mouseHandler)\n                .on(\"click\", mouseHandler)\n            ;\n\n            layer.guideLine = null;\n            //Draws a vertical guideline at the given X postion.\n            layer.renderGuideLine = function(x) {\n                if (!showGuideLine) return;\n                if (layer.guideLine && layer.guideLine.attr(\"x1\") === x) return;\n                nv.dom.write(function() {\n                    var line = wrap.select(\".nv-interactiveGuideLine\")\n                        .selectAll(\"line\")\n                        .data((x != null) ? [nv.utils.NaNtoZero(x)] : [], String);\n                    line.enter()\n                        .append(\"line\")\n                        .attr(\"class\", \"nv-guideline\")\n                        .attr(\"x1\", function(d) { return d;})\n                        .attr(\"x2\", function(d) { return d;})\n                        .attr(\"y1\", availableHeight)\n                        .attr(\"y2\",0);\n                    line.exit().remove();\n                });\n            }\n        });\n    }\n\n    layer.dispatch = dispatch;\n    layer.tooltip = tooltip;\n\n    layer.margin = function(_) {\n        if (!arguments.length) return margin;\n        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        return layer;\n    };\n\n    layer.width = function(_) {\n        if (!arguments.length) return width;\n        width = _;\n        return layer;\n    };\n\n    layer.height = function(_) {\n        if (!arguments.length) return height;\n        height = _;\n        return layer;\n    };\n\n    layer.xScale = function(_) {\n        if (!arguments.length) return xScale;\n        xScale = _;\n        return layer;\n    };\n\n    layer.showGuideLine = function(_) {\n        if (!arguments.length) return showGuideLine;\n        showGuideLine = _;\n        return layer;\n    };\n\n    layer.svgContainer = function(_) {\n        if (!arguments.length) return svgContainer;\n        svgContainer = _;\n        return layer;\n    };\n\n    return layer;\n};\n\n/* Utility class that uses d3.bisect to find the index in a given array, where a search value can be inserted.\n This is different from normal bisectLeft; this function finds the nearest index to insert the search value.\n\n For instance, lets say your array is [1,2,3,5,10,30], and you search for 28.\n Normal d3.bisectLeft will return 4, because 28 is inserted after the number 10.  But interactiveBisect will return 5\n because 28 is closer to 30 than 10.\n\n Unit tests can be found in: interactiveBisectTest.html\n\n Has the following known issues:\n * Will not work if the data points move backwards (ie, 10,9,8,7, etc) or if the data points are in random order.\n * Won't work if there are duplicate x coordinate values.\n */\nnv.interactiveBisect = function (values, searchVal, xAccessor) {\n    \"use strict\";\n    if (! (values instanceof Array)) {\n        return null;\n    }\n    var _xAccessor;\n    if (typeof xAccessor !== 'function') {\n        _xAccessor = function(d) {\n            return d.x;\n        }\n    } else {\n        _xAccessor = xAccessor;\n    }\n    var _cmp = function(d, v) {\n        // Accessors are no longer passed the index of the element along with\n        // the element itself when invoked by d3.bisector.\n        //\n        // Starting at D3 v3.4.4, d3.bisector() started inspecting the\n        // function passed to determine if it should consider it an accessor\n        // or a comparator. This meant that accessors that take two arguments\n        // (expecting an index as the second parameter) are treated as\n        // comparators where the second argument is the search value against\n        // which the first argument is compared.\n        return _xAccessor(d) - v;\n    };\n\n    var bisect = d3.bisector(_cmp).left;\n    var index = d3.max([0, bisect(values,searchVal) - 1]);\n    var currentValue = _xAccessor(values[index]);\n\n    if (typeof currentValue === 'undefined') {\n        currentValue = index;\n    }\n\n    if (currentValue === searchVal) {\n        return index; //found exact match\n    }\n\n    var nextIndex = d3.min([index+1, values.length - 1]);\n    var nextValue = _xAccessor(values[nextIndex]);\n\n    if (typeof nextValue === 'undefined') {\n        nextValue = nextIndex;\n    }\n\n    if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal)) {\n        return index;\n    } else {\n        return nextIndex\n    }\n};\n\n/*\n Returns the index in the array \"values\" that is closest to searchVal.\n Only returns an index if searchVal is within some \"threshold\".\n Otherwise, returns null.\n */\nnv.nearestValueIndex = function (values, searchVal, threshold) {\n    \"use strict\";\n    var yDistMax = Infinity, indexToHighlight = null;\n    values.forEach(function(d,i) {\n        var delta = Math.abs(searchVal - d);\n        if ( d != null && delta <= yDistMax && delta < threshold) {\n            yDistMax = delta;\n            indexToHighlight = i;\n        }\n    });\n    return indexToHighlight;\n};\n\n/* Model which can be instantiated to handle tooltip rendering.\n Example usage:\n var tip = nv.models.tooltip().gravity('w').distance(23)\n .data(myDataObject);\n\n tip();    //just invoke the returned function to render tooltip.\n */\nnv.models.tooltip = function() {\n    \"use strict\";\n\n    /*\n    Tooltip data. If data is given in the proper format, a consistent tooltip is generated.\n    Example Format of data:\n    {\n        key: \"Date\",\n        value: \"August 2009\",\n        series: [\n            {key: \"Series 1\", value: \"Value 1\", color: \"#000\"},\n            {key: \"Series 2\", value: \"Value 2\", color: \"#00f\"}\n        ]\n    }\n    */\n    var id = \"nvtooltip-\" + Math.floor(Math.random() * 100000) // Generates a unique id when you create a new tooltip() object.\n        ,   data = null\n        ,   gravity = 'w'   // Can be 'n','s','e','w'. Determines how tooltip is positioned.\n        ,   distance = 25 // Distance to offset tooltip from the mouse location.\n        ,   snapDistance = 0   // Tolerance allowed before tooltip is moved from its current position (creates 'snapping' effect)\n        ,   classes = null  // Attaches additional CSS classes to the tooltip DIV that is created.\n        ,   hidden = true  // Start off hidden, toggle with hide/show functions below.\n        ,   hideDelay = 200  // Delay (in ms) before the tooltip hides after calling hide().\n        ,   tooltip = null // d3 select of the tooltip div.\n        ,   lastPosition = { left: null, top: null } // Last position the tooltip was in.\n        ,   enabled = true  // True -> tooltips are rendered. False -> don't render tooltips.\n        ,   duration = 100 // Tooltip movement duration, in ms.\n        ,   headerEnabled = true // If is to show the tooltip header.\n        ,   nvPointerEventsClass = \"nv-pointer-events-none\" // CSS class to specify whether element should not have mouse events.\n    ;\n\n    // Format function for the tooltip values column.\n    // d is value,\n    // i is series index\n    // p is point containing the value\n    var valueFormatter = function(d, i, p) {\n        return d;\n    };\n\n    // Format function for the tooltip header value.\n    var headerFormatter = function(d) {\n        return d;\n    };\n\n    var keyFormatter = function(d, i) {\n        return d;\n    };\n\n    // By default, the tooltip model renders a beautiful table inside a DIV, returned as HTML\n    // You can override this function if a custom tooltip is desired. For instance, you could directly manipulate\n    // the DOM by accessing elem and returning false.\n    var contentGenerator = function(d, elem) {\n        if (d === null) {\n            return '';\n        }\n\n        var table = d3.select(document.createElement(\"table\"));\n        if (headerEnabled) {\n            var theadEnter = table.selectAll(\"thead\")\n                .data([d])\n                .enter().append(\"thead\");\n\n            theadEnter.append(\"tr\")\n                .append(\"td\")\n                .attr(\"colspan\", 3)\n                .append(\"strong\")\n                .classed(\"x-value\", true)\n                .html(headerFormatter(d.value));\n        }\n\n        var tbodyEnter = table.selectAll(\"tbody\")\n            .data([d])\n            .enter().append(\"tbody\");\n\n        var trowEnter = tbodyEnter.selectAll(\"tr\")\n                .data(function(p) { return p.series})\n                .enter()\n                .append(\"tr\")\n                .classed(\"highlight\", function(p) { return p.highlight});\n\n        trowEnter.append(\"td\")\n            .classed(\"legend-color-guide\",true)\n            .append(\"div\")\n            .style(\"background-color\", function(p) { return p.color});\n\n        trowEnter.append(\"td\")\n            .classed(\"key\",true)\n            .classed(\"total\",function(p) { return !!p.total})\n            .html(function(p, i) { return keyFormatter(p.key, i)});\n\n        trowEnter.append(\"td\")\n            .classed(\"value\",true)\n            .html(function(p, i) { return valueFormatter(p.value, i, p) });\n\n        trowEnter.filter(function (p,i) { return p.percent !== undefined }).append(\"td\")\n            .classed(\"percent\", true)\n            .html(function(p, i) { return \"(\" + d3.format('%')(p.percent) + \")\" });\n\n        trowEnter.selectAll(\"td\").each(function(p) {\n            if (p.highlight) {\n                var opacityScale = d3.scale.linear().domain([0,1]).range([\"#fff\",p.color]);\n                var opacity = 0.6;\n                d3.select(this)\n                    .style(\"border-bottom-color\", opacityScale(opacity))\n                    .style(\"border-top-color\", opacityScale(opacity))\n                ;\n            }\n        });\n\n        var html = table.node().outerHTML;\n        if (d.footer !== undefined)\n            html += \"<div class='footer'>\" + d.footer + \"</div>\";\n        return html;\n\n    };\n\n    /*\n     Function that returns the position (relative to the viewport/document.body)\n     the tooltip should be placed in.\n     Should return: {\n        left: <leftPos>,\n        top: <topPos>\n     }\n     */\n    var position = function() {\n        var pos = {\n            left: d3.event !== null ? d3.event.clientX : 0,\n            top: d3.event !== null ? d3.event.clientY : 0\n        };\n\n        if(getComputedStyle(document.body).transform != 'none') {\n            // Take the offset into account, as now the tooltip is relative\n            // to document.body.\n            var client = document.body.getBoundingClientRect();\n            pos.left -= client.left;\n            pos.top -= client.top;\n        }\n\n        return pos;\n    };\n\n    var dataSeriesExists = function(d) {\n        if (d && d.series) {\n            if (nv.utils.isArray(d.series)) {\n                return true;\n            }\n            // if object, it's okay just convert to array of the object\n            if (nv.utils.isObject(d.series)) {\n                d.series = [d.series];\n                return true;\n            }\n        }\n        return false;\n    };\n\n    // Calculates the gravity offset of the tooltip. Parameter is position of tooltip\n    // relative to the viewport.\n    var calcGravityOffset = function(pos) {\n        var height = tooltip.node().offsetHeight,\n            width = tooltip.node().offsetWidth,\n            clientWidth = document.documentElement.clientWidth, // Don't want scrollbars.\n            clientHeight = document.documentElement.clientHeight, // Don't want scrollbars.\n            left, top, tmp;\n\n        // calculate position based on gravity\n        switch (gravity) {\n            case 'e':\n                left = - width - distance;\n                top = - (height / 2);\n                if(pos.left + left < 0) left = distance;\n                if((tmp = pos.top + top) < 0) top -= tmp;\n                if((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n                break;\n            case 'w':\n                left = distance;\n                top = - (height / 2);\n                if (pos.left + left + width > clientWidth) left = - width - distance;\n                if ((tmp = pos.top + top) < 0) top -= tmp;\n                if ((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n                break;\n            case 'n':\n                left = - (width / 2) - 5; // - 5 is an approximation of the mouse's height.\n                top = distance;\n                if (pos.top + top + height > clientHeight) top = - height - distance;\n                if ((tmp = pos.left + left) < 0) left -= tmp;\n                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n                break;\n            case 's':\n                left = - (width / 2);\n                top = - height - distance;\n                if (pos.top + top < 0) top = distance;\n                if ((tmp = pos.left + left) < 0) left -= tmp;\n                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n                break;\n            case 'center':\n                left = - (width / 2);\n                top = - (height / 2);\n                break;\n            default:\n                left = 0;\n                top = 0;\n                break;\n        }\n\n        return { 'left': left, 'top': top };\n    };\n\n    /*\n     Positions the tooltip in the correct place, as given by the position() function.\n     */\n    var positionTooltip = function() {\n        nv.dom.read(function() {\n            var pos = position(),\n                gravityOffset = calcGravityOffset(pos),\n                left = pos.left + gravityOffset.left,\n                top = pos.top + gravityOffset.top;\n\n            // delay hiding a bit to avoid flickering\n            if (hidden) {\n                tooltip\n                    .interrupt()\n                    .transition()\n                    .delay(hideDelay)\n                    .duration(0)\n                    .style('opacity', 0);\n            } else {\n                // using tooltip.style('transform') returns values un-usable for tween\n                var old_translate = 'translate(' + lastPosition.left + 'px, ' + lastPosition.top + 'px)';\n                var new_translate = 'translate(' + Math.round(left) + 'px, ' + Math.round(top) + 'px)';\n                var translateInterpolator = d3.interpolateString(old_translate, new_translate);\n                var is_hidden = tooltip.style('opacity') < 0.1;\n\n                tooltip\n                    .interrupt() // cancel running transitions\n                    .transition()\n                    .duration(is_hidden ? 0 : duration)\n                    // using tween since some versions of d3 can't auto-tween a translate on a div\n                    .styleTween('transform', function (d) {\n                        return translateInterpolator;\n                    }, 'important')\n                    // Safari has its own `-webkit-transform` and does not support `transform`\n                    .styleTween('-webkit-transform', function (d) {\n                        return translateInterpolator;\n                    })\n                    .style('-ms-transform', new_translate)\n                    .style('opacity', 1);\n            }\n\n            lastPosition.left = left;\n            lastPosition.top = top;\n        });\n    };\n\n    // Creates new tooltip container, or uses existing one on DOM.\n    function initTooltip() {\n        if (!tooltip || !tooltip.node()) {\n            // Create new tooltip div if it doesn't exist on DOM.\n\n            var data = [1];\n            tooltip = d3.select(document.body).select('#'+id).data(data);\n\n            tooltip.enter().append('div')\n                   .attr(\"class\", \"nvtooltip \" + (classes ? classes : \"xy-tooltip\"))\n                   .attr(\"id\", id)\n                   .style(\"top\", 0).style(\"left\", 0)\n                   .style('opacity', 0)\n                   .style('position', 'fixed')\n                   .selectAll(\"div, table, td, tr\").classed(nvPointerEventsClass, true)\n                   .classed(nvPointerEventsClass, true);\n\n            tooltip.exit().remove()\n        }\n    }\n\n    // Draw the tooltip onto the DOM.\n    function nvtooltip() {\n        if (!enabled) return;\n        if (!dataSeriesExists(data)) return;\n\n        nv.dom.write(function () {\n            initTooltip();\n            // Generate data and set it into tooltip.\n            // Bonus - If you override contentGenerator and return false, you can use something like\n            //         Angular, React or Knockout to bind the data for your tooltip directly to the DOM.\n            var newContent = contentGenerator(data, tooltip.node());\n            if (newContent) {\n                tooltip.node().innerHTML = newContent;\n            }\n\n            positionTooltip();\n        });\n\n        return nvtooltip;\n    }\n\n    nvtooltip.nvPointerEventsClass = nvPointerEventsClass;\n    nvtooltip.options = nv.utils.optionsFunc.bind(nvtooltip);\n\n    nvtooltip._options = Object.create({}, {\n        // simple read/write options\n        duration: {get: function(){return duration;}, set: function(_){duration=_;}},\n        gravity: {get: function(){return gravity;}, set: function(_){gravity=_;}},\n        distance: {get: function(){return distance;}, set: function(_){distance=_;}},\n        snapDistance: {get: function(){return snapDistance;}, set: function(_){snapDistance=_;}},\n        classes: {get: function(){return classes;}, set: function(_){classes=_;}},\n        enabled: {get: function(){return enabled;}, set: function(_){enabled=_;}},\n        hideDelay: {get: function(){return hideDelay;}, set: function(_){hideDelay=_;}},\n        contentGenerator: {get: function(){return contentGenerator;}, set: function(_){contentGenerator=_;}},\n        valueFormatter: {get: function(){return valueFormatter;}, set: function(_){valueFormatter=_;}},\n        headerFormatter: {get: function(){return headerFormatter;}, set: function(_){headerFormatter=_;}},\n        keyFormatter: {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        headerEnabled: {get: function(){return headerEnabled;}, set: function(_){headerEnabled=_;}},\n        position: {get: function(){return position;}, set: function(_){position=_;}},\n\n        // Deprecated options\n        chartContainer: {get: function(){return document.body;}, set: function(_){\n            // deprecated after 1.8.3\n            nv.deprecated('chartContainer', 'feature removed after 1.8.3');\n        }},\n        fixedTop: {get: function(){return null;}, set: function(_){\n            // deprecated after 1.8.1\n            nv.deprecated('fixedTop', 'feature removed after 1.8.1');\n        }},\n        offset: {get: function(){return {left: 0, top: 0};}, set: function(_){\n            // deprecated after 1.8.1\n            nv.deprecated('offset', 'use chart.tooltip.distance() instead');\n        }},\n\n        // options with extra logic\n        hidden: {get: function(){return hidden;}, set: function(_){\n            if (hidden != _) {\n                hidden = !!_;\n                nvtooltip();\n            }\n        }},\n        data: {get: function(){return data;}, set: function(_){\n            // if showing a single data point, adjust data format with that\n            if (_.point) {\n                _.value = _.point.x;\n                _.series = _.series || {};\n                _.series.value = _.point.y;\n                _.series.color = _.point.color || _.series.color;\n            }\n            data = _;\n        }},\n\n        // read only properties\n        node: {get: function(){return tooltip.node();}, set: function(_){}},\n        id: {get: function(){return id;}, set: function(_){}}\n    });\n\n    nv.utils.initOptions(nvtooltip);\n    return nvtooltip;\n};\n\n\n/*\nGets the browser window size\n\nReturns object with height and width properties\n */\nnv.utils.windowSize = function() {\n    // Sane defaults\n    var size = {width: 640, height: 480};\n\n    // Most recent browsers use\n    if (window.innerWidth && window.innerHeight) {\n        size.width = window.innerWidth;\n        size.height = window.innerHeight;\n        return (size);\n    }\n\n    // IE can use depending on mode it is in\n    if (document.compatMode=='CSS1Compat' &&\n        document.documentElement &&\n        document.documentElement.offsetWidth ) {\n\n        size.width = document.documentElement.offsetWidth;\n        size.height = document.documentElement.offsetHeight;\n        return (size);\n    }\n\n    // Earlier IE uses Doc.body\n    if (document.body && document.body.offsetWidth) {\n        size.width = document.body.offsetWidth;\n        size.height = document.body.offsetHeight;\n        return (size);\n    }\n\n    return (size);\n};\n\n\n/* handle dumb browser quirks...  isinstance breaks if you use frames\ntypeof returns 'object' for null, NaN is a number, etc.\n */\nnv.utils.isArray = Array.isArray;\nnv.utils.isObject = function(a) {\n    return a !== null && typeof a === 'object';\n};\nnv.utils.isFunction = function(a) {\n    return typeof a === 'function';\n};\nnv.utils.isDate = function(a) {\n    return toString.call(a) === '[object Date]';\n};\nnv.utils.isNumber = function(a) {\n    return !isNaN(a) && typeof a === 'number';\n};\n\n\n/*\nBinds callback function to run when window is resized\n */\nnv.utils.windowResize = function(handler) {\n    if (window.addEventListener) {\n        window.addEventListener('resize', handler);\n    } else {\n        nv.log(\"ERROR: Failed to bind to window.resize with: \", handler);\n    }\n    // return object with clear function to remove the single added callback.\n    return {\n        callback: handler,\n        clear: function() {\n            window.removeEventListener('resize', handler);\n        }\n    }\n};\n\n\n/*\nBackwards compatible way to implement more d3-like coloring of graphs.\nCan take in nothing, an array, or a function/scale\nTo use a normal scale, get the range and pass that because we must be able\nto take two arguments and use the index to keep backward compatibility\n*/\nnv.utils.getColor = function(color) {\n    //if you pass in nothing, get default colors back\n    if (color === undefined) {\n        return nv.utils.defaultColor();\n\n    //if passed an array, turn it into a color scale\n    } else if(nv.utils.isArray(color)) {\n        var color_scale = d3.scale.ordinal().range(color);\n        return function(d, i) {\n            var key = i === undefined ? d : i;\n            return d.color || color_scale(key);\n        };\n\n    //if passed a function or scale, return it, or whatever it may be\n    //external libs, such as angularjs-nvd3-directives use this\n    } else {\n        //can't really help it if someone passes rubbish as color\n        return color;\n    }\n};\n\n\n/*\nDefault color chooser uses a color scale of 20 colors from D3\n https://github.com/mbostock/d3/wiki/Ordinal-Scales#categorical-colors\n */\nnv.utils.defaultColor = function() {\n    // get range of the scale so we'll turn it into our own function.\n    return nv.utils.getColor(d3.scale.category20().range());\n};\n\n\n/*\nReturns a color function that takes the result of 'getKey' for each series and\nlooks for a corresponding color from the dictionary\n*/\nnv.utils.customTheme = function(dictionary, getKey, defaultColors) {\n    // use default series.key if getKey is undefined\n    getKey = getKey || function(series) { return series.key };\n    defaultColors = defaultColors || d3.scale.category20().range();\n\n    // start at end of default color list and walk back to index 0\n    var defIndex = defaultColors.length;\n\n    return function(series, index) {\n        var key = getKey(series);\n        if (nv.utils.isFunction(dictionary[key])) {\n            return dictionary[key]();\n        } else if (dictionary[key] !== undefined) {\n            return dictionary[key];\n        } else {\n            // no match in dictionary, use a default color\n            if (!defIndex) {\n                // used all the default colors, start over\n                defIndex = defaultColors.length;\n            }\n            defIndex = defIndex - 1;\n            return defaultColors[defIndex];\n        }\n    };\n};\n\n\n/*\nFrom the PJAX example on d3js.org, while this is not really directly needed\nit's a very cool method for doing pjax, I may expand upon it a little bit,\nopen to suggestions on anything that may be useful\n*/\nnv.utils.pjax = function(links, content) {\n\n    var load = function(href) {\n        d3.html(href, function(fragment) {\n            var target = d3.select(content).node();\n            target.parentNode.replaceChild(\n                d3.select(fragment).select(content).node(),\n                target);\n            nv.utils.pjax(links, content);\n        });\n    };\n\n    d3.selectAll(links).on(\"click\", function() {\n        history.pushState(this.href, this.textContent, this.href);\n        load(this.href);\n        d3.event.preventDefault();\n    });\n\n    d3.select(window).on(\"popstate\", function() {\n        if (d3.event.state) {\n            load(d3.event.state);\n        }\n    });\n};\n\n\n/*\nFor when we want to approximate the width in pixels for an SVG:text element.\nMost common instance is when the element is in a display:none; container.\nForumla is : text.length * font-size * constant_factor\n*/\nnv.utils.calcApproxTextWidth = function (svgTextElem) {\n    if (nv.utils.isFunction(svgTextElem.style) && nv.utils.isFunction(svgTextElem.text)) {\n        var fontSize = parseInt(svgTextElem.style(\"font-size\").replace(\"px\",\"\"), 10);\n        var textLength = svgTextElem.text().length;\n        return nv.utils.NaNtoZero(textLength * fontSize * 0.5);\n    }\n    return 0;\n};\n\n\n/*\nNumbers that are undefined, null or NaN, convert them to zeros.\n*/\nnv.utils.NaNtoZero = function(n) {\n    if (!nv.utils.isNumber(n)\n        || isNaN(n)\n        || n === null\n        || n === Infinity\n        || n === -Infinity) {\n\n        return 0;\n    }\n    return n;\n};\n\n/*\nAdd a way to watch for d3 transition ends to d3\n*/\nd3.selection.prototype.watchTransition = function(renderWatch){\n    var args = [this].concat([].slice.call(arguments, 1));\n    return renderWatch.transition.apply(renderWatch, args);\n};\n\n\n/*\nHelper object to watch when d3 has rendered something\n*/\nnv.utils.renderWatch = function(dispatch, duration) {\n    if (!(this instanceof nv.utils.renderWatch)) {\n        return new nv.utils.renderWatch(dispatch, duration);\n    }\n\n    var _duration = duration !== undefined ? duration : 250;\n    var renderStack = [];\n    var self = this;\n\n    this.models = function(models) {\n        models = [].slice.call(arguments, 0);\n        models.forEach(function(model){\n            model.__rendered = false;\n            (function(m){\n                m.dispatch.on('renderEnd', function(arg){\n                    m.__rendered = true;\n                    self.renderEnd('model');\n                });\n            })(model);\n\n            if (renderStack.indexOf(model) < 0) {\n                renderStack.push(model);\n            }\n        });\n    return this;\n    };\n\n    this.reset = function(duration) {\n        if (duration !== undefined) {\n            _duration = duration;\n        }\n        renderStack = [];\n    };\n\n    this.transition = function(selection, args, duration) {\n        args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n\n        if (args.length > 1) {\n            duration = args.pop();\n        } else {\n            duration = _duration !== undefined ? _duration : 250;\n        }\n        selection.__rendered = false;\n\n        if (renderStack.indexOf(selection) < 0) {\n            renderStack.push(selection);\n        }\n\n        if (duration === 0) {\n            selection.__rendered = true;\n            selection.delay = function() { return this; };\n            selection.duration = function() { return this; };\n            return selection;\n        } else {\n            if (selection.length === 0) {\n                selection.__rendered = true;\n            } else if (selection.every( function(d){ return !d.length; } )) {\n                selection.__rendered = true;\n            } else {\n                selection.__rendered = false;\n            }\n\n            var n = 0;\n            return selection\n                .transition()\n                .duration(duration)\n                .each(function(){ ++n; })\n                .each('end', function(d, i) {\n                    if (--n === 0) {\n                        selection.__rendered = true;\n                        self.renderEnd.apply(this, args);\n                    }\n                });\n        }\n    };\n\n    this.renderEnd = function() {\n        if (renderStack.every( function(d){ return d.__rendered; } )) {\n            renderStack.forEach( function(d){ d.__rendered = false; });\n            dispatch.renderEnd.apply(this, arguments);\n        }\n    }\n\n};\n\n\n/*\nTakes multiple objects and combines them into the first one (dst)\nexample:  nv.utils.deepExtend({a: 1}, {a: 2, b: 3}, {c: 4});\ngives:  {a: 2, b: 3, c: 4}\n*/\nnv.utils.deepExtend = function(dst){\n    var sources = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n    sources.forEach(function(source) {\n        for (var key in source) {\n            var isArray = nv.utils.isArray(dst[key]);\n            var isObject = nv.utils.isObject(dst[key]);\n            var srcObj = nv.utils.isObject(source[key]);\n\n            if (isObject && !isArray && srcObj) {\n                nv.utils.deepExtend(dst[key], source[key]);\n            } else {\n                dst[key] = source[key];\n            }\n        }\n    });\n};\n\n\n/*\nstate utility object, used to track d3 states in the models\n*/\nnv.utils.state = function(){\n    if (!(this instanceof nv.utils.state)) {\n        return new nv.utils.state();\n    }\n    var state = {};\n    var _self = this;\n    var _setState = function(){};\n    var _getState = function(){ return {}; };\n    var init = null;\n    var changed = null;\n\n    this.dispatch = d3.dispatch('change', 'set');\n\n    this.dispatch.on('set', function(state){\n        _setState(state, true);\n    });\n\n    this.getter = function(fn){\n        _getState = fn;\n        return this;\n    };\n\n    this.setter = function(fn, callback) {\n        if (!callback) {\n            callback = function(){};\n        }\n        _setState = function(state, update){\n            fn(state);\n            if (update) {\n                callback();\n            }\n        };\n        return this;\n    };\n\n    this.init = function(state){\n        init = init || {};\n        nv.utils.deepExtend(init, state);\n    };\n\n    var _set = function(){\n        var settings = _getState();\n\n        if (JSON.stringify(settings) === JSON.stringify(state)) {\n            return false;\n        }\n\n        for (var key in settings) {\n            if (state[key] === undefined) {\n                state[key] = {};\n            }\n            state[key] = settings[key];\n            changed = true;\n        }\n        return true;\n    };\n\n    this.update = function(){\n        if (init) {\n            _setState(init, false);\n            init = null;\n        }\n        if (_set.call(this)) {\n            this.dispatch.change(state);\n        }\n    };\n\n};\n\n\n/*\nSnippet of code you can insert into each nv.models.* to give you the ability to\ndo things like:\nchart.options({\n  showXAxis: true,\n  tooltips: true\n});\n\nTo enable in the chart:\nchart.options = nv.utils.optionsFunc.bind(chart);\n*/\nnv.utils.optionsFunc = function(args) {\n    if (args) {\n        d3.map(args).forEach((function(key,value) {\n            if (nv.utils.isFunction(this[key])) {\n                this[key](value);\n            }\n        }).bind(this));\n    }\n    return this;\n};\n\n\n/*\nnumTicks:  requested number of ticks\ndata:  the chart data\n\nreturns the number of ticks to actually use on X axis, based on chart data\nto avoid duplicate ticks with the same value\n*/\nnv.utils.calcTicksX = function(numTicks, data) {\n    // find max number of values from all data streams\n    var numValues = 1;\n    var i = 0;\n    for (i; i < data.length; i += 1) {\n        var stream_len = data[i] && data[i].values ? data[i].values.length : 0;\n        numValues = stream_len > numValues ? stream_len : numValues;\n    }\n    nv.log(\"Requested number of ticks: \", numTicks);\n    nv.log(\"Calculated max values to be: \", numValues);\n    // make sure we don't have more ticks than values to avoid duplicates\n    numTicks = numTicks > numValues ? numTicks = numValues - 1 : numTicks;\n    // make sure we have at least one tick\n    numTicks = numTicks < 1 ? 1 : numTicks;\n    // make sure it's an integer\n    numTicks = Math.floor(numTicks);\n    nv.log(\"Calculating tick count as: \", numTicks);\n    return numTicks;\n};\n\n\n/*\nreturns number of ticks to actually use on Y axis, based on chart data\n*/\nnv.utils.calcTicksY = function(numTicks, data) {\n    // currently uses the same logic but we can adjust here if needed later\n    return nv.utils.calcTicksX(numTicks, data);\n};\n\n\n/*\nAdd a particular option from an options object onto chart\nOptions exposed on a chart are a getter/setter function that returns chart\non set to mimic typical d3 option chaining, e.g. svg.option1('a').option2('b');\n\noption objects should be generated via Object.create() to provide\nthe option of manipulating data via get/set functions.\n*/\nnv.utils.initOption = function(chart, name) {\n    // if it's a call option, just call it directly, otherwise do get/set\n    if (chart._calls && chart._calls[name]) {\n        chart[name] = chart._calls[name];\n    } else {\n        chart[name] = function (_) {\n            if (!arguments.length) return chart._options[name];\n            chart._overrides[name] = true;\n            chart._options[name] = _;\n            return chart;\n        };\n        // calling the option as _option will ignore if set by option already\n        // so nvd3 can set options internally but the stop if set manually\n        chart['_' + name] = function(_) {\n            if (!arguments.length) return chart._options[name];\n            if (!chart._overrides[name]) {\n                chart._options[name] = _;\n            }\n            return chart;\n        }\n    }\n};\n\n\n/*\nAdd all options in an options object to the chart\n*/\nnv.utils.initOptions = function(chart) {\n    chart._overrides = chart._overrides || {};\n    var ops = Object.getOwnPropertyNames(chart._options || {});\n    var calls = Object.getOwnPropertyNames(chart._calls || {});\n    ops = ops.concat(calls);\n    for (var i in ops) {\n        nv.utils.initOption(chart, ops[i]);\n    }\n};\n\n\n/*\nInherit options from a D3 object\nd3.rebind makes calling the function on target actually call it on source\nAlso use _d3options so we can track what we inherit for documentation and chained inheritance\n*/\nnv.utils.inheritOptionsD3 = function(target, d3_source, oplist) {\n    target._d3options = oplist.concat(target._d3options || []);\n    // Find unique d3 options (string) and update d3options\n    target._d3options = (target._d3options || []).filter(function(item, i, ar){ return ar.indexOf(item) === i; });\n    oplist.unshift(d3_source);\n    oplist.unshift(target);\n    d3.rebind.apply(this, oplist);\n};\n\n\n/*\nRemove duplicates from an array\n*/\nnv.utils.arrayUnique = function(a) {\n    return a.sort().filter(function(item, pos) {\n        return !pos || item != a[pos - 1];\n    });\n};\n\n\n/*\nKeeps a list of custom symbols to draw from in addition to d3.svg.symbol\nNecessary since d3 doesn't let you extend its list -_-\nAdd new symbols by doing nv.utils.symbols.set('name', function(size){...});\n*/\nnv.utils.symbolMap = d3.map();\n\n\n/*\nReplaces d3.svg.symbol so that we can look both there and our own map\n */\nnv.utils.symbol = function() {\n    var type,\n        size = 64;\n    function symbol(d,i) {\n        var t = type.call(this,d,i);\n        var s = size.call(this,d,i);\n        if (d3.svg.symbolTypes.indexOf(t) !== -1) {\n            return d3.svg.symbol().type(t).size(s)();\n        } else {\n            return nv.utils.symbolMap.get(t)(s);\n        }\n    }\n    symbol.type = function(_) {\n        if (!arguments.length) return type;\n        type = d3.functor(_);\n        return symbol;\n    };\n    symbol.size = function(_) {\n        if (!arguments.length) return size;\n        size = d3.functor(_);\n        return symbol;\n    };\n    return symbol;\n};\n\n\n/*\nInherit option getter/setter functions from source to target\nd3.rebind makes calling the function on target actually call it on source\nAlso track via _inherited and _d3options so we can track what we inherit\nfor documentation generation purposes and chained inheritance\n*/\nnv.utils.inheritOptions = function(target, source) {\n    // inherit all the things\n    var ops = Object.getOwnPropertyNames(source._options || {});\n    var calls = Object.getOwnPropertyNames(source._calls || {});\n    var inherited = source._inherited || [];\n    var d3ops = source._d3options || [];\n    var args = ops.concat(calls).concat(inherited).concat(d3ops);\n    args.unshift(source);\n    args.unshift(target);\n    d3.rebind.apply(this, args);\n    // pass along the lists to keep track of them, don't allow duplicates\n    target._inherited = nv.utils.arrayUnique(ops.concat(calls).concat(inherited).concat(ops).concat(target._inherited || []));\n    target._d3options = nv.utils.arrayUnique(d3ops.concat(target._d3options || []));\n};\n\n\n/*\nRuns common initialize code on the svg before the chart builds\n*/\nnv.utils.initSVG = function(svg) {\n    svg.classed({'nvd3-svg':true});\n};\n\n\n/*\nSanitize and provide default for the container height.\n*/\nnv.utils.sanitizeHeight = function(height, container) {\n    return (height || parseInt(container.style('height'), 10) || 400);\n};\n\n\n/*\nSanitize and provide default for the container width.\n*/\nnv.utils.sanitizeWidth = function(width, container) {\n    return (width || parseInt(container.style('width'), 10) || 960);\n};\n\n\n/*\nCalculate the available height for a chart.\n*/\nnv.utils.availableHeight = function(height, container, margin) {\n    return Math.max(0,nv.utils.sanitizeHeight(height, container) - margin.top - margin.bottom);\n};\n\n/*\nCalculate the available width for a chart.\n*/\nnv.utils.availableWidth = function(width, container, margin) {\n    return Math.max(0,nv.utils.sanitizeWidth(width, container) - margin.left - margin.right);\n};\n\n/*\nClear any rendered chart components and display a chart's 'noData' message\n*/\nnv.utils.noData = function(chart, container) {\n    var opt = chart.options(),\n        margin = opt.margin(),\n        noData = opt.noData(),\n        data = (noData == null) ? [\"No Data Available.\"] : [noData],\n        height = nv.utils.availableHeight(null, container, margin),\n        width = nv.utils.availableWidth(null, container, margin),\n        x = margin.left + width/2,\n        y = margin.top + height/2;\n\n    //Remove any previously created chart components\n    container.selectAll('g').remove();\n\n    var noDataText = container.selectAll('.nv-noData').data(data);\n\n    noDataText.enter().append('text')\n        .attr('class', 'nvd3 nv-noData')\n        .attr('dy', '-.7em')\n        .style('text-anchor', 'middle');\n\n    noDataText\n        .attr('x', x)\n        .attr('y', y)\n        .text(function(t){ return t; });\n};\n\n/*\n Wrap long labels.\n */\nnv.utils.wrapTicks = function (text, width) {\n    text.each(function() {\n        var text = d3.select(this),\n            words = text.text().split(/\\s+/).reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 1.1,\n            y = text.attr(\"y\"),\n            dy = parseFloat(text.attr(\"dy\")),\n            tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n        while (word = words.pop()) {\n            line.push(word);\n            tspan.text(line.join(\" \"));\n            if (tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(\" \"));\n                line = [word];\n                tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n            }\n        }\n    });\n};\n\n/*\nCheck equality of 2 array\n*/\nnv.utils.arrayEquals = function (array1, array2) {\n    if (array1 === array2)\n        return true;\n\n    if (!array1 || !array2)\n        return false;\n\n    // compare lengths - can save a lot of time\n    if (array1.length != array2.length)\n        return false;\n\n    for (var i = 0,\n        l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!nv.arrayEquals(array1[i], array2[i]))\n                return false;\n        } else if (array1[i] != array2[i]) {\n            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n Check if a point within an arc\n */\nnv.utils.pointIsInArc = function(pt, ptData, d3Arc) {\n    // Center of the arc is assumed to be 0,0\n    // (pt.x, pt.y) are assumed to be relative to the center\n    var r1 = d3Arc.innerRadius()(ptData), // Note: Using the innerRadius\n      r2 = d3Arc.outerRadius()(ptData),\n      theta1 = d3Arc.startAngle()(ptData),\n      theta2 = d3Arc.endAngle()(ptData);\n\n    var dist = pt.x * pt.x + pt.y * pt.y,\n      angle = Math.atan2(pt.x, -pt.y); // Note: different coordinate system.\n\n    angle = (angle < 0) ? (angle + Math.PI * 2) : angle;\n\n    return (r1 * r1 <= dist) && (dist <= r2 * r2) &&\n      (theta1 <= angle) && (angle <= theta2);\n};\n\nnv.models.axis = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var axis = d3.svg.axis();\n    var scale = d3.scale.linear();\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 75 //only used for tickLabel currently\n        , height = 60 //only used for tickLabel currently\n        , axisLabelText = null\n        , showMaxMin = true //TODO: showMaxMin should be disabled on all ordinal scaled axes\n        , rotateLabels = 0\n        , rotateYLabel = true\n        , staggerLabels = false\n        , isOrdinal = false\n        , ticks = null\n        , axisLabelDistance = 0\n        , fontSize = undefined\n        , duration = 250\n        , dispatch = d3.dispatch('renderEnd')\n        , tickFormatMaxMin\n        ;\n    axis\n        .scale(scale)\n        .orient('bottom')\n        .tickFormat(function(d) { return d })\n    ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var scale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            if (ticks !== null)\n                axis.ticks(ticks);\n            else if (axis.orient() == 'top' || axis.orient() == 'bottom')\n                axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);\n\n            //TODO: consider calculating width/height based on whether or not label is added, for reference in charts using this component\n            g.watchTransition(renderWatch, 'axis').call(axis);\n\n            scale0 = scale0 || axis.scale();\n\n            var fmt = axis.tickFormat();\n            if (fmt == null) {\n                fmt = scale0.tickFormat();\n            }\n\n            var axisLabel = g.selectAll('text.nv-axislabel')\n                .data([axisLabelText || null]);\n            axisLabel.exit().remove();\n\n            //only skip when fontSize is undefined so it can be cleared with a null or blank string\n            if (fontSize !== undefined) {\n                g.selectAll('g').select(\"text\").style('font-size', fontSize);\n            }\n\n            var xLabelMargin;\n            var axisMaxMin;\n            var w;\n            switch (axis.orient()) {\n                case 'top':\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                  w = 0;\n                  if (scale.range().length === 1) {\n                    w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n                  } else if (scale.range().length === 2) {\n                    w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n                  } else if ( scale.range().length > 2){\n                    w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n                  };\n                    axisLabel\n                        .attr('text-anchor', 'middle')\n                        .attr('y', 0)\n                        .attr('x', w/2);\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n                        }).append('text');\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero(scale(d)) + ',0)'\n                            })\n                            .select('text')\n                            .attr('dy', '-0.5em')\n                            .attr('y', -axis.tickPadding())\n                            .attr('text-anchor', 'middle')\n                            .text(function(d,i) {\n                                var formatter = tickFormatMaxMin || fmt;\n                                var v = formatter(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max top')\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero(scale.range()[i]) + ',0)'\n                            });\n                    }\n                    break;\n                case 'bottom':\n                    xLabelMargin = axisLabelDistance + 36;\n                    var maxTextWidth = 30;\n                    var textHeight = 0;\n                    var xTicks = g.selectAll('g').select(\"text\");\n                    var rotateLabelsRule = '';\n                    if (rotateLabels%360) {\n                        //Reset transform on ticks so textHeight can be calculated correctly\n                        xTicks.attr('transform', '');\n                        //Calculate the longest xTick width\n                        xTicks.each(function(d,i){\n                            var box = this.getBoundingClientRect();\n                            var width = box.width;\n                            textHeight = box.height;\n                            if(width > maxTextWidth) maxTextWidth = width;\n                        });\n                        rotateLabelsRule = 'rotate(' + rotateLabels + ' 0,' + (textHeight/2 + axis.tickPadding()) + ')';\n                        //Convert to radians before calculating sin. Add 30 to margin for healthy padding.\n                        var sin = Math.abs(Math.sin(rotateLabels*Math.PI/180));\n                        xLabelMargin = (sin ? sin*maxTextWidth : maxTextWidth)+30;\n                        //Rotate all xTicks\n                        xTicks\n                            .attr('transform', rotateLabelsRule)\n                            .style('text-anchor', rotateLabels%360 > 0 ? 'start' : 'end');\n                    } else {\n                        if (staggerLabels) {\n                            xTicks\n                                .attr('transform', function(d,i) {\n                                    return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')'\n                                });\n                        } else {\n                            xTicks.attr('transform', \"translate(0,0)\");\n                        }\n                    }\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    w = 0;\n                    if (scale.range().length === 1) {\n                        w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n                    } else if (scale.range().length === 2) {\n                        w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n                    } else if ( scale.range().length > 2){\n                        w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n                    };\n                    axisLabel\n                        .attr('text-anchor', 'middle')\n                        .attr('y', xLabelMargin)\n                        .attr('x', w/2);\n                    if (showMaxMin) {\n                        //if (showMaxMin && !isOrdinal) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            //.data(scale.domain())\n                            .data([scale.domain()[0], scale.domain()[scale.domain().length - 1]]);\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n                        }).append('text');\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n                            })\n                            .select('text')\n                            .attr('dy', '.71em')\n                            .attr('y', axis.tickPadding())\n                            .attr('transform', rotateLabelsRule)\n                            .style('text-anchor', rotateLabels ? (rotateLabels%360 > 0 ? 'start' : 'end') : 'middle')\n                            .text(function(d,i) {\n                                var formatter = tickFormatMaxMin || fmt;\n                                var v = formatter(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max bottom')\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n                            });\n                    }\n\n                    break;\n                case 'right':\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    axisLabel\n                        .style('text-anchor', rotateYLabel ? 'middle' : 'begin')\n                        .attr('transform', rotateYLabel ? 'rotate(90)' : '')\n                        .attr('y', rotateYLabel ? (-Math.max(margin.right, width) + 12 - (axisLabelDistance || 0)) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart\n                        .attr('x', rotateYLabel ? (d3.max(scale.range()) / 2) : axis.tickPadding());\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                       \taxisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n                        }).append('text')\n                            .style('opacity', 0);\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale(d)) + ')'\n                            })\n                            .select('text')\n                            .attr('dy', '.32em')\n                            .attr('y', 0)\n                            .attr('x', axis.tickPadding())\n                            .style('text-anchor', 'start')\n                            .text(function(d, i) {\n                                var formatter = tickFormatMaxMin || fmt;\n                                var v = formatter(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n                            })\n                            .select('text')\n                            .style('opacity', 1);\n                    }\n                    break;\n                case 'left':\n                    /*\n                     //For dynamically placing the label. Can be used with dynamically-sized chart axis margins\n                     var yTicks = g.selectAll('g').select(\"text\");\n                     yTicks.each(function(d,i){\n                     var labelPadding = this.getBoundingClientRect().width + axis.tickPadding() + 16;\n                     if(labelPadding > width) width = labelPadding;\n                     });\n                     */\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    axisLabel\n                        .style('text-anchor', rotateYLabel ? 'middle' : 'end')\n                        .attr('transform', rotateYLabel ? 'rotate(-90)' : '')\n                        .attr('y', rotateYLabel ? (-Math.max(margin.left, width) + 25 - (axisLabelDistance || 0)) : -10)\n                        .attr('x', rotateYLabel ? (-d3.max(scale.range()) / 2) : -axis.tickPadding());\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n                        }).append('text')\n                            .style('opacity', 0);\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale0(d)) + ')'\n                            })\n                            .select('text')\n                            .attr('dy', '.32em')\n                            .attr('y', 0)\n                            .attr('x', -axis.tickPadding())\n                            .attr('text-anchor', 'end')\n                            .text(function(d,i) {\n                                var formatter = tickFormatMaxMin || fmt;\n                                var v = formatter(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n                            })\n                            .select('text')\n                            .style('opacity', 1);\n                    }\n                    break;\n            }\n            axisLabel.text(function(d) { return d });\n\n            if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {\n                //check if max and min overlap other values, if so, hide the values that overlap\n                g.selectAll('g') // the g's wrapping each tick\n                    .each(function(d,i) {\n                        d3.select(this).select('text').attr('opacity', 1);\n                        if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) { // 10 is assuming text height is 16... if d is 0, leave it!\n                            if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                                d3.select(this).attr('opacity', 0);\n\n                            d3.select(this).select('text').attr('opacity', 0); // Don't remove the ZERO line!!\n                        }\n                    });\n\n                //if Max and Min = 0 only show min, Issue #281\n                if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0) {\n                    wrap.selectAll('g.nv-axisMaxMin').style('opacity', function (d, i) {\n                        return !i ? 1 : 0\n                    });\n                }\n            }\n\n            if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {\n                var maxMinRange = [];\n                wrap.selectAll('g.nv-axisMaxMin')\n                    .each(function(d,i) {\n                        try {\n                            if (i) // i== 1, max position\n                                maxMinRange.push(scale(d) - this.getBoundingClientRect().width - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                            else // i==0, min position\n                                maxMinRange.push(scale(d) + this.getBoundingClientRect().width + 4)\n                        }catch (err) {\n                            if (i) // i== 1, max position\n                                maxMinRange.push(scale(d) - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                            else // i==0, min position\n                                maxMinRange.push(scale(d) + 4);\n                        }\n                    });\n                // the g's wrapping each tick\n                g.selectAll('g').each(function(d, i) {\n                    if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {\n                        if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                            d3.select(this).remove();\n                        else\n                            d3.select(this).select('text').remove(); // Don't remove the ZERO line!!\n                    }\n                });\n            }\n\n            //Highlight zero tick line\n            g.selectAll('.tick')\n                .filter(function (d) {\n                    /*\n                    The filter needs to return only ticks at or near zero.\n                    Numbers like 0.00001 need to count as zero as well,\n                    and the arithmetic trick below solves that.\n                    */\n                    return !parseFloat(Math.round(d * 100000) / 1000000) && (d !== undefined)\n                })\n                .classed('zero', true);\n\n            //store old scales for use in transitions on update\n            scale0 = scale.copy();\n\n        });\n\n        renderWatch.renderEnd('axis immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.axis = axis;\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        axisLabelDistance: {get: function(){return axisLabelDistance;}, set: function(_){axisLabelDistance=_;}},\n        staggerLabels:     {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        rotateLabels:      {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        rotateYLabel:      {get: function(){return rotateYLabel;}, set: function(_){rotateYLabel=_;}},\n        showMaxMin:        {get: function(){return showMaxMin;}, set: function(_){showMaxMin=_;}},\n        axisLabel:         {get: function(){return axisLabelText;}, set: function(_){axisLabelText=_;}},\n        height:            {get: function(){return height;}, set: function(_){height=_;}},\n        ticks:             {get: function(){return ticks;}, set: function(_){ticks=_;}},\n        width:             {get: function(){return width;}, set: function(_){width=_;}},\n        fontSize:          {get: function(){return fontSize;}, set: function(_){fontSize=_;}},\n        tickFormatMaxMin:  {get: function(){return tickFormatMaxMin;}, set: function(_){tickFormatMaxMin=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top !== undefined    ? _.top    : margin.top;\n            margin.right  = _.right !== undefined  ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left !== undefined   ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration=_;\n            renderWatch.reset(duration);\n        }},\n        scale: {get: function(){return scale;}, set: function(_){\n            scale = _;\n            axis.scale(scale);\n            isOrdinal = typeof scale.rangeBands === 'function';\n            nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    nv.utils.inheritOptionsD3(chart, axis, ['orient', 'tickValues', 'tickSubdivide', 'tickSize', 'tickPadding', 'tickFormat']);\n    nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n\n    return chart;\n};\nnv.models.boxPlot = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0},\n        width = 960,\n        height = 500,\n        id = Math.floor(Math.random() * 10000), // Create semi-unique ID in case user doesn't select one\n        xScale = d3.scale.ordinal(),\n        yScale = d3.scale.linear(),\n        getX  = function(d) { return d.label }, // Default data model selectors.\n        getQ1 = function(d) { return d.values.Q1 },\n        getQ2 = function(d) { return d.values.Q2 },\n        getQ3 = function(d) { return d.values.Q3 },\n        getWl = function(d) { return d.values.whisker_low },\n        getWh = function(d) { return d.values.whisker_high },\n        getColor = function(d) { return d.color },\n        getOlItems  = function(d) { return d.values.outliers },\n        getOlValue = function(d, i, j) { return d },\n        getOlLabel = function(d, i, j) { return d },\n        getOlColor = function(d, i, j) { return undefined },\n        color = nv.utils.defaultColor(),\n        container = null,\n        xDomain, xRange,\n        yDomain, yRange,\n        dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd'),\n        duration = 250,\n        maxBoxWidth = null;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var xScale0, yScale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            xScale.domain(xDomain || data.map(function(d,i) { return getX(d,i); }))\n                .rangeBands(xRange || [0, availableWidth], 0.1);\n\n            // if we know yDomain, no need to calculate\n            var yData = []\n            if (!yDomain) {\n                // (y-range is based on quartiles, whiskers and outliers)\n                var values = [], yMin, yMax;\n                data.forEach(function (d, i) {\n                    var q1 = getQ1(d), q3 = getQ3(d), wl = getWl(d), wh = getWh(d);\n                    var olItems = getOlItems(d);\n                    if (olItems) {\n                        olItems.forEach(function (e, i) {\n                            values.push(getOlValue(e, i, undefined));\n                        });\n                    }\n                    if (wl) { values.push(wl) }\n                    if (q1) { values.push(q1) }\n                    if (q3) { values.push(q3) }\n                    if (wh) { values.push(wh) }\n                });\n                yMin = d3.min(values);\n                yMax = d3.max(values);\n                yData = [ yMin, yMax ] ;\n            }\n\n            yScale.domain(yDomain || yData);\n            yScale.range(yRange || [availableHeight, 0]);\n\n            //store old scales if they exist\n            xScale0 = xScale0 || xScale;\n            yScale0 = yScale0 || yScale.copy().range([yScale(0),yScale(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var boxplots = wrap.selectAll('.nv-boxplot').data(function(d) { return d });\n            var boxEnter = boxplots.enter().append('g').style('stroke-opacity', 1e-6).style('fill-opacity', 1e-6);\n            boxplots\n                .attr('class', 'nv-boxplot')\n                .attr('transform', function(d,i,j) { return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)'; })\n                .classed('hover', function(d) { return d.hover });\n            boxplots\n                .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', 0.75)\n                .delay(function(d,i) { return i * duration / data.length })\n                .attr('transform', function(d,i) {\n                    return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)';\n                });\n            boxplots.exit().remove();\n\n            // ----- add the SVG elements for each boxPlot -----\n\n            // conditionally append whisker lines\n            boxEnter.each(function(d,i) {\n                var box = d3.select(this);\n                [getWl, getWh].forEach(function (f) {\n                    if (f(d) !== undefined && f(d) !== null) {\n                        var key = (f === getWl) ? 'low' : 'high';\n                        box.append('line')\n                          .style('stroke', getColor(d) || color(d,i))\n                          .attr('class', 'nv-boxplot-whisker nv-boxplot-' + key);\n                        box.append('line')\n                          .style('stroke', getColor(d) || color(d,i))\n                          .attr('class', 'nv-boxplot-tick nv-boxplot-' + key);\n                    }\n                });\n            });\n\n            var box_width = function() { return (maxBoxWidth === null ? xScale.rangeBand() * 0.9 : Math.min(75, xScale.rangeBand() * 0.9)); };\n            var box_left  = function() { return xScale.rangeBand() * 0.45 - box_width()/2; };\n            var box_right = function() { return xScale.rangeBand() * 0.45 + box_width()/2; };\n\n            // update whisker lines and ticks\n            [getWl, getWh].forEach(function (f) {\n                var key = (f === getWl) ? 'low' : 'high';\n                var endpoint = (f === getWl) ? getQ1 : getQ3;\n                boxplots.select('line.nv-boxplot-whisker.nv-boxplot-' + key)\n                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                    .attr('x1', xScale.rangeBand() * 0.45 )\n                    .attr('y1', function(d,i) { return yScale(f(d)); })\n                    .attr('x2', xScale.rangeBand() * 0.45 )\n                    .attr('y2', function(d,i) { return yScale(endpoint(d)); });\n                boxplots.select('line.nv-boxplot-tick.nv-boxplot-' + key)\n                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                    .attr('x1', box_left )\n                    .attr('y1', function(d,i) { return yScale(f(d)); })\n                    .attr('x2', box_right )\n                    .attr('y2', function(d,i) { return yScale(f(d)); });\n            });\n\n            [getWl, getWh].forEach(function (f) {\n                var key = (f === getWl) ? 'low' : 'high';\n                boxEnter.selectAll('.nv-boxplot-' + key)\n                  .on('mouseover', function(d,i,j) {\n                      d3.select(this).classed('hover', true);\n                      dispatch.elementMouseover({\n                          series: { key: f(d), color: getColor(d) || color(d,j) },\n                          e: d3.event\n                      });\n                  })\n                  .on('mouseout', function(d,i,j) {\n                      d3.select(this).classed('hover', false);\n                      dispatch.elementMouseout({\n                          series: { key: f(d), color: getColor(d) || color(d,j) },\n                          e: d3.event\n                      });\n                  })\n                  .on('mousemove', function(d,i) {\n                      dispatch.elementMousemove({e: d3.event});\n                  });\n            });\n\n            // boxes\n            boxEnter.append('rect')\n                .attr('class', 'nv-boxplot-box')\n                // tooltip events\n                .on('mouseover', function(d,i) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        key: getX(d),\n                        value: getX(d),\n                        series: [\n                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n                        ],\n                        data: d,\n                        index: i,\n                        e: d3.event\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        key: getX(d),\n                        value: getX(d),\n                        series: [\n                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n                        ],\n                        data: d,\n                        index: i,\n                        e: d3.event\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({e: d3.event});\n                });\n\n            // box transitions\n            boxplots.select('rect.nv-boxplot-box')\n              .watchTransition(renderWatch, 'nv-boxplot: boxes')\n                .attr('y', function(d,i) { return yScale(getQ3(d)); })\n                .attr('width', box_width)\n                .attr('x', box_left )\n                .attr('height', function(d,i) { return Math.abs(yScale(getQ3(d)) - yScale(getQ1(d))) || 1 })\n                .style('fill', function(d,i) { return getColor(d) || color(d,i) })\n                .style('stroke', function(d,i) { return getColor(d) || color(d,i) });\n\n            // median line\n            boxEnter.append('line').attr('class', 'nv-boxplot-median');\n\n            boxplots.select('line.nv-boxplot-median')\n              .watchTransition(renderWatch, 'nv-boxplot: boxplots line')\n                .attr('x1', box_left)\n                .attr('y1', function(d,i) { return yScale(getQ2(d)); })\n                .attr('x2', box_right)\n                .attr('y2', function(d,i) { return yScale(getQ2(d)); });\n\n            // outliers\n            var outliers = boxplots.selectAll('.nv-boxplot-outlier').data(function(d) {\n                return getOlItems(d) || [];\n            });\n            outliers.enter().append('circle')\n                .style('fill', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n                .style('stroke', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n                .style('z-index', 9000)\n                .on('mouseover', function(d,i,j) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n                        e: d3.event\n                    });\n                })\n                .on('mouseout', function(d,i,j) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n                        e: d3.event\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({e: d3.event});\n                });\n            outliers.attr('class', 'nv-boxplot-outlier');\n            outliers\n              .watchTransition(renderWatch, 'nv-boxplot: nv-boxplot-outlier')\n                .attr('cx', xScale.rangeBand() * 0.45)\n                .attr('cy', function(d,i,j) { return yScale(getOlValue(d,i,j)); })\n                .attr('r', '3');\n            outliers.exit().remove();\n\n            //store old scales for use in transitions on update\n            xScale0 = xScale.copy();\n            yScale0 = yScale.copy();\n        });\n\n        renderWatch.renderEnd('nv-boxplot immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:       {get: function(){return width;}, set: function(_){width=_;}},\n        height:      {get: function(){return height;}, set: function(_){height=_;}},\n        maxBoxWidth: {get: function(){return maxBoxWidth;}, set: function(_){maxBoxWidth=_;}},\n        x:           {get: function(){return getX;}, set: function(_){getX=_;}},\n        q1: {get: function(){return getQ1;}, set: function(_){getQ1=_;}},\n        q2: {get: function(){return getQ2;}, set: function(_){getQ2=_;}},\n        q3: {get: function(){return getQ3;}, set: function(_){getQ3=_;}},\n        wl: {get: function(){return getWl;}, set: function(_){getWl=_;}},\n        wh: {get: function(){return getWh;}, set: function(_){getWh=_;}},\n        itemColor:    {get: function(){return getColor;}, set: function(_){getColor=_;}},\n        outliers:     {get: function(){return getOlItems;}, set: function(_){getOlItems=_;}},\n        outlierValue: {get: function(){return getOlValue;}, set: function(_){getOlValue=_;}},\n        outlierLabel: {get: function(){return getOlLabel;}, set: function(_){getOlLabel=_;}},\n        outlierColor: {get: function(){return getOlColor;}, set: function(_){getOlColor=_;}},\n        xScale:  {get: function(){return xScale;}, set: function(_){xScale=_;}},\n        yScale:  {get: function(){return yScale;}, set: function(_){yScale=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        // rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n        y: {\n            get: function() {\n                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n                return {};\n            },\n            set: function(_) {\n                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n            }\n        },\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.boxPlotChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var boxplot = nv.models.boxPlot(),\n        xAxis = nv.models.axis(),\n        yAxis = nv.models.axis();\n\n    var margin = {top: 15, right: 10, bottom: 50, left: 60},\n        width = null,\n        height = null,\n        color = nv.utils.getColor(),\n        showXAxis = true,\n        showYAxis = true,\n        rightAlignYAxis = false,\n        staggerLabels = false,\n        tooltip = nv.models.tooltip(),\n        x, y,\n        noData = 'No Data Available.',\n        dispatch = d3.dispatch('beforeUpdate', 'renderEnd'),\n        duration = 250;\n\n    xAxis\n        .orient('bottom')\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip.duration(0);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(boxplot);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this), that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = (width  || parseInt(container.style('width')) || 960) - margin.left - margin.right;\n            var availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;\n\n            chart.update = function() {\n                dispatch.beforeUpdate();\n                container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            // TODO still need to find a way to validate quartile data presence using boxPlot callbacks.\n            // Display No Data message if there's nothing to show. (quartiles required at minimum).\n            if (!data || !data.length) {\n                var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n                noDataText.enter().append('text')\n                    .attr('class', 'nvd3 nv-noData')\n                    .attr('dy', '-.7em')\n                    .style('text-anchor', 'middle');\n\n                noDataText\n                    .attr('x', margin.left + availableWidth / 2)\n                    .attr('y', margin.top + availableHeight / 2)\n                    .text(function(d) { return d });\n\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = boxplot.xScale();\n            y = boxplot.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-boxPlotWithAxes').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-boxPlotWithAxes').append('g');\n            var defsEnter = gEnter.append('defs');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select('.nv-y.nv-axis')\n                    .attr('transform', 'translate(' + availableWidth + ',0)');\n            }\n\n            // Main Chart Component(s)\n            boxplot.width(availableWidth).height(availableHeight);\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }))\n\n            barsWrap.transition().call(boxplot);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-x-label-clip-' + boxplot.id())\n                .append('rect');\n\n            g.select('#nv-x-label-clip-' + boxplot.id() + ' rect')\n                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n                .attr('height', 16)\n                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    .ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n                if (staggerLabels) {\n                    xTicks\n                        .selectAll('text')\n                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 === 0 ? '5' : '17') + ')' })\n                }\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    .ticks( Math.floor(availableHeight/36) ) // can't use nv.utils.calcTicksY with Object data\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select('.nv-zeroLine line')\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', y(0))\n                .attr('y2', y(0))\n            ;\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n        });\n\n        renderWatch.renderEnd('nv-boxplot chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    boxplot.dispatch.on('elementMouseover.tooltip', function(evt) {\n        tooltip.data(evt).hidden(false);\n    });\n\n    boxplot.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.data(evt).hidden(true);\n    });\n\n    boxplot.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.boxplot = boxplot;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        tooltipContent:    {get: function(){return tooltip;}, set: function(_){tooltip=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            boxplot.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            boxplot.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, boxplot);\n    nv.utils.initOptions(chart);\n\n    return chart;\n}\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\n\nnv.models.bullet = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , orient = 'left' // TODO top & bottom\n        , reverse = false\n        , ranges = function(d) { return d.ranges }\n        , markers = function(d) { return d.markers ? d.markers : [] }\n        , markerLines = function(d) { return d.markerLines ? d.markerLines : [0] }\n        , measures = function(d) { return d.measures }\n        , rangeLabels = function(d) { return d.rangeLabels ? d.rangeLabels : [] }\n        , markerLabels = function(d) { return d.markerLabels ? d.markerLabels : []  }\n        , markerLineLabels = function(d) { return d.markerLineLabels ? d.markerLineLabels : []  }\n        , measureLabels = function(d) { return d.measureLabels ? d.measureLabels : []  }\n        , forceX = [0] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n        , width = 380\n        , height = 30\n        , container = null\n        , tickFormat = null\n        , color = nv.utils.getColor(['#1f77b4'])\n        , dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove')\n        , defaultRangeLabels = [\"Maximum\", \"Mean\", \"Minimum\"]\n        , legacyRangeClassNames = [\"Max\", \"Avg\", \"Min\"]\n        , duration = 1000\n        ;\n\n    function sortLabels(labels, values){\n        var lz = labels.slice();\n        labels.sort(function(a, b){\n            var iA = lz.indexOf(a);\n            var iB = lz.indexOf(b);\n            return d3.descending(values[iA], values[iB]);\n        });\n    };\n\n    function chart(selection) {\n        selection.each(function(d, i) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var rangez = ranges.call(this, d, i).slice(),\n                markerz = markers.call(this, d, i).slice(),\n                markerLinez = markerLines.call(this, d, i).slice(),\n                measurez = measures.call(this, d, i).slice(),\n                rangeLabelz = rangeLabels.call(this, d, i).slice(),\n                markerLabelz = markerLabels.call(this, d, i).slice(),\n                markerLineLabelz = markerLineLabels.call(this, d, i).slice(),\n                measureLabelz = measureLabels.call(this, d, i).slice();\n\n            // Sort labels according to their sorted values\n            sortLabels(rangeLabelz, rangez);\n            sortLabels(markerLabelz, markerz);\n            sortLabels(markerLineLabelz, markerLinez);\n            sortLabels(measureLabelz, measurez);\n\n            // sort values descending\n            rangez.sort(d3.descending);\n            markerz.sort(d3.descending);\n            markerLinez.sort(d3.descending);\n            measurez.sort(d3.descending);\n\n            // Setup Scales\n            // Compute the new x-scale.\n            var x1 = d3.scale.linear()\n                .domain( d3.extent(d3.merge([forceX, rangez])) )\n                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n            // Retrieve the old x-scale, if this is an update.\n            var x0 = this.__chart__ || d3.scale.linear()\n                .domain([0, Infinity])\n                .range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            var rangeMin = d3.min(rangez), //rangez[2]\n                rangeMax = d3.max(rangez), //rangez[0]\n                rangeAvg = rangez[1];\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            for(var i=0,il=rangez.length; i<il; i++){\n                var rangeClassNames = 'nv-range nv-range'+i;\n                if(i <= 2){\n                    rangeClassNames = rangeClassNames + ' nv-range'+legacyRangeClassNames[i];\n                }\n                gEnter.append('rect').attr('class', rangeClassNames);\n            }\n\n            gEnter.append('rect').attr('class', 'nv-measure');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n            var xp0 = function(d) { return d < 0 ? x0(d) : x0(0) },\n                xp1 = function(d) { return d < 0 ? x1(d) : x1(0) };\n\n            for(var i=0,il=rangez.length; i<il; i++){\n                var range = rangez[i];\n                g.select('rect.nv-range'+i)\n                    .datum(range)\n                    .attr('height', availableHeight)\n                    .transition()\n                    .duration(duration)\n                    .attr('width', w1(range))\n                    .attr('x', xp1(range))\n            }\n\n            g.select('rect.nv-measure')\n                .style('fill', color)\n                .attr('height', availableHeight / 3)\n                .attr('y', availableHeight / 3)\n                .on('mouseover', function() {\n                    dispatch.elementMouseover({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mousemove', function() {\n                    dispatch.elementMousemove({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mouseout', function() {\n                    dispatch.elementMouseout({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .transition()\n                .duration(duration)\n                .attr('width', measurez < 0 ?\n                    x1(0) - x1(measurez[0])\n                    : x1(measurez[0]) - x1(0))\n                .attr('x', xp1(measurez));\n\n            var h3 =  availableHeight / 6;\n\n            var markerData = markerz.map( function(marker, index) {\n                return {value: marker, label: markerLabelz[index]}\n            });\n            gEnter\n              .selectAll(\"path.nv-markerTriangle\")\n              .data(markerData)\n              .enter()\n              .append('path')\n              .attr('class', 'nv-markerTriangle')\n              .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')\n              .on('mouseover', function(d) {\n                dispatch.elementMouseover({\n                  value: d.value,\n                  label: d.label || 'Previous',\n                  color: d3.select(this).style(\"fill\"),\n                  pos: [x1(d.value), availableHeight/2]\n                })\n\n              })\n              .on('mousemove', function(d) {\n                  dispatch.elementMousemove({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              })\n              .on('mouseout', function(d, i) {\n                  dispatch.elementMouseout({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              });\n\n            g.selectAll(\"path.nv-markerTriangle\")\n              .data(markerData)\n              .transition()\n              .duration(duration)\n              .attr('transform', function(d) { return 'translate(' + x1(d.value) + ',' + (availableHeight / 2) + ')' });\n\n            var markerLinesData = markerLinez.map( function(marker, index) {\n                return {value: marker, label: markerLineLabelz[index]}\n            });\n            gEnter\n              .selectAll(\"line.nv-markerLine\")\n              .data(markerLinesData)\n              .enter()\n              .append('line')\n              .attr('cursor', '')\n              .attr('class', 'nv-markerLine')\n              .attr('x1', function(d) { return x1(d.value) })\n              .attr('y1', '2')\n              .attr('x2', function(d) { return x1(d.value) })\n              .attr('y2', availableHeight - 2)\n              .on('mouseover', function(d) {\n                dispatch.elementMouseover({\n                  value: d.value,\n                  label: d.label || 'Previous',\n                  color: d3.select(this).style(\"fill\"),\n                  pos: [x1(d.value), availableHeight/2]\n                })\n\n              })\n              .on('mousemove', function(d) {\n                  dispatch.elementMousemove({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              })\n              .on('mouseout', function(d, i) {\n                  dispatch.elementMouseout({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              });\n\n            g.selectAll(\"line.nv-markerLine\")\n              .data(markerLinesData)\n              .transition()\n              .duration(duration)\n              .attr('x1', function(d) { return x1(d.value) })\n              .attr('x2', function(d) { return x1(d.value) });\n\n            wrap.selectAll('.nv-range')\n                .on('mouseover', function(d,i) {\n                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n                    dispatch.elementMouseover({\n                        value: d,\n                        label: label,\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mousemove', function() {\n                    dispatch.elementMousemove({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Previous',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mouseout', function(d,i) {\n                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n                    dispatch.elementMouseout({\n                        value: d,\n                        label: label,\n                        color: d3.select(this).style(\"fill\")\n                    })\n                });\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n        forceX:      {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n        duration:    {get: function(){return duration;}, set: function(_){duration=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n            orient = _;\n            reverse = orient == 'right' || orient == 'bottom';\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\n\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\nnv.models.bulletChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var bullet = nv.models.bullet();\n    var tooltip = nv.models.tooltip();\n\n    var orient = 'left' // TODO top & bottom\n        , reverse = false\n        , margin = {top: 5, right: 40, bottom: 20, left: 120}\n        , ranges = function(d) { return d.ranges }\n        , markers = function(d) { return d.markers ? d.markers : [] }\n        , measures = function(d) { return d.measures }\n        , width = null\n        , height = 55\n        , tickFormat = null\n        , ticks = null\n        , noData = null\n        , dispatch = d3.dispatch()\n        ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false);\n\n    function chart(selection) {\n        selection.each(function(d, i) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = height - margin.top - margin.bottom,\n                that = this;\n\n            chart.update = function() { chart(selection) };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!d || !ranges.call(this, d, i)) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var rangez = ranges.call(this, d, i).slice().sort(d3.descending),\n                markerz = markers.call(this, d, i).slice().sort(d3.descending),\n                measurez = measures.call(this, d, i).slice().sort(d3.descending);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-bulletWrap');\n            gEnter.append('g').attr('class', 'nv-titles');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Compute the new x-scale.\n            var x1 = d3.scale.linear()\n                .domain([0, Math.max(rangez[0], (markerz[0] || 0), measurez[0])])  // TODO: need to allow forceX and forceY, and xDomain, yDomain\n                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n            // Retrieve the old x-scale, if this is an update.\n            var x0 = this.__chart__ || d3.scale.linear()\n                .domain([0, Infinity])\n                .range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n\n            var title = gEnter.select('.nv-titles').append('g')\n                .attr('text-anchor', 'end')\n                .attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');\n            title.append('text')\n                .attr('class', 'nv-title')\n                .text(function(d) { return d.title; });\n\n            title.append('text')\n                .attr('class', 'nv-subtitle')\n                .attr('dy', '1em')\n                .text(function(d) { return d.subtitle; });\n\n            bullet\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var bulletWrap = g.select('.nv-bulletWrap');\n            d3.transition(bulletWrap).call(bullet);\n\n            // Compute the tick format.\n            var format = tickFormat || x1.tickFormat( availableWidth / 100 );\n\n            // Update the tick groups.\n            var tick = g.selectAll('g.nv-tick')\n                .data(x1.ticks( ticks ? ticks : (availableWidth / 50) ), function(d) {\n                    return this.textContent || format(d);\n                });\n\n            // Initialize the ticks with the old scale, x0.\n            var tickEnter = tick.enter().append('g')\n                .attr('class', 'nv-tick')\n                .attr('transform', function(d) { return 'translate(' + x0(d) + ',0)' })\n                .style('opacity', 1e-6);\n\n            tickEnter.append('line')\n                .attr('y1', availableHeight)\n                .attr('y2', availableHeight * 7 / 6);\n\n            tickEnter.append('text')\n                .attr('text-anchor', 'middle')\n                .attr('dy', '1em')\n                .attr('y', availableHeight * 7 / 6)\n                .text(format);\n\n            // Transition the updating ticks to the new scale, x1.\n            var tickUpdate = d3.transition(tick)\n                .transition()\n                .duration(bullet.duration())\n                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n                .style('opacity', 1);\n\n            tickUpdate.select('line')\n                .attr('y1', availableHeight)\n                .attr('y2', availableHeight * 7 / 6);\n\n            tickUpdate.select('text')\n                .attr('y', availableHeight * 7 / 6);\n\n            // Transition the exiting ticks to the new scale, x1.\n            d3.transition(tick.exit())\n                .transition()\n                .duration(bullet.duration())\n                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n                .style('opacity', 1e-6)\n                .remove();\n        });\n\n        d3.timer.flush();\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    bullet.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: evt.label,\n            value: evt.value,\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    bullet.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bullet.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.bullet = bullet;\n    chart.dispatch = dispatch;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n        ticks:    {get: function(){return ticks;}, set: function(_){ticks=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n            orient = _;\n            reverse = orient == 'right' || orient == 'bottom';\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, bullet);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\n\n\nnv.models.candlestickBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getOpen = function(d) { return d.open }\n        , getClose = function(d) { return d.close }\n        , getHigh = function(d) { return d.high }\n        , getLow = function(d) { return d.low }\n        , forceX = []\n        , forceY = []\n        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , interactive = false\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // Width of the candlestick bars.\n            var barWidth = (availableWidth / data[0].values.length) * .45;\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [5 + barWidth / 2, availableWidth - barWidth / 2 - 5]);\n\n            y.domain(yDomain || [\n                    d3.min(data[0].values.map(getLow).concat(forceY)),\n                    d3.max(data[0].values.map(getHigh).concat(forceY))\n                ]\n            ).range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-candlestickBar').data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-candlestickBar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-ticks');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n                .data(function(d) { return d });\n            ticks.exit().remove();\n\n            var tickGroups = ticks.enter().append('g');\n\n            // The colors are currently controlled by CSS.\n            ticks\n                .attr('class', function(d, i, j) { return (getOpen(d, i) > getClose(d, i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i});\n\n            var lines = tickGroups.append('line')\n                .attr('class', 'nv-candlestick-lines')\n                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n                .attr('x1', 0)\n                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n                .attr('x2', 0)\n                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\n            var rects = tickGroups.append('rect')\n                .attr('class', 'nv-candlestick-rects nv-bars')\n                .attr('transform', function(d, i) {\n                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n                    + ')';\n                })\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('width', barWidth)\n                .attr('height', function(d, i) {\n                    var open = getOpen(d, i);\n                    var close = getClose(d, i);\n                    return open > close ? y(close) - y(open) : y(open) - y(close);\n                });\n\n            ticks.select('.nv-candlestick-lines').transition()\n                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n                .attr('x1', 0)\n                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n                .attr('x2', 0)\n                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\n            ticks.select('.nv-candlestick-rects').transition()\n                .attr('transform', function(d, i) {\n                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n                    + ')';\n                })\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('width', barWidth)\n                .attr('height', function(d, i) {\n                    var open = getOpen(d, i);\n                    var close = getClose(d, i);\n                    return open > close ? y(close) - y(open) : y(open) - y(close);\n                });\n        });\n\n        return chart;\n    }\n\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        chart.clearHighlights();\n        container.select(\".nv-candlestickBar .nv-tick-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container.select(\".nv-candlestickBar .nv-tick.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:   {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:       {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.cumulativeLineChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 30, bottom: 50, left: 60}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , showControls = true\n        , useInteractiveGuideline = false\n        , rescaleY = true\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , id = lines.id()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , average = function(d) { return d.average }\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , transitionDuration = 250\n        , duration = 250\n        , noErrorCheck = false  //if set to TRUE, will bypass an error check in the indexify function.\n        ;\n\n    state.index = 0;\n    state.rescaleY = rescaleY;\n\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\n    tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var dx = d3.scale.linear()\n        , index = {i: 0, x: 0}\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        , currentYDomain\n        ;\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                index: index.i,\n                rescaleY: rescaleY\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.index !== undefined)\n                index.i = state.index;\n            if (state.rescaleY !== undefined)\n                rescaleY = state.rescaleY;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(lines);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            container.classed('nv-chart-' + id, true);\n            var that = this;\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition().duration(duration).call(chart)\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            var indexDrag = d3.behavior.drag()\n                .on('dragstart', dragStart)\n                .on('drag', dragMove)\n                .on('dragend', dragEnd);\n\n\n            function dragStart(d,i) {\n                d3.select(chart.container)\n                    .style('cursor', 'ew-resize');\n            }\n\n            function dragMove(d,i) {\n                index.x = d3.event.x;\n                index.i = Math.round(dx.invert(index.x));\n                updateZero();\n            }\n\n            function dragEnd(d,i) {\n                d3.select(chart.container)\n                    .style('cursor', 'auto');\n\n                // update state and send stateChange with new index\n                state.index = index.i;\n                dispatch.stateChange(state);\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = lines.xScale();\n            y = lines.yScale();\n\n\n            dx.domain([0, data[0].values.length - 1]) //Assumes all series have same length\n                .range([0, availableWidth])\n                .clamp(true);\n\n            var data = indexify(index.i, data);\n\n            // initialize the starting yDomain for the not-rescale case after indexify (to have calculated point.display)\n            if (typeof(currentYDomain) === \"undefined\") {\n                currentYDomain = getCurrentYDomain(data);\n            }\n\n            if (!rescaleY) {\n                lines.yDomain(currentYDomain);\n                lines.clipEdge(true);\n            } else {\n                lines.yDomain(null);\n            }\n\n            // Setup containers and skeleton of chart\n            var interactivePointerEvents = (useInteractiveGuideline) ? \"none\" : \"all\";\n            var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-interactive');\n            gEnter.append('g').attr('class', 'nv-x nv-axis').style(\"pointer-events\",\"none\");\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-background');\n            gEnter.append('g').attr('class', 'nv-linesWrap').style(\"pointer-events\",interactivePointerEvents);\n            gEnter.append('g').attr('class', 'nv-avgLinesWrap').style(\"pointer-events\",\"none\");\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: 'Re-scale y-axis', disabled: !rescaleY }\n                ];\n\n                controls\n                    .width(140)\n                    .color(['#444', '#444', '#444'])\n                    .rightAlign(false)\n                    .margin({top: 5, right: 0, bottom: 5, left: 20})\n                ;\n\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Show error if index point value is 0 (division by zero avoided)\n            var tempDisabled = data.filter(function(d) { return d.tempDisabled });\n\n            wrap.select('.tempDisabled').remove(); //clean-up and prevent duplicates\n            if (tempDisabled.length) {\n                wrap.append('text').attr('class', 'tempDisabled')\n                    .attr('x', availableWidth / 2)\n                    .attr('y', '-.71em')\n                    .style('text-anchor', 'end')\n                    .text(tempDisabled.map(function(d) { return d.key }).join(', ') + ' values cannot be calculated for this time period.');\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left,top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            gEnter.select('.nv-background')\n                .append('rect');\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            lines\n                //.x(function(d) { return d.x })\n                .y(function(d) { return d.display.y })\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled && !data[i].tempDisabled; }));\n\n            var linesWrap = g.select('.nv-linesWrap')\n                .datum(data.filter(function(d) { return  !d.disabled && !d.tempDisabled }));\n\n            linesWrap.call(lines);\n\n            //Store a series index number in the data array.\n            data.forEach(function(d,i) {\n                d.seriesIndex = i;\n            });\n\n            var avgLineData = data.filter(function(d) {\n                return !d.disabled && !!average(d);\n            });\n\n            var avgLines = g.select(\".nv-avgLinesWrap\").selectAll(\"line\")\n                .data(avgLineData, function(d) { return d.key; });\n\n            var getAvgLineY = function(d) {\n                //If average lines go off the svg element, clamp them to the svg bounds.\n                var yVal = y(average(d));\n                if (yVal < 0) return 0;\n                if (yVal > availableHeight) return availableHeight;\n                return yVal;\n            };\n\n            avgLines.enter()\n                .append('line')\n                .style('stroke-width',2)\n                .style('stroke-dasharray','10,10')\n                .style('stroke',function (d,i) {\n                    return lines.color()(d,d.seriesIndex);\n                })\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', getAvgLineY)\n                .attr('y2', getAvgLineY);\n\n            avgLines\n                .style('stroke-opacity',function(d){\n                    //If average lines go offscreen, make them transparent\n                    var yVal = y(average(d));\n                    if (yVal < 0 || yVal > availableHeight) return 0;\n                    return 1;\n                })\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', getAvgLineY)\n                .attr('y2', getAvgLineY);\n\n            avgLines.exit().remove();\n\n            //Create index line\n            var indexLine = linesWrap.selectAll('.nv-indexLine')\n                .data([index]);\n            indexLine.enter().append('rect').attr('class', 'nv-indexLine')\n                .attr('width', 3)\n                .attr('x', -2)\n                .attr('fill', 'red')\n                .attr('fill-opacity', .5)\n                .style(\"pointer-events\",\"all\")\n                .call(indexDrag);\n\n            indexLine\n                .attr('transform', function(d) { return 'translate(' + dx(d.i) + ',0)' })\n                .attr('height', availableHeight);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/70, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            function updateZero() {\n                indexLine\n                    .data([index]);\n\n                //When dragging the index line, turn off line transitions.\n                // Then turn them back on when done dragging.\n                var oldDuration = chart.duration();\n                chart.duration(0);\n                chart.update();\n                chart.duration(oldDuration);\n            }\n\n            g.select('.nv-background rect')\n                .on('click', function() {\n                    index.x = d3.mouse(this)[0];\n                    index.i = Math.round(dx.invert(index.x));\n\n                    // update state and send stateChange with new index\n                    state.index = index.i;\n                    dispatch.stateChange(state);\n\n                    updateZero();\n                });\n\n            lines.dispatch.on('elementClick', function(e) {\n                index.i = e.pointIndex;\n                index.x = dx(index.i);\n\n                // update state and send stateChange with new index\n                state.index = index.i;\n                dispatch.stateChange(state);\n\n                updateZero();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                d.disabled = !d.disabled;\n                rescaleY = !d.disabled;\n                state.rescaleY = rescaleY;\n                if (!rescaleY) {\n                    currentYDomain = getCurrentYDomain(data); // rescale is turned off, so set the currentYDomain\n                }\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                lines.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !(series.disabled || series.tempDisabled);\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        lines.highlightPoint(i, pointIndex, true);\n                        var point = series.values[pointIndex];\n                        if (typeof point === 'undefined') return;\n                        if (typeof singlePoint === 'undefined') singlePoint = point;\n                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: chart.y()(point, pointIndex),\n                            color: color(series,series.seriesIndex)\n                        });\n                    });\n\n                //Highlight the tooltip entry based on which point the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n                    var threshold = 0.03 * domainExtent;\n                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);\n                    if (indexToHighlight !== null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex), pointIndex);\n                interactiveLayer.tooltip\n                    .valueFormatter(function(d,i) {\n                        return yAxis.tickFormat()(d);\n                    })\n                    .data(\n                    {\n                        value: xValue,\n                        series: allData\n                    }\n                )();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                lines.clearHighlights();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.index !== 'undefined') {\n                    index.i = e.index;\n                    index.x = dx(index.i);\n\n                    state.index = e.index;\n\n                    indexLine\n                        .data([index]);\n                }\n\n                if (typeof e.rescaleY !== 'undefined') {\n                    rescaleY = e.rescaleY;\n                }\n\n                chart.update();\n            });\n\n        });\n\n        renderWatch.renderEnd('cumulativeLineChart immediate');\n\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        var point = {\n            x: chart.x()(evt.point),\n            y: chart.y()(evt.point),\n            color: evt.point.color\n        };\n        evt.point = point;\n        tooltip.data(evt).hidden(false);\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n\n    //============================================================\n    // Functions\n    //------------------------------------------------------------\n\n    var indexifyYGetter = null;\n    /* Normalize the data according to an index point. */\n    function indexify(idx, data) {\n        if (!indexifyYGetter) indexifyYGetter = lines.y();\n        return data.map(function(line, i) {\n            if (!line.values) {\n                return line;\n            }\n            var indexValue = line.values[idx];\n            if (indexValue == null) {\n                return line;\n            }\n            var v = indexifyYGetter(indexValue, idx);\n\n            // avoid divide by zero\n            if (Math.abs(v) < 0.00001 && !noErrorCheck) {\n                line.tempDisabled = true;\n                return line;\n            }\n\n            line.tempDisabled = false;\n\n            line.values = line.values.map(function(point, pointIndex) {\n                point.display = {'y': (indexifyYGetter(point, pointIndex) - v) / v };\n                return point;\n            });\n\n            return line;\n        })\n    }\n\n    function getCurrentYDomain(data) {\n        var seriesDomains = data\n            .filter(function(series) { return !(series.disabled || series.tempDisabled)})\n            .map(function(series,i) {\n                return d3.extent(series.values, function (d) { return d.display.y });\n            });\n\n        return [\n            d3.min(seriesDomains, function(d) { return d[0] }),\n            d3.max(seriesDomains, function(d) { return d[1] })\n        ];\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.lines = lines;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.state = state;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showControls:     {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        average: {get: function(){return average;}, set: function(_){average=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        showXAxis:    {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        noErrorCheck:    {get: function(){return noErrorCheck;}, set: function(_){noErrorCheck=_;}},\n\n        // options that require extra logic in the setter\n        rescaleY:     {get: function(){return rescaleY;}, set: function(_){\n            rescaleY = _;\n            chart.state.rescaleY = _; // also update state\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (_ === true) {\n                chart.interactive(false);\n                chart.useVoronoi(false);\n            }\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        duration:    {get: function(){return duration;}, set: function(_){\n            duration = _;\n            lines.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n//TODO: consider deprecating by adding necessary features to multiBar model\nnv.models.discreteBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , color = nv.utils.defaultColor()\n        , showValues = false\n        , valueFormat = d3.format(',.2f')\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        , rectClass = 'discreteBar'\n        , duration = 250\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            //add series index to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                });\n            });\n\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0 }\n                    })\n                });\n\n            x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableWidth], .1);\n            y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y }).concat(forceY)));\n\n            // If showValues, pad the Y axis range to account for label height\n            if (showValues) y.range(yRange || [availableHeight - (y.domain()[0] < 0 ? 12 : 0), y.domain()[1] > 0 ? 12 : 0]);\n            else y.range(yRange || [availableHeight, 0]);\n\n            //store old scales if they exist\n            x0 = x0 || x;\n            y0 = y0 || y.copy().range([y(0),y(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            //TODO: by definition, the discrete bar should not have multiple groups, will modify/remove later\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit()\n                .watchTransition(renderWatch, 'discreteBar: exit groups')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6)\n                .remove();\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover });\n            groups\n                .watchTransition(renderWatch, 'discreteBar: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', .75);\n\n            var bars = groups.selectAll('g.nv-bar')\n                .data(function(d) { return d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('g')\n                .attr('transform', function(d,i,j) {\n                    return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05 ) + ', ' + y(0) + ')'\n                })\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            barsEnter.append('rect')\n                .attr('height', 0)\n                .attr('width', x.rangeBand() * .9 / data.length )\n\n            if (showValues) {\n                barsEnter.append('text')\n                    .attr('text-anchor', 'middle')\n                ;\n\n                bars.select('text')\n                    .text(function(d,i) { return valueFormat(getY(d,i)) })\n                    .watchTransition(renderWatch, 'discreteBar: bars text')\n                    .attr('x', x.rangeBand() * .9 / 2)\n                    .attr('y', function(d,i) { return getY(d,i) < 0 ? y(getY(d,i)) - y(0) + 12 : -4 })\n\n                ;\n            } else {\n                bars.selectAll('text').remove();\n            }\n\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive' })\n                .style('fill', function(d,i) { return d.color || color(d,i) })\n                .style('stroke', function(d,i) { return d.color || color(d,i) })\n                .select('rect')\n                .attr('class', rectClass)\n                .watchTransition(renderWatch, 'discreteBar: bars rect')\n                .attr('width', x.rangeBand() * .9 / data.length);\n            bars.watchTransition(renderWatch, 'discreteBar: bars')\n                //.delay(function(d,i) { return i * 1200 / data[0].values.length })\n                .attr('transform', function(d,i) {\n                    var left = x(getX(d,i)) + x.rangeBand() * .05,\n                        top = getY(d,i) < 0 ?\n                            y(0) :\n                                y(0) - y(getY(d,i)) < 1 ?\n                            y(0) - 1 : //make 1 px positive bars show up above y=0\n                            y(getY(d,i));\n\n                    return 'translate(' + left + ', ' + top + ')'\n                })\n                .select('rect')\n                .attr('height', function(d,i) {\n                    return  Math.max(Math.abs(y(getY(d,i)) - y(0)), 1)\n                });\n\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('discreteBar immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.discreteBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var discretebar = nv.models.discreteBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n\t, legend = nv.models.legend()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 15, right: 10, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.getColor()\n\t, showLegend = false\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , staggerLabels = false\n        , wrapLabels = false\n        , rotateLabels = 0\n        , x\n        , y\n        , noData = null\n        , dispatch = d3.dispatch('beforeUpdate','renderEnd')\n        , duration = 250\n        ;\n\n    xAxis\n        .orient('bottom')\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .keyFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(discretebar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                dispatch.beforeUpdate();\n                container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = discretebar.xScale();\n            y = discretebar.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');\n            var defsEnter = gEnter.append('defs');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n\t    gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Main Chart Component(s)\n            discretebar\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.transition().call(discretebar);\n\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-x-label-clip-' + discretebar.id())\n                .append('rect');\n\n            g.select('#nv-x-label-clip-' + discretebar.id() + ' rect')\n                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n                .attr('height', 16)\n                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + (y.range()[0] + ((discretebar.showValues() && y.domain()[0] < 0) ? 16 : 0)) + ')');\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n                if (staggerLabels) {\n                    xTicks\n                        .selectAll('text')\n                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })\n                }\n\n                if (rotateLabels) {\n                    xTicks\n                        .selectAll('.tick text')\n                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n                }\n\n                if (wrapLabels) {\n                    g.selectAll('.tick text')\n                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n                }\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select(\".nv-zeroLine line\")\n                .attr(\"x1\",0)\n                .attr(\"x2\",(rightAlignYAxis) ? -availableWidth : availableWidth)\n                .attr(\"y1\", y(0))\n                .attr(\"y2\", y(0))\n            ;\n        });\n\n        renderWatch.renderEnd('discreteBar chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    discretebar.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    discretebar.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    discretebar.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.discretebar = discretebar;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\tshowLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        rotateLabels:  {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        wrapLabels:  {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            discretebar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            discretebar.color(color);\n\t    legend.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, discretebar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n}\n\nnv.models.distribution = function() {\n    \"use strict\";\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 400 //technically width or height depending on x or y....\n        , size = 8\n        , axis = 'x' // 'x' or 'y'... horizontal or vertical\n        , getData = function(d) { return d[axis] }  // defaults d.x or d.y\n        , color = nv.utils.defaultColor()\n        , scale = d3.scale.linear()\n        , domain\n        , duration = 250\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n\n    //============================================================\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var scale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    //============================================================\n\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom),\n                naxis = axis == 'x' ? 'y' : 'x',\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            //------------------------------------------------------------\n            // Setup Scales\n\n            scale0 = scale0 || scale;\n\n            //------------------------------------------------------------\n\n\n            //------------------------------------------------------------\n            // Setup containers and skeleton of chart\n\n            var wrap = container.selectAll('g.nv-distribution').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n            //------------------------------------------------------------\n\n\n            var distWrap = g.selectAll('g.nv-dist')\n                .data(function(d) { return d }, function(d) { return d.key });\n\n            distWrap.enter().append('g');\n            distWrap\n                .attr('class', function(d,i) { return 'nv-dist nv-series-' + i })\n                .style('stroke', function(d,i) { return color(d, i) });\n\n            var dist = distWrap.selectAll('line.nv-dist' + axis)\n                .data(function(d) { return d.values })\n            dist.enter().append('line')\n                .attr(axis + '1', function(d,i) { return scale0(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale0(getData(d,i)) })\n            renderWatch.transition(distWrap.exit().selectAll('line.nv-dist' + axis), 'dist exit')\n                // .transition()\n                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n                .style('stroke-opacity', 0)\n                .remove();\n            dist\n                .attr('class', function(d,i) { return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i })\n                .attr(naxis + '1', 0)\n                .attr(naxis + '2', size);\n            renderWatch.transition(dist, 'dist')\n                // .transition()\n                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n\n\n            scale0 = scale.copy();\n\n        });\n        renderWatch.renderEnd('distribution immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart.dispatch = dispatch;\n\n    chart.margin = function(_) {\n        if (!arguments.length) return margin;\n        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n        margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n        margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        return chart;\n    };\n\n    chart.width = function(_) {\n        if (!arguments.length) return width;\n        width = _;\n        return chart;\n    };\n\n    chart.axis = function(_) {\n        if (!arguments.length) return axis;\n        axis = _;\n        return chart;\n    };\n\n    chart.size = function(_) {\n        if (!arguments.length) return size;\n        size = _;\n        return chart;\n    };\n\n    chart.getData = function(_) {\n        if (!arguments.length) return getData;\n        getData = d3.functor(_);\n        return chart;\n    };\n\n    chart.scale = function(_) {\n        if (!arguments.length) return scale;\n        scale = _;\n        return chart;\n    };\n\n    chart.color = function(_) {\n        if (!arguments.length) return color;\n        color = nv.utils.getColor(_);\n        return chart;\n    };\n\n    chart.duration = function(_) {\n        if (!arguments.length) return duration;\n        duration = _;\n        renderWatch.reset(duration);\n        return chart;\n    };\n    //============================================================\n\n\n    return chart;\n}\nnv.models.focus = function(content) {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var content = content || nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , brush = d3.svg.brush()\n        ;\n\n    var margin = {top: 10, right: 0, bottom: 30, left: 0}\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = 70\n        , showXAxis = true\n        , showYAxis = false\n        , rightAlignYAxis = false\n        , ticks = null\n        , x\n        , y\n        , brushExtent = null\n        , duration = 250\n        , dispatch = d3.dispatch('brush', 'onBrush', 'renderEnd')\n        , syncBrushing = true\n        ;\n\n    content.interactive(false);\n    content.pointActive(function(d) { return false; });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(content);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = height - margin.top - margin.bottom;\n\n            chart.update = function() { \n                if( duration === 0 ) {\n                    container.call( chart );\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = this;\n\n            // Setup Scales\n            x = content.xScale();\n            y = content.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-focus').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-focus').append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            gEnter.append('g').attr('class', 'nv-background').append('rect');\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-contentWrap');\n            gEnter.append('g').attr('class', 'nv-brushBackground');\n            gEnter.append('g').attr('class', 'nv-x nv-brush');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n                \n            content\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var contentWrap = g.select('.nv-contentWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n            d3.transition(contentWrap).call(content);\n            \n            // Setup Brush\n            brush\n                .x(x)\n                .on('brush', function() {\n                    onBrush(syncBrushing);\n                });\n\n            brush.on('brushend', function () {\n                if (!syncBrushing) {\n                    dispatch.onBrush(brush.empty() ? x.domain() : brush.extent());\n                }\n            });\n\n            if (brushExtent) brush.extent(brushExtent);\n\n            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n                .data([brushExtent || brush.extent()]);\n    \n            var brushBGenter = brushBG.enter()\n                .append('g');\n\n            brushBGenter.append('rect')\n                .attr('class', 'left')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight);\n\n            brushBGenter.append('rect')\n                .attr('class', 'right')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight);\n\n            var gBrush = g.select('.nv-x.nv-brush')\n                .call(brush);\n            gBrush.selectAll('rect')\n                .attr('height', availableHeight);\n            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n            onBrush(true);\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            if (showXAxis) {\n                xAxis.scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n  \n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                d3.transition(g.select('.nv-x.nv-axis'))\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                d3.transition(g.select('.nv-y.nv-axis'))\n                    .call(yAxis);\n            }\n            \n            g.select('.nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n    \n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight / 3;\n                return 'M' + (0.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n    \n    \n            function updateBrushBG() {\n                if (!brush.empty()) brush.extent(brushExtent);\n                brushBG\n                    .data([brush.empty() ? x.domain() : brushExtent])\n                    .each(function(d,i) {\n                        var leftWidth = x(d[0]) - x.range()[0],\n                            rightWidth = availableWidth - x(d[1]);\n                        d3.select(this).select('.left')\n                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n    \n                        d3.select(this).select('.right')\n                            .attr('x', x(d[1]))\n                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n                    });\n            }\n\n\n            function onBrush(shouldDispatch) {\n                brushExtent = brush.empty() ? null : brush.extent();\n                var extent = brush.empty() ? x.domain() : brush.extent();\n                dispatch.brush({extent: extent, brush: brush});\n                updateBrushBG();\n                if (shouldDispatch) {\n                    dispatch.onBrush(extent);\n                }\n            }\n        });\n\n        renderWatch.renderEnd('focus immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.content = content;\n    chart.brush = brush;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        brushExtent: {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n        syncBrushing: {get: function(){return syncBrushing;}, set: function(_){syncBrushing=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            content.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            content.color(color);\n        }},\n        interpolate: {get: function(){return content.interpolate();}, set: function(_){\n            content.interpolate(_);\n        }},\n        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n            xAxis.tickFormat(_);\n        }},\n        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n            yAxis.tickFormat(_);\n        }},\n        x: {get: function(){return content.x();}, set: function(_){\n            content.x(_);\n        }},\n        y: {get: function(){return content.y();}, set: function(_){\n            content.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, content);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.forceDirectedGraph = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n        , width = 400\n        , height = 32\n        , container = null\n        , dispatch = d3.dispatch('renderEnd')\n        , color = nv.utils.getColor(['#000'])\n        , tooltip      = nv.models.tooltip()\n        , noData = null\n        // Force directed graph specific parameters [default values]\n        , linkStrength = 0.1\n        , friction = 0.9\n        , linkDist = 30\n        , charge = -120\n        , gravity = 0.1\n        , theta = 0.8\n        , alpha = 0.1\n        , radius = 5\n        // These functions allow to add extra attributes to ndes and links\n        ,nodeExtras = function(nodes) { /* Do nothing */ }\n        ,linkExtras = function(links) { /* Do nothing */ }\n        , getX=d3.functor(0.0)\n        , getY=d3.functor(0.0)\n        ;\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n\n        selection.each(function(data) {\n          container = d3.select(this);\n          nv.utils.initSVG(container);\n\n          var availableWidth = nv.utils.availableWidth(width, container, margin),\n              availableHeight = nv.utils.availableHeight(height, container, margin);\n\n          container\n                  .attr(\"width\", availableWidth)\n                  .attr(\"height\", availableHeight);\n\n          // Display No Data message if there's nothing to show.\n          if (!data || !data.links || !data.nodes) {\n              nv.utils.noData(chart, container)\n              return chart;\n          } else {\n              container.selectAll('.nv-noData').remove();\n          }\n          container.selectAll('*').remove();\n\n          // Collect names of all fields in the nodes\n          var nodeFieldSet = new Set();\n          data.nodes.forEach(function(node) {\n            var keys = Object.keys(node);\n            keys.forEach(function(key) {\n              nodeFieldSet.add(key);\n            });\n          });\n\n          var force = d3.layout.force()\n                .nodes(data.nodes)\n                .links(data.links)\n                .size([availableWidth, availableHeight])\n                .linkStrength(linkStrength)\n                .friction(friction)\n                .linkDistance(linkDist)\n                .charge(charge)\n                .gravity(gravity)\n                .theta(theta)\n                .alpha(alpha)\n                .start();\n\n          var link = container.selectAll(\".link\")\n                .data(data.links)\n                .enter().append(\"line\")\n                .attr(\"class\", \"nv-force-link\")\n                .style(\"stroke-width\", function(d) { return Math.sqrt(d.value); });\n\n          var node = container.selectAll(\".node\")\n                .data(data.nodes)\n                .enter()\n                .append(\"g\")\n                .attr(\"class\", \"nv-force-node\")\n                .call(force.drag);\n\n          node\n            .append(\"circle\")\n            .attr(\"r\", radius)\n            .style(\"fill\", function(d) { return color(d) } )\n            .on(\"mouseover\", function(evt) {\n              container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                  .attr('y1', evt.py);\n              container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                  .attr('x2', evt.px);\n\n              // Add 'series' object to\n              var nodeColor = color(evt);\n              evt.series = [];\n              nodeFieldSet.forEach(function(field) {\n                evt.series.push({\n                  color: nodeColor,\n                  key:   field,\n                  value: evt[field]\n                });\n              });\n              tooltip.data(evt).hidden(false);\n            })\n            .on(\"mouseout\",  function(d) {\n              tooltip.hidden(true);\n            });\n\n          tooltip.headerFormatter(function(d) {return \"Node\";});\n\n          // Apply extra attributes to nodes and links (if any)\n          linkExtras(link);\n          nodeExtras(node);\n\n          force.on(\"tick\", function() {\n              link.attr(\"x1\", function(d) { return d.source.x; })\n                  .attr(\"y1\", function(d) { return d.source.y; })\n                  .attr(\"x2\", function(d) { return d.target.x; })\n                  .attr(\"y2\", function(d) { return d.target.y; });\n\n              node.attr(\"transform\", function(d) {\n                return \"translate(\" + d.x + \", \" + d.y + \")\";\n              });\n            });\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:     {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n\n        // Force directed graph specific parameters\n        linkStrength:{get: function(){return linkStrength;}, set: function(_){linkStrength=_;}},\n        friction:    {get: function(){return friction;}, set: function(_){friction=_;}},\n        linkDist:    {get: function(){return linkDist;}, set: function(_){linkDist=_;}},\n        charge:      {get: function(){return charge;}, set: function(_){charge=_;}},\n        gravity:     {get: function(){return gravity;}, set: function(_){gravity=_;}},\n        theta:       {get: function(){return theta;}, set: function(_){theta=_;}},\n        alpha:       {get: function(){return alpha;}, set: function(_){alpha=_;}},\n        radius:      {get: function(){return radius;}, set: function(_){radius=_;}},\n\n        //functor options\n        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        nodeExtras: {get: function(){return nodeExtras;}, set: function(_){\n            nodeExtras = _;\n        }},\n        linkExtras: {get: function(){return linkExtras;}, set: function(_){\n            linkExtras = _;\n        }}\n    });\n\n    chart.dispatch = dispatch;\n    chart.tooltip = tooltip;\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.furiousLegend = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , width = 400\n        , height = 20\n        , getKey = function(d) { return d.key }\n        , keyFormatter = function (d) { return d }\n        , color = nv.utils.getColor()\n        , maxKeyLength = 20 //default value for key lengths\n        , align = true\n        , padding = 28 //define how much space between legend items. - recommend 32 for furious version\n        , rightAlign = true\n        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n        , expanded = false\n        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n        , vers = 'classic' //Options are \"classic\" and \"furious\"\n        ;\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-legend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var series = g.selectAll('.nv-series')\n                .data(function(d) {\n                    if(vers != 'furious') return d;\n\n                    return d.filter(function(n) {\n                        return expanded ? true : !n.disengaged;\n                    });\n                });\n            var seriesEnter = series.enter().append('g').attr('class', 'nv-series')\n\n            var seriesShape;\n\n            if(vers == 'classic') {\n                seriesEnter.append('circle')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('r', 5);\n\n                seriesShape = series.select('circle');\n            } else if (vers == 'furious') {\n                seriesEnter.append('rect')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('rx', 3)\n                    .attr('ry', 3);\n\n                seriesShape = series.select('rect');\n\n                seriesEnter.append('g')\n                    .attr('class', 'nv-check-box')\n                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\n                var seriesCheckbox = series.select('.nv-check-box');\n\n                seriesCheckbox.each(function(d,i) {\n                    d3.select(this).selectAll('path')\n                        .attr('stroke', setTextColor(d,i));\n                });\n            }\n\n            seriesEnter.append('text')\n                .attr('text-anchor', 'start')\n                .attr('class','nv-legend-text')\n                .attr('dy', '.32em')\n                .attr('dx', '8');\n\n            var seriesText = series.select('text.nv-legend-text');\n\n            series\n                .on('mouseover', function(d,i) {\n                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.legendMouseout(d,i);\n                })\n                .on('click', function(d,i) {\n                    dispatch.legendClick(d,i);\n                    // make sure we re-get data in case it was modified\n                    var data = series.data();\n                    if (updateState) {\n                        if(vers =='classic') {\n                            if (radioButtonMode) {\n                                //Radio button mode: set every series to disabled,\n                                //  and enable the clicked series.\n                                data.forEach(function(series) { series.disabled = true});\n                                d.disabled = false;\n                            }\n                            else {\n                                d.disabled = !d.disabled;\n                                if (data.every(function(series) { return series.disabled})) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) { series.disabled = false});\n                                }\n                            }\n                        } else if(vers == 'furious') {\n                            if(expanded) {\n                                d.disengaged = !d.disengaged;\n                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n                                d.disabled = d.disengaged || d.userDisabled;\n                            } else if (!expanded) {\n                                d.disabled = !d.disabled;\n                                d.userDisabled = d.disabled;\n                                var engaged = data.filter(function(d) { return !d.disengaged; });\n                                if (engaged.every(function(series) { return series.userDisabled })) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) {\n                                        series.disabled = series.userDisabled = false;\n                                    });\n                                }\n                            }\n                        }\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled }),\n                            disengaged: data.map(function(d) { return !!d.disengaged })\n                        });\n\n                    }\n                })\n                .on('dblclick', function(d,i) {\n                    if(vers == 'furious' && expanded) return;\n                    dispatch.legendDblclick(d,i);\n                    if (updateState) {\n                        // make sure we re-get data in case it was modified\n                        var data = series.data();\n                        //the default behavior of NVD3 legends, when double clicking one,\n                        // is to set all other series' to false, and make the double clicked series enabled.\n                        data.forEach(function(series) {\n                            series.disabled = true;\n                            if(vers == 'furious') series.userDisabled = series.disabled;\n                        });\n                        d.disabled = false;\n                        if(vers == 'furious') d.userDisabled = d.disabled;\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled })\n                        });\n                    }\n                });\n\n            series.classed('nv-disabled', function(d) { return d.userDisabled });\n            series.exit().remove();\n\n            seriesText\n                .attr('fill', setTextColor)\n                .text(function (d) { return keyFormatter(getKey(d)) });\n\n            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n            // NEW ALIGNING CODE, TODO: clean up\n\n            var versPadding;\n            switch(vers) {\n                case 'furious' :\n                    versPadding = 23;\n                    break;\n                case 'classic' :\n                    versPadding = 20;\n            }\n\n            if (align) {\n\n                var seriesWidths = [];\n                series.each(function(d,i) {\n                    var legendText;\n                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n                    } else {\n                        legendText = d3.select(this).select('text');\n                    }\n                    var nodeTextLength;\n                    try {\n                        nodeTextLength = legendText.node().getComputedTextLength();\n                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                        if(nodeTextLength <= 0) throw Error();\n                    }\n                    catch(e) {\n                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n                    }\n\n                    seriesWidths.push(nodeTextLength + padding);\n                });\n\n                var seriesPerRow = 0;\n                var legendWidth = 0;\n                var columnWidths = [];\n\n                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n                    legendWidth += seriesWidths[seriesPerRow++];\n                }\n                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n                    columnWidths = [];\n                    seriesPerRow--;\n\n                    for (var k = 0; k < seriesWidths.length; k++) {\n                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n                    }\n\n                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                        return prev + cur;\n                    });\n                }\n\n                var xPositions = [];\n                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n                    xPositions[i] = curX;\n                    curX += columnWidths[i];\n                }\n\n                series\n                    .attr('transform', function(d, i) {\n                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                if (rightAlign) {\n                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n                }\n                else {\n                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n                }\n\n                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\n            } else {\n\n                var ypos = 5,\n                    newxpos = 5,\n                    maxwidth = 0,\n                    xpos;\n                series\n                    .attr('transform', function(d, i) {\n                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n                        xpos = newxpos;\n\n                        if (width < margin.left + margin.right + xpos + length) {\n                            newxpos = xpos = 5;\n                            ypos += versPadding;\n                        }\n\n                        newxpos += length;\n                        if (newxpos > maxwidth) maxwidth = newxpos;\n\n                        return 'translate(' + xpos + ',' + ypos + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n                height = margin.top + margin.bottom + ypos + 15;\n            }\n\n            if(vers == 'furious') {\n                // Size rectangles after text is placed\n                seriesShape\n                    .attr('width', function(d,i) {\n                        return seriesText[0][i].getComputedTextLength() + 27;\n                    })\n                    .attr('height', 18)\n                    .attr('y', -9)\n                    .attr('x', -15)\n            }\n\n            seriesShape\n                .style('fill', setBGColor)\n                .style('stroke', function(d,i) { return d.color || color(d, i) });\n        });\n\n        function setTextColor(d,i) {\n            if(vers != 'furious') return '#000';\n            if(expanded) {\n                return d.disengaged ? color(d,i) : '#fff';\n            } else if (!expanded) {\n                return !!d.disabled ? color(d,i) : '#fff';\n            }\n        }\n\n        function setBGColor(d,i) {\n            if(expanded && vers == 'furious') {\n                return d.disengaged ? '#fff' : color(d,i);\n            } else {\n                return !!d.disabled ? '#fff' : color(d,i);\n            }\n        }\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:          {get: function(){return width;}, set: function(_){width=_;}},\n        height:         {get: function(){return height;}, set: function(_){height=_;}},\n        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        align:          {get: function(){return align;}, set: function(_){align=_;}},\n        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n//TODO: consider deprecating and using multibar with single series for this\nnv.models.historicalBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceX = []\n        , forceY = [0]\n        , padData = false\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        , interactive = true\n        ;\n\n    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\n    function chart(selection) {\n        selection.each(function(data) {\n            renderWatch.reset();\n\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [0, availableWidth]);\n\n            y.domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))\n                .range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-bars');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var bars = wrap.select('.nv-bars').selectAll('.nv-bar')\n                .data(function(d) { return d }, function(d,i) {return getX(d,i)});\n            bars.exit().remove();\n\n            bars.enter().append('rect')\n                .attr('x', 0 )\n                .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })\n                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })\n                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n                .on('mouseover', function(d,i) {\n                    if (!interactive) return;\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n\n                })\n                .on('mouseout', function(d,i) {\n                    if (!interactive) return;\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    if (!interactive) return;\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    if (!interactive) return;\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    if (!interactive) return;\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            bars\n                .attr('fill', function(d,i) { return color(d, i); })\n                .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })\n                .watchTransition(renderWatch, 'bars')\n                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n                //TODO: better width calculations that don't assume always uniform data spacing;w\n                .attr('width', (availableWidth / data[0].values.length) * .9 );\n\n            bars.watchTransition(renderWatch, 'bars')\n                .attr('y', function(d,i) {\n                    var rval = getY(d,i) < 0 ?\n                        y(0) :\n                            y(0) - y(getY(d,i)) < 1 ?\n                        y(0) - 1 :\n                        y(getY(d,i));\n                    return nv.utils.NaNtoZero(rval);\n                })\n                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });\n\n        });\n\n        renderWatch.renderEnd('historicalBar immediate');\n        return chart;\n    }\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        container\n            .select(\".nv-bars .nv-bar-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container\n            .select(\".nv-bars .nv-bar.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        forceX:  {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData: {get: function(){return padData;}, set: function(_){padData=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.historicalBarChart = function(bar_model) {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var bars = bar_model || nv.models.historicalBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        ;\n\n\n    var margin = {top: 30, right: 90, bottom: 50, left: 90}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = false\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , useInteractiveGuideline = false\n        , x\n        , y\n        , state = {}\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('tooltipHide', 'stateChange', 'changeState', 'renderEnd')\n        , transitionDuration = 250\n        ;\n\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient( (rightAlignYAxis) ? 'right' : 'left');\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\n    function chart(selection) {\n        selection.each(function(data) {\n            renderWatch.reset();\n            renderWatch.models(bars);\n            if (showXAxis) renderWatch.models(xAxis);\n            if (showYAxis) renderWatch.models(yAxis);\n\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().duration(transitionDuration).call(chart) };\n            chart.container = this;\n\n            //set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = bars.xScale();\n            y = bars.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n            bars\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n            barsWrap.transition().call(bars);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .transition()\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .transition()\n                    .call(yAxis);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                bars.clearHighlights();\n\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        bars.highlightPoint(pointIndex,true);\n                        var point = series.values[pointIndex];\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: chart.y()(point, pointIndex),\n                            color: color(series,series.seriesIndex),\n                            data: series.values[pointIndex]\n                        });\n                    });\n\n                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));\n                interactiveLayer.tooltip\n                    .valueFormatter(function(d,i) {\n                        return yAxis.tickFormat()(d);\n                    })\n                    .data({\n                        value: xValue,\n                        index: pointIndex,\n                        series: allData\n                    })();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                dispatch.tooltipHide();\n                bars.clearHighlights();\n            });\n\n            legend.dispatch.on('legendClick', function(d,i) {\n                d.disabled = !d.disabled;\n\n                if (!data.filter(function(d) { return !d.disabled }).length) {\n                    data.map(function(d) {\n                        d.disabled = false;\n                        wrap.selectAll('.nv-series').classed('disabled', false);\n                        return d;\n                    });\n                }\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n\n                selection.transition().call(chart);\n            });\n\n            legend.dispatch.on('legendDblclick', function(d) {\n                //Double clicking should always enable current series, and disabled all others.\n                data.forEach(function(d) {\n                    d.disabled = true;\n                });\n                d.disabled = false;\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                chart.update();\n            });\n        });\n\n        renderWatch.renderEnd('historicalBarChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.bars = bars;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            bars.color(color);\n        }},\n        duration:    {get: function(){return transitionDuration;}, set: function(_){\n            transitionDuration=_;\n            renderWatch.reset(transitionDuration);\n            yAxis.duration(transitionDuration);\n            xAxis.duration(transitionDuration);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (_ === true) {\n                chart.interactive(false);\n            }\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, bars);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\n\n// ohlcChart is just a historical chart with ohlc bars and some tweaks\nnv.models.ohlcBarChart = function() {\n    var chart = nv.models.historicalBarChart(nv.models.ohlcBar());\n\n    // special default tooltip since we show multiple values per x\n    chart.useInteractiveGuideline(true);\n    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n        // we assume only one series exists for this chart\n        var d = data.series[0].data;\n        // match line colors as defined in nv.d3.css\n        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n        return '' +\n            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n            '<table>' +\n            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n            '</table>';\n    });\n    return chart;\n};\n\n// candlestickChart is just a historical chart with candlestick bars and some tweaks\nnv.models.candlestickBarChart = function() {\n    var chart = nv.models.historicalBarChart(nv.models.candlestickBar());\n\n    // special default tooltip since we show multiple values per x\n    chart.useInteractiveGuideline(true);\n    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n        // we assume only one series exists for this chart\n        var d = data.series[0].data;\n        // match line colors as defined in nv.d3.css\n        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n        return '' +\n            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n            '<table>' +\n            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n            '</table>';\n    });\n    return chart;\n};\nnv.models.legend = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , width = 400\n        , height = 20\n        , getKey = function(d) { return d.key }\n        , keyFormatter = function (d) { return d }\n        , color = nv.utils.getColor()\n        , maxKeyLength = 20 //default value for key lengths\n        , align = true\n        , padding = 32 //define how much space between legend items. - recommend 32 for furious version\n        , rightAlign = true\n        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n        , enableDoubleClick = true   //If true, legend will enable double click handling\n        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n        , expanded = false\n        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n        , vers = 'classic' //Options are \"classic\" and \"furious\"\n        ;\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-legend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n            var g = wrap.select('g');\n\n            if (rightAlign)\n                wrap.attr('transform', 'translate(' + (- margin.right) + ',' + margin.top + ')');\n            else\n                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var series = g.selectAll('.nv-series')\n                .data(function(d) {\n                    if(vers != 'furious') return d;\n\n                    return d.filter(function(n) {\n                        return expanded ? true : !n.disengaged;\n                    });\n                });\n\n            var seriesEnter = series.enter().append('g').attr('class', 'nv-series');\n            var seriesShape;\n\n            var versPadding;\n            switch(vers) {\n                case 'furious' :\n                    versPadding = 23;\n                    break;\n                case 'classic' :\n                    versPadding = 20;\n            }\n\n            if(vers == 'classic') {\n                seriesEnter.append('circle')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('r', 5);\n\n                seriesShape = series.select('.nv-legend-symbol');\n            } else if (vers == 'furious') {\n                seriesEnter.append('rect')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('rx', 3)\n                    .attr('ry', 3);\n                seriesShape = series.select('.nv-legend-symbol');\n\n                seriesEnter.append('g')\n                    .attr('class', 'nv-check-box')\n                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\n                var seriesCheckbox = series.select('.nv-check-box');\n\n                seriesCheckbox.each(function(d,i) {\n                    d3.select(this).selectAll('path')\n                        .attr('stroke', setTextColor(d,i));\n                });\n            }\n\n            seriesEnter.append('text')\n                .attr('text-anchor', 'start')\n                .attr('class','nv-legend-text')\n                .attr('dy', '.32em')\n                .attr('dx', '8');\n\n            var seriesText = series.select('text.nv-legend-text');\n\n            series\n                .on('mouseover', function(d,i) {\n                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.legendMouseout(d,i);\n                })\n                .on('click', function(d,i) {\n                    dispatch.legendClick(d,i);\n                    // make sure we re-get data in case it was modified\n                    var data = series.data();\n                    if (updateState) {\n                        if(vers =='classic') {\n                            if (radioButtonMode) {\n                                //Radio button mode: set every series to disabled,\n                                //  and enable the clicked series.\n                                data.forEach(function(series) { series.disabled = true});\n                                d.disabled = false;\n                            }\n                            else {\n                                d.disabled = !d.disabled;\n                                if (data.every(function(series) { return series.disabled})) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) { series.disabled = false});\n                                }\n                            }\n                        } else if(vers == 'furious') {\n                            if(expanded) {\n                                d.disengaged = !d.disengaged;\n                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n                                d.disabled = d.disengaged || d.userDisabled;\n                            } else if (!expanded) {\n                                d.disabled = !d.disabled;\n                                d.userDisabled = d.disabled;\n                                var engaged = data.filter(function(d) { return !d.disengaged; });\n                                if (engaged.every(function(series) { return series.userDisabled })) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) {\n                                        series.disabled = series.userDisabled = false;\n                                    });\n                                }\n                            }\n                        }\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled }),\n                            disengaged: data.map(function(d) { return !!d.disengaged })\n                        });\n\n                    }\n                })\n                .on('dblclick', function(d,i) {\n                    if (enableDoubleClick) {\n                        if (vers == 'furious' && expanded) return;\n                        dispatch.legendDblclick(d, i);\n                        if (updateState) {\n                            // make sure we re-get data in case it was modified\n                            var data = series.data();\n                            //the default behavior of NVD3 legends, when double clicking one,\n                            // is to set all other series' to false, and make the double clicked series enabled.\n                            data.forEach(function (series) {\n                                series.disabled = true;\n                                if (vers == 'furious') series.userDisabled = series.disabled;\n                            });\n                            d.disabled = false;\n                            if (vers == 'furious') d.userDisabled = d.disabled;\n                            dispatch.stateChange({\n                                disabled: data.map(function (d) {\n                                    return !!d.disabled\n                                })\n                            });\n                        }\n                    }\n                });\n\n            series.classed('nv-disabled', function(d) { return d.userDisabled });\n            series.exit().remove();\n\n            seriesText\n                .attr('fill', setTextColor)\n                .text(function (d) { return keyFormatter(getKey(d)) });\n\n            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n            // NEW ALIGNING CODE, TODO: clean up\n            var legendWidth = 0;\n            if (align) {\n\n                var seriesWidths = [];\n                series.each(function(d,i) {\n                    var legendText;\n                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n                    } else {\n                        legendText = d3.select(this).select('text');\n                    }\n                    var nodeTextLength;\n                    try {\n                        nodeTextLength = legendText.node().getComputedTextLength();\n                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                        if(nodeTextLength <= 0) throw Error();\n                    }\n                    catch(e) {\n                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n                    }\n\n                    seriesWidths.push(nodeTextLength + padding);\n                });\n\n                var seriesPerRow = 0;\n                var columnWidths = [];\n                legendWidth = 0;\n\n                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n                    legendWidth += seriesWidths[seriesPerRow++];\n                }\n                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n                    columnWidths = [];\n                    seriesPerRow--;\n\n                    for (var k = 0; k < seriesWidths.length; k++) {\n                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n                    }\n\n                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                        return prev + cur;\n                    });\n                }\n\n                var xPositions = [];\n                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n                    xPositions[i] = curX;\n                    curX += columnWidths[i];\n                }\n\n                series\n                    .attr('transform', function(d, i) {\n                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                if (rightAlign) {\n                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n                }\n                else {\n                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n                }\n\n                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\n            } else {\n\n                var ypos = 5,\n                    newxpos = 5,\n                    maxwidth = 0,\n                    xpos;\n                series\n                    .attr('transform', function(d, i) {\n                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n                        xpos = newxpos;\n\n                        if (width < margin.left + margin.right + xpos + length) {\n                            newxpos = xpos = 5;\n                            ypos += versPadding;\n                        }\n\n                        newxpos += length;\n                        if (newxpos > maxwidth) maxwidth = newxpos;\n\n                        if(legendWidth < xpos + maxwidth) {\n                            legendWidth = xpos + maxwidth;\n                        }\n                        return 'translate(' + xpos + ',' + ypos + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n                height = margin.top + margin.bottom + ypos + 15;\n            }\n\n            if(vers == 'furious') {\n                // Size rectangles after text is placed\n                seriesShape\n                    .attr('width', function(d,i) {\n                        return seriesText[0][i].getComputedTextLength() + 27;\n                    })\n                    .attr('height', 18)\n                    .attr('y', -9)\n                    .attr('x', -15);\n\n                // The background for the expanded legend (UI)\n                gEnter.insert('rect',':first-child')\n                    .attr('class', 'nv-legend-bg')\n                    .attr('fill', '#eee')\n                    // .attr('stroke', '#444')\n                    .attr('opacity',0);\n\n                var seriesBG = g.select('.nv-legend-bg');\n\n                seriesBG\n                .transition().duration(300)\n                    .attr('x', -versPadding )\n                    .attr('width', legendWidth + versPadding - 12)\n                    .attr('height', height + 10)\n                    .attr('y', -margin.top - 10)\n                    .attr('opacity', expanded ? 1 : 0);\n\n\n            }\n\n            seriesShape\n                .style('fill', setBGColor)\n                .style('fill-opacity', setBGOpacity)\n                .style('stroke', setBGColor);\n        });\n\n        function setTextColor(d,i) {\n            if(vers != 'furious') return '#000';\n            if(expanded) {\n                return d.disengaged ? '#000' : '#fff';\n            } else if (!expanded) {\n                if(!d.color) d.color = color(d,i);\n                return !!d.disabled ? d.color : '#fff';\n            }\n        }\n\n        function setBGColor(d,i) {\n            if(expanded && vers == 'furious') {\n                return d.disengaged ? '#eee' : d.color || color(d,i);\n            } else {\n                return d.color || color(d,i);\n            }\n        }\n\n\n        function setBGOpacity(d,i) {\n            if(expanded && vers == 'furious') {\n                return 1;\n            } else {\n                return !!d.disabled ? 0 : 1;\n            }\n        }\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:          {get: function(){return width;}, set: function(_){width=_;}},\n        height:         {get: function(){return height;}, set: function(_){height=_;}},\n        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        align:          {get: function(){return align;}, set: function(_){align=_;}},\n        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n        enableDoubleClick: {get: function(){return enableDoubleClick;}, set: function(_){enableDoubleClick=_;}},\n        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.line = function() {\n    \"use strict\";\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var  scatter = nv.models.scatter()\n        ;\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , container = null\n        , strokeWidth = 1.5\n        , color = nv.utils.defaultColor() // a function that returns a color\n        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n        , isArea = function(d) { return d.area } // decides if a line is an area or just a line\n        , clipEdge = false // if true, masks lines within x and y scale\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , interpolate = \"linear\" // controls the line interpolation\n        , duration = 250\n        , dispatch = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n        ;\n\n    scatter\n        .pointSize(16) // default size\n        .pointDomain([16,256]) //set to speed up calculation, needs to be unset if there is a custom size accessor\n    ;\n\n    //============================================================\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0 //used to store previous scales\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    //============================================================\n\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            scatter\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var scatterWrap = wrap.select('.nv-scatterWrap');\n            scatterWrap.call(scatter);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + scatter.id())\n                .append('rect');\n\n            wrap.select('#nv-edge-clip-' + scatter.id() + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', (availableHeight > 0) ? availableHeight : 0);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n            scatterWrap\n                .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('stroke-width', function(d) { return d.strokeWidth || strokeWidth })\n                .style('fill-opacity', 1e-6);\n\n            groups.exit().remove();\n\n            groups\n                .attr('class', function(d,i) {\n                    return (d.classed || '') + ' nv-group nv-series-' + i;\n                })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i)});\n            groups.watchTransition(renderWatch, 'line: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', function(d) { return d.fillOpacity || .5});\n\n            var areaPaths = groups.selectAll('path.nv-area')\n                .data(function(d) { return isArea(d) ? [d] : [] }); // this is done differently than lines because I need to check if series is an area\n            areaPaths.enter().append('path')\n                .attr('class', 'nv-area')\n                .attr('d', function(d) {\n                    return d3.svg.area()\n                        .interpolate(interpolate)\n                        .defined(defined)\n                        .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                        .y0(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n                        .y1(function(d,i) { return y0( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                        .apply(this, [d.values])\n                });\n            groups.exit().selectAll('path.nv-area')\n                .remove();\n\n            areaPaths.watchTransition(renderWatch, 'line: areaPaths')\n                .attr('d', function(d) {\n                    return d3.svg.area()\n                        .interpolate(interpolate)\n                        .defined(defined)\n                        .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                        .y0(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n                        .y1(function(d,i) { return y( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                        .apply(this, [d.values])\n                });\n\n            var linePaths = groups.selectAll('path.nv-line')\n                .data(function(d) { return [d.values] });\n\n            linePaths.enter().append('path')\n                .attr('class', 'nv-line')\n                .attr('d',\n                    d3.svg.line()\n                    .interpolate(interpolate)\n                    .defined(defined)\n                    .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                    .y(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n            );\n\n            linePaths.watchTransition(renderWatch, 'line: linePaths')\n                .attr('d',\n                    d3.svg.line()\n                    .interpolate(interpolate)\n                    .defined(defined)\n                    .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                    .y(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n            );\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n        });\n        renderWatch.renderEnd('line immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    // Pass through events\n    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n        interpolate:      {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            scatter.duration(duration);\n        }},\n        isArea: {get: function(){return isArea;}, set: function(_){\n            isArea = d3.functor(_);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            scatter.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            scatter.y(_);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            scatter.color(color);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.lineChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        , focus = nv.models.focus(nv.models.line())\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , useInteractiveGuideline = false\n        , x\n        , y\n        , focusEnable = false\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , duration = 250\n        ;\n\n    // set options on sub-objects for this chart\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient(rightAlignYAxis ? 'right' : 'left');\n\n    lines.clipEdge(true).duration(0);\n\n    tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    interactiveLayer.tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled; })\n            };\n        };\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        };\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(lines);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n            chart.update = function() {\n                if( duration === 0 ) {\n                    container.call( chart );\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled; });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length; }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            /* Update `main' graph on brush update. */\n            focus.dispatch.on(\"onBrush\", function(extent) {\n                onBrush(extent);\n            });\n\n            // Setup Scales\n            x = lines.xScale();\n            y = lines.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n            focusEnter.append('g').attr('class', 'nv-linesWrap');\n            focusEnter.append('g').attr('class', 'nv-interactive');\n\n            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (legendPosition === 'bottom') {\n                     margin.bottom = xAxis.height() + legend.height();\n                     availableHeight = nv.utils.availableHeight(height, container, margin);\n                     g.select('.nv-legendWrap')\n                         .attr('transform', 'translate(0,' + (availableHeight + xAxis.height())  +')');\n                } else if (legendPosition === 'top') {\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                    }\n\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n                }\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            g.select('.nv-focus .nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            lines\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var linesWrap = g.select('.nv-linesWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n\n            // Setup Main (Focus) Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks(nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n            }\n\n            //============================================================\n            // Update Axes\n            //============================================================\n            function updateXAxis() {\n              if(showXAxis) {\n                g.select('.nv-focus .nv-x.nv-axis')\n                  .transition()\n                  .duration(duration)\n                  .call(xAxis)\n                ;\n              }\n            }\n\n            function updateYAxis() {\n              if(showYAxis) {\n                g.select('.nv-focus .nv-y.nv-axis')\n                  .transition()\n                  .duration(duration)\n                  .call(yAxis)\n                ;\n              }\n            }\n\n            g.select('.nv-focus .nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + availableHeight + ')');\n\n            //============================================================\n            // Update Focus\n            //============================================================\n            if (!focusEnable && focus.brush.extent() === null) {\n                linesWrap.call(lines);\n                updateXAxis();\n                updateYAxis();\n            } else {\n                focus.width(availableWidth);\n                g.select('.nv-focusWrap')\n                    .style('display', focusEnable ? 'initial' : 'none')\n                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n                    .call(focus);\n                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n                if (extent !== null) {\n                    onBrush(extent);\n                }\n            }\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                lines.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled && !series.disableTooltip;\n                    })\n                    .forEach(function(series,i) {\n                        var extent = focus.brush.extent() !== null ? (focus.brush.empty() ? focus.xScale().domain() : focus.brush.extent()) : x.domain();\n                        var currentValues = series.values.filter(function(d,i) {\n                            // Checks if the x point is between the extents, handling case where extent[0] is greater than extent[1]\n                            // (e.g. x domain is manually set to reverse the x-axis)\n                            if(extent[0] <= extent[1]) {\n                                return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                            } else {\n                                return lines.x()(d,i) >= extent[1] && lines.x()(d,i) <= extent[0];\n                            }\n                        });\n\n                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, lines.x());\n                        var point = currentValues[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue !== null) {\n                            lines.highlightPoint(i, pointIndex, true);\n                        }\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: pointYValue,\n                            color: color(series,series.seriesIndex),\n                            data: point\n                        });\n                    });\n                //Highlight the tooltip entry based on which point the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n                    var threshold = 0.03 * domainExtent;\n                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value;}),yValue,threshold);\n                    if (indexToHighlight !== null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                var defaultValueFormatter = function(d,i) {\n                    return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n                };\n\n                interactiveLayer.tooltip\n                    .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n                    .data({\n                        value: chart.x()( singlePoint,pointIndex ),\n                        index: pointIndex,\n                        series: allData\n                    })();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on('elementClick', function(e) {\n                var pointXLocation, allData = [];\n\n                data.filter(function(series, i) {\n                    series.seriesIndex = i;\n                    return !series.disabled;\n                }).forEach(function(series) {\n                    var pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                    var point = series.values[pointIndex];\n                    if (typeof point === 'undefined') return;\n                    if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                    var yPos = chart.yScale()(chart.y()(point,pointIndex));\n                    allData.push({\n                        point: point,\n                        pointIndex: pointIndex,\n                        pos: [pointXLocation, yPos],\n                        seriesIndex: series.seriesIndex,\n                        series: series\n                    });\n                });\n\n                lines.dispatch.elementClick(allData);\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                lines.clearHighlights();\n            });\n\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight / 3;\n                return 'M' + (0.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n\n            function onBrush(extent) {\n                // Update Main (Focus)\n                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n                    .datum(\n                    data.filter(function(d) { return !d.disabled; })\n                        .map(function(d,i) {\n                            return {\n                                key: d.key,\n                                area: d.area,\n                                classed: d.classed,\n                                values: d.values.filter(function(d,i) {\n                                    return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                                }),\n                                disableTooltip: d.disableTooltip\n                            };\n                        })\n                );\n                focusLinesWrap.transition().duration(duration).call(lines);\n\n                // Update Main (Focus) Axes\n                updateXAxis();\n                updateYAxis();\n            }\n        });\n\n        renderWatch.renderEnd('lineChart immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        if(!evt.series.disableTooltip){\n            tooltip.data(evt).hidden(false);\n        }\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.lines = lines;\n    chart.legend = legend;\n    chart.focus = focus;\n    chart.xAxis = xAxis;\n    chart.x2Axis = focus.xAxis\n    chart.yAxis = yAxis;\n    chart.y2Axis = focus.yAxis\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n    chart.state = state;\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        // Focus options, mostly passed onto focus model.\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n        focusShowAxisX:    {get: function(){return focus.showXAxis();}, set: function(_){focus.showXAxis(_);}},\n        focusShowAxisY:    {get: function(){return focus.showYAxis();}, set: function(_){focus.showYAxis(_);}},\n        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\n        // options that require extra logic in the setter\n        focusMargin: {get: function(){return focus.margin}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            lines.duration(duration);\n            focus.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            lines.color(color);\n            focus.color(color);\n        }},\n        interpolate: {get: function(){return lines.interpolate();}, set: function(_){\n            lines.interpolate(_);\n            focus.interpolate(_);\n        }},\n        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n            xAxis.tickFormat(_);\n            focus.xTickFormat(_);\n        }},\n        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n            yAxis.tickFormat(_);\n            focus.yTickFormat(_);\n        }},\n        x: {get: function(){return lines.x();}, set: function(_){\n            lines.x(_);\n            focus.x(_);\n        }},\n        y: {get: function(){return lines.y();}, set: function(_){\n            lines.y(_);\n            focus.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (useInteractiveGuideline) {\n                lines.interactive(false);\n                lines.useVoronoi(false);\n            }\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.lineWithFocusChart = function() {\n  return nv.models.lineChart()\n    .margin({ bottom: 30 })\n    .focusEnable( true );\n};\nnv.models.linePlusBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , lines2 = nv.models.line()\n        , bars = nv.models.historicalBar()\n        , bars2 = nv.models.historicalBar()\n        , xAxis = nv.models.axis()\n        , x2Axis = nv.models.axis()\n        , y1Axis = nv.models.axis()\n        , y2Axis = nv.models.axis()\n        , y3Axis = nv.models.axis()\n        , y4Axis = nv.models.axis()\n        , legend = nv.models.legend()\n        , brush = d3.svg.brush()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 30, bottom: 30, left: 60}\n        , marginTop = null\n        , margin2 = {top: 0, right: 30, bottom: 20, left: 60}\n        , width = null\n        , height = null\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , color = nv.utils.defaultColor()\n        , showLegend = true\n        , focusEnable = true\n        , focusShowAxisY = false\n        , focusShowAxisX = true\n        , focusHeight = 50\n        , extent\n        , brushExtent = null\n        , x\n        , x2\n        , y1\n        , y2\n        , y3\n        , y4\n        , noData = null\n        , dispatch = d3.dispatch('brush', 'stateChange', 'changeState')\n        , transitionDuration = 0\n        , state = nv.utils.state()\n        , defaultState = null\n        , legendLeftAxisHint = ' (left axis)'\n        , legendRightAxisHint = ' (right axis)'\n        , switchYAxisOrder = false\n        ;\n\n    lines.clipEdge(true);\n    lines2.interactive(false);\n    // We don't want any points emitted for the focus chart's scatter graph.\n    lines2.pointActive(function(d) { return false });\n    xAxis.orient('bottom').tickPadding(5);\n    y1Axis.orient('left');\n    y2Axis.orient('right');\n    x2Axis.orient('bottom').tickPadding(5);\n    y3Axis.orient('left');\n    y4Axis.orient('right');\n\n    tooltip.headerEnabled(true).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var getBarsAxis = function() {\n        return switchYAxisOrder\n            ? { main: y2Axis, focus: y4Axis }\n            : { main: y1Axis, focus: y3Axis }\n    }\n\n    var getLinesAxis = function() {\n        return switchYAxisOrder\n            ? { main: y1Axis, focus: y3Axis }\n            : { main: y2Axis, focus: y4Axis }\n    }\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var allDisabled = function(data) {\n      return data.every(function(series) {\n        return series.disabled;\n      });\n    }\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight1 = nv.utils.availableHeight(height, container, margin)\n                    - (focusEnable ? focusHeight : 0),\n                availableHeight2 = focusHeight - margin2.top - margin2.bottom;\n\n            chart.update = function() { container.transition().duration(transitionDuration).call(chart); };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            var dataBars = data.filter(function(d) { return !d.disabled && d.bar });\n            var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240\n\n            if (dataBars.length && !switchYAxisOrder) {\n                x = bars.xScale();\n            } else {\n                x = lines.xScale();\n            }\n\n            x2 = x2Axis.scale();\n\n            // select the scales and series based on the position of the yAxis\n            y1 = switchYAxisOrder ? lines.yScale() : bars.yScale();\n            y2 = switchYAxisOrder ? bars.yScale() : lines.yScale();\n            y3 = switchYAxisOrder ? lines2.yScale() : bars2.yScale();\n            y4 = switchYAxisOrder ? bars2.yScale() : lines2.yScale();\n\n            var series1 = data\n                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? !d.bar : d.bar) })\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i) }\n                    })\n                });\n\n            var series2 = data\n                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? d.bar : !d.bar) })\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i) }\n                    })\n                });\n\n            x.range([0, availableWidth]);\n\n            x2  .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))\n                .range([0, availableWidth]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            // this is the main chart\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            focusEnter.append('g').attr('class', 'nv-barsWrap');\n            focusEnter.append('g').attr('class', 'nv-linesWrap');\n\n            // context chart is where you can focus in\n            var contextEnter = gEnter.append('g').attr('class', 'nv-context');\n            contextEnter.append('g').attr('class', 'nv-x nv-axis');\n            contextEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            contextEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            contextEnter.append('g').attr('class', 'nv-barsWrap');\n            contextEnter.append('g').attr('class', 'nv-linesWrap');\n            contextEnter.append('g').attr('class', 'nv-brushBackground');\n            contextEnter.append('g').attr('class', 'nv-x nv-brush');\n\n            //============================================================\n            // Legend\n            //------------------------------------------------------------\n\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n                var legendXPosition = legend.align() ? legendWidth : 0;\n\n                legend.width(legendWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data.map(function(series) {\n                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n                        if(switchYAxisOrder) {\n                            series.key = series.originalKey + (series.bar ? legendRightAxisHint : legendLeftAxisHint);\n                        } else {\n                            series.key = series.originalKey + (series.bar ? legendLeftAxisHint : legendRightAxisHint);\n                        }\n                        return series;\n                    }))\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    // FIXME: shouldn't this be \"- (focusEnabled ? focusHeight : 0)\"?\n                    availableHeight1 = nv.utils.availableHeight(height, container, margin) - focusHeight;\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            //============================================================\n            // Context chart (focus chart) components\n            //------------------------------------------------------------\n\n            // hide or show the focus context chart\n            g.select('.nv-context').style('display', focusEnable ? 'initial' : 'none');\n\n            bars2\n                .width(availableWidth)\n                .height(availableHeight2)\n                .color(data.map(function (d, i) {\n                    return d.color || color(d, i);\n                }).filter(function (d, i) {\n                    return !data[i].disabled && data[i].bar\n                }));\n            lines2\n                .width(availableWidth)\n                .height(availableHeight2)\n                .color(data.map(function (d, i) {\n                    return d.color || color(d, i);\n                }).filter(function (d, i) {\n                    return !data[i].disabled && !data[i].bar\n                }));\n\n            var bars2Wrap = g.select('.nv-context .nv-barsWrap')\n                .datum(dataBars.length ? dataBars : [\n                    {values: []}\n                ]);\n            var lines2Wrap = g.select('.nv-context .nv-linesWrap')\n                .datum(allDisabled(dataLines) ?\n                       [{values: []}] :\n                       dataLines.filter(function(dataLine) {\n                         return !dataLine.disabled;\n                       }));\n\n            g.select('.nv-context')\n                .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')');\n\n            bars2Wrap.transition().call(bars2);\n            lines2Wrap.transition().call(lines2);\n\n            // context (focus chart) axis controls\n            if (focusShowAxisX) {\n                x2Axis\n                    ._ticks( nv.utils.calcTicksX(availableWidth / 100, data))\n                    .tickSize(-availableHeight2, 0);\n                g.select('.nv-context .nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y3.range()[0] + ')');\n                g.select('.nv-context .nv-x.nv-axis').transition()\n                    .call(x2Axis);\n            }\n\n            if (focusShowAxisY) {\n                y3Axis\n                    .scale(y3)\n                    ._ticks( availableHeight2 / 36 )\n                    .tickSize( -availableWidth, 0);\n                y4Axis\n                    .scale(y4)\n                    ._ticks( availableHeight2 / 36 )\n                    .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\n                g.select('.nv-context .nv-y3.nv-axis')\n                    .style('opacity', dataBars.length ? 1 : 0)\n                    .attr('transform', 'translate(0,' + x2.range()[0] + ')');\n                g.select('.nv-context .nv-y2.nv-axis')\n                    .style('opacity', dataLines.length ? 1 : 0)\n                    .attr('transform', 'translate(' + x2.range()[1] + ',0)');\n\n                g.select('.nv-context .nv-y1.nv-axis').transition()\n                    .call(y3Axis);\n                g.select('.nv-context .nv-y2.nv-axis').transition()\n                    .call(y4Axis);\n            }\n\n            // Setup Brush\n            brush.x(x2).on('brush', onBrush);\n\n            if (brushExtent) brush.extent(brushExtent);\n\n            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n                .data([brushExtent || brush.extent()]);\n\n            var brushBGenter = brushBG.enter()\n                .append('g');\n\n            brushBGenter.append('rect')\n                .attr('class', 'left')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight2);\n\n            brushBGenter.append('rect')\n                .attr('class', 'right')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight2);\n\n            var gBrush = g.select('.nv-x.nv-brush')\n                .call(brush);\n            gBrush.selectAll('rect')\n                //.attr('y', -5)\n                .attr('height', availableHeight2);\n            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight2 / 3;\n                return 'M' + (.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n\n\n            function updateBrushBG() {\n                if (!brush.empty()) brush.extent(brushExtent);\n                brushBG\n                    .data([brush.empty() ? x2.domain() : brushExtent])\n                    .each(function(d,i) {\n                        var leftWidth = x2(d[0]) - x2.range()[0],\n                            rightWidth = x2.range()[1] - x2(d[1]);\n                        d3.select(this).select('.left')\n                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\n                        d3.select(this).select('.right')\n                            .attr('x', x2(d[1]))\n                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n                    });\n            }\n\n            function onBrush() {\n                brushExtent = brush.empty() ? null : brush.extent();\n                extent = brush.empty() ? x2.domain() : brush.extent();\n                dispatch.brush({extent: extent, brush: brush});\n                updateBrushBG();\n\n                // Prepare Main (Focus) Bars and Lines\n                bars\n                    .width(availableWidth)\n                    .height(availableHeight1)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));\n\n                lines\n                    .width(availableWidth)\n                    .height(availableHeight1)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));\n\n                var focusBarsWrap = g.select('.nv-focus .nv-barsWrap')\n                    .datum(!dataBars.length ? [{values:[]}] :\n                        dataBars\n                            .map(function(d,i) {\n                                return {\n                                    key: d.key,\n                                    values: d.values.filter(function(d,i) {\n                                        return bars.x()(d,i) >= extent[0] && bars.x()(d,i) <= extent[1];\n                                    })\n                                }\n                            })\n                );\n\n                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n                    .datum(allDisabled(dataLines) ? [{values:[]}] :\n                           dataLines\n                           .filter(function(dataLine) { return !dataLine.disabled; })\n                           .map(function(d,i) {\n                                return {\n                                    area: d.area,\n                                    fillOpacity: d.fillOpacity,\n                                    strokeWidth: d.strokeWidth,\n                                    key: d.key,\n                                    values: d.values.filter(function(d,i) {\n                                        return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                                    })\n                                }\n                            })\n                );\n\n                // Update Main (Focus) X Axis\n                if (dataBars.length && !switchYAxisOrder) {\n                    x = bars.xScale();\n                } else {\n                    x = lines.xScale();\n                }\n\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight1, 0);\n\n                xAxis.domain([Math.ceil(extent[0]), Math.floor(extent[1])]);\n\n                g.select('.nv-x.nv-axis').transition().duration(transitionDuration)\n                    .call(xAxis);\n\n                // Update Main (Focus) Bars and Lines\n                focusBarsWrap.transition().duration(transitionDuration).call(bars);\n                focusLinesWrap.transition().duration(transitionDuration).call(lines);\n\n                // Setup and Update Main (Focus) Y Axes\n                g.select('.nv-focus .nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y1.range()[0] + ')');\n\n                y1Axis\n                    .scale(y1)\n                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) )\n                    .tickSize(-availableWidth, 0);\n                y2Axis\n                    .scale(y2)\n                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) );\n\n                // Show the y2 rules only if y1 has none\n                if(!switchYAxisOrder) {\n                    y2Axis.tickSize(dataBars.length ? 0 : -availableWidth, 0);\n                } else {\n                    y2Axis.tickSize(dataLines.length ? 0 : -availableWidth, 0);\n                }\n\n                // Calculate opacity of the axis\n                var barsOpacity = dataBars.length ? 1 : 0;\n                var linesOpacity = dataLines.length && !allDisabled(dataLines) ? 1 : 0;\n\n                var y1Opacity = switchYAxisOrder ? linesOpacity : barsOpacity;\n                var y2Opacity = switchYAxisOrder ? barsOpacity : linesOpacity;\n\n                g.select('.nv-focus .nv-y1.nv-axis')\n                    .style('opacity', y1Opacity);\n                g.select('.nv-focus .nv-y2.nv-axis')\n                    .style('opacity', y2Opacity)\n                    .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n                g.select('.nv-focus .nv-y1.nv-axis').transition().duration(transitionDuration)\n                    .call(y1Axis);\n                g.select('.nv-focus .nv-y2.nv-axis').transition().duration(transitionDuration)\n                    .call(y2Axis);\n            }\n\n            onBrush();\n\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        tooltip\n            .duration(100)\n            .valueFormatter(function(d, i) {\n                return getLinesAxis().main.tickFormat()(d, i);\n            })\n            .data(evt)\n            .hidden(false);\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n\n    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.value = chart.x()(evt.data);\n        evt['series'] = {\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip\n            .duration(0)\n            .valueFormatter(function(d, i) {\n                return getBarsAxis().main.tickFormat()(d, i);\n            })\n            .data(evt)\n            .hidden(false);\n    });\n\n    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.legend = legend;\n    chart.lines = lines;\n    chart.lines2 = lines2;\n    chart.bars = bars;\n    chart.bars2 = bars2;\n    chart.xAxis = xAxis;\n    chart.x2Axis = x2Axis;\n    chart.y1Axis = y1Axis;\n    chart.y2Axis = y2Axis;\n    chart.y3Axis = y3Axis;\n    chart.y4Axis = y4Axis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        brushExtent:    {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:    {get: function(){return focusHeight;}, set: function(_){focusHeight=_;}},\n        focusShowAxisX:    {get: function(){return focusShowAxisX;}, set: function(_){focusShowAxisX=_;}},\n        focusShowAxisY:    {get: function(){return focusShowAxisY;}, set: function(_){focusShowAxisY=_;}},\n        legendLeftAxisHint:    {get: function(){return legendLeftAxisHint;}, set: function(_){legendLeftAxisHint=_;}},\n        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        focusMargin: {get: function(){return margin2;}, set: function(_){\n            margin2.top    = _.top    !== undefined ? _.top    : margin2.top;\n            margin2.right  = _.right  !== undefined ? _.right  : margin2.right;\n            margin2.bottom = _.bottom !== undefined ? _.bottom : margin2.bottom;\n            margin2.left   = _.left   !== undefined ? _.left   : margin2.left;\n        }},\n        duration: {get: function(){return transitionDuration;}, set: function(_){\n            transitionDuration = _;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            lines.x(_);\n            lines2.x(_);\n            bars.x(_);\n            bars2.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            lines.y(_);\n            lines2.y(_);\n            bars.y(_);\n            bars2.y(_);\n        }},\n        switchYAxisOrder:    {get: function(){return switchYAxisOrder;}, set: function(_){\n            // Switch the tick format for the yAxis\n            if(switchYAxisOrder !== _) {\n                var y1 = y1Axis;\n                y1Axis = y2Axis;\n                y2Axis = y1;\n\n                var y3 = y3Axis;\n                y3Axis = y4Axis;\n                y4Axis = y3;\n            }\n            switchYAxisOrder=_;\n\n            y1Axis.orient('left');\n            y2Axis.orient('right');\n            y3Axis.orient('left');\n            y4Axis.orient('right');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , clipEdge = true\n        , stacked = false\n        , stackOffset = 'zero' // options include 'silhouette', 'wiggle', 'expand', 'zero', or a custom function\n        , color = nv.utils.defaultColor()\n        , hideable = false\n        , barColor = null // adding the ability to set the color for each rather than the whole group\n        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n        , duration = 500\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , groupSpacing = 0.1\n        , fillOpacity = 0.75\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0 //used to store previous scales\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    var last_datalength = 0;\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n            var nonStackableCount = 0;\n            // This function defines the requirements for render complete\n            var endFn = function(d, i) {\n                if (d.series === data.length - 1 && i === data[0].values.length - 1)\n                    return true;\n                return false;\n            };\n\n            if(hideable && data.length) hideable = [{\n                values: data[0].values.map(function(d) {\n                        return {\n                            x: d.x,\n                            y: 0,\n                            series: d.series,\n                            size: 0.01\n                        };}\n                )}];\n\n            if (stacked) {\n                var parsed = d3.layout.stack()\n                    .offset(stackOffset)\n                    .values(function(d){ return d.values })\n                    .y(getY)\n                (!data.length && hideable ? hideable : data);\n\n                parsed.forEach(function(series, i){\n                    // if series is non-stackable, use un-parsed data\n                    if (series.nonStackable) {\n                        data[i].nonStackableSeries = nonStackableCount++;\n                        parsed[i] = data[i];\n                    } else {\n                        // don't stack this seires on top of the nonStackable seriees\n                        if (i > 0 && parsed[i - 1].nonStackable){\n                            parsed[i].values.map(function(d,j){\n                                d.y0 -= parsed[i - 1].values[j].y;\n                                d.y1 = d.y0 + d.y;\n                            });\n                        }\n                    }\n                });\n                data = parsed;\n            }\n            //add series index and key to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                    point.key = series.key;\n                });\n            });\n\n            // HACK for negative value stacking\n            if (stacked && data.length > 0) {\n                data[0].values.map(function(d,i) {\n                    var posBase = 0, negBase = 0;\n                    data.map(function(d, idx) {\n                        if (!data[idx].nonStackable) {\n                            var f = d.values[i]\n                            f.size = Math.abs(f.y);\n                            if (f.y<0)  {\n                                f.y1 = negBase;\n                                negBase = negBase - f.size;\n                            } else\n                            {\n                                f.y1 = f.size + posBase;\n                                posBase = posBase + f.size;\n                            }\n                        }\n\n                    });\n                });\n            }\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d, idx) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1, idx:idx }\n                    })\n                });\n\n            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableWidth], groupSpacing);\n\n            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) {\n                var domain = d.y;\n                // increase the domain range if this series is stackable\n                if (stacked && !data[d.idx].nonStackable) {\n                    if (d.y > 0){\n                        domain = d.y1\n                    } else {\n                        domain = d.y1 + d.y\n                    }\n                }\n                return domain;\n            }).concat(forceY)))\n            .range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect');\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d,i) { return i });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n\n            var exitTransition = renderWatch\n                .transition(groups.exit().selectAll('rect.nv-bar'), 'multibarExit', Math.min(100, duration))\n                .attr('y', function(d, i, j) {\n                    var yVal = y0(0) || 0;\n                    if (stacked) {\n                        if (data[d.series] && !data[d.series].nonStackable) {\n                            yVal = y0(d.y0);\n                        }\n                    }\n                    return yVal;\n                })\n                .attr('height', 0)\n                .remove();\n            if (exitTransition.delay)\n                exitTransition.delay(function(d,i) {\n                    var delay = i * (duration / (last_datalength + 1)) - i;\n                    return delay;\n                });\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i) });\n            groups\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', fillOpacity);\n\n            var bars = groups.selectAll('rect.nv-bar')\n                .data(function(d) { return (hideable && !data.length) ? hideable.values : d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('rect')\n                    .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n                    .attr('x', function(d,i,j) {\n                        return stacked && !data[j].nonStackable ? 0 : (j * x.rangeBand() / data.length )\n                    })\n                    .attr('y', function(d,i,j) { return y0(stacked && !data[j].nonStackable ? d.y0 : 0) || 0 })\n                    .attr('height', 0)\n                    .attr('width', function(d,i,j) { return x.rangeBand() / (stacked && !data[j].nonStackable ? 1 : data.length) })\n                    .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n                ;\n            bars\n                .style('fill', function(d,i,j){ return color(d, j, i);  })\n                .style('stroke', function(d,i,j){ return color(d, j, i); })\n                .on('mouseover', function(d,i,j) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        series: data[j],\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i,j) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        series: data[j],\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i,j) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        series: data[j],\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i,j) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        series: data[j],\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i,j) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        series: data[j],\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n\n            if (barColor) {\n                if (!disabled) disabled = data.map(function() { return true });\n                bars\n                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n            }\n\n            var barSelection =\n                bars.watchTransition(renderWatch, 'multibar', Math.min(250, duration))\n                    .delay(function(d,i) {\n                        return i * duration / data[0].values.length;\n                    });\n            if (stacked){\n                barSelection\n                    .attr('y', function(d,i,j) {\n                        var yVal = 0;\n                        // if stackable, stack it on top of the previous series\n                        if (!data[j].nonStackable) {\n                            yVal = y(d.y1);\n                        } else {\n                            if (getY(d,i) < 0){\n                                yVal = y(0);\n                            } else {\n                                if (y(0) - y(getY(d,i)) < -1){\n                                    yVal = y(0) - 1;\n                                } else {\n                                    yVal = y(getY(d, i)) || 0;\n                                }\n                            }\n                        }\n                        return yVal;\n                    })\n                    .attr('height', function(d,i,j) {\n                        if (!data[j].nonStackable) {\n                            return Math.max(Math.abs(y(d.y+d.y0) - y(d.y0)), 0);\n                        } else {\n                            return Math.max(Math.abs(y(getY(d,i)) - y(0)), 0) || 0;\n                        }\n                    })\n                    .attr('x', function(d,i,j) {\n                        var width = 0;\n                        if (data[j].nonStackable) {\n                            width = d.series * x.rangeBand() / data.length;\n                            if (data.length !== nonStackableCount){\n                                width = data[j].nonStackableSeries * x.rangeBand()/(nonStackableCount*2);\n                            }\n                        }\n                        return width;\n                    })\n                    .attr('width', function(d,i,j){\n                        if (!data[j].nonStackable) {\n                            return x.rangeBand();\n                        } else {\n                            // if all series are nonStacable, take the full width\n                            var width = (x.rangeBand() / nonStackableCount);\n                            // otherwise, nonStackable graph will be only taking the half-width\n                            // of the x rangeBand\n                            if (data.length !== nonStackableCount) {\n                                width = x.rangeBand()/(nonStackableCount*2);\n                            }\n                            return width;\n                        }\n                    });\n            }\n            else {\n                barSelection\n                    .attr('x', function(d,i) {\n                        return d.series * x.rangeBand() / data.length;\n                    })\n                    .attr('width', x.rangeBand() / data.length)\n                    .attr('y', function(d,i) {\n                        return getY(d,i) < 0 ?\n                            y(0) :\n                                y(0) - y(getY(d,i)) < 1 ?\n                            y(0) - 1 :\n                            y(getY(d,i)) || 0;\n                    })\n                    .attr('height', function(d,i) {\n                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0;\n                    });\n            }\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n            // keep track of the last data value length for transition calculations\n            if (data[0] && data[0].values) {\n                last_datalength = data[0].values.length;\n            }\n\n        });\n\n        renderWatch.renderEnd('multibar immediate');\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n        stackOffset: {get: function(){return stackOffset;}, set: function(_){stackOffset=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        disabled:    {get: function(){return disabled;}, set: function(_){disabled=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        hideable:    {get: function(){return hideable;}, set: function(_){hideable=_;}},\n        groupSpacing:{get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n        fillOpacity: {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        barColor:  {get: function(){return barColor;}, set: function(_){\n            barColor = _ ? nv.utils.getColor(_) : null;\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.multiBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var multibar = nv.models.multiBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , interactiveLayer = nv.interactiveGuideline()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , controlLabels = {}\n        , showLegend = true\n        , legendPosition = null\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , reduceXTicks = true // if false a tick will show for every data point\n        , staggerLabels = false\n        , wrapLabels = false\n        , rotateLabels = 0\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , controlWidth = function() { return showControls ? 180 : 0 }\n        , duration = 250\n        , useInteractiveGuideline = false\n        ;\n\n    state.stacked = false // DEPRECATED Maintained for backward compatibility\n\n    multibar.stacked(false);\n    xAxis\n        .orient('bottom')\n        .tickPadding(7)\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .valueFormatter(function(d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .valueFormatter(function (d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function (d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    var stacked = false;\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                stacked: stacked\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.stacked !== undefined)\n                stacked = state.stacked;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(multibar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition()\n                        .duration(duration)\n                        .call(chart);\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = multibar.xScale();\n            y = multibar.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                if (legendPosition === 'bottom') {\n                    legend.width(availableWidth - margin.right);\n\n                     g.select('.nv-legendWrap')\n                         .datum(data)\n                         .call(legend);\n\n                     margin.bottom = xAxis.height() + legend.height();\n                     availableHeight = nv.utils.availableHeight(height, container, margin);\n                     g.select('.nv-legendWrap')\n                         .attr('transform', 'translate(0,' + (availableHeight + xAxis.height())  +')');\n                } else {\n                    legend.width(availableWidth - controlWidth());\n\n                    g.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n\n                    g.select('.nv-legendWrap')\n                        .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n                }\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n                ];\n\n                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Main Chart Component(s)\n            multibar\n                .disabled(data.map(function(series) { return series.disabled }))\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.call(multibar);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');\n\n                xTicks\n                    .selectAll('line, text')\n                    .style('opacity', 1)\n\n                if (staggerLabels) {\n                    var getTranslate = function(x,y) {\n                        return \"translate(\" + x + \",\" + y + \")\";\n                    };\n\n                    var staggerUp = 5, staggerDown = 17;  //pixels to stagger by\n                    // Issue #140\n                    xTicks\n                        .selectAll(\"text\")\n                        .attr('transform', function(d,i,j) {\n                            return  getTranslate(0, (j % 2 == 0 ? staggerUp : staggerDown));\n                        });\n\n                    var totalInBetweenTicks = d3.selectAll(\".nv-x.nv-axis .nv-wrap g g text\")[0].length;\n                    g.selectAll(\".nv-x.nv-axis .nv-axisMaxMin text\")\n                        .attr(\"transform\", function(d,i) {\n                            return getTranslate(0, (i === 0 || totalInBetweenTicks % 2 !== 0) ? staggerDown : staggerUp);\n                        });\n                }\n\n                if (wrapLabels) {\n                    g.selectAll('.tick text')\n                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n                }\n\n                if (reduceXTicks)\n                    xTicks\n                        .filter(function(d,i) {\n                            return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;\n                        })\n                        .selectAll('text, line')\n                        .style('opacity', 0);\n\n                if(rotateLabels)\n                    xTicks\n                        .selectAll('.tick text')\n                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n\n                g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text')\n                    .style('opacity', 1);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                switch (d.key) {\n                    case 'Grouped':\n                    case controlLabels.grouped:\n                        multibar.stacked(false);\n                        break;\n                    case 'Stacked':\n                    case controlLabels.stacked:\n                        multibar.stacked(true);\n                        break;\n                }\n\n                state.stacked = multibar.stacked();\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                if (typeof e.stacked !== 'undefined') {\n                    multibar.stacked(e.stacked);\n                    state.stacked = e.stacked;\n                    stacked = e.stacked;\n                }\n                chart.update();\n            });\n\n            if (useInteractiveGuideline) {\n                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                    if (e.pointXValue == undefined) return;\n\n                    var singlePoint, pointIndex, pointXLocation, xValue, allData = [];\n                    data\n                        .filter(function(series, i) {\n                            series.seriesIndex = i;\n                            return !series.disabled;\n                        })\n                        .forEach(function(series,i) {\n                            pointIndex = x.domain().indexOf(e.pointXValue)\n\n                            var point = series.values[pointIndex];\n                            if (point === undefined) return;\n\n                            xValue = point.x;\n                            if (singlePoint === undefined) singlePoint = point;\n                            if (pointXLocation === undefined) pointXLocation = e.mouseX\n                            allData.push({\n                                key: series.key,\n                                value: chart.y()(point, pointIndex),\n                                color: color(series,series.seriesIndex),\n                                data: series.values[pointIndex]\n                            });\n                        });\n\n                    interactiveLayer.tooltip\n                        .data({\n                            value: xValue,\n                            index: pointIndex,\n                            series: allData\n                        })();\n\n                    interactiveLayer.renderGuideLine(pointXLocation);\n                });\n\n                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                    interactiveLayer.tooltip.hidden(true);\n                });\n            }\n            else {\n                multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n                    evt.value = chart.x()(evt.data);\n                    evt['series'] = {\n                        key: evt.data.key,\n                        value: chart.y()(evt.data),\n                        color: evt.color\n                    };\n                    tooltip.data(evt).hidden(false);\n                });\n\n                multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n\n                multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n            }\n        });\n\n        renderWatch.renderEnd('multibarchart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.multibar = multibar;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.state = state;\n    chart.tooltip = tooltip;\n    chart.interactiveLayer = interactiveLayer;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        reduceXTicks:    {get: function(){return reduceXTicks;}, set: function(_){reduceXTicks=_;}},\n        rotateLabels:    {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        staggerLabels:    {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        wrapLabels:   {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            multibar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n        }},\n        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n            multibar.barColor(_);\n            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, multibar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBarHorizontal = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getYerr = function(d) { return d.yErr }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , color = nv.utils.defaultColor()\n        , barColor = null // adding the ability to set the color for each rather than the whole group\n        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n        , stacked = false\n        , showValues = false\n        , showBarLabels = false\n        , valuePadding = 60\n        , groupSpacing = 0.1\n        , fillOpacity = 0.75\n        , valueFormat = d3.format(',.2f')\n        , delay = 1200\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , duration = 250\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0; //used to store previous scales\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            if (stacked)\n                data = d3.layout.stack()\n                    .offset('zero')\n                    .values(function(d){ return d.values })\n                    .y(getY)\n                (data);\n\n            //add series index and key to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                    point.key = series.key;\n                });\n            });\n\n            // HACK for negative value stacking\n            if (stacked)\n                data[0].values.map(function(d,i) {\n                    var posBase = 0, negBase = 0;\n                    data.map(function(d) {\n                        var f = d.values[i]\n                        f.size = Math.abs(f.y);\n                        if (f.y<0)  {\n                            f.y1 = negBase - f.size;\n                            negBase = negBase - f.size;\n                        } else\n                        {\n                            f.y1 = posBase;\n                            posBase = posBase + f.size;\n                        }\n                    });\n                });\n\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }\n                    })\n                });\n\n            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableHeight], groupSpacing);\n\n            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 + d.y : d.y1 ) : d.y }).concat(forceY)))\n\n            if (showValues && !stacked)\n                y.range(yRange || [(y.domain()[0] < 0 ? valuePadding : 0), availableWidth - (y.domain()[1] > 0 ? valuePadding : 0) ]);\n            else\n                y.range(yRange || [0, availableWidth]);\n\n            x0 = x0 || x;\n            y0 = y0 || d3.scale.linear().domain(y.domain()).range([y(0),y(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d,i) { return i });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit().watchTransition(renderWatch, 'multibarhorizontal: exit groups')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6)\n                .remove();\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i) });\n            groups.watchTransition(renderWatch, 'multibarhorizontal: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', fillOpacity);\n\n            var bars = groups.selectAll('g.nv-bar')\n                .data(function(d) { return d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('g')\n                .attr('transform', function(d,i,j) {\n                    return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : (j * x.rangeBand() / data.length ) + x(getX(d,i))) + ')'\n                });\n\n            barsEnter.append('rect')\n                .attr('width', 0)\n                .attr('height', x.rangeBand() / (stacked ? 1 : data.length) )\n\n            bars\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            if (getYerr(data[0],0)) {\n                barsEnter.append('polyline');\n\n                bars.select('polyline')\n                    .attr('fill', 'none')\n                    .attr('points', function(d,i) {\n                        var xerr = getYerr(d,i)\n                            , mid = 0.8 * x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n                        xerr = xerr.length ? xerr : [-Math.abs(xerr), Math.abs(xerr)];\n                        xerr = xerr.map(function(e) { return y(e + ((getY(d,i) < 0) ? 0 : getY(d,i))) - y(0); });\n                        var a = [[xerr[0],-mid], [xerr[0],mid], [xerr[0],0], [xerr[1],0], [xerr[1],-mid], [xerr[1],mid]];\n                        return a.map(function (path) { return path.join(',') }).join(' ');\n                    })\n                    .attr('transform', function(d,i) {\n                        var mid = x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n                        return 'translate(0, ' + mid + ')';\n                    });\n            }\n\n            barsEnter.append('text');\n\n            if (showValues && !stacked) {\n                bars.select('text')\n                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'end' : 'start' })\n                    .attr('y', x.rangeBand() / (data.length * 2))\n                    .attr('dy', '.32em')\n                    .text(function(d,i) {\n                        var t = valueFormat(getY(d,i))\n                            , yerr = getYerr(d,i);\n                        if (yerr === undefined)\n                            return t;\n                        if (!yerr.length)\n                            return t + '±' + valueFormat(Math.abs(yerr));\n                        return t + '+' + valueFormat(Math.abs(yerr[1])) + '-' + valueFormat(Math.abs(yerr[0]));\n                    });\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .select('text')\n                    .attr('x', function(d,i) { return getY(d,i) < 0 ? -4 : y(getY(d,i)) - y(0) + 4 })\n            } else {\n                bars.selectAll('text').text('');\n            }\n\n            if (showBarLabels && !stacked) {\n                barsEnter.append('text').classed('nv-bar-label',true);\n                bars.select('text.nv-bar-label')\n                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'start' : 'end' })\n                    .attr('y', x.rangeBand() / (data.length * 2))\n                    .attr('dy', '.32em')\n                    .text(function(d,i) { return getX(d,i) });\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .select('text.nv-bar-label')\n                    .attr('x', function(d,i) { return getY(d,i) < 0 ? y(0) - y(getY(d,i)) + 4 : -4 });\n            }\n            else {\n                bars.selectAll('text.nv-bar-label').text('');\n            }\n\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\n            if (barColor) {\n                if (!disabled) disabled = data.map(function() { return true });\n                bars\n                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n            }\n\n            if (stacked)\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .attr('transform', function(d,i) {\n                        return 'translate(' + y(d.y1) + ',' + x(getX(d,i)) + ')'\n                    })\n                    .select('rect')\n                    .attr('width', function(d,i) {\n                        return Math.abs(y(getY(d,i) + d.y0) - y(d.y0)) || 0\n                    })\n                    .attr('height', x.rangeBand() );\n            else\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .attr('transform', function(d,i) {\n                        //TODO: stacked must be all positive or all negative, not both?\n                        return 'translate(' +\n                            (getY(d,i) < 0 ? y(getY(d,i)) : y(0))\n                            + ',' +\n                            (d.series * x.rangeBand() / data.length\n                                +\n                                x(getX(d,i)) )\n                            + ')'\n                    })\n                    .select('rect')\n                    .attr('height', x.rangeBand() / data.length )\n                    .attr('width', function(d,i) {\n                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0\n                    });\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('multibarHorizontal immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        yErr:       {get: function(){return getYerr;}, set: function(_){getYerr=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n        // this shows the group name, seems pointless?\n        //showBarLabels:    {get: function(){return showBarLabels;}, set: function(_){showBarLabels=_;}},\n        disabled:     {get: function(){return disabled;}, set: function(_){disabled=_;}},\n        id:           {get: function(){return id;}, set: function(_){id=_;}},\n        valueFormat:  {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        valuePadding: {get: function(){return valuePadding;}, set: function(_){valuePadding=_;}},\n        groupSpacing: {get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n        fillOpacity:  {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        barColor:  {get: function(){return barColor;}, set: function(_){\n            barColor = _ ? nv.utils.getColor(_) : null;\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBarHorizontalChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var multibar = nv.models.multiBarHorizontal()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend().height(30)\n        , controls = nv.models.legend().height(30)\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , controlsPosition = 'top'        \n        , controlLabels = {}\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , stacked = false\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        , controlWidth = function() { return showControls ? 180 : 0 }\n        , duration = 250\n        ;\n\n    state.stacked = false; // DEPRECATED Maintained for backward compatibility\n\n    multibar.stacked(stacked);\n\n    xAxis\n        .orient('left')\n        .tickPadding(5)\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient('bottom')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                stacked: stacked\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.stacked !== undefined)\n                stacked = state.stacked;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(multibar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().duration(duration).call(chart) };\n            chart.container = this;\n\n            stacked = multibar.stacked();\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = multibar.xScale();\n            y = multibar.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth - controlWidth());\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n                if (legendPosition === 'bottom') {\n                     margin.bottom = xAxis.height() + legend.height();\n                     availableHeight = nv.utils.availableHeight(height, container, margin);\n                     g.select('.nv-legendWrap')\n                         .attr('transform', 'translate(' + controlWidth() + ',' + (availableHeight + xAxis.height())  +')');\n                } else if (legendPosition === 'top') {\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n\n                    g.select('.nv-legendWrap')\n                        .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n                }                    \n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n                ];\n\n                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n\n                if (controlsPosition === 'bottom') {\n                     margin.bottom = xAxis.height() + legend.height();\n                     availableHeight = nv.utils.availableHeight(height, container, margin);\n                    g.select('.nv-controlsWrap')\n                        .datum(controlsData)\n                        .attr('transform', 'translate(0,' + (availableHeight + xAxis.height()) +')')\n                        .call(controls);  \n\n                } else if (controlsPosition === 'top') {\n                    g.select('.nv-controlsWrap')\n                        .datum(controlsData)\n                        .attr('transform', 'translate(0,' + (-margin.top) +')')\n                        .call(controls);                        \n                }\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            multibar\n                .disabled(data.map(function(series) { return series.disabled }))\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.transition().call(multibar);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/24, data) )\n                    .tickSize(-availableWidth, 0);\n\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\n                xTicks\n                    .selectAll('line, text');\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .attr('transform', 'translate(0,' + availableHeight + ')');\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select(\".nv-zeroLine line\")\n                .attr(\"x1\", y(0))\n                .attr(\"x2\", y(0))\n                .attr(\"y1\", 0)\n                .attr(\"y2\", -availableHeight)\n            ;\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                switch (d.key) {\n                    case 'Grouped':\n                    case controlLabels.grouped:\n                        multibar.stacked(false);\n                        break;\n                    case 'Stacked':\n                    case controlLabels.stacked:\n                        multibar.stacked(true);\n                        break;\n                }\n\n                state.stacked = multibar.stacked();\n                dispatch.stateChange(state);\n                stacked = multibar.stacked();\n\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.stacked !== 'undefined') {\n                    multibar.stacked(e.stacked);\n                    state.stacked = e.stacked;\n                    stacked = e.stacked;\n                }\n\n                chart.update();\n            });\n        });\n        renderWatch.renderEnd('multibar horizontal chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.value = chart.x()(evt.data);\n        evt['series'] = {\n            key: evt.data.key,\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.multibar = multibar;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.state = state;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        controlsPosition: {get: function(){return controlsPosition;}, set: function(_){controlsPosition=_;}},\n        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            multibar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n            multibar.barColor(_);\n            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, multibar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.multiChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60},\n        marginTop = null,\n        color = nv.utils.defaultColor(),\n        width = null,\n        height = null,\n        showLegend = true,\n        noData = null,\n        yDomain1,\n        yDomain2,\n        getX = function(d) { return d.x },\n        getY = function(d) { return d.y},\n        interpolate = 'linear',\n        useVoronoi = true,\n        interactiveLayer = nv.interactiveGuideline(),\n        useInteractiveGuideline = false,\n        legendRightAxisHint = ' (right axis)',\n        duration = 250\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x = d3.scale.linear(),\n        yScale1 = d3.scale.linear(),\n        yScale2 = d3.scale.linear(),\n\n        lines1 = nv.models.line().yScale(yScale1).duration(duration),\n        lines2 = nv.models.line().yScale(yScale2).duration(duration),\n\n        scatters1 = nv.models.scatter().yScale(yScale1).duration(duration),\n        scatters2 = nv.models.scatter().yScale(yScale2).duration(duration),\n\n        bars1 = nv.models.multiBar().stacked(false).yScale(yScale1).duration(duration),\n        bars2 = nv.models.multiBar().stacked(false).yScale(yScale2).duration(duration),\n\n        stack1 = nv.models.stackedArea().yScale(yScale1).duration(duration),\n        stack2 = nv.models.stackedArea().yScale(yScale2).duration(duration),\n\n        xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5).duration(duration),\n        yAxis1 = nv.models.axis().scale(yScale1).orient('left').duration(duration),\n        yAxis2 = nv.models.axis().scale(yScale2).orient('right').duration(duration),\n\n        legend = nv.models.legend().height(30),\n        tooltip = nv.models.tooltip(),\n        dispatch = d3.dispatch();\n\n    var charts = [lines1, lines2, scatters1, scatters2, bars1, bars2, stack1, stack2];\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n\n            chart.update = function() { container.transition().call(chart); };\n            chart.container = this;\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            var dataLines1 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 1});\n            var dataLines2 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 2});\n            var dataScatters1 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 1});\n            var dataScatters2 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 2});\n            var dataBars1 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 1});\n            var dataBars2 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 2});\n            var dataStack1 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 1});\n            var dataStack2 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 2});\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var series1 = data.filter(function(d) {return !d.disabled && d.yAxis == 1})\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d), y: getY(d) }\n                    })\n                });\n\n            var series2 = data.filter(function(d) {return !d.disabled && d.yAxis == 2})\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d), y: getY(d) }\n                    })\n                });\n\n            x   .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x }))\n                .range([0, availableWidth]);\n\n            var wrap = container.selectAll('g.wrap.multiChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            gEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            gEnter.append('g').attr('class', 'stack1Wrap');\n            gEnter.append('g').attr('class', 'stack2Wrap');\n            gEnter.append('g').attr('class', 'bars1Wrap');\n            gEnter.append('g').attr('class', 'bars2Wrap');\n            gEnter.append('g').attr('class', 'scatters1Wrap');\n            gEnter.append('g').attr('class', 'scatters2Wrap');\n            gEnter.append('g').attr('class', 'lines1Wrap');\n            gEnter.append('g').attr('class', 'lines2Wrap');\n            gEnter.append('g').attr('class', 'legendWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            var g = wrap.select('g');\n\n            var color_array = data.map(function(d,i) {\n                return data[i].color || color(d, i);\n            });\n\n            // Legend\n            if (!showLegend) {\n                g.select('.legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n                var legendXPosition = legend.align() ? legendWidth : 0;\n\n                legend.width(legendWidth);\n                legend.color(color_array);\n\n                g.select('.legendWrap')\n                    .datum(data.map(function(series) {\n                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n                        series.key = series.originalKey + (series.yAxis == 1 ? '' : legendRightAxisHint);\n                        return series;\n                    }))\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.legendWrap')\n                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n            }\n\n            lines1\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line'}));\n            lines2\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line'}));\n            scatters1\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'scatter'}));\n            scatters2\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'scatter'}));\n            bars1\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar'}));\n            bars2\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar'}));\n            stack1\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area'}));\n            stack2\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area'}));\n\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var lines1Wrap = g.select('.lines1Wrap')\n                .datum(dataLines1.filter(function(d){return !d.disabled}));\n            var scatters1Wrap = g.select('.scatters1Wrap')\n                .datum(dataScatters1.filter(function(d){return !d.disabled}));\n            var bars1Wrap = g.select('.bars1Wrap')\n                .datum(dataBars1.filter(function(d){return !d.disabled}));\n            var stack1Wrap = g.select('.stack1Wrap')\n                .datum(dataStack1.filter(function(d){return !d.disabled}));\n            var lines2Wrap = g.select('.lines2Wrap')\n                .datum(dataLines2.filter(function(d){return !d.disabled}));\n            var scatters2Wrap = g.select('.scatters2Wrap')\n                .datum(dataScatters2.filter(function(d){return !d.disabled}));\n            var bars2Wrap = g.select('.bars2Wrap')\n                .datum(dataBars2.filter(function(d){return !d.disabled}));\n            var stack2Wrap = g.select('.stack2Wrap')\n                .datum(dataStack2.filter(function(d){return !d.disabled}));\n\n            var extraValue1BarStacked = [];\n            if (bars1.stacked() && dataBars1.length) {\n                var extraValue1BarStacked = dataBars1.filter(function(d){return !d.disabled}).map(function(a){return a.values});\n                \n                if (extraValue1BarStacked.length > 0)\n                    extraValue1BarStacked = extraValue1BarStacked.reduce(function(a,b){\n                        return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n                    });\n            }\n            if (dataBars1.length) {\n                extraValue1BarStacked.push({x:0, y:0});\n            }\n            \n            var extraValue2BarStacked = [];\n            if (bars2.stacked() && dataBars2.length) {\n                var extraValue2BarStacked = dataBars2.filter(function(d){return !d.disabled}).map(function(a){return a.values});\n                \n                if (extraValue2BarStacked.length > 0)\n                    extraValue2BarStacked = extraValue2BarStacked.reduce(function(a,b){\n                        return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n                    });\n            }\n            if (dataBars2.length) {\n                extraValue2BarStacked.push({x:0, y:0});\n            }\n            \n            yScale1 .domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1BarStacked), function(d) { return d.y } ))\n                .range([0, availableHeight]);\n\n            yScale2 .domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2BarStacked), function(d) { return d.y } ))\n                .range([0, availableHeight]);\n\n            lines1.yDomain(yScale1.domain());\n            scatters1.yDomain(yScale1.domain());\n            bars1.yDomain(yScale1.domain());\n            stack1.yDomain(yScale1.domain());\n\n            lines2.yDomain(yScale2.domain());\n            scatters2.yDomain(yScale2.domain());\n            bars2.yDomain(yScale2.domain());\n            stack2.yDomain(yScale2.domain());\n\n            if(dataStack1.length){d3.transition(stack1Wrap).call(stack1);}\n            if(dataStack2.length){d3.transition(stack2Wrap).call(stack2);}\n\n            if(dataBars1.length){d3.transition(bars1Wrap).call(bars1);}\n            if(dataBars2.length){d3.transition(bars2Wrap).call(bars2);}\n\n            if(dataLines1.length){d3.transition(lines1Wrap).call(lines1);}\n            if(dataLines2.length){d3.transition(lines2Wrap).call(lines2);}\n\n            if(dataScatters1.length){d3.transition(scatters1Wrap).call(scatters1);}\n            if(dataScatters2.length){d3.transition(scatters2Wrap).call(scatters2);}\n\n            xAxis\n                ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                .tickSize(-availableHeight, 0);\n\n            g.select('.nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + availableHeight + ')');\n            d3.transition(g.select('.nv-x.nv-axis'))\n                .call(xAxis);\n\n            yAxis1\n                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                .tickSize( -availableWidth, 0);\n\n\n            d3.transition(g.select('.nv-y1.nv-axis'))\n                .call(yAxis1);\n\n            yAxis2\n                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                .tickSize( -availableWidth, 0);\n\n            d3.transition(g.select('.nv-y2.nv-axis'))\n                .call(yAxis2);\n\n            g.select('.nv-y1.nv-axis')\n                .classed('nv-disabled', series1.length ? false : true)\n                .attr('transform', 'translate(' + x.range()[0] + ',0)');\n\n            g.select('.nv-y2.nv-axis')\n                .classed('nv-disabled', series2.length ? false : true)\n                .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n            legend.dispatch.on('stateChange', function(newState) {\n                chart.update();\n            });\n\n            if(useInteractiveGuideline){\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching\n            //------------------------------------------------------------\n\n            function mouseover_line(evt) {\n                var yaxis = evt.series.yAxis === 2 ? yAxis2 : yAxis1;\n                evt.value = evt.point.x;\n                evt.series = {\n                    value: evt.point.y,\n                    color: evt.point.color,\n                    key: evt.series.key\n                };\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_scatter(evt) {\n                var yaxis = evt.series.yAxis === 2 ? yAxis2 : yAxis1;\n                evt.value = evt.point.x;\n                evt.series = {\n                    value: evt.point.y,\n                    color: evt.point.color,\n                    key: evt.series.key\n                };\n                tooltip\n                    .duration(100)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_stack(evt) {\n                var yaxis = evt.series.yAxis === 2 ? yAxis2 : yAxis1;\n                evt.point['x'] = stack1.x()(evt.point);\n                evt.point['y'] = stack1.y()(evt.point);\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_bar(evt) {\n                var yaxis = evt.series.yAxis === 2 ? yAxis2 : yAxis1;\n\n                evt.value = bars1.x()(evt.data);\n                evt['series'] = {\n                    value: bars1.y()(evt.data),\n                    color: evt.color,\n                    key: evt.data.key\n                };\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n\n\n            function clearHighlights() {\n              for(var i=0, il=charts.length; i < il; i++){\n                var chart = charts[i];\n                try {\n                  chart.clearHighlights();\n                } catch(e){}\n              }\n            }\n\n            function highlightPoint(serieIndex, pointIndex, b){\n              for(var i=0, il=charts.length; i < il; i++){\n                var chart = charts[i];\n                try {\n                  chart.highlightPoint(serieIndex, pointIndex, b);\n                } catch(e){}\n              }\n            }\n\n            if(useInteractiveGuideline){\n                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                    clearHighlights();\n                    var singlePoint, pointIndex, pointXLocation, allData = [];\n                    data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        var extent = x.domain();\n                        var currentValues = series.values.filter(function(d,i) {\n                            return chart.x()(d,i) >= extent[0] && chart.x()(d,i) <= extent[1];\n                        });\n\n                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, chart.x());\n                        var point = currentValues[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue !== null) {\n                            highlightPoint(i, pointIndex, true);\n                        }\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = x(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: pointYValue,\n                            color: color(series,series.seriesIndex),\n                            data: point,\n                            yAxis: series.yAxis == 2 ? yAxis2 : yAxis1\n                        });\n                    });\n\n                    var defaultValueFormatter = function(d,i) {\n                        var yAxis = allData[i].yAxis;\n                        return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n                    };\n\n                    interactiveLayer.tooltip\n                        .headerFormatter(function(d, i) {\n                            return xAxis.tickFormat()(d, i);\n                        })\n                        .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n                        .data({\n                            value: chart.x()( singlePoint,pointIndex ),\n                            index: pointIndex,\n                            series: allData\n                        })();\n\n                    interactiveLayer.renderGuideLine(pointXLocation);\n                });\n\n                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                    clearHighlights();\n                });\n            } else {\n                lines1.dispatch.on('elementMouseover.tooltip', mouseover_line);\n                lines2.dispatch.on('elementMouseover.tooltip', mouseover_line);\n                lines1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                lines2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                scatters1.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n                scatters2.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n                scatters1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                scatters2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                stack1.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n                stack2.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n                stack1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                stack2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                bars1.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n                bars2.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n\n                bars1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n                bars2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n                bars1.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n                bars2.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n            }\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Global getters and setters\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.legend = legend;\n    chart.lines1 = lines1;\n    chart.lines2 = lines2;\n    chart.scatters1 = scatters1;\n    chart.scatters2 = scatters2;\n    chart.bars1 = bars1;\n    chart.bars2 = bars2;\n    chart.stack1 = stack1;\n    chart.stack2 = stack2;\n    chart.xAxis = xAxis;\n    chart.yAxis1 = yAxis1;\n    chart.yAxis2 = yAxis2;\n    chart.tooltip = tooltip;\n    chart.interactiveLayer = interactiveLayer;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        yDomain1:      {get: function(){return yDomain1;}, set: function(_){yDomain1=_;}},\n        yDomain2:    {get: function(){return yDomain2;}, set: function(_){yDomain2=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            lines1.x(_);\n            lines2.x(_);\n            scatters1.x(_);\n            scatters2.x(_);\n            bars1.x(_);\n            bars2.x(_);\n            stack1.x(_);\n            stack2.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            lines1.y(_);\n            lines2.y(_);\n            scatters1.y(_);\n            scatters2.y(_);\n            stack1.y(_);\n            stack2.y(_);\n            bars1.y(_);\n            bars2.y(_);\n        }},\n        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n            useVoronoi=_;\n            lines1.useVoronoi(_);\n            lines2.useVoronoi(_);\n            stack1.useVoronoi(_);\n            stack2.useVoronoi(_);\n        }},\n\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (useInteractiveGuideline) {\n                lines1.interactive(false);\n                lines1.useVoronoi(false);\n                lines2.interactive(false);\n                lines2.useVoronoi(false);\n                stack1.interactive(false);\n                stack1.useVoronoi(false);\n                stack2.interactive(false);\n                stack2.useVoronoi(false);\n                scatters1.interactive(false);\n                scatters2.interactive(false);\n            }\n        }},\n\n        duration: {get: function(){return duration;}, set: function(_) {\n            duration = _;\n            [lines1, lines2, stack1, stack2, scatters1, scatters2, xAxis, yAxis1, yAxis2].forEach(function(model){\n              model.duration(duration);\n            });\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.ohlcBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getOpen = function(d) { return d.open }\n        , getClose = function(d) { return d.close }\n        , getHigh = function(d) { return d.high }\n        , getLow = function(d) { return d.low }\n        , forceX = []\n        , forceY = []\n        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , interactive = false\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // ohlc bar width.\n            var w = (availableWidth / data[0].values.length) * .9;\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [5 + w/2, availableWidth - w/2 - 5]);\n\n            y.domain(yDomain || [\n                    d3.min(data[0].values.map(getLow).concat(forceY)),\n                    d3.max(data[0].values.map(getHigh).concat(forceY))\n                ]\n            ).range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-ticks');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n                .data(function(d) { return d });\n            ticks.exit().remove();\n\n            ticks.enter().append('path')\n                .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })\n                .attr('d', function(d,i) {\n                    return 'm0,0l0,'\n                        + (y(getOpen(d,i))\n                            - y(getHigh(d,i)))\n                        + 'l'\n                        + (-w/2)\n                        + ',0l'\n                        + (w/2)\n                        + ',0l0,'\n                        + (y(getLow(d,i)) - y(getOpen(d,i)))\n                        + 'l0,'\n                        + (y(getClose(d,i))\n                            - y(getLow(d,i)))\n                        + 'l'\n                        + (w/2)\n                        + ',0l'\n                        + (-w/2)\n                        + ',0z';\n                })\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n                .attr('fill', function(d,i) { return color[0]; })\n                .attr('stroke', function(d,i) { return color[0]; })\n                .attr('x', 0 )\n                .attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })\n                .attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) });\n\n            // the bar colors are controlled by CSS currently\n            ticks.attr('class', function(d,i,j) {\n                return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i;\n            });\n\n            d3.transition(ticks)\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n                .attr('d', function(d,i) {\n                    var w = (availableWidth / data[0].values.length) * .9;\n                    return 'm0,0l0,'\n                        + (y(getOpen(d,i))\n                            - y(getHigh(d,i)))\n                        + 'l'\n                        + (-w/2)\n                        + ',0l'\n                        + (w/2)\n                        + ',0l0,'\n                        + (y(getLow(d,i))\n                            - y(getOpen(d,i)))\n                        + 'l0,'\n                        + (y(getClose(d,i))\n                            - y(getLow(d,i)))\n                        + 'l'\n                        + (w/2)\n                        + ',0l'\n                        + (-w/2)\n                        + ',0z';\n                });\n        });\n\n        return chart;\n    }\n\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        chart.clearHighlights();\n        container.select(\".nv-ohlcBar .nv-tick-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container.select(\".nv-ohlcBar .nv-tick.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:   {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:       {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n// Code adapted from Jason Davies' \"Parallel Coordinates\"\n// http://bl.ocks.org/jasondavies/1341281\nnv.models.parallelCoordinates = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 30, right: 0, bottom: 10, left: 0}\n        , width = null\n        , height = null\n        , availableWidth = null\n        , availableHeight = null\n        , x = d3.scale.ordinal()\n        , y = {}\n        , undefinedValuesLabel = \"undefined values\"\n        , dimensionData = []\n        , enabledDimensions = []\n        , dimensionNames = []\n        , displayBrush = true\n        , color = nv.utils.defaultColor()\n        , filters = []\n        , active = []\n        , dragging = []\n        , axisWithUndefinedValues = []\n        , lineTension = 1\n        , foreground\n        , background\n        , dimensions\n        , line = d3.svg.line()\n        , axis = d3.svg.axis()\n        , dispatch = d3.dispatch('brushstart', 'brush', 'brushEnd', 'dimensionsOrder', \"stateChange\", 'elementClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd', 'activeChanged')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var container = d3.select(this);\n            availableWidth = nv.utils.availableWidth(width, container, margin);\n            availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n           //Convert old data to new format (name, values)\n            if (data[0].values === undefined) {\n                var newData = [];\n                data.forEach(function (d) {\n                        var val = {};\n                        var key = Object.keys(d);\n                        key.forEach(function (k) { if (k !== \"name\") val[k] = d[k] });\n                        newData.push({ key: d.name, values: val });\n                });\n                data = newData;\n            }\n\n            var dataValues = data.map(function (d) {return d.values});\n            if (active.length === 0) {\n                active = data;\n            }; //set all active before first brush call\n            \n            dimensionNames = dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; }).map(function (d) { return d.key });\n            enabledDimensions = dimensionData.filter(function (d) { return !d.disabled; });\n            \n            // Setup Scales\n            x.rangePoints([0, availableWidth], 1).domain(enabledDimensions.map(function (d) { return d.key; }));\n\n            //Set as true if all values on an axis are missing.\n            // Extract the list of dimensions and create a scale for each.\n            var oldDomainMaxValue = {};\n            var displayMissingValuesline = false;\n            var currentTicks = [];\n            \n            dimensionNames.forEach(function(d) {\n                var extent = d3.extent(dataValues, function (p) { return +p[d]; });\n                var min = extent[0];\n                var max = extent[1];\n                var onlyUndefinedValues = false;\n                //If there is no values to display on an axis, set the extent to 0\n                if (isNaN(min) || isNaN(max)) {\n                    onlyUndefinedValues = true;\n                    min = 0;\n                    max = 0;\n                }\n                //Scale axis if there is only one value\n                if (min === max) {\n                    min = min - 1;\n                    max = max + 1;\n                }\n                var f = filters.filter(function (k) { return k.dimension == d; });\n                if (f.length !== 0) {\n                    //If there is only NaN values, keep the existing domain.\n                    if (onlyUndefinedValues) {\n                        min = y[d].domain()[0];\n                        max = y[d].domain()[1];\n                    }\n                        //If the brush extent is > max (< min), keep the extent value.\n                    else if (!f[0].hasOnlyNaN && displayBrush) {\n                        min = min > f[0].extent[0] ? f[0].extent[0] : min;\n                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n                    }\n                        //If there is NaN values brushed be sure the brush extent is on the domain.\n                    else if (f[0].hasNaN) {\n                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n                        oldDomainMaxValue[d] = y[d].domain()[1];\n                        displayMissingValuesline = true;\n                    }\n                }\n                //Use 90% of (availableHeight - 12) for the axis range, 12 reprensenting the space necessary to display \"undefined values\" text.\n                //The remaining 10% are used to display the missingValue line.\n                y[d] = d3.scale.linear()\n                    .domain([min, max])\n                    .range([(availableHeight - 12) * 0.9, 0]);\n\n                axisWithUndefinedValues = [];\n                y[d].brush = d3.svg.brush().y(y[d]).on('brushstart', brushstart).on('brush', brush).on('brushend', brushend);\n            });\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinates').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinates');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates background');\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates foreground');\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates missingValuesline');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            line.interpolate('cardinal').tension(lineTension);\n            axis.orient('left');\n            var axisDrag = d3.behavior.drag()\n                        .on('dragstart', dragStart)\n                        .on('drag', dragMove)\n                        .on('dragend', dragEnd);\n\n            //Add missing value line at the bottom of the chart\n            var missingValuesline, missingValueslineText;\n            var step = x.range()[1] - x.range()[0];\n            step = isNaN(step) ? x.range()[0] : step;\n            if (!isNaN(step)) {\n                var lineData = [0 + step / 2, availableHeight - 12, availableWidth - step / 2, availableHeight - 12];\n                missingValuesline = wrap.select('.missingValuesline').selectAll('line').data([lineData]);\n                missingValuesline.enter().append('line');\n                missingValuesline.exit().remove();\n                missingValuesline.attr(\"x1\", function(d) { return d[0]; })\n                        .attr(\"y1\", function(d) { return d[1]; })\n                        .attr(\"x2\", function(d) { return d[2]; })\n                        .attr(\"y2\", function(d) { return d[3]; });\n    \n                //Add the text \"undefined values\" under the missing value line\n                missingValueslineText = wrap.select('.missingValuesline').selectAll('text').data([undefinedValuesLabel]);\n                missingValueslineText.append('text').data([undefinedValuesLabel]);\n                missingValueslineText.enter().append('text');\n                missingValueslineText.exit().remove();\n                missingValueslineText.attr(\"y\", availableHeight)\n                        //To have the text right align with the missingValues line, substract 92 representing the text size.\n                        .attr(\"x\", availableWidth - 92 - step / 2)\n                        .text(function(d) { return d; });\n            }\n            // Add grey background lines for context.\n            background = wrap.select('.background').selectAll('path').data(data);\n            background.enter().append('path');\n            background.exit().remove();\n            background.attr('d', path);\n\n            // Add blue foreground lines for focus.\n            foreground = wrap.select('.foreground').selectAll('path').data(data);\n            foreground.enter().append('path')\n            foreground.exit().remove();\n            foreground.attr('d', path)\n                .style(\"stroke-width\", function (d, i) {\n                if (isNaN(d.strokeWidth)) { d.strokeWidth = 1;} return d.strokeWidth;})\n                .attr('stroke', function (d, i) { return d.color || color(d, i); });\n            foreground.on(\"mouseover\", function (d, i) {\n                d3.select(this).classed('hover', true).style(\"stroke-width\", d.strokeWidth + 2 + \"px\").style(\"stroke-opacity\", 1);\n                dispatch.elementMouseover({\n                    label: d.name,\n                    color: d.color || color(d, i),\n                    values: d.values,\n                    dimensions: enabledDimensions\n                });\n\n            });\n            foreground.on(\"mouseout\", function (d, i) {\n                d3.select(this).classed('hover', false).style(\"stroke-width\", d.strokeWidth + \"px\").style(\"stroke-opacity\", 0.7);\n                dispatch.elementMouseout({\n                    label: d.name,\n                    index: i\n                });\n            });\n            foreground.on('mousemove', function (d, i) {\n                dispatch.elementMousemove();\n            });\n            foreground.on('click', function (d) {\n                dispatch.elementClick({\n                    id: d.id\n                });\n            });\n            // Add a group element for each dimension.\n            dimensions = g.selectAll('.dimension').data(enabledDimensions);\n            var dimensionsEnter = dimensions.enter().append('g').attr('class', 'nv-parallelCoordinates dimension');\n\n            dimensions.attr('transform', function(d) { return 'translate(' + x(d.key) + ',0)'; });\n            dimensionsEnter.append('g').attr('class', 'nv-axis');\n\n            // Add an axis and title.\n            dimensionsEnter.append('text')\n                .attr('class', 'nv-label')\n                .style(\"cursor\", \"move\")\n                .attr('dy', '-1em')\n                .attr('text-anchor', 'middle')\n                .on(\"mouseover\", function(d, i) {\n                    dispatch.elementMouseover({\n                        label: d.tooltip || d.key,\n                        color: d.color \n                    });\n                })\n                .on(\"mouseout\", function(d, i) {\n                    dispatch.elementMouseout({\n                        label: d.tooltip\n                    });\n                })\n                .on('mousemove', function (d, i) {\n                    dispatch.elementMousemove();\n                })\n                .call(axisDrag);\n\n            dimensionsEnter.append('g').attr('class', 'nv-brushBackground');\n            dimensions.exit().remove();\n            dimensions.select('.nv-label').text(function (d) { return d.key });\n\n            // Add and store a brush for each axis.\n            restoreBrush(displayBrush);\n\n            var actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); }),\n                    extents = actives.map(function (p) { return y[p].brush.extent(); });\n            var formerActive = active.slice(0);\n\n            //Restore active values\n            active = [];\n            foreground.style(\"display\", function (d) {\n                var isActive = actives.every(function (p, i) {\n                    if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) {\n                        return true;\n                    }\n                    return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n                });\n                if (isActive)\n                    active.push(d);\n                return !isActive ? \"none\" : null;\n\n            });\n\n            if (filters.length > 0 || !nv.utils.arrayEquals(active, formerActive)) {\n               dispatch.activeChanged(active);\n            }\n\n            // Returns the path for a given data point.\n            function path(d) {\n                return line(enabledDimensions.map(function (p) {\n                    //If value if missing, put the value on the missing value line\n                    if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key])) || displayMissingValuesline) {\n                        var domain = y[p.key].domain();\n                        var range = y[p.key].range();\n                        var min = domain[0] - (domain[1] - domain[0]) / 9;\n\n                        //If it's not already the case, allow brush to select undefined values\n                        if (axisWithUndefinedValues.indexOf(p.key) < 0) {\n\n                            var newscale = d3.scale.linear().domain([min, domain[1]]).range([availableHeight - 12, range[1]]);\n                            y[p.key].brush.y(newscale);\n                            axisWithUndefinedValues.push(p.key);\n                        }\n                        if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key]))) {\n                            return [x(p.key), y[p.key](min)];\n                        }\n                    }\n\n                    //If parallelCoordinate contain missing values show the missing values line otherwise, hide it.\n                    if (missingValuesline !== undefined) {\n                        if (axisWithUndefinedValues.length > 0 || displayMissingValuesline) {\n                            missingValuesline.style(\"display\", \"inline\");\n                            missingValueslineText.style(\"display\", \"inline\");\n                        } else {\n                            missingValuesline.style(\"display\", \"none\");\n                            missingValueslineText.style(\"display\", \"none\");\n                        }\n                    }\n                    return [x(p.key), y[p.key](d.values[p.key])];\n                }));\n            }\n\n            function restoreBrush(visible) {\n                filters.forEach(function (f) {\n                    //If filter brushed NaN values, keep the brush on the bottom of the axis.\n                    var brushDomain = y[f.dimension].brush.y().domain();\n                    if (f.hasOnlyNaN) {\n                        f.extent[1] = (y[f.dimension].domain()[1] - brushDomain[0]) * (f.extent[1] - f.extent[0]) / (oldDomainMaxValue[f.dimension] - f.extent[0]) + brushDomain[0];\n                    }\n                    if (f.hasNaN) {\n                        f.extent[0] = brushDomain[0];\n                    }\n                    if (visible)\n                        y[f.dimension].brush.extent(f.extent);\n                });\n                \n                dimensions.select('.nv-brushBackground')\n                    .each(function (d) {\n                        d3.select(this).call(y[d.key].brush);\n\n                    })\n                    .selectAll('rect')\n                    .attr('x', -8)\n                    .attr('width', 16);\n                \n                updateTicks();\n            }\n            \n            // Handles a brush event, toggling the display of foreground lines.\n            function brushstart() {\n                //If brush aren't visible, show it before brushing again.\n                if (displayBrush === false) {\n                    displayBrush = true;\n                    restoreBrush(true);\n                }\n            }\n            \n            // Handles a brush event, toggling the display of foreground lines.\n            function brush() {\n                actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); });\n                extents = actives.map(function(p) { return y[p].brush.extent(); });\n\n                filters = []; //erase current filters\n                actives.forEach(function(d,i) {\n                    filters[i] = {\n                        dimension: d,\n                        extent: extents[i],\n                        hasNaN: false,\n                        hasOnlyNaN: false\n                    }\n                });\n\n                active = []; //erase current active list\n                foreground.style('display', function(d) {\n                    var isActive = actives.every(function(p, i) {\n                        if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) return true;\n                        return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n                    });\n                    if (isActive) active.push(d);\n                    return isActive ? null : 'none';\n                });\n                \n                updateTicks();\n                \n                dispatch.brush({\n                    filters: filters,\n                    active: active\n                });\n            }\n            function brushend() {\n                var hasActiveBrush = actives.length > 0 ? true : false;\n                filters.forEach(function (f) {\n                    if (f.extent[0] === y[f.dimension].brush.y().domain()[0] && axisWithUndefinedValues.indexOf(f.dimension) >= 0)\n                        f.hasNaN = true;\n                    if (f.extent[1] < y[f.dimension].domain()[0])\n                        f.hasOnlyNaN = true;\n                });\n                dispatch.brushEnd(active, hasActiveBrush);\n            }           \n            function updateTicks() {\n                dimensions.select('.nv-axis')\n                    .each(function (d, i) {\n                        var f = filters.filter(function (k) { return k.dimension == d.key; });\n                        currentTicks[d.key] = y[d.key].domain();\n                        \n                        //If brush are available, display brush extent\n                        if (f.length != 0 && displayBrush)\n                        {\n                            currentTicks[d.key] = [];\n                            if (f[0].extent[1] > y[d.key].domain()[0]) \n                                currentTicks[d.key] = [f[0].extent[1]];\n                            if (f[0].extent[0] >= y[d.key].domain()[0])\n                                currentTicks[d.key].push(f[0].extent[0]);    \n                        }\n                            \n                        d3.select(this).call(axis.scale(y[d.key]).tickFormat(d.format).tickValues(currentTicks[d.key]));\n                });\n            }\n            function dragStart(d) {\n                dragging[d.key] = this.parentNode.__origin__ = x(d.key);\n                background.attr(\"visibility\", \"hidden\");\n            }\n            function dragMove(d) {\n                dragging[d.key] = Math.min(availableWidth, Math.max(0, this.parentNode.__origin__ += d3.event.x));\n                foreground.attr(\"d\", path);\n                enabledDimensions.sort(function (a, b) { return dimensionPosition(a.key) - dimensionPosition(b.key); });\n                enabledDimensions.forEach(function (d, i) { return d.currentPosition = i; });\n                x.domain(enabledDimensions.map(function (d) { return d.key; }));\n                dimensions.attr(\"transform\", function(d) { return \"translate(\" + dimensionPosition(d.key) + \")\"; });\n            }\n            function dragEnd(d, i) {\n                delete this.parentNode.__origin__;\n                delete dragging[d.key];\n                d3.select(this.parentNode).attr(\"transform\", \"translate(\" + x(d.key) + \")\");\n                foreground\n                  .attr(\"d\", path);\n                background\n                  .attr(\"d\", path)\n                  .attr(\"visibility\", null);\n\n                dispatch.dimensionsOrder(enabledDimensions);\n            }\n            function dimensionPosition(d) {\n                var v = dragging[d];\n                return v == null ? x(d) : v;\n            }\n        });\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:         {get: function(){return width;},           set: function(_){width= _;}},\n        height:        {get: function(){return height;},          set: function(_){height= _;}},\n        dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n        displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n        filters: { get: function () { return filters; }, set: function (_) { filters = _; } },\n        active: { get: function () { return active; }, set: function (_) { active = _; } },\n        lineTension:   {get: function(){return lineTension;},     set: function(_){lineTension = _;}},\n        undefinedValuesLabel : {get: function(){return undefinedValuesLabel;}, set: function(_){undefinedValuesLabel=_;}},\n        \n        // deprecated options\n        dimensions: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensions', 'use dimensionData instead');\n            if (dimensionData.length === 0) {\n                _.forEach(function (k) { dimensionData.push({ key: k }) })\n            } else {\n                _.forEach(function (k, i) { dimensionData[i].key= k })\n            }\n        }},\n        dimensionNames: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensionNames', 'use dimensionData instead');\n            dimensionNames = [];\n            if (dimensionData.length === 0) {\n                _.forEach(function (k) { dimensionData.push({ key: k }) })\n            } else {\n                _.forEach(function (k, i) { dimensionData[i].key = k })\n            }\n \n        }},\n        dimensionFormats: {get: function () { return dimensionData.map(function (d) { return d.format }); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensionFormats', 'use dimensionData instead');\n            if (dimensionData.length === 0) {\n                _.forEach(function (f) { dimensionData.push({ format: f }) })\n            } else {\n                _.forEach(function (f, i) { dimensionData[i].format = f })\n            }\n\n        }},\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    =  _.top    !== undefined ? _.top    : margin.top;\n            margin.right  =  _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom =  _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   =  _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.parallelCoordinatesChart = function () {\n        \"use strict\";\n        //============================================================\n        // Public Variables with Default Settings\n        //------------------------------------------------------------\n\n        var parallelCoordinates = nv.models.parallelCoordinates()\n        var legend = nv.models.legend()\n        var tooltip = nv.models.tooltip();\n        var dimensionTooltip = nv.models.tooltip();\n\n        var margin = { top: 0, right: 0, bottom: 0, left: 0 }\n        , marginTop = null\n        , width = null\n        , height = null\n        , showLegend = true\n        , color = nv.utils.defaultColor()\n        , state = nv.utils.state()\n        , dimensionData = []\n        , displayBrush = true\n        , defaultState = null\n        , noData = null\n        , nanValue = \"undefined\"\n        , dispatch = d3.dispatch('dimensionsOrder', 'brushEnd', 'stateChange', 'changeState', 'renderEnd')\n        , controlWidth = function () { return showControls ? 180 : 0 }\n        ;\n\n\t    //============================================================\n\n\t\t//============================================================\n        // Private Variables\n        //------------------------------------------------------------\n\n        var renderWatch = nv.utils.renderWatch(dispatch);\n\n        var stateGetter = function(data) {\n            return function() {\n                return {\n                    active: data.map(function(d) { return !d.disabled })\n                };\n            }\n        };\n\n        var stateSetter = function(data) {\n            return function(state) {\n                if(state.active !== undefined) {\n                    data.forEach(function(series, i) {\n                        series.disabled = !state.active[i];\n                    });\n                }\n            }\n        };\n\n        tooltip.contentGenerator(function(data) {\n            var str = '<table><thead><tr><td class=\"legend-color-guide\"><div style=\"background-color:' + data.color + '\"></div></td><td><strong>' + data.key + '</strong></td></tr></thead>';\n            if(data.series.length !== 0)\n            {\n                str = str + '<tbody><tr><td height =\"10px\"></td></tr>';\n                data.series.forEach(function(d){\n                    str = str + '<tr><td class=\"legend-color-guide\"><div style=\"background-color:' + d.color + '\"></div></td><td class=\"key\">' + d.key + '</td><td class=\"value\">' + d.value + '</td></tr>';\n                });\n                str = str + '</tbody>';\n            }\n            str = str + '</table>';\n            return str;\n        });\n\n        //============================================================\n        // Chart function\n        //------------------------------------------------------------\n\n        function chart(selection) {\n            renderWatch.reset();\n            renderWatch.models(parallelCoordinates);\n\n            selection.each(function(data) {\n                var container = d3.select(this);\n                nv.utils.initSVG(container);\n\n                var that = this;\n\n                var availableWidth = nv.utils.availableWidth(width, container, margin),\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n\n                chart.update = function() { container.call(chart); };\n                chart.container = this;\n\n                state.setter(stateSetter(dimensionData), chart.update)\n                    .getter(stateGetter(dimensionData))\n                    .update();\n\n                //set state.disabled\n                state.disabled = dimensionData.map(function (d) { return !!d.disabled });\n\n                //Keep dimensions position in memory\n                dimensionData = dimensionData.map(function (d) {d.disabled = !!d.disabled; return d});\n                dimensionData.forEach(function (d, i) {\n                    d.originalPosition = isNaN(d.originalPosition) ? i : d.originalPosition;\n                    d.currentPosition = isNaN(d.currentPosition) ? i : d.currentPosition;\n                });\n\n               if (!defaultState) {\n                    var key;\n                    defaultState = {};\n                    for(key in state) {\n                        if(state[key] instanceof Array)\n                            defaultState[key] = state[key].slice(0);\n                        else\n                            defaultState[key] = state[key];\n                    }\n                }\n\n                // Display No Data message if there's nothing to show.\n                if(!data || !data.length) {\n                    nv.utils.noData(chart, container);\n                    return chart;\n                } else {\n                    container.selectAll('.nv-noData').remove();\n                }\n\n                //------------------------------------------------------------\n                // Setup containers and skeleton of chart\n\n                var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinatesChart').data([data]);\n                var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinatesChart').append('g');\n\n                var g = wrap.select('g');\n\n                gEnter.append('g').attr('class', 'nv-parallelCoordinatesWrap');\n                gEnter.append('g').attr('class', 'nv-legendWrap');\n\n                g.select(\"rect\")\n                    .attr(\"width\", availableWidth)\n                    .attr(\"height\", (availableHeight > 0) ? availableHeight : 0);\n\n                // Legend\n                if (!showLegend) {\n                    g.select('.nv-legendWrap').selectAll('*').remove();\n                } else {\n                    legend.width(availableWidth)\n                        .color(function (d) { return \"rgb(188,190,192)\"; });\n\n                    g.select('.nv-legendWrap')\n                        .datum(dimensionData.sort(function (a, b) { return a.originalPosition - b.originalPosition; }))\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n                    wrap.select('.nv-legendWrap')\n                       .attr('transform', 'translate( 0 ,' + (-margin.top) + ')');\n                }\n                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n                // Main Chart Component(s)\n                parallelCoordinates\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .dimensionData(dimensionData)\n                    .displayBrush(displayBrush);\n\n\t\t        var parallelCoordinatesWrap = g.select('.nv-parallelCoordinatesWrap ')\n                  .datum(data);\n\n\t\t        parallelCoordinatesWrap.transition().call(parallelCoordinates);\n\n\t\t\t\t//============================================================\n                // Event Handling/Dispatching (in chart's scope)\n                //------------------------------------------------------------\n                //Display reset brush button\n\t\t        parallelCoordinates.dispatch.on('brushEnd', function (active, hasActiveBrush) {\n\t\t            if (hasActiveBrush) {\n\t\t                displayBrush = true;\n\t\t                dispatch.brushEnd(active);\n\t\t            } else {\n\n\t\t                displayBrush = false;\n\t\t            }\n\t\t        });\n\n\t\t        legend.dispatch.on('stateChange', function(newState) {\n\t\t            for(var key in newState) {\n\t\t                state[key] = newState[key];\n\t\t            }\n\t\t            dispatch.stateChange(state);\n\t\t            chart.update();\n\t\t        });\n\n                //Update dimensions order and display reset sorting button\n\t\t        parallelCoordinates.dispatch.on('dimensionsOrder', function (e) {\n\t\t            dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; });\n\t\t            var isSorted = false;\n\t\t            dimensionData.forEach(function (d, i) {\n\t\t                d.currentPosition = i;\n\t\t                if (d.currentPosition !== d.originalPosition)\n\t\t                    isSorted = true;\n\t\t            });\n\t\t            dispatch.dimensionsOrder(dimensionData, isSorted);\n\t\t        });\n\n\t\t\t\t// Update chart from a state object passed to event handler\n                dispatch.on('changeState', function (e) {\n\n                    if (typeof e.disabled !== 'undefined') {\n                        dimensionData.forEach(function (series, i) {\n                            series.disabled = e.disabled[i];\n                        });\n                        state.disabled = e.disabled;\n                    }\n                    chart.update();\n                });\n            });\n\n            renderWatch.renderEnd('parraleleCoordinateChart immediate');\n            return chart;\n        }\n\n\t\t//============================================================\n        // Event Handling/Dispatching (out of chart's scope)\n        //------------------------------------------------------------\n\n        parallelCoordinates.dispatch.on('elementMouseover.tooltip', function (evt) {\n            var tp = {\n                key: evt.label,\n                color: evt.color,\n                series: []\n             }\n            if(evt.values){\n                Object.keys(evt.values).forEach(function (d) {\n                    var dim = evt.dimensions.filter(function (dd) {return dd.key === d;})[0];\n                    if(dim){\n                        var v;\n                        if (isNaN(evt.values[d]) || isNaN(parseFloat(evt.values[d]))) {\n                            v = nanValue;\n                        } else {\n                            v = dim.format(evt.values[d]);\n                        }\n                        tp.series.push({ idx: dim.currentPosition, key: d, value: v, color: dim.color });\n                    }\n                });\n                tp.series.sort(function(a,b) {return a.idx - b.idx});\n             }\n            tooltip.data(tp).hidden(false);\n        });\n\n        parallelCoordinates.dispatch.on('elementMouseout.tooltip', function(evt) {\n            tooltip.hidden(true)\n        });\n\n        parallelCoordinates.dispatch.on('elementMousemove.tooltip', function () {\n            tooltip();\n        });\n\t\t //============================================================\n        // Expose Public Variables\n        //------------------------------------------------------------\n\n\t\t// expose chart's sub-components\n        chart.dispatch = dispatch;\n        chart.parallelCoordinates = parallelCoordinates;\n        chart.legend = legend;\n        chart.tooltip = tooltip;\n        chart.options = nv.utils.optionsFunc.bind(chart);\n\n        chart._options = Object.create({}, {\n            // simple options, just get/set the necessary values\n            width: { get: function () { return width; }, set: function (_) { width = _; } },\n            height: { get: function () { return height; }, set: function (_) { height = _; } },\n            showLegend: { get: function () { return showLegend; }, set: function (_) { showLegend = _; } },\n            defaultState: { get: function () { return defaultState; }, set: function (_) { defaultState = _; } },\n            dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n            displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n            noData: { get: function () { return noData; }, set: function (_) { noData = _; } },\n            nanValue: { get: function () { return nanValue; }, set: function (_) { nanValue = _; } },\n\n            // options that require extra logic in the setter\n            margin: {\n                get: function () { return margin; },\n                set: function (_) {\n                    if (_.top !== undefined) {\n                        margin.top = _.top;\n                        marginTop = _.top;\n                    }\n                    margin.right = _.right !== undefined ? _.right : margin.right;\n                    margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n                    margin.left = _.left !== undefined ? _.left : margin.left;\n                }\n            },\n            color: {get: function(){return color;}, set: function(_){\n                    color = nv.utils.getColor(_);\n                    legend.color(color);\n                    parallelCoordinates.color(color);\n                }}\n        });\n\n        nv.utils.inheritOptions(chart, parallelCoordinates);\n        nv.utils.initOptions(chart);\n\n        return chart;\n    };\nnv.models.pie = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 500\n        , height = 500\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , color = nv.utils.defaultColor()\n        , valueFormat = d3.format(',.2f')\n        , showLabels = true\n        , labelsOutside = false\n        , labelType = \"key\"\n        , labelThreshold = .02 //if slice percentage is under this, don't show label\n        , hideOverlapLabels = false //Hide labels that don't fit in slice\n        , donut = false\n        , title = false\n        , growOnHover = true\n        , titleOffset = 0\n        , labelSunbeamLayout = false\n        , startAngle = false\n        , padAngle = false\n        , endAngle = false\n        , cornerRadius = 0\n        , donutRatio = 0.5\n        , duration = 250\n        , arcsRadius = []\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    var arcs = [];\n    var arcsOver = [];\n\n    //============================================================\n    // chart function\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right\n                , availableHeight = height - margin.top - margin.bottom\n                , radius = Math.min(availableWidth, availableHeight) / 2\n                , arcsRadiusOuter = []\n                , arcsRadiusInner = []\n                ;\n\n            container = d3.select(this)\n            if (arcsRadius.length === 0) {\n                var outer = radius - radius / 10;\n                var inner = donutRatio * radius;\n                for (var i = 0; i < data[0].length; i++) {\n                    arcsRadiusOuter.push(outer);\n                    arcsRadiusInner.push(inner);\n                }\n            } else {\n                if(growOnHover){\n                    arcsRadiusOuter = arcsRadius.map(function (d) { return (d.outer - d.outer / 10) * radius; });\n                    arcsRadiusInner = arcsRadius.map(function (d) { return (d.inner - d.inner / 10) * radius; });\n                    donutRatio = d3.min(arcsRadius.map(function (d) { return (d.inner - d.inner / 10); }));\n                } else {\n                    arcsRadiusOuter = arcsRadius.map(function (d) { return d.outer * radius; });\n                    arcsRadiusInner = arcsRadius.map(function (d) { return d.inner * radius; });\n                    donutRatio = d3.min(arcsRadius.map(function (d) { return d.inner; }));\n                }\n            }\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);\n            var wrapEnter = wrap.enter().append('g').attr('class','nvd3 nv-wrap nv-pie nv-chart-' + id);\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n            var g_pie = gEnter.append('g').attr('class', 'nv-pie');\n            gEnter.append('g').attr('class', 'nv-pieLabels');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n            g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n\n            //\n            container.on('click', function(d,i) {\n                dispatch.chartClick({\n                    data: d,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n            });\n\n            arcs = [];\n            arcsOver = [];\n            for (var i = 0; i < data[0].length; i++) {\n\n                var arc = d3.svg.arc().outerRadius(arcsRadiusOuter[i]);\n                var arcOver = d3.svg.arc().outerRadius(arcsRadiusOuter[i] + 5);\n\n                if (startAngle !== false) {\n                    arc.startAngle(startAngle);\n                    arcOver.startAngle(startAngle);\n                }\n                if (endAngle !== false) {\n                    arc.endAngle(endAngle);\n                    arcOver.endAngle(endAngle);\n                }\n                if (donut) {\n                    arc.innerRadius(arcsRadiusInner[i]);\n                    arcOver.innerRadius(arcsRadiusInner[i]);\n                }\n\n                if (arc.cornerRadius && cornerRadius) {\n                    arc.cornerRadius(cornerRadius);\n                    arcOver.cornerRadius(cornerRadius);\n                }\n\n                arcs.push(arc);\n                arcsOver.push(arcOver);\n            }\n\n            // Setup the Pie chart and choose the data element\n            var pie = d3.layout.pie()\n                .sort(null)\n                .value(function(d) { return d.disabled ? 0 : getY(d) });\n\n            // padAngle added in d3 3.5\n            if (pie.padAngle && padAngle) {\n                pie.padAngle(padAngle);\n            }\n\n            // if title is specified and donut, put it in the middle\n            if (donut && title) {\n                g_pie.append(\"text\").attr('class', 'nv-pie-title');\n\n                wrap.select('.nv-pie-title')\n                    .style(\"text-anchor\", \"middle\")\n                    .text(function (d) {\n                        return title;\n                    })\n                    .style(\"font-size\", (Math.min(availableWidth, availableHeight)) * donutRatio * 2 / (title.length + 2) + \"px\")\n                    .attr(\"dy\", \"0.35em\") // trick to vertically center text\n                    .attr('transform', function(d, i) {\n                        return 'translate(0, '+ titleOffset + ')';\n                    });\n            }\n\n            var slices = wrap.select('.nv-pie').selectAll('.nv-slice').data(pie);\n            var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label').data(pie);\n\n            slices.exit().remove();\n            pieLabels.exit().remove();\n\n            var ae = slices.enter().append('g');\n            ae.attr('class', 'nv-slice');\n            ae.on('mouseover', function(d, i) {\n                d3.select(this).classed('hover', true);\n                if (growOnHover) {\n                    d3.select(this).select(\"path\").transition()\n                        .duration(70)\n                        .attr(\"d\", arcsOver[i]);\n                }\n                dispatch.elementMouseover({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\"),\n                    percent: (d.endAngle - d.startAngle) / (2 * Math.PI)\n                });\n            });\n            ae.on('mouseout', function(d, i) {\n                d3.select(this).classed('hover', false);\n                if (growOnHover) {\n                    d3.select(this).select(\"path\").transition()\n                        .duration(50)\n                        .attr(\"d\", arcs[i]);\n                }\n                dispatch.elementMouseout({data: d.data, index: i});\n            });\n            ae.on('mousemove', function(d, i) {\n                dispatch.elementMousemove({data: d.data, index: i});\n            });\n            ae.on('click', function(d, i) {\n                var element = this;\n                dispatch.elementClick({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\"),\n                    event: d3.event,\n                    element: element\n                });\n            });\n            ae.on('dblclick', function(d, i) {\n                dispatch.elementDblClick({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\")\n                });\n            });\n\n            slices.attr('fill', function(d,i) { return color(d.data, i); });\n            slices.attr('stroke', function(d,i) { return color(d.data, i); });\n\n            var paths = ae.append('path').each(function(d) {\n                this._current = d;\n            });\n\n            slices.select('path')\n                .transition()\n                .duration(duration)\n                .attr('d', function (d, i) { return arcs[i](d); })\n                .attrTween('d', arcTween);\n\n            if (showLabels) {\n                // This does the normal label\n                var labelsArc = [];\n                for (var i = 0; i < data[0].length; i++) {\n                    labelsArc.push(arcs[i]);\n\n                    if (labelsOutside) {\n                        if (donut) {\n                            labelsArc[i] = d3.svg.arc().outerRadius(arcs[i].outerRadius());\n                            if (startAngle !== false) labelsArc[i].startAngle(startAngle);\n                            if (endAngle !== false) labelsArc[i].endAngle(endAngle);\n                        }\n                    } else if (!donut) {\n                            labelsArc[i].innerRadius(0);\n                    }\n                }\n\n                pieLabels.enter().append(\"g\").classed(\"nv-label\",true).each(function(d,i) {\n                    var group = d3.select(this);\n\n                    group.attr('transform', function (d, i) {\n                        if (labelSunbeamLayout) {\n                            d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n                            d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n                            var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                            if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n                                rotateAngle -= 90;\n                            } else {\n                                rotateAngle += 90;\n                            }\n                            return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n                        } else {\n                            d.outerRadius = radius + 10; // Set Outer Coordinate\n                            d.innerRadius = radius + 15; // Set Inner Coordinate\n                            return 'translate(' + labelsArc[i].centroid(d) + ')'\n                        }\n                    });\n\n                    group.append('rect')\n                        .style('stroke', '#fff')\n                        .style('fill', '#fff')\n                        .attr(\"rx\", 3)\n                        .attr(\"ry\", 3);\n\n                    group.append('text')\n                        .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned\n                        .style('fill', '#000')\n                });\n\n                var labelLocationHash = {};\n                var avgHeight = 14;\n                var avgWidth = 140;\n                var createHashKey = function(coordinates) {\n                    return Math.floor(coordinates[0]/avgWidth) * avgWidth + ',' + Math.floor(coordinates[1]/avgHeight) * avgHeight;\n                };\n                var getSlicePercentage = function(d) {\n                    return (d.endAngle - d.startAngle) / (2 * Math.PI);\n                };\n\n                pieLabels.watchTransition(renderWatch, 'pie labels').attr('transform', function (d, i) {\n                    if (labelSunbeamLayout) {\n                        d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n                        d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n                        var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                        if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n                            rotateAngle -= 90;\n                        } else {\n                            rotateAngle += 90;\n                        }\n                        return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n                    } else {\n                        d.outerRadius = radius + 10; // Set Outer Coordinate\n                        d.innerRadius = radius + 15; // Set Inner Coordinate\n\n                        /*\n                        Overlapping pie labels are not good. What this attempts to do is, prevent overlapping.\n                        Each label location is hashed, and if a hash collision occurs, we assume an overlap.\n                        Adjust the label's y-position to remove the overlap.\n                        */\n                        var center = labelsArc[i].centroid(d);\n                        var percent = getSlicePercentage(d);\n                        if (d.value && percent >= labelThreshold) {\n                            var hashKey = createHashKey(center);\n                            if (labelLocationHash[hashKey]) {\n                                center[1] -= avgHeight;\n                            }\n                            labelLocationHash[createHashKey(center)] = true;\n                        }\n                        return 'translate(' + center + ')'\n                    }\n                });\n\n                pieLabels.select(\".nv-label text\")\n                    .style('text-anchor', function(d,i) {\n                        //center the text on it's origin or begin/end if orthogonal aligned\n                        return labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle';\n                    })\n                    .text(function(d, i) {\n                        var percent = getSlicePercentage(d);\n                        var label = '';\n                        if (!d.value || percent < labelThreshold) return '';\n\n                        if(typeof labelType === 'function') {\n                            label = labelType(d, i, {\n                                'key': getX(d.data),\n                                'value': getY(d.data),\n                                'percent': valueFormat(percent)\n                            });\n                        } else {\n                            switch (labelType) {\n                                case 'key':\n                                    label = getX(d.data);\n                                    break;\n                                case 'value':\n                                    label = valueFormat(getY(d.data));\n                                    break;\n                                case 'percent':\n                                    label = d3.format('%')(percent);\n                                    break;\n                            }\n                        }\n                        return label;\n                    })\n                ;\n\n                if (hideOverlapLabels) {\n                    pieLabels\n                        .each(function (d, i) {\n                            if (!this.getBBox) return;\n                            var bb = this.getBBox(),\n                            center = labelsArc[i].centroid(d);\n                            var topLeft = {\n                              x : center[0] + bb.x,\n                              y : center[1] + bb.y\n                            };\n\n                            var topRight = {\n                              x : topLeft.x + bb.width,\n                              y : topLeft.y\n                            };\n\n                            var bottomLeft = {\n                              x : topLeft.x,\n                              y : topLeft.y + bb.height\n                            };\n\n                            var bottomRight = {\n                              x : topLeft.x + bb.width,\n                              y : topLeft.y + bb.height\n                            };\n\n                            d.visible = nv.utils.pointIsInArc(topLeft, d, arc) &&\n                            nv.utils.pointIsInArc(topRight, d, arc) &&\n                            nv.utils.pointIsInArc(bottomLeft, d, arc) &&\n                            nv.utils.pointIsInArc(bottomRight, d, arc);\n                        })\n                        .style('display', function (d) {\n                            return d.visible ? null : 'none';\n                        })\n                    ;\n                }\n\n            }\n\n\n            // Computes the angle of an arc, converting from radians to degrees.\n            function angle(d) {\n                var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;\n                return a > 90 ? a - 180 : a;\n            }\n\n            function arcTween(a, idx) {\n                a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;\n                a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;\n                if (!donut) a.innerRadius = 0;\n                var i = d3.interpolate(this._current, a);\n                this._current = i(0);\n                return function (t) {\n                    return arcs[idx](i(t));\n                };\n            }\n        });\n\n        renderWatch.renderEnd('pie immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        arcsRadius: { get: function () { return arcsRadius; }, set: function (_) { arcsRadius = _; } },\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n        title:      {get: function(){return title;}, set: function(_){title=_;}},\n        titleOffset:    {get: function(){return titleOffset;}, set: function(_){titleOffset=_;}},\n        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_;}},\n        hideOverlapLabels: {get: function(){return hideOverlapLabels;}, set: function(_){hideOverlapLabels=_;}},\n        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        x:          {get: function(){return getX;}, set: function(_){getX=_;}},\n        id:         {get: function(){return id;}, set: function(_){id=_;}},\n        endAngle:   {get: function(){return endAngle;}, set: function(_){endAngle=_;}},\n        startAngle: {get: function(){return startAngle;}, set: function(_){startAngle=_;}},\n        padAngle:   {get: function(){return padAngle;}, set: function(_){padAngle=_;}},\n        cornerRadius: {get: function(){return cornerRadius;}, set: function(_){cornerRadius=_;}},\n        donutRatio:   {get: function(){return donutRatio;}, set: function(_){donutRatio=_;}},\n        labelsOutside: {get: function(){return labelsOutside;}, set: function(_){labelsOutside=_;}},\n        labelSunbeamLayout: {get: function(){return labelSunbeamLayout;}, set: function(_){labelSunbeamLayout=_;}},\n        donut:              {get: function(){return donut;}, set: function(_){donut=_;}},\n        growOnHover:        {get: function(){return growOnHover;}, set: function(_){growOnHover=_;}},\n\n        // depreciated after 1.7.1\n        pieLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n            labelsOutside=_;\n            nv.deprecated('pieLabelsOutside', 'use labelsOutside instead');\n        }},\n        // depreciated after 1.7.1\n        donutLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n            labelsOutside=_;\n            nv.deprecated('donutLabelsOutside', 'use labelsOutside instead');\n        }},\n        // deprecated after 1.7.1\n        labelFormat: {get: function(){ return valueFormat;}, set: function(_) {\n            valueFormat=_;\n            nv.deprecated('labelFormat','use valueFormat instead');\n        }},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n            margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n            margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n            margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY=d3.functor(_);\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color=nv.utils.getColor(_);\n        }},\n        labelType:          {get: function(){return labelType;}, set: function(_){\n            labelType= _ || 'key';\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.pieChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var pie = nv.models.pie();\n    var legend = nv.models.legend();\n    var tooltip = nv.models.tooltip();\n\n    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n        , marginTop = null\n        , width = null\n        , height = null\n        , showTooltipPercent = false\n        , showLegend = true\n        , legendPosition = \"top\"\n        , color = nv.utils.defaultColor()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , duration = 250\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return pie.valueFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined) {\n                data.forEach(function (series, i) {\n                    series.disabled = !state.active[i];\n                });\n            }\n        }\n    };\n\n    //============================================================\n    // Chart function\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(pie);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var that = this;\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().call(chart); };\n            chart.container = this;\n\n            state.setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            //set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-pieWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                if (legendPosition === \"top\") {\n                    legend.width( availableWidth ).key(pie.x());\n\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n                } else if (legendPosition === \"right\") {\n                    var legendWidth = nv.models.legend().width();\n                    if (availableWidth / 2 < legendWidth) {\n                        legendWidth = (availableWidth / 2)\n                    }\n                    legend.height(availableHeight).key(pie.x());\n                    legend.width(legendWidth);\n                    availableWidth -= legend.width();\n\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend)\n                        .attr('transform', 'translate(' + (availableWidth) +',0)');\n                } else if (legendPosition === \"bottom\") {\n                    legend.width( availableWidth ).key(pie.x());\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend);\n\n                    margin.bottom = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + availableHeight +')');\n                }\n            }\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            pie.width(availableWidth).height(availableHeight);\n            var pieWrap = g.select('.nv-pieWrap').datum([data]);\n            d3.transition(pieWrap).call(pie);\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState) {\n                    state[key] = newState[key];\n                }\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n        });\n\n        renderWatch.renderEnd('pieChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    pie.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color,\n            percent: evt.percent\n        };\n        if (!showTooltipPercent) {\n            delete evt.percent;\n            delete evt.series.percent;\n        }\n        tooltip.data(evt).hidden(false);\n    });\n\n    pie.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    pie.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.legend = legend;\n    chart.dispatch = dispatch;\n    chart.pie = pie;\n    chart.tooltip = tooltip;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // use Object get/set functionality to map between vars and chart functions\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:              {get: function(){return width;},                set: function(_){width=_;}},\n        height:             {get: function(){return height;},               set: function(_){height=_;}},\n        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n        showLegend:         {get: function(){return showLegend;},           set: function(_){showLegend=_;}},\n        legendPosition:     {get: function(){return legendPosition;},       set: function(_){legendPosition=_;}},\n        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n\n        // options that require extra logic in the setter\n        color: {get: function(){return color;}, set: function(_){\n            color = _;\n            legend.color(color);\n            pie.color(color);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            pie.duration(duration);\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }}\n    });\n    nv.utils.inheritOptions(chart, pie);\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.sankey = function() {\n    'use strict';\n\n    // Sources:\n    // - https://bost.ocks.org/mike/sankey/\n    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sankey = {},\n        nodeWidth = 24,\n        nodePadding = 8,\n        size = [1, 1],\n        nodes = [],\n        links = [],\n        sinksRight = true;\n\n    var layout = function(iterations) {\n        computeNodeLinks();\n        computeNodeValues();\n        computeNodeBreadths();\n        computeNodeDepths(iterations);\n    };\n\n    var relayout = function() {\n        computeLinkDepths();\n    };\n\n    // SVG path data generator, to be used as 'd' attribute on 'path' element selection.\n    var link = function() {\n        var curvature = .5;\n\n        function link(d) {\n\n            var x0 = d.source.x + d.source.dx,\n                x1 = d.target.x,\n                xi = d3.interpolateNumber(x0, x1),\n                x2 = xi(curvature),\n                x3 = xi(1 - curvature),\n                y0 = d.source.y + d.sy + d.dy / 2,\n                y1 = d.target.y + d.ty + d.dy / 2;\n            var linkPath = 'M' + x0 + ',' + y0\n                + 'C' + x2 + ',' + y0\n                + ' ' + x3 + ',' + y1\n                + ' ' + x1 + ',' + y1;\n            return linkPath;\n        }\n\n        link.curvature = function(_) {\n            if (!arguments.length) return curvature;\n            curvature = +_;\n            return link;\n        };\n\n        return link;\n    };\n\n    // Y-position of the middle of a node.\n    var center = function(node) {\n        return node.y + node.dy / 2;\n    };\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    // Populate the sourceLinks and targetLinks for each node.\n    // Also, if the source and target are not objects, assume they are indices.\n    function computeNodeLinks() {\n        nodes.forEach(function(node) {\n            // Links that have this node as source.\n            node.sourceLinks = [];\n            // Links that have this node as target.\n            node.targetLinks = [];\n        });\n        links.forEach(function(link) {\n            var source = link.source,\n                target = link.target;\n            if (typeof source === 'number') source = link.source = nodes[link.source];\n            if (typeof target === 'number') target = link.target = nodes[link.target];\n            source.sourceLinks.push(link);\n            target.targetLinks.push(link);\n        });\n    }\n\n    // Compute the value (size) of each node by summing the associated links.\n    function computeNodeValues() {\n        nodes.forEach(function(node) {\n            node.value = Math.max(\n                d3.sum(node.sourceLinks, value),\n                d3.sum(node.targetLinks, value)\n            );\n        });\n    }\n\n    // Iteratively assign the breadth (x-position) for each node.\n    // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n    // nodes with no incoming links are assigned breadth zero, while\n    // nodes with no outgoing links are assigned the maximum breadth.\n    function computeNodeBreadths() {\n        //\n        var remainingNodes = nodes,\n            nextNodes,\n            x = 0;\n\n        // Work from left to right.\n        // Keep updating the breath (x-position) of nodes that are target of recently updated nodes.\n        //\n        while (remainingNodes.length && x < nodes.length) {\n            nextNodes = [];\n            remainingNodes.forEach(function(node) {\n                node.x = x;\n                node.dx = nodeWidth;\n                node.sourceLinks.forEach(function(link) {\n                    if (nextNodes.indexOf(link.target) < 0) {\n                        nextNodes.push(link.target);\n                    }\n                });\n            });\n            remainingNodes = nextNodes;\n            ++x;\n            //\n        }\n\n        // Optionally move pure sinks always to the right.\n        if (sinksRight) {\n            moveSinksRight(x);\n        }\n\n        scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n    }\n\n    function moveSourcesRight() {\n        nodes.forEach(function(node) {\n            if (!node.targetLinks.length) {\n                node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n            }\n        });\n    }\n\n    function moveSinksRight(x) {\n        nodes.forEach(function(node) {\n            if (!node.sourceLinks.length) {\n                node.x = x - 1;\n            }\n        });\n    }\n\n    function scaleNodeBreadths(kx) {\n        nodes.forEach(function(node) {\n            node.x *= kx;\n        });\n    }\n\n    // Compute the depth (y-position) for each node.\n    function computeNodeDepths(iterations) {\n        // Group nodes by breath.\n        var nodesByBreadth = d3.nest()\n            .key(function(d) { return d.x; })\n            .sortKeys(d3.ascending)\n            .entries(nodes)\n            .map(function(d) { return d.values; });\n\n        //\n        initializeNodeDepth();\n        resolveCollisions();\n        computeLinkDepths();\n        for (var alpha = 1; iterations > 0; --iterations) {\n            relaxRightToLeft(alpha *= .99);\n            resolveCollisions();\n            computeLinkDepths();\n            relaxLeftToRight(alpha);\n            resolveCollisions();\n            computeLinkDepths();\n        }\n\n        function initializeNodeDepth() {\n            // Calculate vertical scaling factor.\n            var ky = d3.min(nodesByBreadth, function(nodes) {\n                return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n            });\n\n            nodesByBreadth.forEach(function(nodes) {\n                nodes.forEach(function(node, i) {\n                    node.y = i;\n                    node.dy = node.value * ky;\n                });\n            });\n\n            links.forEach(function(link) {\n                link.dy = link.value * ky;\n            });\n        }\n\n        function relaxLeftToRight(alpha) {\n            nodesByBreadth.forEach(function(nodes, breadth) {\n                nodes.forEach(function(node) {\n                    if (node.targetLinks.length) {\n                        // Value-weighted average of the y-position of source node centers linked to this node.\n                        var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n                        node.y += (y - center(node)) * alpha;\n                    }\n                });\n            });\n\n            function weightedSource(link) {\n                return (link.source.y + link.sy + link.dy / 2) * link.value;\n            }\n        }\n\n        function relaxRightToLeft(alpha) {\n            nodesByBreadth.slice().reverse().forEach(function(nodes) {\n                nodes.forEach(function(node) {\n                    if (node.sourceLinks.length) {\n                        // Value-weighted average of the y-positions of target nodes linked to this node.\n                        var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n                        node.y += (y - center(node)) * alpha;\n                    }\n                });\n            });\n\n            function weightedTarget(link) {\n                return (link.target.y + link.ty + link.dy / 2) * link.value;\n            }\n        }\n\n        function resolveCollisions() {\n            nodesByBreadth.forEach(function(nodes) {\n                var node,\n                    dy,\n                    y0 = 0,\n                    n = nodes.length,\n                    i;\n\n                // Push any overlapping nodes down.\n                nodes.sort(ascendingDepth);\n                for (i = 0; i < n; ++i) {\n                    node = nodes[i];\n                    dy = y0 - node.y;\n                    if (dy > 0) node.y += dy;\n                    y0 = node.y + node.dy + nodePadding;\n                }\n\n                // If the bottommost node goes outside the bounds, push it back up.\n                dy = y0 - nodePadding - size[1];\n                if (dy > 0) {\n                    y0 = node.y -= dy;\n\n                    // Push any overlapping nodes back up.\n                    for (i = n - 2; i >= 0; --i) {\n                        node = nodes[i];\n                        dy = node.y + node.dy + nodePadding - y0;\n                        if (dy > 0) node.y -= dy;\n                        y0 = node.y;\n                    }\n                }\n            });\n        }\n\n        function ascendingDepth(a, b) {\n            return a.y - b.y;\n        }\n    }\n\n    // Compute y-offset of the source endpoint (sy) and target endpoints (ty) of links,\n    // relative to the source/target node's y-position.\n    function computeLinkDepths() {\n        nodes.forEach(function(node) {\n            node.sourceLinks.sort(ascendingTargetDepth);\n            node.targetLinks.sort(ascendingSourceDepth);\n        });\n        nodes.forEach(function(node) {\n            var sy = 0, ty = 0;\n            node.sourceLinks.forEach(function(link) {\n                link.sy = sy;\n                sy += link.dy;\n            });\n            node.targetLinks.forEach(function(link) {\n                link.ty = ty;\n                ty += link.dy;\n            });\n        });\n\n        function ascendingSourceDepth(a, b) {\n            return a.source.y - b.source.y;\n        }\n\n        function ascendingTargetDepth(a, b) {\n            return a.target.y - b.target.y;\n        }\n    }\n\n    // Value property accessor.\n    function value(x) {\n        return x.value;\n    }\n\n    sankey.options = nv.utils.optionsFunc.bind(sankey);\n    sankey._options = Object.create({}, {\n        nodeWidth:    {get: function(){return nodeWidth;},   set: function(_){nodeWidth=+_;}},\n        nodePadding:  {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n        nodes:        {get: function(){return nodes;},       set: function(_){nodes=_;}},\n        links:        {get: function(){return links ;},      set: function(_){links=_;}},\n        size:         {get: function(){return size;},        set: function(_){size=_;}},\n        sinksRight:   {get: function(){return sinksRight;},  set: function(_){sinksRight=_;}},\n\n        layout:       {get: function(){layout(32);},         set: function(_){layout(_);}},\n        relayout:     {get: function(){relayout();},         set: function(_){}},\n        center:       {get: function(){return center();},    set: function(_){\n            if(typeof _ === 'function'){\n                center=_;\n            }\n        }},\n        link:         {get: function(){return link();},      set: function(_){\n            if(typeof _ === 'function'){\n                link=_;\n            }\n            return link();\n        }}\n    });\n\n    nv.utils.initOptions(sankey);\n\n    return sankey;\n};\nnv.models.sankeyChart = function() {\n    \"use strict\";\n\n    // Sources:\n    // - https://bost.ocks.org/mike/sankey/\n    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , sankey = nv.models.sankey()\n        , width = 600\n        , height = 400\n        , nodeWidth = 36\n        , nodePadding =  40\n        , units = 'units'\n        , center = undefined\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var formatNumber = d3.format(',.0f');    // zero decimal places\n    var format = function(d) {\n        return formatNumber(d) + ' ' + units;\n    };\n    var color = d3.scale.category20();\n    var linkTitle = function(d){\n        return d.source.name + ' → ' + d.target.name + '\\n' + format(d.value);\n    };\n    var nodeFillColor = function(d){\n        return d.color = color(d.name.replace(/ .*/, ''));\n    };\n    var nodeStrokeColor = function(d){\n        return d3.rgb(d.color).darker(2);\n    };\n    var nodeTitle = function(d){\n        return d.name + '\\n' + format(d.value);\n    };\n\n    var showError = function(element, message) {\n        element.append('text')\n            .attr('x', 0)\n            .attr('y', 0)\n            .attr('class', 'nvd3-sankey-chart-error')\n            .attr('text-anchor', 'middle')\n            .text(message);\n    };\n\n    function chart(selection) {\n        selection.each(function(data) {\n\n            var testData = {\n                nodes:\n                    [\n                        {'node': 1, 'name': 'Test 1'},\n                        {'node': 2, 'name': 'Test 2'},\n                        {'node': 3, 'name': 'Test 3'},\n                        {'node': 4, 'name': 'Test 4'},\n                        {'node': 5, 'name': 'Test 5'},\n                        {'node': 6, 'name': 'Test 6'}\n                    ],\n                links:\n                    [\n                        {'source': 0, 'target': 1, 'value': 2295},\n                        {'source': 0, 'target': 5, 'value': 1199},\n                        {'source': 1, 'target': 2, 'value': 1119},\n                        {'source': 1, 'target': 5, 'value': 1176},\n                        {'source': 2, 'target': 3, 'value': 487},\n                        {'source': 2, 'target': 5, 'value': 632},\n                        {'source': 3, 'target': 4, 'value': 301},\n                        {'source': 3, 'target': 5, 'value': 186}\n                    ]\n            };\n\n            // Error handling\n            var isDataValid = false;\n            var dataAvailable = false;\n\n            // check if data is valid\n            if(\n                (typeof data['nodes'] === 'object' && data['nodes'].length) >= 0 &&\n                (typeof data['links'] === 'object' && data['links'].length) >= 0\n            ){\n                isDataValid = true;\n            }\n\n            // check if data is available\n            if(\n                data['nodes'] && data['nodes'].length > 0 &&\n                data['links'] && data['links'].length > 0\n            ) {\n                dataAvailable = true;\n            }\n\n            // show error\n            if(!isDataValid) {\n                console.error('NVD3 Sankey chart error:', 'invalid data format for', data);\n                console.info('Valid data format is: ', testData, JSON.stringify(testData));\n                showError(selection, 'Error loading chart, data is invalid');\n                return false;\n            }\n\n            // TODO use nv.utils.noData\n            if(!dataAvailable) {\n                showError(selection, 'No data available');\n                return false;\n            }\n\n            // No errors, continue\n\n            // append the svg canvas to the page\n            var svg = selection.append('svg')\n                .attr('width', width)\n                .attr('height', height)\n                .append('g')\n                .attr('class', 'nvd3 nv-wrap nv-sankeyChart');\n\n            // Set the sankey diagram properties\n            sankey\n                .nodeWidth(nodeWidth)\n                .nodePadding(nodePadding)\n                .size([width, height]);\n\n            var path = sankey.link();\n\n            sankey\n                .nodes(data.nodes)\n                .links(data.links)\n                .layout(32)\n                .center(center);\n\n            // add in the links\n            var link = svg.append('g').selectAll('.link')\n                .data(data.links)\n                .enter().append('path')\n                .attr('class', 'link')\n                .attr('d', path)\n                .style('stroke-width', function(d) { return Math.max(1, d.dy); })\n            .sort(function(a,b) { return b.dy - a.dy; });\n\n            // add the link titles\n            link.append('title')\n                .text(linkTitle);\n\n            // add in the nodes\n            var node = svg.append('g').selectAll('.node')\n                .data(data.nodes)\n                .enter().append('g')\n                .attr('class', 'node')\n                .attr('transform', function(d) { return 'translate(' + d.x + ',' + d.y + ')'; })\n                .call(\n                    d3.behavior\n                        .drag()\n                        .origin(function(d) { return d; })\n                        .on('dragstart', function() {\n                            this.parentNode.appendChild(this);\n                        })\n                        .on('drag', dragmove)\n                );\n\n            // add the rectangles for the nodes\n            node.append('rect')\n                .attr('height', function(d) { return d.dy; })\n                .attr('width', sankey.nodeWidth())\n                .style('fill', nodeFillColor)\n                .style('stroke', nodeStrokeColor)\n                .append('title')\n                .text(nodeTitle);\n\n            // add in the title for the nodes\n            node.append('text')\n                .attr('x', -6)\n                .attr('y', function(d) { return d.dy / 2; })\n                .attr('dy', '.35em')\n                .attr('text-anchor', 'end')\n                .attr('transform', null)\n                .text(function(d) { return d.name; })\n                .filter(function(d) { return d.x < width / 2; })\n                .attr('x', 6 + sankey.nodeWidth())\n                .attr('text-anchor', 'start');\n\n            // the function for moving the nodes\n            function dragmove(d) {\n                d3.select(this).attr('transform',\n                'translate(' + d.x + ',' + (\n                    d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))\n                ) + ')');\n                sankey.relayout();\n                link.attr('d', path);\n            }\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        units:           {get: function(){return units;},       set: function(_){units=_;}},\n        width:           {get: function(){return width;},       set: function(_){width=_;}},\n        height:          {get: function(){return height;},      set: function(_){height=_;}},\n        format:          {get: function(){return format;},      set: function(_){format=_;}},\n        linkTitle:       {get: function(){return linkTitle;},   set: function(_){linkTitle=_;}},\n        nodeWidth:       {get: function(){return nodeWidth;},   set: function(_){nodeWidth=_;}},\n        nodePadding:     {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n        center:          {get: function(){return center},       set: function(_){center=_}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        nodeStyle: {get: function(){return {};}, set: function(_){\n            nodeFillColor   = _.fillColor   !== undefined ? _.fillColor   : nodeFillColor;\n            nodeStrokeColor = _.strokeColor !== undefined ? _.strokeColor : nodeStrokeColor;\n            nodeTitle       = _.title       !== undefined ? _.title       : nodeTitle;\n        }}\n\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.scatter = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin       = {top: 0, right: 0, bottom: 0, left: 0}\n        , width        = null\n        , height       = null\n        , color        = nv.utils.defaultColor() // chooses color\n        , pointBorderColor = null\n        , id           = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't select one\n        , container    = null\n        , x            = d3.scale.linear()\n        , y            = d3.scale.linear()\n        , z            = d3.scale.linear() //linear because d3.svg.shape.size is treated as area\n        , getX         = function(d) { return d.x } // accessor to get the x value\n        , getY         = function(d) { return d.y } // accessor to get the y value\n        , getSize      = function(d) { return d.size || 1} // accessor to get the point size\n        , getShape     = function(d) { return d.shape || 'circle' } // accessor to get point shape\n        , forceX       = [] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n        , forceY       = [] // List of numbers to Force into the Y scale\n        , forceSize    = [] // List of numbers to Force into the Size scale\n        , interactive  = true // If true, plots a voronoi overlay for advanced point intersection\n        , pointActive  = function(d) { return !d.notActive } // any points that return false will be filtered out\n        , padData      = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , padDataOuter = .1 //outerPadding to imitate ordinal scale outer padding\n        , clipEdge     = false // if true, masks points within x and y scale\n        , clipVoronoi  = true // if true, masks each point with a circle... can turn off to slightly increase performance\n        , showVoronoi  = false // display the voronoi areas\n        , clipRadius   = function() { return 25 } // function to get the radius for voronoi point clips\n        , xDomain      = null // Override x domain (skips the calculation from data)\n        , yDomain      = null // Override y domain\n        , xRange       = null // Override x range\n        , yRange       = null // Override y range\n        , sizeDomain   = null // Override point size domain\n        , sizeRange    = null\n        , singlePoint  = false\n        , dispatch     = d3.dispatch('elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n        , useVoronoi   = true\n        , duration     = 250\n        , interactiveUpdateDelay = 300\n        , showLabels    = false\n        ;\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0, z0 // used to store previous scales\n        , xDom, yDom // used to store previous domains\n        , width0\n        , height0\n        , timeoutID\n        , needsUpdate = false // Flag for when the points are visually updating, but the interactive layer is behind, to disable tooltips\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        , _sizeRange_def = [16, 256]\n        , _cache = {}\n        ;\n\n    //============================================================\n    // Diff and Cache Utilities\n    //------------------------------------------------------------\n    // getDiffs is used to filter unchanged points from the update\n    // selection. It implicitly updates it's cache when called and\n    // therefor the diff is based upon the previous invocation NOT\n    // the previous update.\n    //\n    // getDiffs takes a point as its first argument followed by n\n    // key getter pairs (d, [key, get... key, get]) this approach\n    // was chosen for efficiency. (The filter will call it a LOT).\n    //\n    // It is important to call delCache on point exit to prevent a\n    // memory leak. It is also needed to prevent invalid caches if\n    // a new point uses the same series and point id key.\n    //\n    // Argument Performance Concerns:\n    // - Object property lists for key getter pairs would be very\n    // expensive (points * objects for the GC every update).\n    // - ES6 function names for implicit keys would be nice but\n    // they are not guaranteed to be unique.\n    // - function.toString to obtain implicit keys is possible\n    // but long object keys are not free (internal hash).\n    // - Explicit key without objects are the most efficient.\n\n    function getCache(d) {\n        var key, val;\n        key = d[0].series + ':' + d[1];\n        val = _cache[key] = _cache[key] || {};\n        return val;\n    }\n\n    function delCache(d) {\n        var key, val;\n        key = d[0].series + ':' + d[1];\n        delete _cache[key];\n    }\n\n    function getDiffs(d) {\n        var i, key, val,\n            cache = getCache(d),\n            diffs = false;\n        for (i = 1; i < arguments.length; i += 2) {\n            key = arguments[i];\n            val = arguments[i + 1](d[0], d[1]);\n            if (cache[key] !== val || !cache.hasOwnProperty(key)) {\n                cache[key] = val;\n                diffs = true;\n            }\n        }\n        return diffs;\n    }\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            //add series index to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                });\n            });\n\n            // Setup Scales\n            var logScale = (typeof(chart.yScale().base) === \"function\"); // Only log scale has a method \"base()\"\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain && sizeDomain) ? [] : // if we know xDomain and yDomain and sizeDomain, no need to calculate.... if Size is constant remember to set sizeDomain to speed up performance\n                d3.merge(\n                    data.map(function(d) {\n                        return d.values.map(function(d,i) {\n                            return { x: getX(d,i), y: getY(d,i), size: getSize(d,i) }\n                        })\n                    })\n                );\n\n            x   .domain(xDomain || d3.extent(seriesData.map(function(d) { return d.x; }).concat(forceX)))\n\n            if (padData && data[0])\n                x.range(xRange || [(availableWidth * padDataOuter +  availableWidth) / (2 *data[0].values.length), availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)  ]);\n            //x.range([availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [0, availableWidth]);\n\n             if (logScale) {\n                    var min = d3.min(seriesData.map(function(d) { if (d.y !== 0) return d.y; }));\n                    y.clamp(true)\n                        .domain(yDomain || d3.extent(seriesData.map(function(d) {\n                            if (d.y !== 0) return d.y;\n                            else return min * 0.1;\n                        }).concat(forceY)))\n                        .range(yRange || [availableHeight, 0]);\n                } else {\n                        y.domain(yDomain || d3.extent(seriesData.map(function (d) { return d.y;}).concat(forceY)))\n                        .range(yRange || [availableHeight, 0]);\n                }\n\n            z   .domain(sizeDomain || d3.extent(seriesData.map(function(d) { return d.size }).concat(forceSize)))\n                .range(sizeRange || _sizeRange_def);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            singlePoint = x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1];\n\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] - y.domain()[0] * 0.01, y.domain()[1] + y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            if ( isNaN(x.domain()[0])) {\n                x.domain([-1,1]);\n            }\n\n            if ( isNaN(y.domain()[0])) {\n                y.domain([-1,1]);\n            }\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n            z0 = z0 || z;\n\n            var scaleDiff = x(1) !== x0(1) || y(1) !== y0(1) || z(1) !== z0(1);\n\n            width0 = width0 || width;\n            height0 = height0 || height;\n\n            var sizeDiff = width0 !== width || height0 !== height;\n\n            // Domain Diffs\n\n            xDom = xDom || [];\n            var domainDiff = xDom[0] !== x.domain()[0] || xDom[1] !== x.domain()[1];\n            xDom = x.domain();\n\n            yDom = yDom || [];\n            domainDiff = domainDiff || yDom[0] !== y.domain()[0] || yDom[1] !== y.domain()[1];\n            yDom = y.domain();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id);\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.classed('nv-single-point', singlePoint);\n            gEnter.append('g').attr('class', 'nv-groups');\n            gEnter.append('g').attr('class', 'nv-point-paths');\n            wrapEnter.append('g').attr('class', 'nv-point-clips');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect')\n                .attr('transform', 'translate( -10, -10)');\n\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth + 20)\n                .attr('height', (availableHeight > 0) ? availableHeight + 20 : 0);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            function updateInteractiveLayer() {\n                // Always clear needs-update flag regardless of whether or not\n                // we will actually do anything (avoids needless invocations).\n                needsUpdate = false;\n\n                if (!interactive) return false;\n\n                // inject series and point index for reference into voronoi\n                if (useVoronoi === true) {\n\n                    // nuke all voronoi paths on reload and recreate them\n                    wrap.select('.nv-point-paths').selectAll('path').remove();\n\n                    var vertices = d3.merge(data.map(function(group, groupIndex) {\n                            return group.values\n                                .map(function(point, pointIndex) {\n                                    // *Adding noise to make duplicates very unlikely\n                                    // *Injecting series and point index for reference\n                                    // *Adding a 'jitter' to the points, because there's an issue in d3.geom.voronoi.\n                                    var pX = getX(point,pointIndex);\n                                    var pY = getY(point,pointIndex);\n\n                                    return [nv.utils.NaNtoZero(x(pX)) + Math.random() * 1e-4,\n                                            nv.utils.NaNtoZero(y(pY)) + Math.random() * 1e-4,\n                                        groupIndex,\n                                        pointIndex, point];\n                                })\n                                .filter(function(pointArray, pointIndex) {\n                                    return pointActive(pointArray[4], pointIndex); // Issue #237.. move filter to after map, so pointIndex is correct!\n                                })\n                        })\n                    );\n\n                    if (vertices.length == 0) return false;  // No active points, we're done\n                    if (vertices.length < 3) {\n                        // Issue #283 - Adding 2 dummy points to the voronoi b/c voronoi requires min 3 points to work\n                        vertices.push([x.range()[0] - 20, y.range()[0] - 20, null, null]);\n                        vertices.push([x.range()[1] + 20, y.range()[1] + 20, null, null]);\n                        vertices.push([x.range()[0] - 20, y.range()[0] + 20, null, null]);\n                        vertices.push([x.range()[1] + 20, y.range()[1] - 20, null, null]);\n                    }\n\n                    // keep voronoi sections from going more than 10 outside of graph\n                    // to avoid overlap with other things like legend etc\n                    var bounds = d3.geom.polygon([\n                        [-10,-10],\n                        [-10,height + 10],\n                        [width + 10,height + 10],\n                        [width + 10,-10]\n                    ]);\n\n                    // delete duplicates from vertices - essential assumption for d3.geom.voronoi\n                    var epsilon = 1e-4; // Uses 1e-4 to determine equivalence.\n                    vertices = vertices.sort(function(a,b){return ((a[0] - b[0]) || (a[1] - b[1]))});\n                    for (var i = 0; i < vertices.length - 1; ) {\n                        if ((Math.abs(vertices[i][0] - vertices[i+1][0]) < epsilon) &&\n                        (Math.abs(vertices[i][1] - vertices[i+1][1]) < epsilon)) {\n                            vertices.splice(i+1, 1);\n                        } else {\n                            i++;\n                        }\n                    }\n\n                    var voronoi = d3.geom.voronoi(vertices).map(function(d, i) {\n                        return {\n                            'data': bounds.clip(d),\n                            'series': vertices[i][2],\n                            'point': vertices[i][3]\n                        }\n                    });\n\n                    var pointPaths = wrap.select('.nv-point-paths').selectAll('path').data(voronoi);\n                    var vPointPaths = pointPaths\n                        .enter().append(\"svg:path\")\n                        .attr(\"d\", function(d) {\n                            if (!d || !d.data || d.data.length === 0)\n                                return 'M 0 0';\n                            else\n                                return \"M\" + d.data.join(\",\") + \"Z\";\n                        })\n                        .attr(\"id\", function(d,i) {\n                            return \"nv-path-\"+i; })\n                        .attr(\"clip-path\", function(d,i) { return \"url(#nv-clip-\"+id+\"-\"+i+\")\"; })\n                        ;\n\n                    // good for debugging point hover issues\n                    if (showVoronoi) {\n                        vPointPaths.style(\"fill\", d3.rgb(230, 230, 230))\n                            .style('fill-opacity', 0.4)\n                            .style('stroke-opacity', 1)\n                            .style(\"stroke\", d3.rgb(200,200,200));\n                    }\n\n                    if (clipVoronoi) {\n                        // voronoi sections are already set to clip,\n                        // just create the circles with the IDs they expect\n                        wrap.select('.nv-point-clips').selectAll('*').remove(); // must do * since it has sub-dom\n                        var pointClips = wrap.select('.nv-point-clips').selectAll('clipPath').data(vertices);\n                        var vPointClips = pointClips\n                            .enter().append(\"svg:clipPath\")\n                            .attr(\"id\", function(d, i) { return \"nv-clip-\"+id+\"-\"+i;})\n                            .append(\"svg:circle\")\n                            .attr('cx', function(d) { return d[0]; })\n                            .attr('cy', function(d) { return d[1]; })\n                            .attr('r', clipRadius);\n                    }\n\n                    var mouseEventCallback = function(el, d, mDispatch) {\n                        if (needsUpdate) return 0;\n                        var series = data[d.series];\n                        if (series === undefined) return;\n                        var point  = series.values[d.point];\n                        point['color'] = color(series, d.series);\n\n                        // standardize attributes for tooltip.\n                        point['x'] = getX(point);\n                        point['y'] = getY(point);\n\n                        // can't just get box of event node since it's actually a voronoi polygon\n                        var box = container.node().getBoundingClientRect();\n                        var scrollTop  = window.pageYOffset || document.documentElement.scrollTop;\n                        var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n\n                        var pos = {\n                            left: x(getX(point, d.point)) + box.left + scrollLeft + margin.left + 10,\n                            top: y(getY(point, d.point)) + box.top + scrollTop + margin.top + 10\n                        };\n\n                        mDispatch({\n                            point: point,\n                            series: series,\n                            pos: pos,\n                            relativePos: [x(getX(point, d.point)) + margin.left, y(getY(point, d.point)) + margin.top],\n                            seriesIndex: d.series,\n                            pointIndex: d.point,\n                            event: d3.event,\n                            element: el\n                        });\n                    };\n\n                    pointPaths\n                        .on('click', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementClick);\n                        })\n                        .on('dblclick', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementDblClick);\n                        })\n                        .on('mouseover', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementMouseover);\n                        })\n                        .on('mouseout', function(d, i) {\n                            mouseEventCallback(this, d, dispatch.elementMouseout);\n                        });\n\n                } else {\n                    // add event handlers to points instead voronoi paths\n                    wrap.select('.nv-groups').selectAll('.nv-group')\n                        .selectAll('.nv-point')\n                        //.data(dataWithPoints)\n                        //.style('pointer-events', 'auto') // recativate events, disabled by css\n                        .on('click', function(d,i) {\n                            //nv.log('test', d, i);\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n                            var element = this;\n                            dispatch.elementClick({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top], //TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                event: d3.event,\n                                element: element\n                            });\n                        })\n                        .on('dblclick', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementDblClick({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i\n                            });\n                        })\n                        .on('mouseover', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementMouseover({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                color: color(d, i)\n                            });\n                        })\n                        .on('mouseout', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementMouseout({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                color: color(d, i)\n                            });\n                        });\n                }\n            }\n\n            needsUpdate = true;\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit()\n                .remove();\n            groups\n                .attr('class', function(d,i) {\n                    return (d.classed || '') + ' nv-group nv-series-' + i;\n                })\n                .classed('nv-noninteractive', !interactive)\n                .classed('hover', function(d) { return d.hover });\n            groups.watchTransition(renderWatch, 'scatter: groups')\n                .style('fill', function(d,i) { return color(d, i) })\n                .style('stroke', function(d,i) { return d.pointBorderColor || pointBorderColor || color(d, i) })\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', .5);\n\n            // create the points, maintaining their IDs from the original data set\n            var points = groups.selectAll('path.nv-point')\n                .data(function(d) {\n                    return d.values.map(\n                        function (point, pointIndex) {\n                            return [point, pointIndex]\n                        }).filter(\n                            function(pointArray, pointIndex) {\n                                return pointActive(pointArray[0], pointIndex)\n                            })\n                    });\n            points.enter().append('path')\n                .attr('class', function (d) {\n                    return 'nv-point nv-point-' + d[1];\n                })\n                .style('fill', function (d) { return d.color })\n                .style('stroke', function (d) { return d.color })\n                .attr('transform', function(d) {\n                    return 'translate(' + nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')'\n                })\n                .attr('d',\n                    nv.utils.symbol()\n                    .type(function(d) { return getShape(d[0]); })\n                    .size(function(d) { return z(getSize(d[0],d[1])) })\n            );\n            points.exit().each(delCache).remove();\n            groups.exit().selectAll('path.nv-point')\n                .watchTransition(renderWatch, 'scatter exit')\n                .attr('transform', function(d) {\n                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                })\n                .remove();\n\n            //============================================================\n            // Point Update Optimisation Notes\n            //------------------------------------------------------------\n            // The following update selections are filtered with getDiffs\n            // (defined at the top of this file) this brings a performance\n            // benefit for charts with large data sets that accumulate a\n            // subset of changes or additions over time.\n            //\n            // Uneccesary and expensive DOM calls are avoided by culling\n            // unchanged points from the selection in exchange for the\n            // cheaper overhead of caching and diffing each point first.\n            //\n            // Due to the way D3 and NVD3 work, other global changes need\n            // to be considered in addition to local point properties.\n            // This is a potential source of bugs (if any of the global\n            // changes that possibly affect points are missed).\n\n            // Update Point Positions [x, y]\n            points.filter(function (d) {\n                // getDiffs must always be called to update cache\n                return getDiffs(d, 'x', getX, 'y', getY) ||\n                    scaleDiff || sizeDiff || domainDiff;\n            })\n            .watchTransition(renderWatch, 'scatter points')\n            .attr('transform', function (d) {\n                return 'translate(' +\n                    nv.utils.NaNtoZero(x(getX(d[0], d[1]))) + ',' +\n                    nv.utils.NaNtoZero(y(getY(d[0], d[1]))) + ')'\n            });\n\n            // Update Point Appearance [shape, size]\n            points.filter(function (d) {\n                // getDiffs must always be called to update cache\n                return getDiffs(d, 'shape', getShape, 'size', getSize) ||\n                    scaleDiff || sizeDiff || domainDiff;\n            })\n            .watchTransition(renderWatch, 'scatter points')\n            .attr('d', nv.utils.symbol()\n                .type(function (d) { return getShape(d[0]) })\n                .size(function (d) { return z(getSize(d[0], d[1])) })\n            );\n\n            // add label a label to scatter chart\n            if(showLabels)\n            {\n                var titles =  groups.selectAll('.nv-label')\n                    .data(function(d) {\n                        return d.values.map(\n                            function (point, pointIndex) {\n                                return [point, pointIndex]\n                            }).filter(\n                                function(pointArray, pointIndex) {\n                                    return pointActive(pointArray[0], pointIndex)\n                                })\n                        });\n\n                titles.enter().append('text')\n                    .style('fill', function (d,i) {\n                        return d.color })\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 1)\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + Math.sqrt(z(getSize(d[0],d[1]))/Math.PI) + 2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')';\n                    })\n                    .text(function(d,i){\n                        return d[0].label;});\n\n                titles.exit().remove();\n                groups.exit().selectAll('path.nv-label')\n                    .watchTransition(renderWatch, 'scatter exit')\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')';\n                    })\n                    .remove();\n               titles.each(function(d) {\n                  d3.select(this)\n                    .classed('nv-label', true)\n                    .classed('nv-label-' + d[1], false)\n                    .classed('hover',false);\n                });\n                titles.watchTransition(renderWatch, 'scatter labels')\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                    });\n            }\n\n            // Delay updating the invisible interactive layer for smoother animation\n            if( interactiveUpdateDelay )\n            {\n                clearTimeout(timeoutID); // stop repeat calls to updateInteractiveLayer\n                timeoutID = setTimeout(updateInteractiveLayer, interactiveUpdateDelay );\n            }\n            else\n            {\n                updateInteractiveLayer();\n            }\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n            z0 = z.copy();\n\n            width0 = width;\n            height0 = height;\n\n        });\n        renderWatch.renderEnd('scatter immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // utility function calls provided by this chart\n    chart._calls = new function() {\n        this.clearHighlights = function () {\n            nv.dom.write(function() {\n                container.selectAll(\".nv-point.hover\").classed(\"hover\", false);\n            });\n            return null;\n        };\n        this.highlightPoint = function (seriesIndex, pointIndex, isHoverOver) {\n            nv.dom.write(function() {\n                container.select('.nv-groups')\n                  .selectAll(\".nv-series-\" + seriesIndex)\n                  .selectAll(\".nv-point-\" + pointIndex)\n                  .classed(\"hover\", isHoverOver);\n            });\n        };\n    };\n\n    // trigger calls from events too\n    dispatch.on('elementMouseover.point', function(d) {\n        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,true);\n    });\n\n    dispatch.on('elementMouseout.point', function(d) {\n        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,false);\n    });\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:        {get: function(){return width;}, set: function(_){width=_;}},\n        height:       {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:       {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:       {get: function(){return y;}, set: function(_){y=_;}},\n        pointScale:   {get: function(){return z;}, set: function(_){z=_;}},\n        xDomain:      {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:      {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        pointDomain:  {get: function(){return sizeDomain;}, set: function(_){sizeDomain=_;}},\n        xRange:       {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:       {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        pointRange:   {get: function(){return sizeRange;}, set: function(_){sizeRange=_;}},\n        forceX:       {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:       {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        forcePoint:   {get: function(){return forceSize;}, set: function(_){forceSize=_;}},\n        interactive:  {get: function(){return interactive;}, set: function(_){interactive=_;}},\n        pointActive:  {get: function(){return pointActive;}, set: function(_){pointActive=_;}},\n        padDataOuter: {get: function(){return padDataOuter;}, set: function(_){padDataOuter=_;}},\n        padData:      {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge:     {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        clipVoronoi:  {get: function(){return clipVoronoi;}, set: function(_){clipVoronoi=_;}},\n        clipRadius:   {get: function(){return clipRadius;}, set: function(_){clipRadius=_;}},\n        showVoronoi:   {get: function(){return showVoronoi;}, set: function(_){showVoronoi=_;}},\n        id:           {get: function(){return id;}, set: function(_){id=_;}},\n        interactiveUpdateDelay: {get:function(){return interactiveUpdateDelay;}, set: function(_){interactiveUpdateDelay=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){ showLabels = _;}},\n        pointBorderColor: {get: function(){return pointBorderColor;}, set: function(_){pointBorderColor=_;}},\n\n        // simple functor options\n        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n        pointSize: {get: function(){return getSize;}, set: function(_){getSize = d3.functor(_);}},\n        pointShape: {get: function(){return getShape;}, set: function(_){getShape = d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n            useVoronoi = _;\n            if (useVoronoi === false) {\n                clipVoronoi = false;\n            }\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.scatterChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var scatter      = nv.models.scatter()\n        , xAxis        = nv.models.axis()\n        , yAxis        = nv.models.axis()\n        , legend       = nv.models.legend()\n        , distX        = nv.models.distribution()\n        , distY        = nv.models.distribution()\n        , tooltip      = nv.models.tooltip()\n        ;\n\n    var margin       = {top: 30, right: 20, bottom: 50, left: 75}\n        , marginTop = null\n        , width        = null\n        , height       = null\n        , container    = null\n        , color        = nv.utils.defaultColor()\n        , x            = scatter.xScale()\n        , y            = scatter.yScale()\n        , showDistX    = false\n        , showDistY    = false\n        , showLegend   = true\n        , showXAxis    = true\n        , showYAxis    = true\n        , rightAlignYAxis = false\n        , state = nv.utils.state()\n        , defaultState = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , noData       = null\n        , duration = 250\n        , showLabels    = false\n        ;\n\n    scatter.xScale(x).yScale(y);\n    xAxis.orient('bottom').tickPadding(10);\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickPadding(10)\n    ;\n    distX.axis('x');\n    distY.axis('y');\n    tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0\n        , renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n        if (showDistX) renderWatch.models(distX);\n        if (showDistY) renderWatch.models(distY);\n\n        selection.each(function(data) {\n            var that = this;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                renderWatch.renderEnd('scatter immediate');\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            // background for pointer events\n            gEnter.append('rect').attr('class', 'nvd3 nv-background').style(\"pointer-events\",\"none\");\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n            gEnter.append('g').attr('class', 'nv-regressionLinesWrap');\n            gEnter.append('g').attr('class', 'nv-distWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = availableWidth;\n                legend.width(legendWidth);\n\n                wrap.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0' + ',' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            scatter\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    d.color = d.color || color(d, i);\n                    return d.color;\n                }).filter(function(d,i) { return !data[i].disabled }))\n                .showLabels(showLabels);\n\n            wrap.select('.nv-scatterWrap')\n                .datum(data.filter(function(d) { return !d.disabled }))\n                .call(scatter);\n\n\n            wrap.select('.nv-regressionLinesWrap')\n                .attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');\n\n            var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines')\n                .data(function (d) {\n                    return d;\n                });\n\n            regWrap.enter().append('g').attr('class', 'nv-regLines');\n\n            var regLine = regWrap.selectAll('.nv-regLine')\n                .data(function (d) {\n                    return [d]\n                });\n\n            regLine.enter()\n                .append('line').attr('class', 'nv-regLine')\n                .style('stroke-opacity', 0);\n\n            // don't add lines unless we have slope and intercept to use\n            regLine.filter(function(d) {\n                return d.intercept && d.slope;\n            })\n                .watchTransition(renderWatch, 'scatterPlusLineChart: regline')\n                .attr('x1', x.range()[0])\n                .attr('x2', x.range()[1])\n                .attr('y1', function (d, i) {\n                    return y(x.domain()[0] * d.slope + d.intercept)\n                })\n                .attr('y2', function (d, i) {\n                    return y(x.domain()[1] * d.slope + d.intercept)\n                })\n                .style('stroke', function (d, i, j) {\n                    return color(d, j)\n                })\n                .style('stroke-opacity', function (d, i) {\n                    return (d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined') ? 0 : 1\n                });\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight , 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            // Setup Distribution\n            if (showDistX) {\n                distX\n                    .getData(scatter.x())\n                    .scale(x)\n                    .width(availableWidth)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled }));\n                gEnter.select('.nv-distWrap').append('g')\n                    .attr('class', 'nv-distributionX');\n                g.select('.nv-distributionX')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n                    .datum(data.filter(function(d) { return !d.disabled }))\n                    .call(distX);\n            }\n\n            if (showDistY) {\n                distY\n                    .getData(scatter.y())\n                    .scale(y)\n                    .width(availableHeight)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled }));\n                gEnter.select('.nv-distWrap').append('g')\n                    .attr('class', 'nv-distributionY');\n                g.select('.nv-distributionY')\n                    .attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')\n                    .datum(data.filter(function(d) { return !d.disabled }))\n                    .call(distY);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            // mouseover needs availableHeight so we just keep scatter mouse events inside the chart block\n            scatter.dispatch.on('elementMouseout.tooltip', function(evt) {\n                tooltip.hidden(true);\n                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                    .attr('y1', 0);\n                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                    .attr('x2', distY.size());\n            });\n\n            scatter.dispatch.on('elementMouseover.tooltip', function(evt) {\n                container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                    .attr('y1', evt.relativePos[1] - availableHeight);\n                container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                    .attr('x2', evt.relativePos[0] + distX.size());\n                tooltip.data(evt).hidden(false);\n            });\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('scatter with line immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.distX = distX;\n    chart.distY = distY;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        container:  {get: function(){return container;}, set: function(_){container=_;}},\n        showDistX:  {get: function(){return showDistX;}, set: function(_){showDistX=_;}},\n        showDistY:  {get: function(){return showDistY;}, set: function(_){showDistY=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showXAxis:  {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:  {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:     {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:     {get: function(){return noData;}, set: function(_){noData=_;}},\n        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            distX.color(color);\n            distY.color(color);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.sparkline = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n        , width = 400\n        , height = 32\n        , container = null\n        , animate = true\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , color = nv.utils.getColor(['#000'])\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , showMinMaxPoints = true\n        , showCurrentPoint = true\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    \n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x   .domain(xDomain || d3.extent(data, getX ))\n                .range(xRange || [0, availableWidth]);\n\n            y   .domain(yDomain || d3.extent(data, getY ))\n                .range(yRange || [availableHeight, 0]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n            var paths = wrap.selectAll('path')\n                .data(function(d) { return [d] });\n            paths.enter().append('path');\n            paths.exit().remove();\n            paths\n                .style('stroke', function(d,i) { return d.color || color(d, i) })\n                .attr('d', d3.svg.line()\n                    .x(function(d,i) { return x(getX(d,i)) })\n                    .y(function(d,i) { return y(getY(d,i)) })\n            );\n\n            // TODO: Add CURRENT data point (Need Min, Mac, Current / Most recent)\n            var points = wrap.selectAll('circle.nv-point')\n                .data(function(data) {\n                    var yValues = data.map(function(d, i) { return getY(d,i); });\n                    function pointIndex(index) {\n                        if (index != -1) {\n                            var result = data[index];\n                            result.pointIndex = index;\n                            return result;\n                        } else {\n                            return null;\n                        }\n                    }\n                    var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])),\n                        minPoint = pointIndex(yValues.indexOf(y.domain()[0])),\n                        currentPoint = pointIndex(yValues.length - 1);\n                    return [(showMinMaxPoints ? minPoint : null), (showMinMaxPoints ? maxPoint : null), (showCurrentPoint ? currentPoint : null)].filter(function (d) {return d != null;});\n                });\n            points.enter().append('circle');\n            points.exit().remove();\n            points\n                .attr('cx', function(d,i) { return x(getX(d,d.pointIndex)) })\n                .attr('cy', function(d,i) { return y(getY(d,d.pointIndex)) })\n                .attr('r', 2)\n                .attr('class', function(d,i) {\n                    return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' :\n                            getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue'\n                });\n        });\n        \n        renderWatch.renderEnd('sparkline immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:            {get: function(){return width;}, set: function(_){width=_;}},\n        height:           {get: function(){return height;}, set: function(_){height=_;}},\n        xDomain:          {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:          {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:           {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:           {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        xScale:           {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:           {get: function(){return y;}, set: function(_){y=_;}},\n        animate:          {get: function(){return animate;}, set: function(_){animate=_;}},\n        showMinMaxPoints: {get: function(){return showMinMaxPoints;}, set: function(_){showMinMaxPoints=_;}},\n        showCurrentPoint: {get: function(){return showCurrentPoint;}, set: function(_){showCurrentPoint=_;}},\n\n        //functor options\n        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    chart.dispatch = dispatch;\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.sparklinePlus = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sparkline = nv.models.sparkline();\n\n    var margin = {top: 15, right: 100, bottom: 10, left: 50}\n        , width = null\n        , height = null\n        , x\n        , y\n        , index = []\n        , paused = false\n        , xTickFormat = d3.format(',r')\n        , yTickFormat = d3.format(',.2f')\n        , showLastValue = true\n        , alignValue = true\n        , rightAlignValue = false\n        , noData = null\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n        \n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(sparkline);\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.call(chart); };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var currentValue = sparkline.y()(data[data.length-1], data.length-1);\n\n            // Setup Scales\n            x = sparkline.xScale();\n            y = sparkline.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-sparklineWrap');\n            gEnter.append('g').attr('class', 'nv-valueWrap');\n            gEnter.append('g').attr('class', 'nv-hoverArea');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            var sparklineWrap = g.select('.nv-sparklineWrap');\n\n            sparkline.width(availableWidth).height(availableHeight);\n            sparklineWrap.call(sparkline);\n\n            if (showLastValue) {\n                var valueWrap = g.select('.nv-valueWrap');\n                var value = valueWrap.selectAll('.nv-currentValue')\n                    .data([currentValue]);\n\n                value.enter().append('text').attr('class', 'nv-currentValue')\n                    .attr('dx', rightAlignValue ? -8 : 8)\n                    .attr('dy', '.9em')\n                    .style('text-anchor', rightAlignValue ? 'end' : 'start');\n\n                value\n                    .attr('x', availableWidth + (rightAlignValue ? margin.right : 0))\n                    .attr('y', alignValue ? function (d) {\n                        return y(d)\n                    } : 0)\n                    .style('fill', sparkline.color()(data[data.length - 1], data.length - 1))\n                    .text(yTickFormat(currentValue));\n            }\n\n            gEnter.select('.nv-hoverArea').append('rect')\n                .on('mousemove', sparklineHover)\n                .on('click', function() { paused = !paused })\n                .on('mouseout', function() { index = []; updateValueLine(); });\n\n            g.select('.nv-hoverArea rect')\n                .attr('transform', function(d) { return 'translate(' + -margin.left + ',' + -margin.top + ')' })\n                .attr('width', availableWidth + margin.left + margin.right)\n                .attr('height', availableHeight + margin.top);\n\n            //index is currently global (within the chart), may or may not keep it that way\n            function updateValueLine() {\n                if (paused) return;\n\n                var hoverValue = g.selectAll('.nv-hoverValue').data(index);\n\n                var hoverEnter = hoverValue.enter()\n                    .append('g').attr('class', 'nv-hoverValue')\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 0);\n\n                hoverValue.exit()\n                    .transition().duration(250)\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 0)\n                    .remove();\n\n                hoverValue\n                    .attr('transform', function(d) { return 'translate(' + x(sparkline.x()(data[d],d)) + ',0)' })\n                    .transition().duration(250)\n                    .style('stroke-opacity', 1)\n                    .style('fill-opacity', 1);\n\n                if (!index.length) return;\n\n                hoverEnter.append('line')\n                    .attr('x1', 0)\n                    .attr('y1', -margin.top)\n                    .attr('x2', 0)\n                    .attr('y2', availableHeight);\n\n                hoverEnter.append('text').attr('class', 'nv-xValue')\n                    .attr('x', -6)\n                    .attr('y', -margin.top)\n                    .attr('text-anchor', 'end')\n                    .attr('dy', '.9em');\n\n                g.select('.nv-hoverValue .nv-xValue')\n                    .text(xTickFormat(sparkline.x()(data[index[0]], index[0])));\n\n                hoverEnter.append('text').attr('class', 'nv-yValue')\n                    .attr('x', 6)\n                    .attr('y', -margin.top)\n                    .attr('text-anchor', 'start')\n                    .attr('dy', '.9em');\n\n                g.select('.nv-hoverValue .nv-yValue')\n                    .text(yTickFormat(sparkline.y()(data[index[0]], index[0])));\n            }\n\n            function sparklineHover() {\n                if (paused) return;\n\n                var pos = d3.mouse(this)[0] - margin.left;\n\n                function getClosestIndex(data, x) {\n                    var distance = Math.abs(sparkline.x()(data[0], 0) - x);\n                    var closestIndex = 0;\n                    for (var i = 0; i < data.length; i++){\n                        if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {\n                            distance = Math.abs(sparkline.x()(data[i], i) - x);\n                            closestIndex = i;\n                        }\n                    }\n                    return closestIndex;\n                }\n\n                index = [getClosestIndex(data, Math.round(x.invert(pos)))];\n                updateValueLine();\n            }\n\n        });\n        renderWatch.renderEnd('sparklinePlus immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.sparkline = sparkline;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:           {get: function(){return width;}, set: function(_){width=_;}},\n        height:          {get: function(){return height;}, set: function(_){height=_;}},\n        xTickFormat:     {get: function(){return xTickFormat;}, set: function(_){xTickFormat=_;}},\n        yTickFormat:     {get: function(){return yTickFormat;}, set: function(_){yTickFormat=_;}},\n        showLastValue:   {get: function(){return showLastValue;}, set: function(_){showLastValue=_;}},\n        alignValue:      {get: function(){return alignValue;}, set: function(_){alignValue=_;}},\n        rightAlignValue: {get: function(){return rightAlignValue;}, set: function(_){rightAlignValue=_;}},\n        noData:          {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, sparkline);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedArea = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , color = nv.utils.defaultColor() // a function that computes the color\n        , id = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't selet one\n        , container = null\n        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n        , style = 'stack'\n        , offset = 'zero'\n        , order = 'default'\n        , interpolate = 'linear'  // controls the line interpolation\n        , clipEdge = false // if true, masks lines within x and y scale\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , scatter = nv.models.scatter()\n        , duration = 250\n        , dispatch =  d3.dispatch('areaClick', 'areaMouseover', 'areaMouseout','renderEnd', 'elementClick', 'elementMouseover', 'elementMouseout')\n        ;\n\n    scatter\n        .pointSize(2.2) // default size\n        .pointDomain([2.2, 2.2]) // all the same size by default\n    ;\n\n    /************************************\n     * offset:\n     *   'wiggle' (stream)\n     *   'zero' (stacked)\n     *   'expand' (normalize to 100%)\n     *   'silhouette' (simple centered)\n     *\n     * order:\n     *   'inside-out' (stream)\n     *   'default' (input order)\n     ************************************/\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            var dataRaw = data;\n            // Injecting point index into each point because d3.layout.stack().out does not give index\n            data.forEach(function(aseries, i) {\n                aseries.seriesIndex = i;\n                aseries.values = aseries.values.map(function(d, j) {\n                    d.index = j;\n                    d.seriesIndex = i;\n                    return d;\n                });\n            });\n\n            var dataFiltered = data.filter(function(series) {\n                return !series.disabled;\n            });\n\n            data = d3.layout.stack()\n                .order(order)\n                .offset(offset)\n                .values(function(d) { return d.values })  //TODO: make values customizeable in EVERY model in this fashion\n                .x(getX)\n                .y(getY)\n                .out(function(d, y0, y) {\n                    d.display = {\n                        y: y,\n                        y0: y0\n                    };\n                })\n            (dataFiltered);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-areaWrap');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            \n            // If the user has not specified forceY, make sure 0 is included in the domain\n            // Otherwise, use user-specified values for forceY\n            if (scatter.forceY().length == 0) {\n                scatter.forceY().push(0);\n            }\n            \n            scatter\n                .width(availableWidth)\n                .height(availableHeight)\n                .x(getX)\n                .y(function(d) {\n                    if (d.display !== undefined) { return d.display.y + d.display.y0; }\n                })\n                .color(data.map(function(d,i) {\n                    d.color = d.color || color(d, d.seriesIndex);\n                    return d.color;\n                }));\n\n            var scatterWrap = g.select('.nv-scatterWrap')\n                .datum(data);\n\n            scatterWrap.call(scatter);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect');\n\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            var area = d3.svg.area()\n                .defined(defined)\n                .x(function(d,i)  { return x(getX(d,i)) })\n                .y0(function(d) {\n                    return y(d.display.y0)\n                })\n                .y1(function(d) {\n                    return y(d.display.y + d.display.y0)\n                })\n                .interpolate(interpolate);\n\n            var zeroArea = d3.svg.area()\n                .defined(defined)\n                .x(function(d,i)  { return x(getX(d,i)) })\n                .y0(function(d) { return y(d.display.y0) })\n                .y1(function(d) { return y(d.display.y0) });\n\n            var path = g.select('.nv-areaWrap').selectAll('path.nv-area')\n                .data(function(d) { return d });\n\n            path.enter().append('path').attr('class', function(d,i) { return 'nv-area nv-area-' + i })\n                .attr('d', function(d,i){\n                    return zeroArea(d.values, d.seriesIndex);\n                })\n                .on('mouseover', function(d,i) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.areaMouseover({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.areaMouseout({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                })\n                .on('click', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.areaClick({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                });\n\n            path.exit().remove();\n            path.style('fill', function(d,i){\n                    return d.color || color(d, d.seriesIndex)\n                })\n                .style('stroke', function(d,i){ return d.color || color(d, d.seriesIndex) });\n            path.watchTransition(renderWatch,'stackedArea path')\n                .attr('d', function(d,i) {\n                    return area(d.values,i)\n                });\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            scatter.dispatch.on('elementMouseover.area', function(e) {\n                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);\n            });\n            scatter.dispatch.on('elementMouseout.area', function(e) {\n                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);\n            });\n\n            //Special offset functions\n            chart.d3_stackedOffset_stackPercent = function(stackData) {\n                var n = stackData.length,    //How many series\n                    m = stackData[0].length,     //how many points per series\n                    i,\n                    j,\n                    o,\n                    y0 = [];\n\n                for (j = 0; j < m; ++j) { //Looping through all points\n                    for (i = 0, o = 0; i < dataRaw.length; i++) { //looping through all series\n                        o += getY(dataRaw[i].values[j]); //total y value of all series at a certian point in time.\n                    }\n\n                    if (o) for (i = 0; i < n; i++) { //(total y value of all series at point in time i) != 0\n                        stackData[i][j][1] /= o;\n                    } else { //(total y value of all series at point in time i) == 0\n                        for (i = 0; i < n; i++) {\n                            stackData[i][j][1] = 0;\n                        }\n                    }\n                }\n                for (j = 0; j < m; ++j) y0[j] = 0;\n                return y0;\n            };\n\n        });\n\n        renderWatch.renderEnd('stackedArea immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Global getters and setters\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n\n    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\n    chart.interpolate = function(_) {\n        if (!arguments.length) return interpolate;\n        interpolate = _;\n        return chart;\n    };\n\n    chart.duration = function(_) {\n        if (!arguments.length) return duration;\n        duration = _;\n        renderWatch.reset(duration);\n        scatter.duration(duration);\n        return chart;\n    };\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        offset:      {get: function(){return offset;}, set: function(_){offset=_;}},\n        order:    {get: function(){return order;}, set: function(_){order=_;}},\n        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n\n        // simple functor options\n        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        style: {get: function(){return style;}, set: function(_){\n            style = _;\n            switch (style) {\n                case 'stack':\n                    chart.offset('zero');\n                    chart.order('default');\n                    break;\n                case 'stream':\n                    chart.offset('wiggle');\n                    chart.order('inside-out');\n                    break;\n                case 'stream-center':\n                    chart.offset('silhouette');\n                    chart.order('inside-out');\n                    break;\n                case 'expand':\n                    chart.offset('expand');\n                    chart.order('default');\n                    break;\n                case 'stack_percent':\n                    chart.offset(chart.d3_stackedOffset_stackPercent);\n                    chart.order('default');\n                    break;\n            }\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            scatter.duration(duration);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedAreaChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var stacked = nv.models.stackedArea()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        , focus = nv.models.focus(nv.models.stackedArea())\n        ;\n\n    var margin = {top: 10, right: 25, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , focusEnable = false\n        , useInteractiveGuideline = false\n        , showTotalInTooltip = true\n        , totalLabel = 'TOTAL'\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        , controlWidth = 250\n        , controlOptions = ['Stacked','Stream','Expanded']\n        , controlLabels = {}\n        , duration = 250\n        ;\n\n    state.style = stacked.style();\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\n    tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        });\n\n    var oldYTickFormat = null,\n        oldValueFormatter = null;\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    var style = stacked.style();\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                style: stacked.style()\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.style !== undefined)\n                style = state.style;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var percentFormatter = d3.format('%');\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(stacked);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n\n            chart.update = function() { container.transition().duration(duration).call(chart); };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n            // Setup Scales\n            x = stacked.xScale();\n            y = stacked.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n            focusEnter.append('g').attr('class', 'nv-stackedWrap');\n            focusEnter.append('g').attr('class', 'nv-interactive');\n\n            // g.select(\"rect\").attr(\"width\",availableWidth).attr(\"height\",availableHeight);\n\n            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = (showControls && legendPosition === 'top') ? availableWidth - controlWidth : availableWidth;\n\n                legend.width(legendWidth);\n                g.select('.nv-legendWrap').datum(data).call(legend);\n\n                if (legendPosition === 'bottom') {\n                \t// constant from axis.js, plus some margin for better layout\n                \tvar xAxisHeight = (showXAxis ? 12 : 0) + 10;\n                   \tmargin.bottom = Math.max(legend.height() + xAxisHeight, margin.bottom);\n                   \tavailableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                \tvar legendTop = availableHeight + xAxisHeight;\n                    g.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + legendTop +')');\n                } else if (legendPosition === 'top') {\n                    if (!marginTop && margin.top != legend.height()) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                    }\n\n                    g.select('.nv-legendWrap')\n                    \t.attr('transform', 'translate(' + (availableWidth-legendWidth) + ',' + (-margin.top) +')');\n                }\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    {\n                        key: controlLabels.stacked || 'Stacked',\n                        metaKey: 'Stacked',\n                        disabled: stacked.style() != 'stack',\n                        style: 'stack'\n                    },\n                    {\n                        key: controlLabels.stream || 'Stream',\n                        metaKey: 'Stream',\n                        disabled: stacked.style() != 'stream',\n                        style: 'stream'\n                    },\n                    {\n                        key: controlLabels.expanded || 'Expanded',\n                        metaKey: 'Expanded',\n                        disabled: stacked.style() != 'expand',\n                        style: 'expand'\n                    },\n                    {\n                        key: controlLabels.stack_percent || 'Stack %',\n                        metaKey: 'Stack_Percent',\n                        disabled: stacked.style() != 'stack_percent',\n                        style: 'stack_percent'\n                    }\n                ];\n\n                controlWidth = (controlOptions.length/3) * 260;\n                controlsData = controlsData.filter(function(d) {\n                    return controlOptions.indexOf(d.metaKey) !== -1;\n                });\n\n                controls\n                    .width( controlWidth )\n                    .color(['#444', '#444', '#444']);\n\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .call(controls);\n\n                var requiredTop = Math.max(controls.height(), showLegend && (legendPosition === 'top') ? legend.height() : 0);\n\n                if ( margin.top != requiredTop ) {\n                    margin.top = requiredTop;\n                    availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                }\n\n                g.select('.nv-controlsWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left: margin.left, top: margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            g.select('.nv-focus .nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            stacked\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis.scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight, 0);\n            }\n\n            if (showYAxis) {\n                var ticks;\n                if (stacked.offset() === 'wiggle') {\n                    ticks = 0;\n                }\n                else {\n                    ticks = nv.utils.calcTicksY(availableHeight/36, data);\n                }\n                yAxis.scale(y)\n                    ._ticks(ticks)\n                    .tickSize(-availableWidth, 0);\n            }\n\n            //============================================================\n            // Update Axes\n            //============================================================\n            function updateXAxis() {\n                if(showXAxis) {\n                    g.select('.nv-focus .nv-x.nv-axis')\n                        .attr('transform', 'translate(0,' + availableHeight + ')')\n                        .transition()\n                        .duration(duration)\n                        .call(xAxis)\n                        ;\n                }\n            }\n\n            function updateYAxis() {\n                if(showYAxis) {\n                    if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n                        var currentFormat = yAxis.tickFormat();\n\n                        if ( !oldYTickFormat || currentFormat !== percentFormatter )\n                            oldYTickFormat = currentFormat;\n\n                        //Forces the yAxis to use percentage in 'expand' mode.\n                        yAxis.tickFormat(percentFormatter);\n                    }\n                    else {\n                        if (oldYTickFormat) {\n                            yAxis.tickFormat(oldYTickFormat);\n                            oldYTickFormat = null;\n                        }\n                    }\n\n                    g.select('.nv-focus .nv-y.nv-axis')\n                    .transition().duration(0)\n                    .call(yAxis);\n                }\n            }\n\n            //============================================================\n            // Update Focus\n            //============================================================\n            if(!focusEnable) {\n                stackedWrap.transition().call(stacked);\n                updateXAxis();\n                updateYAxis();\n            } else {\n                focus.width(availableWidth);\n                g.select('.nv-focusWrap')\n                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n                    .datum(data.filter(function(d) { return !d.disabled; }))\n                    .call(focus);\n                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n                if(extent !== null){\n                    onBrush(extent);\n                }\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            stacked.dispatch.on('areaClick.toggle', function(e) {\n                if (data.filter(function(d) { return !d.disabled }).length === 1)\n                    data.forEach(function(d) {\n                        d.disabled = false;\n                    });\n                else\n                    data.forEach(function(d,i) {\n                        d.disabled = (i != e.seriesIndex);\n                    });\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n\n                chart.update();\n            });\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                stacked.style(d.style);\n\n\n                state.style = stacked.style();\n                dispatch.stateChange(state);\n\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                stacked.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [], valueSum = 0, allNullValues = true, atleastOnePoint = false;\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        var point = series.values[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue != null && pointYValue > 0) {\n                            stacked.highlightPoint(i, pointIndex, true);\n                            atleastOnePoint = true;\n                        }\n                    \n                        // Draw at least one point if all values are zero.\n                        if (i === (data.length - 1) && !atleastOnePoint) {\n                            stacked.highlightPoint(i, pointIndex, true);\n                        }\n                        if (typeof point === 'undefined') return;\n                        if (typeof singlePoint === 'undefined') singlePoint = point;\n                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\n                        //If we are in 'expand' mode, use the stacked percent value instead of raw value.\n                        var tooltipValue = (stacked.style() == 'expand') ? point.display.y : chart.y()(point,pointIndex);\n                        allData.push({\n                            key: series.key,\n                            value: tooltipValue,\n                            color: color(series,series.seriesIndex),\n                            point: point\n                        });\n\n                        if (showTotalInTooltip && stacked.style() != 'expand' && tooltipValue != null) {\n                          valueSum += tooltipValue;\n                          allNullValues = false;\n                        };\n                    });\n\n                allData.reverse();\n\n                //Highlight the tooltip entry based on which stack the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var yDistMax = Infinity, indexToHighlight = null;\n                    allData.forEach(function(series,i) {\n\n                        //To handle situation where the stacked area chart is negative, we need to use absolute values\n                        //when checking if the mouse Y value is within the stack area.\n                        yValue = Math.abs(yValue);\n                        var stackedY0 = Math.abs(series.point.display.y0);\n                        var stackedY = Math.abs(series.point.display.y);\n                        if ( yValue >= stackedY0 && yValue <= (stackedY + stackedY0))\n                        {\n                            indexToHighlight = i;\n                            return;\n                        }\n                    });\n                    if (indexToHighlight != null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                //If we are not in 'expand' mode, add a 'Total' row to the tooltip.\n                if (showTotalInTooltip && stacked.style() != 'expand' && allData.length >= 2 && !allNullValues) {\n                    allData.push({\n                        key: totalLabel,\n                        value: valueSum,\n                        total: true\n                    });\n                }\n\n                var xValue = chart.x()(singlePoint,pointIndex);\n\n                var valueFormatter = interactiveLayer.tooltip.valueFormatter();\n                // Keeps track of the tooltip valueFormatter if the chart changes to expanded view\n                if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n                    if ( !oldValueFormatter ) {\n                        oldValueFormatter = valueFormatter;\n                    }\n                    //Forces the tooltip to use percentage in 'expand' mode.\n                    valueFormatter = d3.format(\".1%\");\n                }\n                else {\n                    if (oldValueFormatter) {\n                        valueFormatter = oldValueFormatter;\n                        oldValueFormatter = null;\n                    }\n                }\n\n                interactiveLayer.tooltip\n                    .valueFormatter(valueFormatter)\n                    .data(\n                    {\n                        value: xValue,\n                        series: allData\n                    }\n                )();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                stacked.clearHighlights();\n            });\n\n            /* Update `main' graph on brush update. */\n            focus.dispatch.on(\"onBrush\", function(extent) {\n                onBrush(extent);\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n\n                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.style !== 'undefined') {\n                    stacked.style(e.style);\n                    style = e.style;\n                }\n\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            function onBrush(extent) {\n                // Update Main (Focus)\n                var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n                    .datum(\n                    data.filter(function(d) { return !d.disabled; })\n                        .map(function(d,i) {\n                            return {\n                                key: d.key,\n                                area: d.area,\n                                classed: d.classed,\n                                values: d.values.filter(function(d,i) {\n                                    return stacked.x()(d,i) >= extent[0] && stacked.x()(d,i) <= extent[1];\n                                }),\n                                disableTooltip: d.disableTooltip\n                            };\n                        })\n                );\n                stackedWrap.transition().duration(duration).call(stacked);\n\n                // Update Main (Focus) Axes\n                updateXAxis();\n                updateYAxis();\n            }\n\n        });\n\n        renderWatch.renderEnd('stacked Area chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    stacked.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.point['x'] = stacked.x()(evt.point);\n        evt.point['y'] = stacked.y()(evt.point);\n        tooltip.data(evt).hidden(false);\n    });\n\n    stacked.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.stacked = stacked;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.x2Axis = focus.xAxis;\n    chart.yAxis = yAxis;\n    chart.y2Axis = focus.yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n    chart.focus = focus;\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        showControls:    {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels:    {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        controlOptions:    {get: function(){return controlOptions;}, set: function(_){controlOptions=_;}},\n        showTotalInTooltip:      {get: function(){return showTotalInTooltip;}, set: function(_){showTotalInTooltip=_;}},\n        totalLabel:      {get: function(){return totalLabel;}, set: function(_){totalLabel=_;}},\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        focusMargin: {get: function(){return focus.margin}, set: function(_){\n            focus.margin.top    = _.top    !== undefined ? _.top    : focus.margin.top;\n            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            stacked.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            stacked.color(color);\n            focus.color(color);\n        }},\n        x: {get: function(){return stacked.x();}, set: function(_){\n            stacked.x(_);\n            focus.x(_);\n        }},\n        y: {get: function(){return stacked.y();}, set: function(_){\n            stacked.y(_);\n            focus.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = !!_;\n            chart.interactive(!_);\n            chart.useVoronoi(!_);\n            stacked.scatter.interactive(!_);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, stacked);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedAreaWithFocusChart = function() {\n  return nv.models.stackedAreaChart()\n    .margin({ bottom: 30 })\n    .focusEnable( true );\n};\n// based on http://bl.ocks.org/kerryrodden/477c1bfb081b783f80ad\nnv.models.sunburst = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 600\n        , height = 600\n        , mode = \"count\"\n        , modes = {count: function(d) { return 1; }, value: function(d) { return d.value || d.size }, size: function(d) { return d.value || d.size }}\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , color = nv.utils.defaultColor()\n        , showLabels = false\n        , labelFormat = function(d){if(mode === 'count'){return d.name + ' #' + d.value}else{return d.name + ' ' + (d.value || d.size)}}\n        , labelThreshold = 0.02\n        , sort = function(d1, d2){return d1.name > d2.name;}\n        , key = function(d,i){\n            if (d.parent !== undefined) {\n                return d.name + '-' + d.parent.name + '-' + i;\n            } else {\n                return d.name;\n            }\n        }\n        , groupColorByParent = true\n        , duration = 500\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMousemove', 'elementMouseover', 'elementMouseout', 'renderEnd');\n\n    //============================================================\n    // aux functions and setup\n    //------------------------------------------------------------\n\n    var x = d3.scale.linear().range([0, 2 * Math.PI]);\n    var y = d3.scale.sqrt();\n\n    var partition = d3.layout.partition().sort(sort);\n\n    var node, availableWidth, availableHeight, radius;\n    var prevPositions = {};\n\n    var arc = d3.svg.arc()\n        .startAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x))) })\n        .endAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))) })\n        .innerRadius(function(d) {return Math.max(0, y(d.y)) })\n        .outerRadius(function(d) {return Math.max(0, y(d.y + d.dy)) });\n\n    function rotationToAvoidUpsideDown(d) {\n        var centerAngle = computeCenterAngle(d);\n        if(centerAngle > 90){\n            return 180;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    function computeCenterAngle(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n        var centerAngle = (((startAngle + endAngle) / 2) * (180 / Math.PI)) - 90;\n        return centerAngle;\n    }\n\n    function computeNodePercentage(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n        return (endAngle - startAngle) / (2 * Math.PI);\n    }\n\n    function labelThresholdMatched(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n\n        var size = endAngle - startAngle;\n        return size > labelThreshold;\n    }\n\n    // When zooming: interpolate the scales.\n    function arcTweenZoom(e,i) {\n        var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]),\n        yd = d3.interpolate(y.domain(), [node.y, 1]),\n        yr = d3.interpolate(y.range(), [node.y ? 20 : 0, radius]);\n\n        if (i === 0) {\n            return function() {return arc(e);}\n        }\n        else {\n            return function (t) {\n                x.domain(xd(t));\n                y.domain(yd(t)).range(yr(t));\n                return arc(e);\n            }\n        };\n    }\n\n    function arcTweenUpdate(d) {\n        var ipo = d3.interpolate({x: d.x0, dx: d.dx0, y: d.y0, dy: d.dy0}, d);\n\n        return function (t) {\n            var b = ipo(t);\n\n            d.x0 = b.x;\n            d.dx0 = b.dx;\n            d.y0 = b.y;\n            d.dy0 = b.dy;\n\n            return arc(b);\n        };\n    }\n\n    function updatePrevPosition(node) {\n        var k = key(node);\n        if(! prevPositions[k]) prevPositions[k] = {};\n        var pP = prevPositions[k];\n        pP.dx = node.dx;\n        pP.x = node.x;\n        pP.dy = node.dy;\n        pP.y = node.y;\n    }\n\n    function storeRetrievePrevPositions(nodes) {\n        nodes.forEach(function(n){\n            var k = key(n);\n            var pP = prevPositions[k];\n            //console.log(k,n,pP);\n            if( pP ){\n                n.dx0 = pP.dx;\n                n.x0 = pP.x;\n                n.dy0 = pP.dy;\n                n.y0 = pP.y;\n            }\n            else {\n                n.dx0 = n.dx;\n                n.x0 = n.x;\n                n.dy0 = n.dy;\n                n.y0 = n.y;\n            }\n            updatePrevPosition(n);\n        });\n    }\n\n    function zoomClick(d) {\n        var labels = container.selectAll('text')\n        var path = container.selectAll('path')\n\n        // fade out all text elements\n        labels.transition().attr(\"opacity\",0);\n\n        // to allow reference to the new center node\n        node = d;\n\n        path.transition()\n            .duration(duration)\n            .attrTween(\"d\", arcTweenZoom)\n            .each('end', function(e) {\n                // partially taken from here: http://bl.ocks.org/metmajer/5480307\n                // check if the animated element's data e lies within the visible angle span given in d\n                if(e.x >= d.x && e.x < (d.x + d.dx) ){\n                    if(e.depth >= d.depth){\n                        // get a selection of the associated text element\n                        var parentNode = d3.select(this.parentNode);\n                        var arcText = parentNode.select('text');\n\n                        // fade in the text element and recalculate positions\n                        arcText.transition().duration(duration)\n                        .text( function(e){return labelFormat(e) })\n                        .attr(\"opacity\", function(d){\n                            if(labelThresholdMatched(d)) {\n                                return 1;\n                            }\n                            else {\n                                return 0;\n                            }\n                        })\n                        .attr(\"transform\", function() {\n                            var width = this.getBBox().width;\n                            if(e.depth === 0)\n                            return \"translate(\" + (width / 2 * - 1) + \",0)\";\n                            else if(e.depth === d.depth){\n                                return \"translate(\" + (y(e.y) + 5) + \",0)\";\n                            }\n                            else {\n                                var centerAngle = computeCenterAngle(e);\n                                var rotation = rotationToAvoidUpsideDown(e);\n                                if (rotation === 0) {\n                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + 5) + ',0)';\n                                }\n                                else {\n                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + width + 5) + ',0)rotate(' + rotation + ')';\n                                }\n                            }\n                        });\n                    }\n                }\n            })\n    }\n\n    //============================================================\n    // chart function\n    //------------------------------------------------------------\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n\n        selection.each(function(data) {\n            container = d3.select(this);\n            availableWidth = nv.utils.availableWidth(width, container, margin);\n            availableHeight = nv.utils.availableHeight(height, container, margin);\n            radius = Math.min(availableWidth, availableHeight) / 2;\n\n            y.range([0, radius]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.select('g.nvd3.nv-wrap.nv-sunburst');\n            if( !wrap[0][0] ) {\n                wrap = container.append('g')\n                    .attr('class', 'nvd3 nv-wrap nv-sunburst nv-chart-' + id)\n                    .attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n            } else {\n                wrap.attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n            }\n\n            container.on('click', function (d, i) {\n                dispatch.chartClick({\n                    data: d,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n            });\n\n            partition.value(modes[mode] || modes[\"count\"]);\n\n            //reverse the drawing order so that the labels of inner\n            //arcs are drawn on top of the outer arcs.\n            var nodes = partition.nodes(data[0]).reverse()\n\n            storeRetrievePrevPositions(nodes);\n            var cG = wrap.selectAll('.arc-container').data(nodes, key)\n\n            //handle new datapoints\n            var cGE = cG.enter()\n                .append(\"g\")\n                .attr(\"class\",'arc-container')\n\n            cGE.append(\"path\")\n                .attr(\"d\", arc)\n                .style(\"fill\", function (d) {\n                    if (d.color) {\n                        return d.color;\n                    }\n                    else if (groupColorByParent) {\n                        return color((d.children ? d : d.parent).name);\n                    }\n                    else {\n                        return color(d.name);\n                    }\n                })\n                .style(\"stroke\", \"#FFF\")\n                .on(\"click\", function(d,i){\n                    zoomClick(d);\n                    dispatch.elementClick({\n                        data: d,\n                        index: i\n                    })\n                })\n                .on('mouseover', function(d,i){\n                    d3.select(this).classed('hover', true).style('opacity', 0.8);\n                    dispatch.elementMouseover({\n                        data: d,\n                        color: d3.select(this).style(\"fill\"),\n                        percent: computeNodePercentage(d)\n                    });\n                })\n                .on('mouseout', function(d,i){\n                    d3.select(this).classed('hover', false).style('opacity', 1);\n                    dispatch.elementMouseout({\n                        data: d\n                    });\n                })\n                .on('mousemove', function(d,i){\n                    dispatch.elementMousemove({\n                        data: d\n                    });\n                });\n\n            ///Iterating via each and selecting based on the this\n            ///makes it work ... a cG.selectAll('path') doesn't.\n            ///Without iteration the data (in the element) didn't update.\n            cG.each(function(d){\n                d3.select(this).select('path')\n                    .transition()\n                    .duration(duration)\n                    .attrTween('d', arcTweenUpdate);\n            });\n\n            if(showLabels){\n                //remove labels first and add them back\n                cG.selectAll('text').remove();\n\n                //this way labels are on top of newly added arcs\n                cG.append('text')\n                    .text( function(e){ return labelFormat(e)})\n                    .transition()\n                    .duration(duration)\n                    .attr(\"opacity\", function(d){\n                        if(labelThresholdMatched(d)) {\n                            return 1;\n                        }\n                        else {\n                            return 0;\n                        }\n                    })\n                    .attr(\"transform\", function(d) {\n                        var width = this.getBBox().width;\n                        if(d.depth === 0){\n                            return \"rotate(0)translate(\" + (width / 2 * -1) + \",0)\";\n                        }\n                        else {\n                            var centerAngle = computeCenterAngle(d);\n                            var rotation = rotationToAvoidUpsideDown(d);\n                            if (rotation === 0) {\n                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + 5) + ',0)';\n                            }\n                            else {\n                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + width + 5) + ',0)rotate(' + rotation + ')';\n                            }\n                        }\n                    });\n            }\n\n            //zoom out to the center when the data is updated.\n            zoomClick(nodes[nodes.length - 1])\n\n\n            //remove unmatched elements ...\n            cG.exit()\n                .transition()\n                .duration(duration)\n                .attr('opacity',0)\n                .each('end',function(d){\n                    var k = key(d);\n                    prevPositions[k] = undefined;\n                })\n                .remove();\n        });\n\n\n        renderWatch.renderEnd('sunburst immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        mode:       {get: function(){return mode;}, set: function(_){mode=_;}},\n        id:         {get: function(){return id;}, set: function(_){id=_;}},\n        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n        groupColorByParent: {get: function(){return groupColorByParent;}, set: function(_){groupColorByParent=!!_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=!!_}},\n        labelFormat: {get: function(){return labelFormat;}, set: function(_){labelFormat=_}},\n        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_}},\n        sort: {get: function(){return sort;}, set: function(_){sort=_}},\n        key: {get: function(){return key;}, set: function(_){key=_}},\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color=nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.sunburstChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sunburst = nv.models.sunburst();\n    var tooltip = nv.models.tooltip();\n\n    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showTooltipPercent = false\n        , id = Math.round(Math.random() * 100000)\n        , defaultState = null\n        , noData = null\n        , duration = 250\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd');\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d){return d;});\n\n    //============================================================\n    // Chart function\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(sunburst);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin);\n            var availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0) {\n                    container.call(chart);\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = container;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            sunburst.width(availableWidth).height(availableHeight).margin(margin);\n            container.call(sunburst);\n        });\n\n        renderWatch.renderEnd('sunburstChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    sunburst.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.series = {\n            key: evt.data.name,\n            value: (evt.data.value || evt.data.size),\n            color: evt.color,\n            percent: evt.percent\n        };\n        if (!showTooltipPercent) {\n            delete evt.percent;\n            delete evt.series.percent;\n        }\n        tooltip.data(evt).hidden(false);\n    });\n\n    sunburst.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    sunburst.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.sunburst = sunburst;\n    chart.tooltip = tooltip;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // use Object get/set functionality to map between vars and chart functions\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n\n        // options that require extra logic in the setter\n        color: {get: function(){return color;}, set: function(_){\n            color = _;\n            sunburst.color(color);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            sunburst.duration(duration);\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n            sunburst.margin(margin);\n        }}\n    });\n    nv.utils.inheritOptions(chart, sunburst);\n    nv.utils.initOptions(chart);\n    return chart;\n\n};\n\nnv.version = \"1.8.6\";\n})();\n//# sourceMappingURL=nv.d3.js.map\n\n//# sourceURL=webpack:///./node_modules/nvd3/build/nv.d3.js?");

/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node-libs-browser/mock/process.js */ \"./node_modules/node-libs-browser/mock/process.js\")))\n\n//# sourceURL=webpack:///./node_modules/path-browserify/index.js?");

/***/ }),

/***/ "./node_modules/tinycolor2/cjs/tinycolor.js":
/*!**************************************************!*\
  !*** ./node_modules/tinycolor2/cjs/tinycolor.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// This file is autogenerated. It's used to publish CJS to npm.\n(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n})(this, (function () { 'use strict';\n\n  // https://github.com/bgrins/TinyColor\n  // Brian Grinstead, MIT License\n\n  const trimLeft = /^\\s+/;\n  const trimRight = /\\s+$/;\n\n  function tinycolor(color, opts) {\n    color = color ? color : \"\";\n    opts = opts || {};\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n      return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n      return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    (this._originalInput = color),\n      (this._r = rgb.r),\n      (this._g = rgb.g),\n      (this._b = rgb.b),\n      (this._a = rgb.a),\n      (this._roundA = Math.round(100 * this._a) / 100),\n      (this._format = opts.format || rgb.format);\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) this._r = Math.round(this._r);\n    if (this._g < 1) this._g = Math.round(this._g);\n    if (this._b < 1) this._b = Math.round(this._b);\n\n    this._ok = rgb.ok;\n  }\n\n  tinycolor.prototype = {\n    isDark: function () {\n      return this.getBrightness() < 128;\n    },\n    isLight: function () {\n      return !this.isDark();\n    },\n    isValid: function () {\n      return this._ok;\n    },\n    getOriginalInput: function () {\n      return this._originalInput;\n    },\n    getFormat: function () {\n      return this._format;\n    },\n    getAlpha: function () {\n      return this._a;\n    },\n    getBrightness: function () {\n      //http://www.w3.org/TR/AERT#color-contrast\n      var rgb = this.toRgb();\n      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function () {\n      //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n      var rgb = this.toRgb();\n      var RsRGB, GsRGB, BsRGB, R, G, B;\n      RsRGB = rgb.r / 255;\n      GsRGB = rgb.g / 255;\n      BsRGB = rgb.b / 255;\n\n      if (RsRGB <= 0.03928) R = RsRGB / 12.92;\n      else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n      if (GsRGB <= 0.03928) G = GsRGB / 12.92;\n      else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n      if (BsRGB <= 0.03928) B = BsRGB / 12.92;\n      else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n      return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    },\n    setAlpha: function (value) {\n      this._a = boundAlpha(value);\n      this._roundA = Math.round(100 * this._a) / 100;\n      return this;\n    },\n    toHsv: function () {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function () {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      var h = Math.round(hsv.h * 360),\n        s = Math.round(hsv.s * 100),\n        v = Math.round(hsv.v * 100);\n      return this._a == 1\n        ? \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\"\n        : \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + this._roundA + \")\";\n    },\n    toHsl: function () {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function () {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      var h = Math.round(hsl.h * 360),\n        s = Math.round(hsl.s * 100),\n        l = Math.round(hsl.l * 100);\n      return this._a == 1\n        ? \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\"\n        : \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + this._roundA + \")\";\n    },\n    toHex: function (allow3Char) {\n      return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function (allow3Char) {\n      return \"#\" + this.toHex(allow3Char);\n    },\n    toHex8: function (allow4Char) {\n      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function (allow4Char) {\n      return \"#\" + this.toHex8(allow4Char);\n    },\n    toRgb: function () {\n      return {\n        r: Math.round(this._r),\n        g: Math.round(this._g),\n        b: Math.round(this._b),\n        a: this._a,\n      };\n    },\n    toRgbString: function () {\n      return this._a == 1\n        ? \"rgb(\" +\n            Math.round(this._r) +\n            \", \" +\n            Math.round(this._g) +\n            \", \" +\n            Math.round(this._b) +\n            \")\"\n        : \"rgba(\" +\n            Math.round(this._r) +\n            \", \" +\n            Math.round(this._g) +\n            \", \" +\n            Math.round(this._b) +\n            \", \" +\n            this._roundA +\n            \")\";\n    },\n    toPercentageRgb: function () {\n      return {\n        r: Math.round(bound01(this._r, 255) * 100) + \"%\",\n        g: Math.round(bound01(this._g, 255) * 100) + \"%\",\n        b: Math.round(bound01(this._b, 255) * 100) + \"%\",\n        a: this._a,\n      };\n    },\n    toPercentageRgbString: function () {\n      return this._a == 1\n        ? \"rgb(\" +\n            Math.round(bound01(this._r, 255) * 100) +\n            \"%, \" +\n            Math.round(bound01(this._g, 255) * 100) +\n            \"%, \" +\n            Math.round(bound01(this._b, 255) * 100) +\n            \"%)\"\n        : \"rgba(\" +\n            Math.round(bound01(this._r, 255) * 100) +\n            \"%, \" +\n            Math.round(bound01(this._g, 255) * 100) +\n            \"%, \" +\n            Math.round(bound01(this._b, 255) * 100) +\n            \"%, \" +\n            this._roundA +\n            \")\";\n    },\n    toName: function () {\n      if (this._a === 0) {\n        return \"transparent\";\n      }\n\n      if (this._a < 1) {\n        return false;\n      }\n\n      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function (secondColor) {\n      var hex8String = \"#\" + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n      var secondHex8String = hex8String;\n      var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n      if (secondColor) {\n        var s = tinycolor(secondColor);\n        secondHex8String = \"#\" + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n      }\n\n      return (\n        \"progid:DXImageTransform.Microsoft.gradient(\" +\n        gradientType +\n        \"startColorstr=\" +\n        hex8String +\n        \",endColorstr=\" +\n        secondHex8String +\n        \")\"\n      );\n    },\n    toString: function (format) {\n      var formatSet = !!format;\n      format = format || this._format;\n\n      var formattedString = false;\n      var hasAlpha = this._a < 1 && this._a >= 0;\n      var needsAlphaFormat =\n        !formatSet &&\n        hasAlpha &&\n        (format === \"hex\" ||\n          format === \"hex6\" ||\n          format === \"hex3\" ||\n          format === \"hex4\" ||\n          format === \"hex8\" ||\n          format === \"name\");\n\n      if (needsAlphaFormat) {\n        // Special case for \"transparent\", all other non-alpha formats\n        // will return rgba when there is transparency.\n        if (format === \"name\" && this._a === 0) {\n          return this.toName();\n        }\n        return this.toRgbString();\n      }\n      if (format === \"rgb\") {\n        formattedString = this.toRgbString();\n      }\n      if (format === \"prgb\") {\n        formattedString = this.toPercentageRgbString();\n      }\n      if (format === \"hex\" || format === \"hex6\") {\n        formattedString = this.toHexString();\n      }\n      if (format === \"hex3\") {\n        formattedString = this.toHexString(true);\n      }\n      if (format === \"hex4\") {\n        formattedString = this.toHex8String(true);\n      }\n      if (format === \"hex8\") {\n        formattedString = this.toHex8String();\n      }\n      if (format === \"name\") {\n        formattedString = this.toName();\n      }\n      if (format === \"hsl\") {\n        formattedString = this.toHslString();\n      }\n      if (format === \"hsv\") {\n        formattedString = this.toHsvString();\n      }\n\n      return formattedString || this.toHexString();\n    },\n    clone: function () {\n      return tinycolor(this.toString());\n    },\n\n    _applyModification: function (fn, args) {\n      var color = fn.apply(null, [this].concat([].slice.call(args)));\n      this._r = color._r;\n      this._g = color._g;\n      this._b = color._b;\n      this.setAlpha(color._a);\n      return this;\n    },\n    lighten: function () {\n      return this._applyModification(lighten, arguments);\n    },\n    brighten: function () {\n      return this._applyModification(brighten, arguments);\n    },\n    darken: function () {\n      return this._applyModification(darken, arguments);\n    },\n    desaturate: function () {\n      return this._applyModification(desaturate, arguments);\n    },\n    saturate: function () {\n      return this._applyModification(saturate, arguments);\n    },\n    greyscale: function () {\n      return this._applyModification(greyscale, arguments);\n    },\n    spin: function () {\n      return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function (fn, args) {\n      return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function () {\n      return this._applyCombination(analogous, arguments);\n    },\n    complement: function () {\n      return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function () {\n      return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function () {\n      return this._applyCombination(splitcomplement, arguments);\n    },\n    // Disabled until https://github.com/bgrins/TinyColor/issues/254\n    // polyad: function (number) {\n    //   return this._applyCombination(polyad, [number]);\n    // },\n    triad: function () {\n      return this._applyCombination(polyad, [3]);\n    },\n    tetrad: function () {\n      return this._applyCombination(polyad, [4]);\n    },\n  };\n\n  // If input is an object, force 1 into \"1.0\" to handle ratios properly\n  // String input requires \"1.0\" as input, so 1 will be treated as 1\n  tinycolor.fromRatio = function (color, opts) {\n    if (typeof color == \"object\") {\n      var newColor = {};\n      for (var i in color) {\n        if (color.hasOwnProperty(i)) {\n          if (i === \"a\") {\n            newColor[i] = color[i];\n          } else {\n            newColor[i] = convertToPercentage(color[i]);\n          }\n        }\n      }\n      color = newColor;\n    }\n\n    return tinycolor(color, opts);\n  };\n\n  // Given a string or object, convert that input to RGB\n  // Possible string inputs:\n  //\n  //     \"red\"\n  //     \"#f00\" or \"f00\"\n  //     \"#ff0000\" or \"ff0000\"\n  //     \"#ff000000\" or \"ff000000\"\n  //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n  //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n  //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n  //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n  //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n  //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n  //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n  //\n  function inputToRGB(color) {\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n      color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n      if (\n        isValidCSSUnit(color.r) &&\n        isValidCSSUnit(color.g) &&\n        isValidCSSUnit(color.b)\n      ) {\n        rgb = rgbToRgb(color.r, color.g, color.b);\n        ok = true;\n        format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n      } else if (\n        isValidCSSUnit(color.h) &&\n        isValidCSSUnit(color.s) &&\n        isValidCSSUnit(color.v)\n      ) {\n        s = convertToPercentage(color.s);\n        v = convertToPercentage(color.v);\n        rgb = hsvToRgb(color.h, s, v);\n        ok = true;\n        format = \"hsv\";\n      } else if (\n        isValidCSSUnit(color.h) &&\n        isValidCSSUnit(color.s) &&\n        isValidCSSUnit(color.l)\n      ) {\n        s = convertToPercentage(color.s);\n        l = convertToPercentage(color.l);\n        rgb = hslToRgb(color.h, s, l);\n        ok = true;\n        format = \"hsl\";\n      }\n\n      if (color.hasOwnProperty(\"a\")) {\n        a = color.a;\n      }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n      ok: ok,\n      format: color.format || format,\n      r: Math.min(255, Math.max(rgb.r, 0)),\n      g: Math.min(255, Math.max(rgb.g, 0)),\n      b: Math.min(255, Math.max(rgb.b, 0)),\n      a: a,\n    };\n  }\n\n  // Conversion Functions\n  // --------------------\n\n  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n  // `rgbToRgb`\n  // Handle bounds / percentage checking to conform to CSS color spec\n  // <http://www.w3.org/TR/css3-color/>\n  // *Assumes:* r, g, b in [0, 255] or [0, 1]\n  // *Returns:* { r, g, b } in [0, 255]\n  function rgbToRgb(r, g, b) {\n    return {\n      r: bound01(r, 255) * 255,\n      g: bound01(g, 255) * 255,\n      b: bound01(b, 255) * 255,\n    };\n  }\n\n  // `rgbToHsl`\n  // Converts an RGB color value to HSL.\n  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n  // *Returns:* { h, s, l } in [0,1]\n  function rgbToHsl(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = Math.max(r, g, b),\n      min = Math.min(r, g, b);\n    var h,\n      s,\n      l = (max + min) / 2;\n\n    if (max == min) {\n      h = s = 0; // achromatic\n    } else {\n      var d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n        case g:\n          h = (b - r) / d + 2;\n          break;\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n\n      h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n  }\n\n  // `hslToRgb`\n  // Converts an HSL color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n  function hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    }\n\n    if (s === 0) {\n      r = g = b = l; // achromatic\n    } else {\n      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      var p = 2 * l - q;\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n  }\n\n  // `rgbToHsv`\n  // Converts an RGB color value to HSV\n  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n  // *Returns:* { h, s, v } in [0,1]\n  function rgbToHsv(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = Math.max(r, g, b),\n      min = Math.min(r, g, b);\n    var h,\n      s,\n      v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if (max == min) {\n      h = 0; // achromatic\n    } else {\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n        case g:\n          h = (b - r) / d + 2;\n          break;\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n      h /= 6;\n    }\n    return { h: h, s: s, v: v };\n  }\n\n  // `hsvToRgb`\n  // Converts an HSV color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n  function hsvToRgb(h, s, v) {\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n      f = h - i,\n      p = v * (1 - s),\n      q = v * (1 - f * s),\n      t = v * (1 - (1 - f) * s),\n      mod = i % 6,\n      r = [v, q, p, p, t, v][mod],\n      g = [t, v, v, q, p, p][mod],\n      b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n  }\n\n  // `rgbToHex`\n  // Converts an RGB color to hex\n  // Assumes r, g, and b are contained in the set [0, 255]\n  // Returns a 3 or 6 character hex\n  function rgbToHex(r, g, b, allow3Char) {\n    var hex = [\n      pad2(Math.round(r).toString(16)),\n      pad2(Math.round(g).toString(16)),\n      pad2(Math.round(b).toString(16)),\n    ];\n\n    // Return a 3 character hex if possible\n    if (\n      allow3Char &&\n      hex[0].charAt(0) == hex[0].charAt(1) &&\n      hex[1].charAt(0) == hex[1].charAt(1) &&\n      hex[2].charAt(0) == hex[2].charAt(1)\n    ) {\n      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n  }\n\n  // `rgbaToHex`\n  // Converts an RGBA color plus alpha transparency to hex\n  // Assumes r, g, b are contained in the set [0, 255] and\n  // a in [0, 1]. Returns a 4 or 8 character rgba hex\n  function rgbaToHex(r, g, b, a, allow4Char) {\n    var hex = [\n      pad2(Math.round(r).toString(16)),\n      pad2(Math.round(g).toString(16)),\n      pad2(Math.round(b).toString(16)),\n      pad2(convertDecimalToHex(a)),\n    ];\n\n    // Return a 4 character hex if possible\n    if (\n      allow4Char &&\n      hex[0].charAt(0) == hex[0].charAt(1) &&\n      hex[1].charAt(0) == hex[1].charAt(1) &&\n      hex[2].charAt(0) == hex[2].charAt(1) &&\n      hex[3].charAt(0) == hex[3].charAt(1)\n    ) {\n      return (\n        hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0)\n      );\n    }\n\n    return hex.join(\"\");\n  }\n\n  // `rgbaToArgbHex`\n  // Converts an RGBA color to an ARGB Hex8 string\n  // Rarely used, but required for \"toFilter()\"\n  function rgbaToArgbHex(r, g, b, a) {\n    var hex = [\n      pad2(convertDecimalToHex(a)),\n      pad2(Math.round(r).toString(16)),\n      pad2(Math.round(g).toString(16)),\n      pad2(Math.round(b).toString(16)),\n    ];\n\n    return hex.join(\"\");\n  }\n\n  // `equals`\n  // Can be called with any tinycolor input\n  tinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) return false;\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n  };\n\n  tinycolor.random = function () {\n    return tinycolor.fromRatio({\n      r: Math.random(),\n      g: Math.random(),\n      b: Math.random(),\n    });\n  };\n\n  // Modification Functions\n  // ----------------------\n  // Thanks to less.js for some of the basics here\n  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\n  function desaturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n\n  function saturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n\n  function greyscale(color) {\n    return tinycolor(color).desaturate(100);\n  }\n\n  function lighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  }\n\n  function brighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n    return tinycolor(rgb);\n  }\n\n  function darken(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  }\n\n  // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n  // Values outside of this range will be wrapped into this range.\n  function spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n  }\n\n  // Combination Functions\n  // ---------------------\n  // Thanks to jQuery xColor for some of the ideas behind these\n  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\n  function complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n  }\n\n  function polyad(color, number) {\n    if (isNaN(number) || number <= 0) {\n      throw new Error(\"Argument to polyad must be a positive number\");\n    }\n    var hsl = tinycolor(color).toHsl();\n    var result = [tinycolor(color)];\n    var step = 360 / number;\n    for (var i = 1; i < number; i++) {\n      result.push(tinycolor({ h: (hsl.h + i * step) % 360, s: hsl.s, l: hsl.l }));\n    }\n\n    return result;\n  }\n\n  function splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n      tinycolor(color),\n      tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),\n      tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),\n    ];\n  }\n\n  function analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results; ) {\n      hsl.h = (hsl.h + part) % 360;\n      ret.push(tinycolor(hsl));\n    }\n    return ret;\n  }\n\n  function monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h,\n      s = hsv.s,\n      v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n      ret.push(tinycolor({ h: h, s: s, v: v }));\n      v = (v + modification) % 1;\n    }\n\n    return ret;\n  }\n\n  // Utility Functions\n  // ---------------------\n\n  tinycolor.mix = function (color1, color2, amount) {\n    amount = amount === 0 ? 0 : amount || 50;\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n      r: (rgb2.r - rgb1.r) * p + rgb1.r,\n      g: (rgb2.g - rgb1.g) * p + rgb1.g,\n      b: (rgb2.b - rgb1.b) * p + rgb1.b,\n      a: (rgb2.a - rgb1.a) * p + rgb1.a,\n    };\n\n    return tinycolor(rgba);\n  };\n\n  // Readability Functions\n  // ---------------------\n  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n  // `contrast`\n  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n  tinycolor.readability = function (color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (\n      (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) /\n      (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05)\n    );\n  };\n\n  // `isReadable`\n  // Ensure that foreground and background color combinations meet WCAG2 guidelines.\n  // The third argument is an optional Object.\n  //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n  //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n  // If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n  // *Example*\n  //    tinycolor.isReadable(\"#000\", \"#111\") => false\n  //    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\n  tinycolor.isReadable = function (color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n      case \"AAsmall\":\n      case \"AAAlarge\":\n        out = readability >= 4.5;\n        break;\n      case \"AAlarge\":\n        out = readability >= 3;\n        break;\n      case \"AAAsmall\":\n        out = readability >= 7;\n        break;\n    }\n    return out;\n  };\n\n  // `mostReadable`\n  // Given a base color and a list of possible foreground or background\n  // colors for that base, returns the most readable color.\n  // Optionally returns Black or White if the most readable color is unreadable.\n  // *Example*\n  //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n  //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n  //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n  //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\n  tinycolor.mostReadable = function (baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors;\n    level = args.level;\n    size = args.size;\n\n    for (var i = 0; i < colorList.length; i++) {\n      readability = tinycolor.readability(baseColor, colorList[i]);\n      if (readability > bestScore) {\n        bestScore = readability;\n        bestColor = tinycolor(colorList[i]);\n      }\n    }\n\n    if (\n      tinycolor.isReadable(baseColor, bestColor, {\n        level: level,\n        size: size,\n      }) ||\n      !includeFallbackColors\n    ) {\n      return bestColor;\n    } else {\n      args.includeFallbackColors = false;\n      return tinycolor.mostReadable(baseColor, [\"#fff\", \"#000\"], args);\n    }\n  };\n\n  // Big List of Colors\n  // ------------------\n  // <https://www.w3.org/TR/css-color-4/#named-colors>\n  var names = (tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\",\n  });\n\n  // Make it easy to access colors via `hexNames[hex]`\n  var hexNames = (tinycolor.hexNames = flip(names));\n\n  // Utilities\n  // ---------\n\n  // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\n  function flip(o) {\n    var flipped = {};\n    for (var i in o) {\n      if (o.hasOwnProperty(i)) {\n        flipped[o[i]] = i;\n      }\n    }\n    return flipped;\n  }\n\n  // Return a valid alpha value [0,1] with all invalid values being set to 1\n  function boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n      a = 1;\n    }\n\n    return a;\n  }\n\n  // Take input from [0, n] and return it as [0, 1]\n  function bound01(n, max) {\n    if (isOnePointZero(n)) n = \"100%\";\n\n    var processPercent = isPercentage(n);\n    n = Math.min(max, Math.max(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n      n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if (Math.abs(n - max) < 0.000001) {\n      return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n  }\n\n  // Force a number between 0 and 1\n  function clamp01(val) {\n    return Math.min(1, Math.max(0, val));\n  }\n\n  // Parse a base-16 hex value into a base-10 integer\n  function parseIntFromHex(val) {\n    return parseInt(val, 16);\n  }\n\n  // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n  function isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf(\".\") != -1 && parseFloat(n) === 1;\n  }\n\n  // Check to see if string passed in is a percentage\n  function isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf(\"%\") != -1;\n  }\n\n  // Force a hex value to have 2 characters\n  function pad2(c) {\n    return c.length == 1 ? \"0\" + c : \"\" + c;\n  }\n\n  // Replace a decimal with it's percentage value\n  function convertToPercentage(n) {\n    if (n <= 1) {\n      n = n * 100 + \"%\";\n    }\n\n    return n;\n  }\n\n  // Converts a decimal to a hex value\n  function convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n  }\n  // Converts a hex value to a decimal\n  function convertHexToDecimal(h) {\n    return parseIntFromHex(h) / 255;\n  }\n\n  var matchers = (function () {\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 =\n      \"[\\\\s|\\\\(]+(\" +\n      CSS_UNIT +\n      \")[,|\\\\s]+(\" +\n      CSS_UNIT +\n      \")[,|\\\\s]+(\" +\n      CSS_UNIT +\n      \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 =\n      \"[\\\\s|\\\\(]+(\" +\n      CSS_UNIT +\n      \")[,|\\\\s]+(\" +\n      CSS_UNIT +\n      \")[,|\\\\s]+(\" +\n      CSS_UNIT +\n      \")[,|\\\\s]+(\" +\n      CSS_UNIT +\n      \")\\\\s*\\\\)?\";\n\n    return {\n      CSS_UNIT: new RegExp(CSS_UNIT),\n      rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n      rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n      hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n      hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n      hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n      hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n    };\n  })();\n\n  // `isValidCSSUnit`\n  // Take in a single string / number and check to see if it looks like a CSS unit\n  // (see `matchers` above for definition).\n  function isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n  }\n\n  // `stringInputToObject`\n  // Permissive string parsing.  Take in a number of formats, and output an object\n  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n  function stringInputToObject(color) {\n    color = color.replace(trimLeft, \"\").replace(trimRight, \"\").toLowerCase();\n    var named = false;\n    if (names[color]) {\n      color = names[color];\n      named = true;\n    } else if (color == \"transparent\") {\n      return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n      return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n      return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n      return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n      return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n      return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n      return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        a: convertHexToDecimal(match[4]),\n        format: named ? \"name\" : \"hex8\",\n      };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        format: named ? \"name\" : \"hex\",\n      };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n      return {\n        r: parseIntFromHex(match[1] + \"\" + match[1]),\n        g: parseIntFromHex(match[2] + \"\" + match[2]),\n        b: parseIntFromHex(match[3] + \"\" + match[3]),\n        a: convertHexToDecimal(match[4] + \"\" + match[4]),\n        format: named ? \"name\" : \"hex8\",\n      };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n      return {\n        r: parseIntFromHex(match[1] + \"\" + match[1]),\n        g: parseIntFromHex(match[2] + \"\" + match[2]),\n        b: parseIntFromHex(match[3] + \"\" + match[3]),\n        format: named ? \"name\" : \"hex\",\n      };\n    }\n\n    return false;\n  }\n\n  function validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || { level: \"AA\", size: \"small\" };\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n      level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n      size = \"small\";\n    }\n    return { level: level, size: size };\n  }\n\n  return tinycolor;\n\n}));\n\n\n//# sourceURL=webpack:///./node_modules/tinycolor2/cjs/tinycolor.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./packages/vendors/pptx/lib/dingbat.js":
/*!**********************************************!*\
  !*** ./packages/vendors/pptx/lib/dingbat.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var dingbat_unicode = [\n  { f: 'Webdings', code: '33', unicode: '128375' },\n  { f: 'Webdings', code: '34', unicode: '128376' },\n  { f: 'Webdings', code: '35', unicode: '128370' },\n  { f: 'Webdings', code: '36', unicode: '128374' },\n  { f: 'Webdings', code: '37', unicode: '127942' },\n  { f: 'Webdings', code: '38', unicode: '127894' },\n  { f: 'Webdings', code: '39', unicode: '128391' },\n  { f: 'Webdings', code: '40', unicode: '128488' },\n  { f: 'Webdings', code: '41', unicode: '128489' },\n  { f: 'Webdings', code: '42', unicode: '128496' },\n  { f: 'Webdings', code: '43', unicode: '128497' },\n  { f: 'Webdings', code: '44', unicode: '127798' },\n  { f: 'Webdings', code: '45', unicode: '127895' },\n  { f: 'Webdings', code: '46', unicode: '128638' },\n  { f: 'Webdings', code: '47', unicode: '128636' },\n  { f: 'Webdings', code: '48', unicode: '128469' },\n  { f: 'Webdings', code: '49', unicode: '128470' },\n  { f: 'Webdings', code: '50', unicode: '128471' },\n  { f: 'Webdings', code: '51', unicode: '9204' },\n  { f: 'Webdings', code: '52', unicode: '9205' },\n  { f: 'Webdings', code: '53', unicode: '9206' },\n  { f: 'Webdings', code: '54', unicode: '9207' },\n  { f: 'Webdings', code: '55', unicode: '9194' },\n  { f: 'Webdings', code: '56', unicode: '9193' },\n  { f: 'Webdings', code: '57', unicode: '9198' },\n  { f: 'Webdings', code: '58', unicode: '9197' },\n  { f: 'Webdings', code: '59', unicode: '9208' },\n  { f: 'Webdings', code: '60', unicode: '9209' },\n  { f: 'Webdings', code: '61', unicode: '9210' },\n  { f: 'Webdings', code: '62', unicode: '128474' },\n  { f: 'Webdings', code: '63', unicode: '128499' },\n  { f: 'Webdings', code: '64', unicode: '128736' },\n  { f: 'Webdings', code: '65', unicode: '127959' },\n  { f: 'Webdings', code: '66', unicode: '127960' },\n  { f: 'Webdings', code: '67', unicode: '127961' },\n  { f: 'Webdings', code: '68', unicode: '127962' },\n  { f: 'Webdings', code: '69', unicode: '127964' },\n  { f: 'Webdings', code: '70', unicode: '127981' },\n  { f: 'Webdings', code: '71', unicode: '127963' },\n  { f: 'Webdings', code: '72', unicode: '127968' },\n  { f: 'Webdings', code: '73', unicode: '127958' },\n  { f: 'Webdings', code: '74', unicode: '127965' },\n  { f: 'Webdings', code: '75', unicode: '128739' },\n  { f: 'Webdings', code: '76', unicode: '128269' },\n  { f: 'Webdings', code: '77', unicode: '127956' },\n  { f: 'Webdings', code: '78', unicode: '128065' },\n  { f: 'Webdings', code: '79', unicode: '128066' },\n  { f: 'Webdings', code: '80', unicode: '127966' },\n  { f: 'Webdings', code: '81', unicode: '127957' },\n  { f: 'Webdings', code: '82', unicode: '128740' },\n  { f: 'Webdings', code: '83', unicode: '127967' },\n  { f: 'Webdings', code: '84', unicode: '128755' },\n  { f: 'Webdings', code: '85', unicode: '128364' },\n  { f: 'Webdings', code: '86', unicode: '128363' },\n  { f: 'Webdings', code: '87', unicode: '128360' },\n  { f: 'Webdings', code: '88', unicode: '128264' },\n  { f: 'Webdings', code: '89', unicode: '127892' },\n  { f: 'Webdings', code: '90', unicode: '127893' },\n  { f: 'Webdings', code: '91', unicode: '128492' },\n  { f: 'Webdings', code: '92', unicode: '128637' },\n  { f: 'Webdings', code: '93', unicode: '128493' },\n  { f: 'Webdings', code: '94', unicode: '128490' },\n  { f: 'Webdings', code: '95', unicode: '128491' },\n  { f: 'Webdings', code: '96', unicode: '11156' },\n  { f: 'Webdings', code: '97', unicode: '10004' },\n  { f: 'Webdings', code: '98', unicode: '128690' },\n  { f: 'Webdings', code: '99', unicode: '11036' },\n  { f: 'Webdings', code: '100', unicode: '128737' },\n  { f: 'Webdings', code: '101', unicode: '128230' },\n  { f: 'Webdings', code: '102', unicode: '128753' },\n  { f: 'Webdings', code: '103', unicode: '11035' },\n  { f: 'Webdings', code: '104', unicode: '128657' },\n  { f: 'Webdings', code: '105', unicode: '128712' },\n  { f: 'Webdings', code: '106', unicode: '128745' },\n  { f: 'Webdings', code: '107', unicode: '128752' },\n  { f: 'Webdings', code: '108', unicode: '128968' },\n  { f: 'Webdings', code: '109', unicode: '128372' },\n  { f: 'Webdings', code: '110', unicode: '11044' },\n  { f: 'Webdings', code: '111', unicode: '128741' },\n  { f: 'Webdings', code: '112', unicode: '128660' },\n  { f: 'Webdings', code: '113', unicode: '128472' },\n  { f: 'Webdings', code: '114', unicode: '128473' },\n  { f: 'Webdings', code: '115', unicode: '10067' },\n  { f: 'Webdings', code: '116', unicode: '128754' },\n  { f: 'Webdings', code: '117', unicode: '128647' },\n  { f: 'Webdings', code: '118', unicode: '128653' },\n  { f: 'Webdings', code: '119', unicode: '9971' },\n  { f: 'Webdings', code: '120', unicode: '10680' },\n  { f: 'Webdings', code: '121', unicode: '8854' },\n  { f: 'Webdings', code: '122', unicode: '128685' },\n  { f: 'Webdings', code: '123', unicode: '128494' },\n  { f: 'Webdings', code: '124', unicode: '9168' },\n  { f: 'Webdings', code: '125', unicode: '128495' },\n  { f: 'Webdings', code: '126', unicode: '128498' },\n  { f: 'Webdings', code: '128', unicode: '128697' },\n  { f: 'Webdings', code: '129', unicode: '128698' },\n  { f: 'Webdings', code: '130', unicode: '128713' },\n  { f: 'Webdings', code: '131', unicode: '128714' },\n  { f: 'Webdings', code: '132', unicode: '128700' },\n  { f: 'Webdings', code: '133', unicode: '128125' },\n  { f: 'Webdings', code: '134', unicode: '127947' },\n  { f: 'Webdings', code: '135', unicode: '9975' },\n  { f: 'Webdings', code: '136', unicode: '127938' },\n  { f: 'Webdings', code: '137', unicode: '127948' },\n  { f: 'Webdings', code: '138', unicode: '127946' },\n  { f: 'Webdings', code: '139', unicode: '127940' },\n  { f: 'Webdings', code: '140', unicode: '127949' },\n  { f: 'Webdings', code: '141', unicode: '127950' },\n  { f: 'Webdings', code: '142', unicode: '128664' },\n  { f: 'Webdings', code: '143', unicode: '128480' },\n  { f: 'Webdings', code: '144', unicode: '128738' },\n  { f: 'Webdings', code: '145', unicode: '128176' },\n  { f: 'Webdings', code: '146', unicode: '127991' },\n  { f: 'Webdings', code: '147', unicode: '128179' },\n  { f: 'Webdings', code: '148', unicode: '128106' },\n  { f: 'Webdings', code: '149', unicode: '128481' },\n  { f: 'Webdings', code: '150', unicode: '128482' },\n  { f: 'Webdings', code: '151', unicode: '128483' },\n  { f: 'Webdings', code: '152', unicode: '10031' },\n  { f: 'Webdings', code: '153', unicode: '128388' },\n  { f: 'Webdings', code: '154', unicode: '128389' },\n  { f: 'Webdings', code: '155', unicode: '128387' },\n  { f: 'Webdings', code: '156', unicode: '128390' },\n  { f: 'Webdings', code: '157', unicode: '128441' },\n  { f: 'Webdings', code: '158', unicode: '128442' },\n  { f: 'Webdings', code: '159', unicode: '128443' },\n  { f: 'Webdings', code: '160', unicode: '128373' },\n  { f: 'Webdings', code: '161', unicode: '128368' },\n  { f: 'Webdings', code: '162', unicode: '128445' },\n  { f: 'Webdings', code: '163', unicode: '128446' },\n  { f: 'Webdings', code: '164', unicode: '128203' },\n  { f: 'Webdings', code: '165', unicode: '128466' },\n  { f: 'Webdings', code: '166', unicode: '128467' },\n  { f: 'Webdings', code: '167', unicode: '128366' },\n  { f: 'Webdings', code: '168', unicode: '128218' },\n  { f: 'Webdings', code: '169', unicode: '128478' },\n  { f: 'Webdings', code: '170', unicode: '128479' },\n  { f: 'Webdings', code: '171', unicode: '128451' },\n  { f: 'Webdings', code: '172', unicode: '128450' },\n  { f: 'Webdings', code: '173', unicode: '128444' },\n  { f: 'Webdings', code: '174', unicode: '127917' },\n  { f: 'Webdings', code: '175', unicode: '127900' },\n  { f: 'Webdings', code: '176', unicode: '127896' },\n  { f: 'Webdings', code: '177', unicode: '127897' },\n  { f: 'Webdings', code: '178', unicode: '127911' },\n  { f: 'Webdings', code: '179', unicode: '128191' },\n  { f: 'Webdings', code: '180', unicode: '127902' },\n  { f: 'Webdings', code: '181', unicode: '128247' },\n  { f: 'Webdings', code: '182', unicode: '127903' },\n  { f: 'Webdings', code: '183', unicode: '127916' },\n  { f: 'Webdings', code: '184', unicode: '128253' },\n  { f: 'Webdings', code: '185', unicode: '128249' },\n  { f: 'Webdings', code: '186', unicode: '128254' },\n  { f: 'Webdings', code: '187', unicode: '128251' },\n  { f: 'Webdings', code: '188', unicode: '127898' },\n  { f: 'Webdings', code: '189', unicode: '127899' },\n  { f: 'Webdings', code: '190', unicode: '128250' },\n  { f: 'Webdings', code: '191', unicode: '128187' },\n  { f: 'Webdings', code: '192', unicode: '128421' },\n  { f: 'Webdings', code: '193', unicode: '128422' },\n  { f: 'Webdings', code: '194', unicode: '128423' },\n  { f: 'Webdings', code: '195', unicode: '128377' },\n  { f: 'Webdings', code: '196', unicode: '127918' },\n  { f: 'Webdings', code: '197', unicode: '128379' },\n  { f: 'Webdings', code: '198', unicode: '128380' },\n  { f: 'Webdings', code: '199', unicode: '128223' },\n  { f: 'Webdings', code: '200', unicode: '128385' },\n  { f: 'Webdings', code: '201', unicode: '128384' },\n  { f: 'Webdings', code: '202', unicode: '128424' },\n  { f: 'Webdings', code: '203', unicode: '128425' },\n  { f: 'Webdings', code: '204', unicode: '128447' },\n  { f: 'Webdings', code: '205', unicode: '128426' },\n  { f: 'Webdings', code: '206', unicode: '128476' },\n  { f: 'Webdings', code: '207', unicode: '128274' },\n  { f: 'Webdings', code: '208', unicode: '128275' },\n  { f: 'Webdings', code: '209', unicode: '128477' },\n  { f: 'Webdings', code: '210', unicode: '128229' },\n  { f: 'Webdings', code: '211', unicode: '128228' },\n  { f: 'Webdings', code: '212', unicode: '128371' },\n  { f: 'Webdings', code: '213', unicode: '127779' },\n  { f: 'Webdings', code: '214', unicode: '127780' },\n  { f: 'Webdings', code: '215', unicode: '127781' },\n  { f: 'Webdings', code: '216', unicode: '127782' },\n  { f: 'Webdings', code: '217', unicode: '9729' },\n  { f: 'Webdings', code: '218', unicode: '127784' },\n  { f: 'Webdings', code: '219', unicode: '127783' },\n  { f: 'Webdings', code: '220', unicode: '127785' },\n  { f: 'Webdings', code: '221', unicode: '127786' },\n  { f: 'Webdings', code: '222', unicode: '127788' },\n  { f: 'Webdings', code: '223', unicode: '127787' },\n  { f: 'Webdings', code: '224', unicode: '127772' },\n  { f: 'Webdings', code: '225', unicode: '127777' },\n  { f: 'Webdings', code: '226', unicode: '128715' },\n  { f: 'Webdings', code: '227', unicode: '128719' },\n  { f: 'Webdings', code: '228', unicode: '127869' },\n  { f: 'Webdings', code: '229', unicode: '127864' },\n  { f: 'Webdings', code: '230', unicode: '128718' },\n  { f: 'Webdings', code: '231', unicode: '128717' },\n  { f: 'Webdings', code: '232', unicode: '9413' },\n  { f: 'Webdings', code: '233', unicode: '9855' },\n  { f: 'Webdings', code: '234', unicode: '128710' },\n  { f: 'Webdings', code: '235', unicode: '128392' },\n  { f: 'Webdings', code: '236', unicode: '127891' },\n  { f: 'Webdings', code: '237', unicode: '128484' },\n  { f: 'Webdings', code: '238', unicode: '128485' },\n  { f: 'Webdings', code: '239', unicode: '128486' },\n  { f: 'Webdings', code: '240', unicode: '128487' },\n  { f: 'Webdings', code: '241', unicode: '128746' },\n  { f: 'Webdings', code: '242', unicode: '128063' },\n  { f: 'Webdings', code: '243', unicode: '128038' },\n  { f: 'Webdings', code: '244', unicode: '128031' },\n  { f: 'Webdings', code: '245', unicode: '128021' },\n  { f: 'Webdings', code: '246', unicode: '128008' },\n  { f: 'Webdings', code: '247', unicode: '128620' },\n  { f: 'Webdings', code: '248', unicode: '128622' },\n  { f: 'Webdings', code: '249', unicode: '128621' },\n  { f: 'Webdings', code: '250', unicode: '128623' },\n  { f: 'Webdings', code: '251', unicode: '128506' },\n  { f: 'Webdings', code: '252', unicode: '127757' },\n  { f: 'Webdings', code: '253', unicode: '127759' },\n  { f: 'Webdings', code: '254', unicode: '127758' },\n  { f: 'Webdings', code: '255', unicode: '128330' },\n  { f: 'Wingdings', code: '32', unicode: '32' },\n  { f: 'Wingdings', code: '33', unicode: '128393' },\n  { f: 'Wingdings', code: '34', unicode: '9986' },\n  { f: 'Wingdings', code: '35', unicode: '9985' },\n  { f: 'Wingdings', code: '36', unicode: '128083' },\n  { f: 'Wingdings', code: '37', unicode: '128365' },\n  { f: 'Wingdings', code: '38', unicode: '128366' },\n  { f: 'Wingdings', code: '39', unicode: '128367' },\n  { f: 'Wingdings', code: '40', unicode: '128383' },\n  { f: 'Wingdings', code: '41', unicode: '9990' },\n  { f: 'Wingdings', code: '42', unicode: '128386' },\n  { f: 'Wingdings', code: '43', unicode: '128387' },\n  { f: 'Wingdings', code: '44', unicode: '128234' },\n  { f: 'Wingdings', code: '45', unicode: '128235' },\n  { f: 'Wingdings', code: '46', unicode: '128236' },\n  { f: 'Wingdings', code: '47', unicode: '128237' },\n  { f: 'Wingdings', code: '48', unicode: '128448' },\n  { f: 'Wingdings', code: '49', unicode: '128449' },\n  { f: 'Wingdings', code: '50', unicode: '128462' },\n  { f: 'Wingdings', code: '51', unicode: '128463' },\n  { f: 'Wingdings', code: '52', unicode: '128464' },\n  { f: 'Wingdings', code: '53', unicode: '128452' },\n  { f: 'Wingdings', code: '54', unicode: '8987' },\n  { f: 'Wingdings', code: '55', unicode: '128430' },\n  { f: 'Wingdings', code: '56', unicode: '128432' },\n  { f: 'Wingdings', code: '57', unicode: '128434' },\n  { f: 'Wingdings', code: '58', unicode: '128435' },\n  { f: 'Wingdings', code: '59', unicode: '128436' },\n  { f: 'Wingdings', code: '60', unicode: '128427' },\n  { f: 'Wingdings', code: '61', unicode: '128428' },\n  { f: 'Wingdings', code: '62', unicode: '9991' },\n  { f: 'Wingdings', code: '63', unicode: '9997' },\n  { f: 'Wingdings', code: '64', unicode: '128398' },\n  { f: 'Wingdings', code: '65', unicode: '9996' },\n  { f: 'Wingdings', code: '66', unicode: '128399' },\n  { f: 'Wingdings', code: '67', unicode: '128077' },\n  { f: 'Wingdings', code: '68', unicode: '128078' },\n  { f: 'Wingdings', code: '69', unicode: '9756' },\n  { f: 'Wingdings', code: '70', unicode: '9758' },\n  { f: 'Wingdings', code: '71', unicode: '9757' },\n  { f: 'Wingdings', code: '72', unicode: '9759' },\n  { f: 'Wingdings', code: '73', unicode: '128400' },\n  { f: 'Wingdings', code: '74', unicode: '9786' },\n  { f: 'Wingdings', code: '75', unicode: '128528' },\n  { f: 'Wingdings', code: '76', unicode: '9785' },\n  { f: 'Wingdings', code: '77', unicode: '128163' },\n  { f: 'Wingdings', code: '78', unicode: '128369' },\n  { f: 'Wingdings', code: '79', unicode: '127987' },\n  { f: 'Wingdings', code: '80', unicode: '127985' },\n  { f: 'Wingdings', code: '81', unicode: '9992' },\n  { f: 'Wingdings', code: '82', unicode: '9788' },\n  { f: 'Wingdings', code: '83', unicode: '127778' },\n  { f: 'Wingdings', code: '84', unicode: '10052' },\n  { f: 'Wingdings', code: '85', unicode: '128326' },\n  { f: 'Wingdings', code: '86', unicode: '10014' },\n  { f: 'Wingdings', code: '87', unicode: '128328' },\n  { f: 'Wingdings', code: '88', unicode: '10016' },\n  { f: 'Wingdings', code: '89', unicode: '10017' },\n  { f: 'Wingdings', code: '90', unicode: '9770' },\n  { f: 'Wingdings', code: '91', unicode: '9775' },\n  { f: 'Wingdings', code: '92', unicode: '128329' },\n  { f: 'Wingdings', code: '93', unicode: '9784' },\n  { f: 'Wingdings', code: '94', unicode: '9800' },\n  { f: 'Wingdings', code: '95', unicode: '9801' },\n  { f: 'Wingdings', code: '96', unicode: '9802' },\n  { f: 'Wingdings', code: '97', unicode: '9803' },\n  { f: 'Wingdings', code: '98', unicode: '9804' },\n  { f: 'Wingdings', code: '99', unicode: '9805' },\n  { f: 'Wingdings', code: '100', unicode: '9806' },\n  { f: 'Wingdings', code: '101', unicode: '9807' },\n  { f: 'Wingdings', code: '102', unicode: '9808' },\n  { f: 'Wingdings', code: '103', unicode: '9809' },\n  { f: 'Wingdings', code: '104', unicode: '9810' },\n  { f: 'Wingdings', code: '105', unicode: '9811' },\n  { f: 'Wingdings', code: '106', unicode: '128624' },\n  { f: 'Wingdings', code: '107', unicode: '128629' },\n  { f: 'Wingdings', code: '108', unicode: '9899' },\n  { f: 'Wingdings', code: '109', unicode: '128318' },\n  { f: 'Wingdings', code: '110', unicode: '9724' },\n  { f: 'Wingdings', code: '111', unicode: '128911' },\n  { f: 'Wingdings', code: '112', unicode: '128912' },\n  { f: 'Wingdings', code: '113', unicode: '10065' },\n  { f: 'Wingdings', code: '114', unicode: '10066' },\n  { f: 'Wingdings', code: '115', unicode: '128927' },\n  { f: 'Wingdings', code: '116', unicode: '10731' },\n  { f: 'Wingdings', code: '117', unicode: '9670' },\n  { f: 'Wingdings', code: '118', unicode: '10070' },\n  { f: 'Wingdings', code: '119', unicode: '11049' },\n  { f: 'Wingdings', code: '120', unicode: '8999' },\n  { f: 'Wingdings', code: '121', unicode: '11193' },\n  { f: 'Wingdings', code: '122', unicode: '8984' },\n  { f: 'Wingdings', code: '123', unicode: '127989' },\n  { f: 'Wingdings', code: '124', unicode: '127990' },\n  { f: 'Wingdings', code: '125', unicode: '128630' },\n  { f: 'Wingdings', code: '126', unicode: '128631' },\n  { f: 'Wingdings', code: '127', unicode: '9647' },\n  { f: 'Wingdings', code: '128', unicode: '127243' },\n  { f: 'Wingdings', code: '129', unicode: '10112' },\n  { f: 'Wingdings', code: '130', unicode: '10113' },\n  { f: 'Wingdings', code: '131', unicode: '10114' },\n  { f: 'Wingdings', code: '132', unicode: '10115' },\n  { f: 'Wingdings', code: '133', unicode: '10116' },\n  { f: 'Wingdings', code: '134', unicode: '10117' },\n  { f: 'Wingdings', code: '135', unicode: '10118' },\n  { f: 'Wingdings', code: '136', unicode: '10119' },\n  { f: 'Wingdings', code: '137', unicode: '10120' },\n  { f: 'Wingdings', code: '138', unicode: '10121' },\n  { f: 'Wingdings', code: '139', unicode: '127244' },\n  { f: 'Wingdings', code: '140', unicode: '10122' },\n  { f: 'Wingdings', code: '141', unicode: '10123' },\n  { f: 'Wingdings', code: '142', unicode: '10124' },\n  { f: 'Wingdings', code: '143', unicode: '10125' },\n  { f: 'Wingdings', code: '144', unicode: '10126' },\n  { f: 'Wingdings', code: '145', unicode: '10127' },\n  { f: 'Wingdings', code: '146', unicode: '10128' },\n  { f: 'Wingdings', code: '147', unicode: '10129' },\n  { f: 'Wingdings', code: '148', unicode: '10130' },\n  { f: 'Wingdings', code: '149', unicode: '10131' },\n  { f: 'Wingdings', code: '150', unicode: '128610' },\n  { f: 'Wingdings', code: '151', unicode: '128608' },\n  { f: 'Wingdings', code: '152', unicode: '128609' },\n  { f: 'Wingdings', code: '153', unicode: '128611' },\n  { f: 'Wingdings', code: '154', unicode: '128606' },\n  { f: 'Wingdings', code: '155', unicode: '128604' },\n  { f: 'Wingdings', code: '156', unicode: '128605' },\n  { f: 'Wingdings', code: '157', unicode: '128607' },\n  { f: 'Wingdings', code: '158', unicode: '8729' },\n  { f: 'Wingdings', code: '159', unicode: '8226' },\n  { f: 'Wingdings', code: '160', unicode: '11037' },\n  { f: 'Wingdings', code: '161', unicode: '11096' },\n  { f: 'Wingdings', code: '162', unicode: '128902' },\n  { f: 'Wingdings', code: '163', unicode: '128904' },\n  { f: 'Wingdings', code: '164', unicode: '128906' },\n  { f: 'Wingdings', code: '165', unicode: '128907' },\n  { f: 'Wingdings', code: '166', unicode: '128319' },\n  { f: 'Wingdings', code: '167', unicode: '9642' },\n  { f: 'Wingdings', code: '168', unicode: '128910' },\n  { f: 'Wingdings', code: '169', unicode: '128961' },\n  { f: 'Wingdings', code: '170', unicode: '128965' },\n  { f: 'Wingdings', code: '171', unicode: '9733' },\n  { f: 'Wingdings', code: '172', unicode: '128971' },\n  { f: 'Wingdings', code: '173', unicode: '128975' },\n  { f: 'Wingdings', code: '174', unicode: '128979' },\n  { f: 'Wingdings', code: '175', unicode: '128977' },\n  { f: 'Wingdings', code: '176', unicode: '11216' },\n  { f: 'Wingdings', code: '177', unicode: '8982' },\n  { f: 'Wingdings', code: '178', unicode: '11214' },\n  { f: 'Wingdings', code: '179', unicode: '11215' },\n  { f: 'Wingdings', code: '180', unicode: '11217' },\n  { f: 'Wingdings', code: '181', unicode: '10026' },\n  { f: 'Wingdings', code: '182', unicode: '10032' },\n  { f: 'Wingdings', code: '183', unicode: '128336' },\n  { f: 'Wingdings', code: '184', unicode: '128337' },\n  { f: 'Wingdings', code: '185', unicode: '128338' },\n  { f: 'Wingdings', code: '186', unicode: '128339' },\n  { f: 'Wingdings', code: '187', unicode: '128340' },\n  { f: 'Wingdings', code: '188', unicode: '128341' },\n  { f: 'Wingdings', code: '189', unicode: '128342' },\n  { f: 'Wingdings', code: '190', unicode: '128343' },\n  { f: 'Wingdings', code: '191', unicode: '128344' },\n  { f: 'Wingdings', code: '192', unicode: '128345' },\n  { f: 'Wingdings', code: '193', unicode: '128346' },\n  { f: 'Wingdings', code: '194', unicode: '128347' },\n  { f: 'Wingdings', code: '195', unicode: '11184' },\n  { f: 'Wingdings', code: '196', unicode: '11185' },\n  { f: 'Wingdings', code: '197', unicode: '11186' },\n  { f: 'Wingdings', code: '198', unicode: '11187' },\n  { f: 'Wingdings', code: '199', unicode: '11188' },\n  { f: 'Wingdings', code: '200', unicode: '11189' },\n  { f: 'Wingdings', code: '201', unicode: '11190' },\n  { f: 'Wingdings', code: '202', unicode: '11191' },\n  { f: 'Wingdings', code: '203', unicode: '128618' },\n  { f: 'Wingdings', code: '204', unicode: '128619' },\n  { f: 'Wingdings', code: '205', unicode: '128597' },\n  { f: 'Wingdings', code: '206', unicode: '128596' },\n  { f: 'Wingdings', code: '207', unicode: '128599' },\n  { f: 'Wingdings', code: '208', unicode: '128598' },\n  { f: 'Wingdings', code: '209', unicode: '128592' },\n  { f: 'Wingdings', code: '210', unicode: '128593' },\n  { f: 'Wingdings', code: '211', unicode: '128594' },\n  { f: 'Wingdings', code: '212', unicode: '128595' },\n  { f: 'Wingdings', code: '213', unicode: '9003' },\n  { f: 'Wingdings', code: '214', unicode: '8998' },\n  { f: 'Wingdings', code: '215', unicode: '11160' },\n  { f: 'Wingdings', code: '216', unicode: '11162' },\n  { f: 'Wingdings', code: '217', unicode: '11161' },\n  { f: 'Wingdings', code: '218', unicode: '11163' },\n  { f: 'Wingdings', code: '219', unicode: '11144' },\n  { f: 'Wingdings', code: '220', unicode: '11146' },\n  { f: 'Wingdings', code: '221', unicode: '11145' },\n  { f: 'Wingdings', code: '222', unicode: '11147' },\n  { f: 'Wingdings', code: '223', unicode: '129128' },\n  { f: 'Wingdings', code: '224', unicode: '129130' },\n  { f: 'Wingdings', code: '225', unicode: '129129' },\n  { f: 'Wingdings', code: '226', unicode: '129131' },\n  { f: 'Wingdings', code: '227', unicode: '129132' },\n  { f: 'Wingdings', code: '228', unicode: '129133' },\n  { f: 'Wingdings', code: '229', unicode: '129135' },\n  { f: 'Wingdings', code: '230', unicode: '129134' },\n  { f: 'Wingdings', code: '231', unicode: '129144' },\n  { f: 'Wingdings', code: '232', unicode: '129146' },\n  { f: 'Wingdings', code: '233', unicode: '129145' },\n  { f: 'Wingdings', code: '234', unicode: '129147' },\n  { f: 'Wingdings', code: '235', unicode: '129148' },\n  { f: 'Wingdings', code: '236', unicode: '129149' },\n  { f: 'Wingdings', code: '237', unicode: '129151' },\n  { f: 'Wingdings', code: '238', unicode: '129150' },\n  { f: 'Wingdings', code: '239', unicode: '8678' },\n  { f: 'Wingdings', code: '240', unicode: '8680' },\n  { f: 'Wingdings', code: '241', unicode: '8679' },\n  { f: 'Wingdings', code: '242', unicode: '8681' },\n  { f: 'Wingdings', code: '243', unicode: '11012' },\n  { f: 'Wingdings', code: '244', unicode: '8691' },\n  { f: 'Wingdings', code: '245', unicode: '11009' },\n  { f: 'Wingdings', code: '246', unicode: '11008' },\n  { f: 'Wingdings', code: '247', unicode: '11011' },\n  { f: 'Wingdings', code: '248', unicode: '11010' },\n  { f: 'Wingdings', code: '249', unicode: '129196' },\n  { f: 'Wingdings', code: '250', unicode: '129197' },\n  { f: 'Wingdings', code: '251', unicode: '128502' },\n  { f: 'Wingdings', code: '252', unicode: '10003' },\n  { f: 'Wingdings', code: '253', unicode: '128503' },\n  { f: 'Wingdings', code: '254', unicode: '128505' },\n  { f: 'Wingdings 2', code: '32', unicode: '32' },\n  { f: 'Wingdings 2', code: '33', unicode: '128394' },\n  { f: 'Wingdings 2', code: '34', unicode: '128395' },\n  { f: 'Wingdings 2', code: '35', unicode: '128396' },\n  { f: 'Wingdings 2', code: '36', unicode: '128397' },\n  { f: 'Wingdings 2', code: '37', unicode: '9988' },\n  { f: 'Wingdings 2', code: '38', unicode: '9984' },\n  { f: 'Wingdings 2', code: '39', unicode: '128382' },\n  { f: 'Wingdings 2', code: '40', unicode: '128381' },\n  { f: 'Wingdings 2', code: '41', unicode: '128453' },\n  { f: 'Wingdings 2', code: '42', unicode: '128454' },\n  { f: 'Wingdings 2', code: '43', unicode: '128455' },\n  { f: 'Wingdings 2', code: '44', unicode: '128456' },\n  { f: 'Wingdings 2', code: '45', unicode: '128457' },\n  { f: 'Wingdings 2', code: '46', unicode: '128458' },\n  { f: 'Wingdings 2', code: '47', unicode: '128459' },\n  { f: 'Wingdings 2', code: '48', unicode: '128460' },\n  { f: 'Wingdings 2', code: '49', unicode: '128461' },\n  { f: 'Wingdings 2', code: '50', unicode: '128203' },\n  { f: 'Wingdings 2', code: '51', unicode: '128465' },\n  { f: 'Wingdings 2', code: '52', unicode: '128468' },\n  { f: 'Wingdings 2', code: '53', unicode: '128437' },\n  { f: 'Wingdings 2', code: '54', unicode: '128438' },\n  { f: 'Wingdings 2', code: '55', unicode: '128439' },\n  { f: 'Wingdings 2', code: '56', unicode: '128440' },\n  { f: 'Wingdings 2', code: '57', unicode: '128429' },\n  { f: 'Wingdings 2', code: '58', unicode: '128431' },\n  { f: 'Wingdings 2', code: '59', unicode: '128433' },\n  { f: 'Wingdings 2', code: '60', unicode: '128402' },\n  { f: 'Wingdings 2', code: '61', unicode: '128403' },\n  { f: 'Wingdings 2', code: '62', unicode: '128408' },\n  { f: 'Wingdings 2', code: '63', unicode: '128409' },\n  { f: 'Wingdings 2', code: '64', unicode: '128410' },\n  { f: 'Wingdings 2', code: '65', unicode: '128411' },\n  { f: 'Wingdings 2', code: '66', unicode: '128072' },\n  { f: 'Wingdings 2', code: '67', unicode: '128073' },\n  { f: 'Wingdings 2', code: '68', unicode: '128412' },\n  { f: 'Wingdings 2', code: '69', unicode: '128413' },\n  { f: 'Wingdings 2', code: '70', unicode: '128414' },\n  { f: 'Wingdings 2', code: '71', unicode: '128415' },\n  { f: 'Wingdings 2', code: '72', unicode: '128416' },\n  { f: 'Wingdings 2', code: '73', unicode: '128417' },\n  { f: 'Wingdings 2', code: '74', unicode: '128070' },\n  { f: 'Wingdings 2', code: '75', unicode: '128071' },\n  { f: 'Wingdings 2', code: '76', unicode: '128418' },\n  { f: 'Wingdings 2', code: '77', unicode: '128419' },\n  { f: 'Wingdings 2', code: '78', unicode: '128401' },\n  { f: 'Wingdings 2', code: '79', unicode: '128500' },\n  { f: 'Wingdings 2', code: '80', unicode: '128504' },\n  { f: 'Wingdings 2', code: '81', unicode: '128501' },\n  { f: 'Wingdings 2', code: '82', unicode: '9745' },\n  { f: 'Wingdings 2', code: '83', unicode: '11197' },\n  { f: 'Wingdings 2', code: '84', unicode: '9746' },\n  { f: 'Wingdings 2', code: '85', unicode: '11198' },\n  { f: 'Wingdings 2', code: '86', unicode: '11199' },\n  { f: 'Wingdings 2', code: '87', unicode: '128711' },\n  { f: 'Wingdings 2', code: '88', unicode: '10680' },\n  { f: 'Wingdings 2', code: '89', unicode: '128625' },\n  { f: 'Wingdings 2', code: '90', unicode: '128628' },\n  { f: 'Wingdings 2', code: '91', unicode: '128626' },\n  { f: 'Wingdings 2', code: '92', unicode: '128627' },\n  { f: 'Wingdings 2', code: '93', unicode: '8253' },\n  { f: 'Wingdings 2', code: '94', unicode: '128633' },\n  { f: 'Wingdings 2', code: '95', unicode: '128634' },\n  { f: 'Wingdings 2', code: '96', unicode: '128635' },\n  { f: 'Wingdings 2', code: '97', unicode: '128614' },\n  { f: 'Wingdings 2', code: '98', unicode: '128612' },\n  { f: 'Wingdings 2', code: '99', unicode: '128613' },\n  { f: 'Wingdings 2', code: '100', unicode: '128615' },\n  { f: 'Wingdings 2', code: '101', unicode: '128602' },\n  { f: 'Wingdings 2', code: '102', unicode: '128600' },\n  { f: 'Wingdings 2', code: '103', unicode: '128601' },\n  { f: 'Wingdings 2', code: '104', unicode: '128603' },\n  { f: 'Wingdings 2', code: '105', unicode: '9450' },\n  { f: 'Wingdings 2', code: '106', unicode: '9312' },\n  { f: 'Wingdings 2', code: '107', unicode: '9313' },\n  { f: 'Wingdings 2', code: '108', unicode: '9314' },\n  { f: 'Wingdings 2', code: '109', unicode: '9315' },\n  { f: 'Wingdings 2', code: '110', unicode: '9316' },\n  { f: 'Wingdings 2', code: '111', unicode: '9317' },\n  { f: 'Wingdings 2', code: '112', unicode: '9318' },\n  { f: 'Wingdings 2', code: '113', unicode: '9319' },\n  { f: 'Wingdings 2', code: '114', unicode: '9320' },\n  { f: 'Wingdings 2', code: '115', unicode: '9321' },\n  { f: 'Wingdings 2', code: '116', unicode: '9471' },\n  { f: 'Wingdings 2', code: '117', unicode: '10102' },\n  { f: 'Wingdings 2', code: '118', unicode: '10103' },\n  { f: 'Wingdings 2', code: '119', unicode: '10104' },\n  { f: 'Wingdings 2', code: '120', unicode: '10105' },\n  { f: 'Wingdings 2', code: '121', unicode: '10106' },\n  { f: 'Wingdings 2', code: '122', unicode: '10107' },\n  { f: 'Wingdings 2', code: '123', unicode: '10108' },\n  { f: 'Wingdings 2', code: '124', unicode: '10109' },\n  { f: 'Wingdings 2', code: '125', unicode: '10110' },\n  { f: 'Wingdings 2', code: '126', unicode: '10111' },\n  { f: 'Wingdings 2', code: '128', unicode: '9737' },\n  { f: 'Wingdings 2', code: '129', unicode: '127765' },\n  { f: 'Wingdings 2', code: '130', unicode: '9789' },\n  { f: 'Wingdings 2', code: '131', unicode: '9790' },\n  { f: 'Wingdings 2', code: '132', unicode: '11839' },\n  { f: 'Wingdings 2', code: '133', unicode: '10013' },\n  { f: 'Wingdings 2', code: '134', unicode: '128327' },\n  { f: 'Wingdings 2', code: '135', unicode: '128348' },\n  { f: 'Wingdings 2', code: '136', unicode: '128349' },\n  { f: 'Wingdings 2', code: '137', unicode: '128350' },\n  { f: 'Wingdings 2', code: '138', unicode: '128351' },\n  { f: 'Wingdings 2', code: '139', unicode: '128352' },\n  { f: 'Wingdings 2', code: '140', unicode: '128353' },\n  { f: 'Wingdings 2', code: '141', unicode: '128354' },\n  { f: 'Wingdings 2', code: '142', unicode: '128355' },\n  { f: 'Wingdings 2', code: '143', unicode: '128356' },\n  { f: 'Wingdings 2', code: '144', unicode: '128357' },\n  { f: 'Wingdings 2', code: '145', unicode: '128358' },\n  { f: 'Wingdings 2', code: '146', unicode: '128359' },\n  { f: 'Wingdings 2', code: '147', unicode: '128616' },\n  { f: 'Wingdings 2', code: '148', unicode: '128617' },\n  { f: 'Wingdings 2', code: '149', unicode: '8901' },\n  { f: 'Wingdings 2', code: '150', unicode: '128900' },\n  { f: 'Wingdings 2', code: '151', unicode: '10625' },\n  { f: 'Wingdings 2', code: '152', unicode: '9679' },\n  { f: 'Wingdings 2', code: '153', unicode: '9675' },\n  { f: 'Wingdings 2', code: '154', unicode: '128901' },\n  { f: 'Wingdings 2', code: '155', unicode: '128903' },\n  { f: 'Wingdings 2', code: '156', unicode: '128905' },\n  { f: 'Wingdings 2', code: '157', unicode: '8857' },\n  { f: 'Wingdings 2', code: '158', unicode: '10687' },\n  { f: 'Wingdings 2', code: '159', unicode: '128908' },\n  { f: 'Wingdings 2', code: '160', unicode: '128909' },\n  { f: 'Wingdings 2', code: '161', unicode: '9726' },\n  { f: 'Wingdings 2', code: '162', unicode: '9632' },\n  { f: 'Wingdings 2', code: '163', unicode: '9633' },\n  { f: 'Wingdings 2', code: '164', unicode: '128913' },\n  { f: 'Wingdings 2', code: '165', unicode: '128914' },\n  { f: 'Wingdings 2', code: '166', unicode: '128915' },\n  { f: 'Wingdings 2', code: '167', unicode: '128916' },\n  { f: 'Wingdings 2', code: '168', unicode: '9635' },\n  { f: 'Wingdings 2', code: '169', unicode: '128917' },\n  { f: 'Wingdings 2', code: '170', unicode: '128918' },\n  { f: 'Wingdings 2', code: '171', unicode: '128919' },\n  { f: 'Wingdings 2', code: '172', unicode: '128920' },\n  { f: 'Wingdings 2', code: '173', unicode: '11049' },\n  { f: 'Wingdings 2', code: '174', unicode: '11045' },\n  { f: 'Wingdings 2', code: '175', unicode: '9671' },\n  { f: 'Wingdings 2', code: '176', unicode: '128922' },\n  { f: 'Wingdings 2', code: '177', unicode: '9672' },\n  { f: 'Wingdings 2', code: '178', unicode: '128923' },\n  { f: 'Wingdings 2', code: '179', unicode: '128924' },\n  { f: 'Wingdings 2', code: '180', unicode: '128925' },\n  { f: 'Wingdings 2', code: '181', unicode: '128926' },\n  { f: 'Wingdings 2', code: '182', unicode: '11050' },\n  { f: 'Wingdings 2', code: '183', unicode: '11047' },\n  { f: 'Wingdings 2', code: '184', unicode: '9674' },\n  { f: 'Wingdings 2', code: '185', unicode: '128928' },\n  { f: 'Wingdings 2', code: '186', unicode: '9686' },\n  { f: 'Wingdings 2', code: '187', unicode: '9687' },\n  { f: 'Wingdings 2', code: '188', unicode: '11210' },\n  { f: 'Wingdings 2', code: '189', unicode: '11211' },\n  { f: 'Wingdings 2', code: '190', unicode: '11200' },\n  { f: 'Wingdings 2', code: '191', unicode: '11201' },\n  { f: 'Wingdings 2', code: '192', unicode: '11039' },\n  { f: 'Wingdings 2', code: '193', unicode: '11202' },\n  { f: 'Wingdings 2', code: '194', unicode: '11043' },\n  { f: 'Wingdings 2', code: '195', unicode: '11042' },\n  { f: 'Wingdings 2', code: '196', unicode: '11203' },\n  { f: 'Wingdings 2', code: '197', unicode: '11204' },\n  { f: 'Wingdings 2', code: '198', unicode: '128929' },\n  { f: 'Wingdings 2', code: '199', unicode: '128930' },\n  { f: 'Wingdings 2', code: '200', unicode: '128931' },\n  { f: 'Wingdings 2', code: '201', unicode: '128932' },\n  { f: 'Wingdings 2', code: '202', unicode: '128933' },\n  { f: 'Wingdings 2', code: '203', unicode: '128934' },\n  { f: 'Wingdings 2', code: '204', unicode: '128935' },\n  { f: 'Wingdings 2', code: '205', unicode: '128936' },\n  { f: 'Wingdings 2', code: '206', unicode: '128937' },\n  { f: 'Wingdings 2', code: '207', unicode: '128938' },\n  { f: 'Wingdings 2', code: '208', unicode: '128939' },\n  { f: 'Wingdings 2', code: '209', unicode: '128940' },\n  { f: 'Wingdings 2', code: '210', unicode: '128941' },\n  { f: 'Wingdings 2', code: '211', unicode: '128942' },\n  { f: 'Wingdings 2', code: '212', unicode: '128943' },\n  { f: 'Wingdings 2', code: '213', unicode: '128944' },\n  { f: 'Wingdings 2', code: '214', unicode: '128945' },\n  { f: 'Wingdings 2', code: '215', unicode: '128946' },\n  { f: 'Wingdings 2', code: '216', unicode: '128947' },\n  { f: 'Wingdings 2', code: '217', unicode: '128948' },\n  { f: 'Wingdings 2', code: '218', unicode: '128949' },\n  { f: 'Wingdings 2', code: '219', unicode: '128950' },\n  { f: 'Wingdings 2', code: '220', unicode: '128951' },\n  { f: 'Wingdings 2', code: '221', unicode: '128952' },\n  { f: 'Wingdings 2', code: '222', unicode: '128953' },\n  { f: 'Wingdings 2', code: '223', unicode: '128954' },\n  { f: 'Wingdings 2', code: '224', unicode: '128955' },\n  { f: 'Wingdings 2', code: '225', unicode: '128956' },\n  { f: 'Wingdings 2', code: '226', unicode: '128957' },\n  { f: 'Wingdings 2', code: '227', unicode: '128958' },\n  { f: 'Wingdings 2', code: '228', unicode: '128959' },\n  { f: 'Wingdings 2', code: '229', unicode: '128960' },\n  { f: 'Wingdings 2', code: '230', unicode: '128962' },\n  { f: 'Wingdings 2', code: '231', unicode: '128964' },\n  { f: 'Wingdings 2', code: '232', unicode: '128966' },\n  { f: 'Wingdings 2', code: '233', unicode: '128969' },\n  { f: 'Wingdings 2', code: '234', unicode: '128970' },\n  { f: 'Wingdings 2', code: '235', unicode: '10038' },\n  { f: 'Wingdings 2', code: '236', unicode: '128972' },\n  { f: 'Wingdings 2', code: '237', unicode: '128974' },\n  { f: 'Wingdings 2', code: '238', unicode: '128976' },\n  { f: 'Wingdings 2', code: '239', unicode: '128978' },\n  { f: 'Wingdings 2', code: '240', unicode: '10041' },\n  { f: 'Wingdings 2', code: '241', unicode: '128963' },\n  { f: 'Wingdings 2', code: '242', unicode: '128967' },\n  { f: 'Wingdings 2', code: '243', unicode: '10031' },\n  { f: 'Wingdings 2', code: '244', unicode: '128973' },\n  { f: 'Wingdings 2', code: '245', unicode: '128980' },\n  { f: 'Wingdings 2', code: '246', unicode: '11212' },\n  { f: 'Wingdings 2', code: '247', unicode: '11213' },\n  { f: 'Wingdings 2', code: '248', unicode: '8251' },\n  { f: 'Wingdings 2', code: '249', unicode: '8258' },\n  { f: 'Wingdings 3', code: '32', unicode: '32' },\n  { f: 'Wingdings 3', code: '33', unicode: '11104' },\n  { f: 'Wingdings 3', code: '34', unicode: '11106' },\n  { f: 'Wingdings 3', code: '35', unicode: '11105' },\n  { f: 'Wingdings 3', code: '36', unicode: '11107' },\n  { f: 'Wingdings 3', code: '37', unicode: '11110' },\n  { f: 'Wingdings 3', code: '38', unicode: '11111' },\n  { f: 'Wingdings 3', code: '39', unicode: '11113' },\n  { f: 'Wingdings 3', code: '40', unicode: '11112' },\n  { f: 'Wingdings 3', code: '41', unicode: '11120' },\n  { f: 'Wingdings 3', code: '42', unicode: '11122' },\n  { f: 'Wingdings 3', code: '43', unicode: '11121' },\n  { f: 'Wingdings 3', code: '44', unicode: '11123' },\n  { f: 'Wingdings 3', code: '45', unicode: '11126' },\n  { f: 'Wingdings 3', code: '46', unicode: '11128' },\n  { f: 'Wingdings 3', code: '47', unicode: '11131' },\n  { f: 'Wingdings 3', code: '48', unicode: '11133' },\n  { f: 'Wingdings 3', code: '49', unicode: '11108' },\n  { f: 'Wingdings 3', code: '50', unicode: '11109' },\n  { f: 'Wingdings 3', code: '51', unicode: '11114' },\n  { f: 'Wingdings 3', code: '52', unicode: '11116' },\n  { f: 'Wingdings 3', code: '53', unicode: '11115' },\n  { f: 'Wingdings 3', code: '54', unicode: '11117' },\n  { f: 'Wingdings 3', code: '55', unicode: '11085' },\n  { f: 'Wingdings 3', code: '56', unicode: '11168' },\n  { f: 'Wingdings 3', code: '57', unicode: '11169' },\n  { f: 'Wingdings 3', code: '58', unicode: '11170' },\n  { f: 'Wingdings 3', code: '59', unicode: '11171' },\n  { f: 'Wingdings 3', code: '60', unicode: '11172' },\n  { f: 'Wingdings 3', code: '61', unicode: '11173' },\n  { f: 'Wingdings 3', code: '62', unicode: '11174' },\n  { f: 'Wingdings 3', code: '63', unicode: '11175' },\n  { f: 'Wingdings 3', code: '64', unicode: '11152' },\n  { f: 'Wingdings 3', code: '65', unicode: '11153' },\n  { f: 'Wingdings 3', code: '66', unicode: '11154' },\n  { f: 'Wingdings 3', code: '67', unicode: '11155' },\n  { f: 'Wingdings 3', code: '68', unicode: '11136' },\n  { f: 'Wingdings 3', code: '69', unicode: '11139' },\n  { f: 'Wingdings 3', code: '70', unicode: '11134' },\n  { f: 'Wingdings 3', code: '71', unicode: '11135' },\n  { f: 'Wingdings 3', code: '72', unicode: '11140' },\n  { f: 'Wingdings 3', code: '73', unicode: '11142' },\n  { f: 'Wingdings 3', code: '74', unicode: '11141' },\n  { f: 'Wingdings 3', code: '75', unicode: '11143' },\n  { f: 'Wingdings 3', code: '76', unicode: '11151' },\n  { f: 'Wingdings 3', code: '77', unicode: '11149' },\n  { f: 'Wingdings 3', code: '78', unicode: '11150' },\n  { f: 'Wingdings 3', code: '79', unicode: '11148' },\n  { f: 'Wingdings 3', code: '80', unicode: '11118' },\n  { f: 'Wingdings 3', code: '81', unicode: '11119' },\n  { f: 'Wingdings 3', code: '82', unicode: '9099' },\n  { f: 'Wingdings 3', code: '83', unicode: '8996' },\n  { f: 'Wingdings 3', code: '84', unicode: '8963' },\n  { f: 'Wingdings 3', code: '85', unicode: '8997' },\n  { f: 'Wingdings 3', code: '86', unicode: '9251' },\n  { f: 'Wingdings 3', code: '87', unicode: '9085' },\n  { f: 'Wingdings 3', code: '88', unicode: '8682' },\n  { f: 'Wingdings 3', code: '89', unicode: '11192' },\n  { f: 'Wingdings 3', code: '90', unicode: '129184' },\n  { f: 'Wingdings 3', code: '91', unicode: '129185' },\n  { f: 'Wingdings 3', code: '92', unicode: '129186' },\n  { f: 'Wingdings 3', code: '93', unicode: '129187' },\n  { f: 'Wingdings 3', code: '94', unicode: '129188' },\n  { f: 'Wingdings 3', code: '95', unicode: '129189' },\n  { f: 'Wingdings 3', code: '96', unicode: '129190' },\n  { f: 'Wingdings 3', code: '97', unicode: '129191' },\n  { f: 'Wingdings 3', code: '98', unicode: '129192' },\n  { f: 'Wingdings 3', code: '99', unicode: '129193' },\n  { f: 'Wingdings 3', code: '100', unicode: '129194' },\n  { f: 'Wingdings 3', code: '101', unicode: '129195' },\n  { f: 'Wingdings 3', code: '102', unicode: '129104' },\n  { f: 'Wingdings 3', code: '103', unicode: '129106' },\n  { f: 'Wingdings 3', code: '104', unicode: '129105' },\n  { f: 'Wingdings 3', code: '105', unicode: '129107' },\n  { f: 'Wingdings 3', code: '106', unicode: '129108' },\n  { f: 'Wingdings 3', code: '107', unicode: '129109' },\n  { f: 'Wingdings 3', code: '108', unicode: '129111' },\n  { f: 'Wingdings 3', code: '109', unicode: '129110' },\n  { f: 'Wingdings 3', code: '110', unicode: '129112' },\n  { f: 'Wingdings 3', code: '111', unicode: '129113' },\n  { f: 'Wingdings 3', code: '112', unicode: '9650' },\n  { f: 'Wingdings 3', code: '113', unicode: '9660' },\n  { f: 'Wingdings 3', code: '114', unicode: '9651' },\n  { f: 'Wingdings 3', code: '115', unicode: '9661' },\n  { f: 'Wingdings 3', code: '116', unicode: '9664' },\n  { f: 'Wingdings 3', code: '117', unicode: '9654' },\n  { f: 'Wingdings 3', code: '118', unicode: '9665' },\n  { f: 'Wingdings 3', code: '119', unicode: '9655' },\n  { f: 'Wingdings 3', code: '120', unicode: '9699' },\n  { f: 'Wingdings 3', code: '121', unicode: '9698' },\n  { f: 'Wingdings 3', code: '122', unicode: '9700' },\n  { f: 'Wingdings 3', code: '123', unicode: '9701' },\n  { f: 'Wingdings 3', code: '124', unicode: '128896' },\n  { f: 'Wingdings 3', code: '125', unicode: '128898' },\n  { f: 'Wingdings 3', code: '126', unicode: '128897' },\n  { f: 'Wingdings 3', code: '128', unicode: '128899' },\n  { f: 'Wingdings 3', code: '129', unicode: '11205' },\n  { f: 'Wingdings 3', code: '130', unicode: '11206' },\n  { f: 'Wingdings 3', code: '131', unicode: '11207' },\n  { f: 'Wingdings 3', code: '132', unicode: '11208' },\n  { f: 'Wingdings 3', code: '133', unicode: '11164' },\n  { f: 'Wingdings 3', code: '134', unicode: '11166' },\n  { f: 'Wingdings 3', code: '135', unicode: '11165' },\n  { f: 'Wingdings 3', code: '136', unicode: '11167' },\n  { f: 'Wingdings 3', code: '137', unicode: '129040' },\n  { f: 'Wingdings 3', code: '138', unicode: '129042' },\n  { f: 'Wingdings 3', code: '139', unicode: '129041' },\n  { f: 'Wingdings 3', code: '140', unicode: '129043' },\n  { f: 'Wingdings 3', code: '141', unicode: '129044' },\n  { f: 'Wingdings 3', code: '142', unicode: '129046' },\n  { f: 'Wingdings 3', code: '143', unicode: '129045' },\n  { f: 'Wingdings 3', code: '144', unicode: '129047' },\n  { f: 'Wingdings 3', code: '145', unicode: '129048' },\n  { f: 'Wingdings 3', code: '146', unicode: '129050' },\n  { f: 'Wingdings 3', code: '147', unicode: '129049' },\n  { f: 'Wingdings 3', code: '148', unicode: '129051' },\n  { f: 'Wingdings 3', code: '149', unicode: '129052' },\n  { f: 'Wingdings 3', code: '150', unicode: '129054' },\n  { f: 'Wingdings 3', code: '151', unicode: '129053' },\n  { f: 'Wingdings 3', code: '152', unicode: '129055' },\n  { f: 'Wingdings 3', code: '153', unicode: '129024' },\n  { f: 'Wingdings 3', code: '154', unicode: '129026' },\n  { f: 'Wingdings 3', code: '155', unicode: '129025' },\n  { f: 'Wingdings 3', code: '156', unicode: '129027' },\n  { f: 'Wingdings 3', code: '157', unicode: '129028' },\n  { f: 'Wingdings 3', code: '158', unicode: '129030' },\n  { f: 'Wingdings 3', code: '159', unicode: '129029' },\n  { f: 'Wingdings 3', code: '160', unicode: '129031' },\n  { f: 'Wingdings 3', code: '161', unicode: '129032' },\n  { f: 'Wingdings 3', code: '162', unicode: '129034' },\n  { f: 'Wingdings 3', code: '163', unicode: '129033' },\n  { f: 'Wingdings 3', code: '164', unicode: '129035' },\n  { f: 'Wingdings 3', code: '165', unicode: '129056' },\n  { f: 'Wingdings 3', code: '166', unicode: '129058' },\n  { f: 'Wingdings 3', code: '167', unicode: '129060' },\n  { f: 'Wingdings 3', code: '168', unicode: '129062' },\n  { f: 'Wingdings 3', code: '169', unicode: '129064' },\n  { f: 'Wingdings 3', code: '170', unicode: '129066' },\n  { f: 'Wingdings 3', code: '171', unicode: '129068' },\n  { f: 'Wingdings 3', code: '172', unicode: '129180' },\n  { f: 'Wingdings 3', code: '173', unicode: '129181' },\n  { f: 'Wingdings 3', code: '174', unicode: '129182' },\n  { f: 'Wingdings 3', code: '175', unicode: '129183' },\n  { f: 'Wingdings 3', code: '176', unicode: '129070' },\n  { f: 'Wingdings 3', code: '177', unicode: '129072' },\n  { f: 'Wingdings 3', code: '178', unicode: '129074' },\n  { f: 'Wingdings 3', code: '179', unicode: '129076' },\n  { f: 'Wingdings 3', code: '180', unicode: '129078' },\n  { f: 'Wingdings 3', code: '181', unicode: '129080' },\n  { f: 'Wingdings 3', code: '182', unicode: '129082' },\n  { f: 'Wingdings 3', code: '183', unicode: '129081' },\n  { f: 'Wingdings 3', code: '184', unicode: '129083' },\n  { f: 'Wingdings 3', code: '185', unicode: '129176' },\n  { f: 'Wingdings 3', code: '186', unicode: '129178' },\n  { f: 'Wingdings 3', code: '187', unicode: '129177' },\n  { f: 'Wingdings 3', code: '188', unicode: '129179' },\n  { f: 'Wingdings 3', code: '189', unicode: '129084' },\n  { f: 'Wingdings 3', code: '190', unicode: '129086' },\n  { f: 'Wingdings 3', code: '191', unicode: '129085' },\n  { f: 'Wingdings 3', code: '192', unicode: '129087' },\n  { f: 'Wingdings 3', code: '193', unicode: '129088' },\n  { f: 'Wingdings 3', code: '194', unicode: '129090' },\n  { f: 'Wingdings 3', code: '195', unicode: '129089' },\n  { f: 'Wingdings 3', code: '196', unicode: '129091' },\n  { f: 'Wingdings 3', code: '197', unicode: '129092' },\n  { f: 'Wingdings 3', code: '198', unicode: '129094' },\n  { f: 'Wingdings 3', code: '199', unicode: '129093' },\n  { f: 'Wingdings 3', code: '200', unicode: '129095' },\n  { f: 'Wingdings 3', code: '201', unicode: '11176' },\n  { f: 'Wingdings 3', code: '202', unicode: '11177' },\n  { f: 'Wingdings 3', code: '203', unicode: '11178' },\n  { f: 'Wingdings 3', code: '204', unicode: '11179' },\n  { f: 'Wingdings 3', code: '205', unicode: '11180' },\n  { f: 'Wingdings 3', code: '206', unicode: '11181' },\n  { f: 'Wingdings 3', code: '207', unicode: '11182' },\n  { f: 'Wingdings 3', code: '208', unicode: '11183' },\n  { f: 'Wingdings 3', code: '209', unicode: '129120' },\n  { f: 'Wingdings 3', code: '210', unicode: '129122' },\n  { f: 'Wingdings 3', code: '211', unicode: '129121' },\n  { f: 'Wingdings 3', code: '212', unicode: '129123' },\n  { f: 'Wingdings 3', code: '213', unicode: '129124' },\n  { f: 'Wingdings 3', code: '214', unicode: '129125' },\n  { f: 'Wingdings 3', code: '215', unicode: '129127' },\n  { f: 'Wingdings 3', code: '216', unicode: '129126' },\n  { f: 'Wingdings 3', code: '217', unicode: '129136' },\n  { f: 'Wingdings 3', code: '218', unicode: '129138' },\n  { f: 'Wingdings 3', code: '219', unicode: '129137' },\n  { f: 'Wingdings 3', code: '220', unicode: '129139' },\n  { f: 'Wingdings 3', code: '221', unicode: '129140' },\n  { f: 'Wingdings 3', code: '222', unicode: '129141' },\n  { f: 'Wingdings 3', code: '223', unicode: '129143' },\n  { f: 'Wingdings 3', code: '224', unicode: '129142' },\n  { f: 'Wingdings 3', code: '225', unicode: '129152' },\n  { f: 'Wingdings 3', code: '226', unicode: '129154' },\n  { f: 'Wingdings 3', code: '227', unicode: '129153' },\n  { f: 'Wingdings 3', code: '228', unicode: '129155' },\n  { f: 'Wingdings 3', code: '229', unicode: '129156' },\n  { f: 'Wingdings 3', code: '230', unicode: '129157' },\n  { f: 'Wingdings 3', code: '231', unicode: '129159' },\n  { f: 'Wingdings 3', code: '232', unicode: '129158' },\n  { f: 'Wingdings 3', code: '233', unicode: '129168' },\n  { f: 'Wingdings 3', code: '234', unicode: '129170' },\n  { f: 'Wingdings 3', code: '235', unicode: '129169' },\n  { f: 'Wingdings 3', code: '236', unicode: '129171' },\n  { f: 'Wingdings 3', code: '237', unicode: '129172' },\n  { f: 'Wingdings 3', code: '238', unicode: '129174' },\n  { f: 'Wingdings 3', code: '239', unicode: '129173' },\n  { f: 'Wingdings 3', code: '240', unicode: '129175' }\n]\n\n\n//# sourceURL=webpack:///./packages/vendors/pptx/lib/dingbat.js?");

/***/ }),

/***/ "./packages/vendors/pptx/lib/tXml.js":
/*!*******************************************!*\
  !*** ./packages/vendors/pptx/lib/tXml.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/////////////////////////////////////tXml///////////////////////////\n/*\nThis is my custom tXml.js file\n*/\nfunction tXml(t, r) {\n  'use strict'\n  function e() {\n    for (var r = []; t[l]; )\n      if (t.charCodeAt(l) == s) {\n        if (t.charCodeAt(l + 1) === h)\n          return (l = t.indexOf(u, l)), l + 1 && (l += 1), r\n        if (t.charCodeAt(l + 1) === v) {\n          if (t.charCodeAt(l + 2) == m) {\n            for (\n              ;\n              -1 !== l &&\n              (t.charCodeAt(l) !== d ||\n                t.charCodeAt(l - 1) != m ||\n                t.charCodeAt(l - 2) != m ||\n                -1 == l);\n\n            )\n              l = t.indexOf(u, l + 1)\n            ;-1 === l && (l = t.length)\n          } else for (l += 2; t.charCodeAt(l) !== d && t[l]; ) l++\n          l++\n          continue\n        }\n        var e = a()\n        r.push(e)\n      } else {\n        var i = n()\n        i.trim().length > 0 && r.push(i), l++\n      }\n    return r\n  }\n  function n() {\n    var r = l\n    return (\n      (l = t.indexOf(c, l) - 1), -2 === l && (l = t.length), t.slice(r, l + 1)\n    )\n  }\n  function i() {\n    for (var r = l; -1 === A.indexOf(t[l]) && t[l]; ) l++\n    return t.slice(r, l)\n  }\n  function a() {\n    var r = {}\n    l++, (r.tagName = i())\n    for (var n = !1; t.charCodeAt(l) !== d && t[l]; ) {\n      var a = t.charCodeAt(l)\n      if ((a > 64 && 91 > a) || (a > 96 && 123 > a)) {\n        for (\n          var f = i(), c = t.charCodeAt(l);\n          c &&\n          c !== p &&\n          c !== g &&\n          !((c > 64 && 91 > c) || (c > 96 && 123 > c)) &&\n          c !== d;\n\n        )\n          l++, (c = t.charCodeAt(l))\n        if ((n || ((r.attributes = {}), (n = !0)), c === p || c === g)) {\n          var s = o()\n          if (-1 === l) return r\n        } else (s = null), l--\n        r.attributes[f] = s\n      }\n      l++\n    }\n    if (t.charCodeAt(l - 1) !== h)\n      if ('script' == r.tagName) {\n        var u = l + 1\n        ;(l = t.indexOf('</script>', l)),\n          (r.children = [t.slice(u, l - 1)]),\n          (l += 8)\n      } else if ('style' == r.tagName) {\n        var u = l + 1\n        ;(l = t.indexOf('</style>', l)),\n          (r.children = [t.slice(u, l - 1)]),\n          (l += 7)\n      } else -1 == C.indexOf(r.tagName) && (l++, (r.children = e(f)))\n    else l++\n    return r\n  }\n  function o() {\n    var r = t[l],\n      e = ++l\n    return (l = t.indexOf(r, e)), t.slice(e, l)\n  }\n  function f() {\n    var e = new RegExp(\n      '\\\\s' + r.attrName + '\\\\s*=[\\'\"]' + r.attrValue + '[\\'\"]'\n    ).exec(t)\n    return e ? e.index : -1\n  }\n  r = r || {}\n  var l = r.pos || 0,\n    c = '<',\n    s = '<'.charCodeAt(0),\n    u = '>',\n    d = '>'.charCodeAt(0),\n    m = '-'.charCodeAt(0),\n    h = '/'.charCodeAt(0),\n    v = '!'.charCodeAt(0),\n    p = \"'\".charCodeAt(0),\n    g = '\"'.charCodeAt(0),\n    A = '\\n\t>/= ',\n    C = ['img', 'br', 'input', 'meta', 'link'],\n    y = null\n  if (void 0 !== r.attrValue) {\n    r.attrName = r.attrName || 'id'\n    for (var y = []; -1 !== (l = f()); )\n      (l = t.lastIndexOf('<', l)),\n        -1 !== l && y.push(a()),\n        (t = t.substr(l)),\n        (l = 0)\n  } else y = r.parseNode ? a() : e()\n  return (\n    r.filter && (y = tXml.filter(y, r.filter)),\n    r.simplify && (y = tXml.simplify(y)),\n    (y.pos = l),\n    y\n  )\n}\nvar _order = 1\n;(tXml.simplify = function(t) {\n  var r = {}\n  if (void 0 === t) return {}\n  if (1 === t.length && 'string' == typeof t[0]) return t[0]\n  t.forEach(function(t) {\n    if ('object' == typeof t) {\n      r[t.tagName] || (r[t.tagName] = [])\n      var e = tXml.simplify(t.children || [])\n      r[t.tagName].push(e),\n        t.attributes && (e.attrs = t.attributes),\n        void 0 === e.attrs\n          ? (e.attrs = { order: _order })\n          : (e.attrs.order = _order),\n        _order++\n    }\n  })\n  for (var e in r) 1 == r[e].length && (r[e] = r[e][0])\n  return r\n}),\n  (tXml.filter = function(t, r) {\n    var e = []\n    return (\n      t.forEach(function(t) {\n        if (('object' == typeof t && r(t) && e.push(t), t.children)) {\n          var n = tXml.filter(t.children, r)\n          e = e.concat(n)\n        }\n      }),\n      e\n    )\n  }),\n  (tXml.stringify = function(t) {\n    function r(t) {\n      if (t)\n        for (var r = 0; r < t.length; r++)\n          'string' == typeof t[r] ? (n += t[r].trim()) : e(t[r])\n    }\n    function e(t) {\n      n += '<' + t.tagName\n      for (var e in t.attributes)\n        n +=\n          null === t.attributes[e]\n            ? ' ' + e\n            : -1 === t.attributes[e].indexOf('\"')\n            ? ' ' + e + '=\"' + t.attributes[e].trim() + '\"'\n            : ' ' + e + \"='\" + t.attributes[e].trim() + \"'\"\n      ;(n += '>'), r(t.children), (n += '</' + t.tagName + '>')\n    }\n    var n = ''\n    return r(t), n\n  }),\n  (tXml.toContentString = function(t) {\n    if (Array.isArray(t)) {\n      var r = ''\n      return (\n        t.forEach(function(t) {\n          ;(r += ' ' + tXml.toContentString(t)), (r = r.trim())\n        }),\n        r\n      )\n    }\n    return 'object' == typeof t ? tXml.toContentString(t.children) : ' ' + t\n  }),\n  (tXml.getElementById = function(t, r, e) {\n    var n = tXml(t, { attrValue: r, simplify: e })\n    return e ? n : n[0]\n  }),\n  (tXml.getElementsByClassName = function(t, r, e) {\n    return tXml(t, {\n      attrName: 'class',\n      attrValue: '[a-zA-Z0-9-s ]*' + r + '[a-zA-Z0-9-s ]*',\n      simplify: e\n    })\n  }),\n  (tXml.parseStream = function(t, r) {\n    if (\n      ('function' == typeof r && ((cb = r), (r = 0)),\n      'string' == typeof r && (r = r.length + 2),\n      'string' == typeof t)\n    ) {\n      var e = __webpack_require__(/*! fs */ \"./node_modules/node-libs-browser/mock/empty.js\")\n      ;(t = e.createReadStream(t, { start: r })), (r = 0)\n    }\n    var n = r,\n      i = '',\n      a = 0\n    return (\n      t.on('data', function(r) {\n        a++, (i += r)\n        for (var e = 0; ; ) {\n          n = i.indexOf('<', n) + 1\n          var o = tXml(i, { pos: n, parseNode: !0 })\n          if (((n = o.pos), n > i.length - 1 || e > n))\n            return void (e && ((i = i.slice(e)), (n = 0), (e = 0)))\n          t.emit('xml', o), (e = n)\n        }\n        ;(i = i.slice(n)), (n = 0)\n      }),\n      t.on('end', function() {\n        console.log('end')\n      }),\n      t\n    )\n  }),\n   true && (module.exports = tXml)\n\n\n//# sourceURL=webpack:///./packages/vendors/pptx/lib/tXml.js?");

/***/ }),

/***/ "./packages/vendors/pptx/process.js":
/*!******************************************!*\
  !*** ./packages/vendors/pptx/process.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return process; });\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jszip */ \"./node_modules/jszip/dist/jszip.min.js\");\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jszip__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _support_vendor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./support/vendor */ \"./packages/vendors/pptx/support/vendor.js\");\n\n\n\n\n/**\n * 导出唯一的处理入口，交由worker处置\n * @param setOnMessage worker消息处理器设置入口\n * @param postMessage 发送回主线程的消息回调\n */\nfunction process(setOnMessage, postMessage) {\n  // 设置worker通信回调处理器\n  setOnMessage(async ({ type, data, options, IE11 }) => {\n    if (type === 'processPPTX') {\n      try {\n        _support_vendor__WEBPACK_IMPORTED_MODULE_1__[\"setters\"].settings = options\n        _support_vendor__WEBPACK_IMPORTED_MODULE_1__[\"setters\"].processFullTheme = options.themeProcess\n        _support_vendor__WEBPACK_IMPORTED_MODULE_1__[\"setters\"].IE11 = IE11\n        await processPPTX(data)\n      } catch (e) {\n        console.error('AN ERROR HAPPENED DURING processPPTX', e)\n        postMessage({\n          type: 'ERROR',\n          data: e.toString()\n        })\n      }\n    }\n  })\n\n  /**\n   * 从zip压缩格式读取内容\n   */\n  async function readZip(file) {\n    if (file.byteLength < 10) return console.error('读取pptx文件失败！')\n    // 异步加载\n    return jszip__WEBPACK_IMPORTED_MODULE_0___default.a.loadAsync(file)\n  }\n\n  /**\n   * 处理pptx文件，唯一主入口\n   * @param data 二进制数据\n   */\n  async function processPPTX(data) {\n    const zip = await readZip(data)\n    const dateBefore = new Date()\n\n    // 声明一个发送函数\n    const sendIfPossible = (index) => {\n      if (finished[index] && current === index) {\n        postMessage(finished[current++])\n        delete finished[index]\n        sendIfPossible(current)\n      }\n    }\n\n    // 提前完成的缓存\n    const finished = {}\n    // 下标记录，要求有序\n    let current = -1\n    // 获取缩略图\n    if (zip.file('docProps/thumbnail.jpeg')) {\n      const pptxThumbImg = await zip\n        .file('docProps/thumbnail.jpeg')\n        .async('base64')\n      postMessage({\n        type: 'pptx-thumb',\n        data: pptxThumbImg,\n        slide_num: current++\n      })\n    } else {\n      current = 0\n    }\n\n    // 获取内容类型\n    const filesInfo = await Object(_support_vendor__WEBPACK_IMPORTED_MODULE_1__[\"getContentTypes\"])(zip)\n    // 获取总幻灯片张数，并获取默认字体风格\n    const slideSize = await Object(_support_vendor__WEBPACK_IMPORTED_MODULE_1__[\"getSlideSizeAndSetDefaultTextStyle\"])(zip)\n    // 获取表格样式\n    _support_vendor__WEBPACK_IMPORTED_MODULE_1__[\"setters\"].tableStyles = await Object(_support_vendor__WEBPACK_IMPORTED_MODULE_1__[\"readXmlFile\"])(zip, 'ppt/tableStyles.xml')\n    console.log('slideSize: ', slideSize)\n    // 发送一个大小\n    postMessage({\n      type: 'slideSize',\n      data: slideSize,\n      slide_num: current++\n    })\n\n    // 逐个读取slide，并发处理，注意，需要传入顺序，保证幻灯片是正确的顺序插入的\n    const slides = filesInfo['slides']\n    const numOfSlides = slides.length\n    for (let i = 0; i < numOfSlides; i++) {\n      // 取得名字和下标\n      const path = slides[i]\n      const first = path.includes('/') ? path.lastIndexOf('/') + 1 : 0\n      const last = path.includes('.') ? path.lastIndexOf('.') : path.length\n      const filename = path.substring(first, last)\n      const slideNumber =\n        filename && filename.includes('slide') ? Number(filename.substr(5)) : 1\n      // 最终渲染\n      const slideHtml = await Object(_support_vendor__WEBPACK_IMPORTED_MODULE_1__[\"processSingleSlide\"])(zip, path, i, slideSize)\n      // 根据顺序发送，前面的没发送需要先等待，一旦前面发送完毕，后面的会立即触发\n      const body = {\n        type: 'slide',\n        data: slideHtml,\n        slide_num: slideNumber,\n        file_name: filename\n      }\n      // 当前顺位，发送，并检测后面排队的，顺便发送了\n      if (current === slideNumber) {\n        postMessage(body)\n        sendIfPossible(++current)\n      } else {\n        finished[slideNumber] = body\n      }\n      postMessage({\n        type: 'progress-update',\n        slide_num: numOfSlides + i + 1,\n        data: ((i + 1) * 100) / numOfSlides\n      })\n    }\n\n    postMessage({\n      type: 'globalCSS',\n      data: Object(_support_vendor__WEBPACK_IMPORTED_MODULE_1__[\"genGlobalCSS\"])()\n    })\n\n    postMessage({\n      type: 'ExecutionTime',\n      data: new Date() - dateBefore\n    })\n    return finished\n  }\n}\n\n\n//# sourceURL=webpack:///./packages/vendors/pptx/process.js?");

/***/ }),

/***/ "./packages/vendors/pptx/support/vendor.js":
/*!*************************************************!*\
  !*** ./packages/vendors/pptx/support/vendor.js ***!
  \*************************************************/
/*! exports provided: setters, readXmlFile, getContentTypes, getSlideSizeAndSetDefaultTextStyle, processSingleSlide, genGlobalCSS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setters\", function() { return setters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"readXmlFile\", function() { return readXmlFile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getContentTypes\", function() { return getContentTypes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSlideSizeAndSetDefaultTextStyle\", function() { return getSlideSizeAndSetDefaultTextStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"processSingleSlide\", function() { return processSingleSlide; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"genGlobalCSS\", function() { return genGlobalCSS; });\n/* harmony import */ var tinycolor2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tinycolor2 */ \"./node_modules/tinycolor2/cjs/tinycolor.js\");\n/* harmony import */ var tinycolor2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tinycolor2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_tXml__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/tXml */ \"./packages/vendors/pptx/lib/tXml.js\");\n/* harmony import */ var _lib_tXml__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_lib_tXml__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/d3.js\");\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var nvd3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! nvd3 */ \"./node_modules/nvd3/build/nv.d3.js\");\n/* harmony import */ var nvd3__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(nvd3__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _lib_dingbat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/dingbat */ \"./packages/vendors/pptx/lib/dingbat.js\");\n/* harmony import */ var _lib_dingbat__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_lib_dingbat__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n\n//var worker;\nlet slideLayoutClrOvride = ''\nlet isIE11 = false\nlet isDone = false\n\nconst MsgQueue = []\n\n//var slideLayoutClrOvride = \"\";\n\nlet defaultTextStyle = null\n\nlet chartID = 0\n\nlet appVersion\n\nconst rtl_langs_array = [ 'he-IL', 'ar-AE', 'ar-SA', 'dv-MV', 'fa-IR', 'ur-PK' ]\n\nconst slideFactor = 96 / 914400\nconst computedFactor = (value, fallback = 300) => value >= 9525 ? (value * slideFactor) : fallback\nconst fontSizeFactor = 4 / 3.2\n//////////////////////\nlet slideWidth = 0\nlet slideHeight = 0\nlet processFullTheme = true\nconst styleTable = {}\nlet tableStyles = {}\nlet settings = {}\n\nconst setters = {\n  set processFullTheme(value) {\n    processFullTheme = value\n  },\n  set settings(value) {\n    settings = value\n  },\n  set tableStyles(value) {\n    tableStyles = value\n  },\n  set IE11(value) {\n    isIE11 = value\n  }\n}\n\nasync function readXmlFile(zip, filename, isSlideContent = false) {\n  try {\n    var fileContent = await zip.file(filename).async('text')\n    if (isSlideContent && appVersion <= 12) {\n      //< office2007\n      //remove \"<![CDATA[ ... ]]>\" tag\n      fileContent = fileContent.replace(/<!\\[CDATA\\[(.*?)\\]\\]>/g, '$1')\n    }\n    const xmlData = _lib_tXml__WEBPACK_IMPORTED_MODULE_1___default()(fileContent, { simplify: 1 })\n    if (xmlData['?xml'] !== undefined) {\n      return xmlData['?xml']\n    } else {\n      return xmlData\n    }\n  } catch (e) {\n    //console.log(\"error readXmlFile: the file '\", filename, \"' not exit\")\n    return null\n  }\n}\n\nasync function getContentTypes(zip) {\n  const ContentTypesJson = await readXmlFile(zip, '[Content_Types].xml')\n\n  const subObj = ContentTypesJson['Types']['Override']\n  const slidesLocArray = []\n  const slideLayoutsLocArray = []\n  for (const element of subObj) {\n    switch (element['attrs']['ContentType']) {\n      case 'application/vnd.openxmlformats-officedocument.presentationml.slide+xml':\n        slidesLocArray.push(element['attrs']['PartName'].substr(1))\n        break\n      case 'application/vnd.openxmlformats-officedocument.presentationml.slideLayout+xml':\n        slideLayoutsLocArray.push(element['attrs']['PartName'].substr(1))\n        break\n      default:\n    }\n  }\n  return {\n    slides: slidesLocArray,\n    slideLayouts: slideLayoutsLocArray\n  }\n}\n\nasync function getSlideSizeAndSetDefaultTextStyle(zip) {\n  //get app version\n  const app = await readXmlFile(zip, 'docProps/app.xml')\n  appVersion = parseInt(app['Properties']['AppVersion'])\n  console.log('create by Office PowerPoint app verssion: ', appVersion)\n\n  const content = await readXmlFile(zip, 'ppt/presentation.xml')\n  const sldSzAttrs = content['p:presentation']['p:sldSz']['attrs']\n  const sldSzWidth = parseInt(sldSzAttrs['cx'])\n  const sldSzHeight = parseInt(sldSzAttrs['cy'])\n  const sldSzType = sldSzAttrs['type']\n  console.log('Presentation size type: ', sldSzType)\n\n  defaultTextStyle = content['p:presentation']['p:defaultTextStyle']\n\n  slideWidth = sldSzWidth * slideFactor + settings.incSlide.width|0// * scaleX;//parseInt(sldSzAttrs[\"cx\"]) * 96 / 914400;\n  slideHeight = sldSzHeight * slideFactor + settings.incSlide.height|0// * scaleY;//parseInt(sldSzAttrs[\"cy\"]) * 96 / 914400;\n  //get slide dimensions\n  return {\n    width: slideWidth,\n    height: slideHeight\n  }\n}\n\nasync function processSingleSlide(zip, sldFileName, index, slideSize) {\n  self.postMessage({\n      'type': 'INFO',\n      'data': 'Processing slide' + (index + 1)\n  })\n  // =====< Step 1 >=====\n  // Read relationship filename of the slide (Get slideLayoutXX.xml)\n  // @sldFileName: ppt/slides/slide1.xml\n  // @resName: ppt/slides/_rels/slide1.xml.rels\n  const resName = sldFileName.replace('slides/slide', 'slides/_rels/slide') + '.rels'\n  const resContent = await readXmlFile(zip, resName)\n  let RelationshipArray = resContent['Relationships']['Relationship']\n  //console.log(\"RelationshipArray: \" , RelationshipArray)\n  let layoutFilename = ''\n  let diagramFilename = ''\n  const slideResObj = {}\n  if (RelationshipArray.constructor === Array) {\n    for (const element of RelationshipArray) {\n      switch (element['attrs']['Type']) {\n        case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/slideLayout':\n          layoutFilename = element['attrs']['Target'].replace('../', 'ppt/')\n          break\n        case 'http://schemas.microsoft.com/office/2007/relationships/diagramDrawing':\n          diagramFilename = element['attrs']['Target'].replace('../', 'ppt/')\n          slideResObj[element['attrs']['Id']] = {\n            'type': element['attrs']['Type'].replace('http://schemas.openxmlformats.org/officeDocument/2006/relationships/', ''),\n            'target': element['attrs']['Target'].replace('../', 'ppt/')\n          }\n          break\n        case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/notesSlide':\n        case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image':\n        case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart':\n        case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink':\n        default:\n          slideResObj[element['attrs']['Id']] = {\n            'type': element['attrs']['Type'].replace('http://schemas.openxmlformats.org/officeDocument/2006/relationships/', ''),\n            'target': element['attrs']['Target'].replace('../', 'ppt/')\n          }\n      }\n    }\n  } else {\n    layoutFilename = RelationshipArray['attrs']['Target'].replace('../', 'ppt/')\n  }\n  //console.log(slideResObj);\n  // Open slideLayoutXX.xml\n  const slideLayoutContent = await readXmlFile(zip, layoutFilename)\n  const slideLayoutTables = indexNodes(slideLayoutContent)\n  const sldLayoutClrOvr = getTextByPathList(slideLayoutContent, [ 'p:sldLayout', 'p:clrMapOvr', 'a:overrideClrMapping' ])\n\n  //console.log(slideLayoutClrOvride);\n  if (sldLayoutClrOvr !== undefined) {\n    slideLayoutClrOvride = sldLayoutClrOvr['attrs']\n  }\n  // =====< Step 2 >=====\n  // Read slide master filename of the slidelayout (Get slideMasterXX.xml)\n  // @resName: ppt/slideLayouts/slideLayout1.xml\n  // @masterName: ppt/slideLayouts/_rels/slideLayout1.xml.rels\n  const slideLayoutResFilename = layoutFilename.replace('slideLayouts/slideLayout', 'slideLayouts/_rels/slideLayout') + '.rels'\n  const slideLayoutResContent = await readXmlFile(zip, slideLayoutResFilename)\n  RelationshipArray = slideLayoutResContent['Relationships']['Relationship']\n  let masterFilename = ''\n  const layoutResObj = {}\n  if (RelationshipArray.constructor === Array) {\n    for (const element of RelationshipArray) {\n      switch (element['attrs']['Type']) {\n        case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/slideMaster':\n          masterFilename = element['attrs']['Target'].replace('../', 'ppt/')\n          break\n        default:\n          layoutResObj[element['attrs']['Id']] = {\n            'type': element['attrs']['Type'].replace('http://schemas.openxmlformats.org/officeDocument/2006/relationships/', ''),\n            'target': element['attrs']['Target'].replace('../', 'ppt/')\n          }\n      }\n    }\n  } else {\n    masterFilename = RelationshipArray['attrs']['Target'].replace('../', 'ppt/')\n  }\n  // Open slideMasterXX.xml\n  const slideMasterContent = await readXmlFile(zip, masterFilename)\n  const slideMasterTextStyles = getTextByPathList(slideMasterContent, [ 'p:sldMaster', 'p:txStyles' ])\n  const slideMasterTables = indexNodes(slideMasterContent)\n\n  /////////////////Amir/////////////\n  //Open slideMasterXX.xml.rels\n  const slideMasterResFilename = masterFilename.replace('slideMasters/slideMaster', 'slideMasters/_rels/slideMaster') + '.rels'\n  const slideMasterResContent = await readXmlFile(zip, slideMasterResFilename)\n  RelationshipArray = slideMasterResContent['Relationships']['Relationship']\n  let themeFilename = ''\n  const masterResObj = {}\n  if (RelationshipArray.constructor === Array) {\n    for (var i = 0; i < RelationshipArray.length; i++) {\n      switch (RelationshipArray[i]['attrs']['Type']) {\n        case 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme':\n          themeFilename = RelationshipArray[i]['attrs']['Target'].replace('../', 'ppt/')\n          break\n        default:\n          masterResObj[RelationshipArray[i]['attrs']['Id']] = {\n            'type': RelationshipArray[i]['attrs']['Type'].replace('http://schemas.openxmlformats.org/officeDocument/2006/relationships/', ''),\n            'target': RelationshipArray[i]['attrs']['Target'].replace('../', 'ppt/')\n          }\n      }\n    }\n  } else {\n    themeFilename = RelationshipArray['attrs']['Target'].replace('../', 'ppt/')\n  }\n  //console.log(themeFilename)\n  //Load Theme file\n  var themeResObj = {}\n  if (themeFilename !== undefined) {\n    var themeName = themeFilename.split('/').pop()\n    var themeResFileName = themeFilename.replace(themeName, '_rels/' + themeName) + '.rels'\n    //console.log(\"themeFilename: \", themeFilename, \", themeName: \", themeName, \", themeResFileName: \", themeResFileName)\n    var themeContent = await readXmlFile(zip, themeFilename)\n    var themeResContent = await readXmlFile(zip, themeResFileName)\n    if (themeResContent !== null) {\n      var relationshipArray = themeResContent['Relationships']['Relationship']\n      if (relationshipArray !== undefined){\n        themeFilename = ''\n        if (relationshipArray.constructor === Array) {\n          for (var i = 0; i < relationshipArray.length; i++) {\n            themeResObj[relationshipArray[i]['attrs']['Id']] = {\n              'type': relationshipArray[i]['attrs']['Type'].replace('http://schemas.openxmlformats.org/officeDocument/2006/relationships/', ''),\n              'target': relationshipArray[i]['attrs']['Target'].replace('../', 'ppt/')\n            }\n          }\n        } else {\n          //console.log(\"theme relationshipArray : \", relationshipArray)\n          themeResObj[relationshipArray['attrs']['Id']] = {\n            'type': relationshipArray['attrs']['Type'].replace('http://schemas.openxmlformats.org/officeDocument/2006/relationships/', ''),\n            'target': relationshipArray['attrs']['Target'].replace('../', 'ppt/')\n          }\n        }\n      }\n    }\n  }\n  //Load diagram file\n  var diagramResObj = {}\n  var digramFileContent = {}\n  if (diagramFilename !== undefined) {\n    var diagName = diagramFilename.split('/').pop()\n    var diagramResFileName = diagramFilename.replace(diagName, '_rels/' + diagName) + '.rels'\n    //console.log(\"diagramFilename: \", diagramFilename, \", themeName: \", themeName, \", diagramResFileName: \", diagramResFileName)\n    digramFileContent = await readXmlFile(zip, diagramFilename)\n    if (digramFileContent !== null && digramFileContent !== undefined && digramFileContent != '') {\n      var digramFileContentObjToStr = JSON.stringify(digramFileContent)\n      digramFileContentObjToStr = digramFileContentObjToStr.replace(/dsp:/g, 'p:')\n      digramFileContent = JSON.parse(digramFileContentObjToStr)\n    }\n\n    var digramResContent = await readXmlFile(zip, diagramResFileName)\n    if (digramResContent !== null) {\n      var relationshipArray = digramResContent['Relationships']['Relationship']\n      themeFilename = ''\n      if (relationshipArray.constructor === Array) {\n        for (var i = 0; i < relationshipArray.length; i++) {\n          diagramResObj[relationshipArray[i]['attrs']['Id']] = {\n            'type': relationshipArray[i]['attrs']['Type'].replace('http://schemas.openxmlformats.org/officeDocument/2006/relationships/', ''),\n            'target': relationshipArray[i]['attrs']['Target'].replace('../', 'ppt/')\n          }\n        }\n      } else {\n        //console.log(\"theme relationshipArray : \", relationshipArray)\n        diagramResObj[relationshipArray['attrs']['Id']] = {\n          'type': relationshipArray['attrs']['Type'].replace('http://schemas.openxmlformats.org/officeDocument/2006/relationships/', ''),\n          'target': relationshipArray['attrs']['Target'].replace('../', 'ppt/')\n        }\n      }\n    }\n  }\n  //console.log(\"diagramResObj: \" , diagramResObj)\n  // =====< Step 3 >=====\n  var slideContent = await readXmlFile(zip, sldFileName , true)\n  var nodes = slideContent['p:sld']['p:cSld']['p:spTree']\n  var warpObj = {\n    'zip': zip,\n    'slideLayoutContent': slideLayoutContent,\n    'slideLayoutTables': slideLayoutTables,\n    'slideMasterContent': slideMasterContent,\n    'slideMasterTables': slideMasterTables,\n    'slideContent': slideContent,\n    'slideResObj': slideResObj,\n    'slideMasterTextStyles': slideMasterTextStyles,\n    'layoutResObj': layoutResObj,\n    'masterResObj': masterResObj,\n    'themeContent': themeContent,\n    'themeResObj': themeResObj,\n    'digramFileContent': digramFileContent,\n    'diagramResObj': diagramResObj,\n    'defaultTextStyle': defaultTextStyle\n  }\n  var bgResult = ''\n  if (processFullTheme === true) {\n    bgResult = await getBackground(warpObj, slideSize, index)\n  }\n\n  var bgColor = ''\n  if (processFullTheme == 'colorsAndImageOnly') {\n    bgColor = await getSlideBackgroundFill(warpObj, index)\n  }\n\n  var result = '<div class=\\'slide\\' style=\\'width:' + slideSize.width + 'px; height:' + slideSize.height + 'px;' + bgColor + '\\'>'\n  result += bgResult\n  for (const nodeKey in nodes) {\n    if (nodes[nodeKey].constructor === Array) {\n      for (var i = 0; i < nodes[nodeKey].length; i++) {\n        result += await processNodesInSlide(nodeKey, nodes[nodeKey][i], nodes, warpObj, 'slide')\n      }\n    } else {\n      result += await processNodesInSlide(nodeKey, nodes[nodeKey], nodes, warpObj, 'slide')\n    }\n  }\n  return result + '</div></div>'\n}\n\nfunction indexNodes(content) {\n\n  const keys = Object.keys(content)\n  const spTreeNode = content[keys[0]]['p:cSld']['p:spTree']\n\n  const idTable = {}\n  const idxTable = {}\n  const typeTable = {}\n\n  let type\n  let idx\n  let id\n  let nvSpPrNode\n\n  for (const key in spTreeNode) {\n    if (key === 'p:nvGrpSpPr' || key === 'p:grpSpPr') {\n      continue\n    }\n    const targetNode = spTreeNode[key]\n\n    if (targetNode.constructor === Array) {\n      for (let i = 0; i < targetNode.length; i++) {\n        nvSpPrNode = targetNode[i]['p:nvSpPr']\n        id = getTextByPathList(nvSpPrNode, ['p:cNvPr', 'attrs', 'id'])\n        idx = getTextByPathList(nvSpPrNode, ['p:nvPr', 'p:ph', 'attrs', 'idx'])\n        type = getTextByPathList(nvSpPrNode, ['p:nvPr', 'p:ph', 'attrs', 'type'])\n\n        if (id !== undefined) {\n          idTable[id] = targetNode[i]\n        }\n        if (idx !== undefined) {\n          idxTable[idx] = targetNode[i]\n        }\n        if (type !== undefined) {\n          typeTable[type] = targetNode[i]\n        }\n      }\n    } else {\n      nvSpPrNode = targetNode['p:nvSpPr']\n      id = getTextByPathList(nvSpPrNode, [ 'p:cNvPr', 'attrs', 'id' ])\n      idx = getTextByPathList(nvSpPrNode, [ 'p:nvPr', 'p:ph', 'attrs', 'idx' ])\n      type = getTextByPathList(nvSpPrNode, [ 'p:nvPr', 'p:ph', 'attrs', 'type' ])\n\n      if (id !== undefined) {\n        idTable[id] = targetNode\n      }\n      if (idx !== undefined) {\n        idxTable[idx] = targetNode\n      }\n      if (type !== undefined) {\n        typeTable[type] = targetNode\n      }\n    }\n\n  }\n\n  return { 'idTable': idTable, 'idxTable': idxTable, 'typeTable': typeTable }\n}\n\nasync function processNodesInSlide(nodeKey, nodeValue, nodes, warpObj, source, sType) {\n  var result = ''\n\n  switch (nodeKey) {\n    case 'p:sp':    // Shape, Text\n      result = await processSpNode(nodeValue, nodes, warpObj, source, sType)\n      break\n    case 'p:cxnSp':    // Shape, Text (with connection)\n      result = await processCxnSpNode(nodeValue, nodes, warpObj, source, sType)\n      break\n    case 'p:pic':    // Picture\n      result = await processPicNode(nodeValue, warpObj, source, sType)\n      break\n    case 'p:graphicFrame':    // Chart, Diagram, Table\n      result = await processGraphicFrameNode(nodeValue, warpObj, source, sType)\n      break\n    case 'p:grpSp':\n      result = await processGroupSpNode(nodeValue, warpObj, source)\n      break\n    case 'mc:AlternateContent': //Equations and formulas as Image\n      //console.log(\"mc:AlternateContent nodeValue:\" , nodeValue , \"nodes:\",nodes, \"sType:\",sType)\n      var mcFallbackNode = getTextByPathList(nodeValue, ['mc:Fallback'])\n      result = await processGroupSpNode(mcFallbackNode, warpObj, source)\n      break\n    default:\n    //console.log(\"nodeKey: \", nodeKey)\n  }\n\n  return result\n\n}\n\nasync function processGroupSpNode(node, warpObj, source) {\n  //console.log(\"processGroupSpNode: node: \", node)\n  var xfrmNode = getTextByPathList(node, ['p:grpSpPr', 'a:xfrm'])\n  if (xfrmNode !== undefined) {\n    var x = parseInt(xfrmNode['a:off']['attrs']['x']) * slideFactor\n    var y = parseInt(xfrmNode['a:off']['attrs']['y']) * slideFactor\n    var chx = parseInt(xfrmNode['a:chOff']['attrs']['x']) * slideFactor\n    var chy = parseInt(xfrmNode['a:chOff']['attrs']['y']) * slideFactor\n    var cx = parseInt(xfrmNode['a:ext']['attrs']['cx']) * slideFactor\n    var cy = parseInt(xfrmNode['a:ext']['attrs']['cy']) * slideFactor\n    var chcx = parseInt(xfrmNode['a:chExt']['attrs']['cx']) * slideFactor\n    var chcy = parseInt(xfrmNode['a:chExt']['attrs']['cy']) * slideFactor\n    var rotate = parseInt(xfrmNode['attrs']['rot'])\n    var rotStr = ''//;\" border: 3px solid black;\";\n    // angleToDegrees(getTextByPathList(slideXfrmNode, [\"attrs\", \"rot\"]));\n    // var rotX = 0;\n    // var rotY = 0;\n    var top = y - chy,\n      left = x - chx,\n      width = cx - chcx,\n      height = cy - chcy\n\n    var sType = 'group'\n    if (!isNaN(rotate)) {\n      rotate = angleToDegrees(rotate)\n      rotStr += 'transform: rotate(' + rotate + 'deg) ; transform-origin: center;'\n      // var cLin = Math.sqrt(Math.pow((chy), 2) + Math.pow((chx), 2));\n      // var rdian = degreesToRadians(rotate);\n      // rotX = cLin * Math.cos(rdian);\n      // rotY = cLin * Math.sin(rdian);\n      if (rotate != 0) {\n        top = y\n        left = x\n        width = cx\n        height = cy\n        sType = 'group-rotate'\n      }\n\n    }\n  }\n  var grpStyle = ''\n\n  if (rotStr !== undefined && rotStr != '') {\n    grpStyle += rotStr\n  }\n\n  if (top !== undefined) {\n    grpStyle += 'top: ' + top + 'px;'\n  }\n  if (left !== undefined) {\n    grpStyle += 'left: ' + left + 'px;'\n  }\n  if (width !== undefined) {\n    grpStyle += 'width:' + width + 'px;'\n  }\n  if (height !== undefined) {\n    grpStyle += 'height: ' + height + 'px;'\n  }\n  var order = node['attrs']['order']\n\n  var result = '<div class=\\'block group\\' style=\\'z-index: ' + order + ';' + grpStyle + ' border:1px solid red;\\'>'\n\n  // Procsee all child nodes\n  for (var nodeKey in node) {\n    if (node[nodeKey].constructor === Array) {\n      for (var i = 0; i < node[nodeKey].length; i++) {\n        result += await processNodesInSlide(nodeKey, node[nodeKey][i], node, warpObj, source, sType)\n      }\n    } else {\n      result += await processNodesInSlide(nodeKey, node[nodeKey], node, warpObj, source, sType)\n    }\n  }\n\n  result += '</div>'\n\n  return result\n}\n\nasync function processSpNode(node, pNode, warpObj, source, sType) {\n\n  /*\n            *  958    <xsd:complexType name=\"CT_GvmlShape\">\n            *  959   <xsd:sequence>\n            *  960     <xsd:element name=\"nvSpPr\" type=\"CT_GvmlShapeNonVisual\"     minOccurs=\"1\" maxOccurs=\"1\"/>\n            *  961     <xsd:element name=\"spPr\"   type=\"CT_ShapeProperties\"        minOccurs=\"1\" maxOccurs=\"1\"/>\n            *  962     <xsd:element name=\"txSp\"   type=\"CT_GvmlTextShape\"          minOccurs=\"0\" maxOccurs=\"1\"/>\n            *  963     <xsd:element name=\"style\"  type=\"CT_ShapeStyle\"             minOccurs=\"0\" maxOccurs=\"1\"/>\n            *  964     <xsd:element name=\"extLst\" type=\"CT_OfficeArtExtensionList\" minOccurs=\"0\" maxOccurs=\"1\"/>\n            *  965   </xsd:sequence>\n            *  966 </xsd:complexType>\n            */\n\n  var id = getTextByPathList(node, ['p:nvSpPr', 'p:cNvPr', 'attrs', 'id'])\n  var name = getTextByPathList(node, ['p:nvSpPr', 'p:cNvPr', 'attrs', 'name'])\n  var idx = (getTextByPathList(node, ['p:nvSpPr', 'p:nvPr', 'p:ph', 'attrs', 'idx']) === undefined) ? undefined : getTextByPathList(node, ['p:nvSpPr', 'p:nvPr', 'p:ph', 'attrs', 'idx'])\n  var type = (getTextByPathList(node, ['p:nvSpPr', 'p:nvPr', 'p:ph', 'attrs', 'type']) === undefined) ? undefined : getTextByPathList(node, ['p:nvSpPr', 'p:nvPr', 'p:ph', 'attrs', 'type'])\n  var order = getTextByPathList(node, ['attrs', 'order'])\n  var isUserDrawnBg\n  if (source == 'slideLayoutBg' || source == 'slideMasterBg') {\n    var userDrawn = getTextByPathList(node, ['p:nvSpPr', 'p:nvPr', 'attrs', 'userDrawn'])\n    if (userDrawn == '1') {\n      isUserDrawnBg = true\n    } else {\n      isUserDrawnBg = false\n    }\n  }\n  var slideLayoutSpNode = undefined\n  var slideMasterSpNode = undefined\n\n  if (idx !== undefined) {\n    slideLayoutSpNode = warpObj['slideLayoutTables']['idxTable'][idx]\n    if (type !== undefined) {\n      slideMasterSpNode = warpObj['slideMasterTables']['typeTable'][type]\n    } else {\n      slideMasterSpNode = warpObj['slideMasterTables']['idxTable'][idx]\n    }\n  } else {\n    if (type !== undefined) {\n      slideLayoutSpNode = warpObj['slideLayoutTables']['typeTable'][type]\n      slideMasterSpNode = warpObj['slideMasterTables']['typeTable'][type]\n    }\n  }\n\n  if (type === undefined) {\n    const txBoxVal = getTextByPathList(node, ['p:nvSpPr', 'p:cNvSpPr', 'attrs', 'txBox'])\n    if (txBoxVal == '1') {\n      type = 'textBox'\n    }\n  }\n  if (type === undefined) {\n    type = getTextByPathList(slideLayoutSpNode, ['p:nvSpPr', 'p:nvPr', 'p:ph', 'attrs', 'type'])\n    if (type === undefined) {\n      //type = getTextByPathList(slideMasterSpNode, [\"p:nvSpPr\", \"p:nvPr\", \"p:ph\", \"attrs\", \"type\"]);\n      if (source == 'diagramBg') {\n        type = 'diagram'\n      } else {\n\n        type = 'obj' //default type\n      }\n    }\n  }\n  //console.log(\"processSpNode type:\", type, \"idx:\", idx);\n  return genShape(node, pNode, slideLayoutSpNode, slideMasterSpNode, id, name, idx, type, order, warpObj, isUserDrawnBg, sType, source)\n}\n\nasync function processCxnSpNode(node, pNode, warpObj, source, sType) {\n\n  var id = node['p:nvCxnSpPr']['p:cNvPr']['attrs']['id']\n  var name = node['p:nvCxnSpPr']['p:cNvPr']['attrs']['name']\n  var idx = (node['p:nvCxnSpPr']['p:nvPr']['p:ph'] === undefined) ? undefined : node['p:nvSpPr']['p:nvPr']['p:ph']['attrs']['idx']\n  var type = (node['p:nvCxnSpPr']['p:nvPr']['p:ph'] === undefined) ? undefined : node['p:nvSpPr']['p:nvPr']['p:ph']['attrs']['type']\n  //<p:cNvCxnSpPr>(<p:cNvCxnSpPr>, <a:endCxn>)\n  var order = node['attrs']['order']\n\n  return genShape(node, pNode, undefined, undefined, id, name, idx, type, order, warpObj, undefined, sType, source)\n}\n\nasync function genShape(node, pNode, slideLayoutSpNode, slideMasterSpNode, id, name, idx, type, order, warpObj, isUserDrawnBg, sType, source) {\n  //var dltX = 0;\n  //var dltY = 0;\n  var xfrmList = [ 'p:spPr', 'a:xfrm' ]\n  var slideXfrmNode = getTextByPathList(node, xfrmList)\n  var slideLayoutXfrmNode = getTextByPathList(slideLayoutSpNode, xfrmList)\n  var slideMasterXfrmNode = getTextByPathList(slideMasterSpNode, xfrmList)\n\n  var result = ''\n  var shpId = getTextByPathList(node, [ 'attrs', 'order' ])\n  //console.log(\"shpId: \",shpId)\n  var shapType = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'attrs', 'prst' ])\n\n  //custGeom - Amir\n  var custShapType = getTextByPathList(node, [ 'p:spPr', 'a:custGeom' ])\n\n  var isFlipV = false\n  var isFlipH = false\n  var flip = ''\n  if (getTextByPathList(slideXfrmNode, [ 'attrs', 'flipV' ]) === '1') {\n    isFlipV = true\n  }\n  if (getTextByPathList(slideXfrmNode, [ 'attrs', 'flipH' ]) === '1') {\n    isFlipH = true\n  }\n  if (isFlipH && !isFlipV) {\n    flip = ' scale(-1,1)'\n  } else if (!isFlipH && isFlipV) {\n    flip = ' scale(1,-1)'\n  } else if (isFlipH && isFlipV) {\n    flip = ' scale(-1,-1)'\n  }\n  /////////////////////////Amir////////////////////////\n  //rotate\n  var rotate = angleToDegrees(getTextByPathList(slideXfrmNode, [ 'attrs', 'rot' ]))\n\n  //console.log(\"genShape rotate: \" + rotate);\n  var txtRotate\n  var txtXframeNode = getTextByPathList(node, [ 'p:txXfrm' ])\n  if (txtXframeNode !== undefined) {\n    var txtXframeRot = getTextByPathList(txtXframeNode, [ 'attrs', 'rot' ])\n    if (txtXframeRot !== undefined) {\n      txtRotate = angleToDegrees(txtXframeRot) + 90\n    }\n  } else {\n    txtRotate = rotate\n  }\n  //////////////////////////////////////////////////\n  if (shapType !== undefined || custShapType !== undefined /*&& slideXfrmNode !== undefined*/) {\n    var off = getTextByPathList(slideXfrmNode, [ 'a:off', 'attrs' ]) || { x: 0, y: 0 }\n    var x = parseInt(off['x']) * slideFactor\n    var y = parseInt(off['y']) * slideFactor\n\n    var ext = getTextByPathList(slideXfrmNode, [ 'a:ext', 'attrs' ]) || { cx: 0, cy: 0 }\n    var w = parseInt(ext['cx']) * slideFactor\n    var h = parseInt(ext['cy']) * slideFactor\n\n    var svgCssName = '_svg_css_' + (Object.keys(styleTable).length + 1) + '_' + Math.floor(Math.random() * 1001)\n    //console.log(\"name:\", name, \"svgCssName: \", svgCssName)\n    var effectsClassName = svgCssName + '_effects'\n    result += '<svg class=\\'drawing ' + svgCssName + ' ' + effectsClassName + ' \\' _id=\\'' + id + '\\' _idx=\\'' + idx + '\\' _type=\\'' + type + '\\' _name=\\'' + name + '\\'' +\n      '\\' style=\\'' +\n      getPosition(slideXfrmNode, pNode, undefined, undefined, sType) +\n      getSize(slideXfrmNode, undefined, undefined) +\n      ' z-index: ' + order + ';' +\n      'transform: rotate(' + ((rotate !== undefined) ? rotate : 0) + 'deg)' + flip + ';' +\n      '\\'>'\n    result += '<defs>'\n    // Fill Color\n    var fillColor = await getShapeFill(node, pNode, true, warpObj, source)\n    //console.log(\"genShape: fillColor: \", fillColor)\n    var grndFillFlg = false\n    var imgFillFlg = false\n    var clrFillType = getFillType(getTextByPathList(node, [ 'p:spPr' ]))\n    if (clrFillType == 'GROUP_FILL') {\n      clrFillType = getFillType(getTextByPathList(pNode, [ 'p:grpSpPr' ]))\n    }\n    // if (clrFillType == \"\") {\n    //     var clrFillType = getFillType(getTextByPathList(node, [\"p:style\",\"a:fillRef\"]));\n    // }\n    //console.log(\"genShape: fillColor: \", fillColor, \", clrFillType: \", clrFillType, \", node: \", node)\n    /////////////////////////////////////////\n    if (clrFillType == 'GRADIENT_FILL') {\n      grndFillFlg = true\n      var color_arry = fillColor.color\n      var angl = fillColor.rot + 90\n      var svgGrdnt = getSvgGradient(w, h, angl, color_arry, shpId)\n      //fill=\"url(#linGrd)\"\n      //console.log(\"genShape: svgGrdnt: \", svgGrdnt)\n      result += svgGrdnt\n\n    } else if (clrFillType == 'PIC_FILL') {\n      imgFillFlg = true\n      var svgBgImg = await getSvgImagePattern(node, fillColor, shpId, warpObj)\n      //fill=\"url(#imgPtrn)\"\n      //console.log(svgBgImg)\n      result += svgBgImg\n    } else if (clrFillType == 'PATTERN_FILL') {\n      var styleText = fillColor\n      if (styleText in styleTable) {\n        styleText += 'do-nothing: ' + svgCssName + ';'\n      }\n      styleTable[styleText] = {\n        'name': svgCssName,\n        'text': styleText\n      }\n      //}\n      fillColor = 'none'\n    } else {\n      if (clrFillType != 'SOLID_FILL' && clrFillType != 'PATTERN_FILL' &&\n        (shapType == 'arc' ||\n          shapType == 'bracketPair' ||\n          shapType == 'bracePair' ||\n          shapType == 'leftBracket' ||\n          shapType == 'leftBrace' ||\n          shapType == 'rightBrace' ||\n          shapType == 'rightBracket')) { //Temp. solution  - TODO\n        fillColor = 'none'\n      }\n    }\n    // Border Color\n    var border = getBorder(node, pNode, true, 'shape', warpObj)\n\n    var headEndNodeAttrs = getTextByPathList(node, [ 'p:spPr', 'a:ln', 'a:headEnd', 'attrs' ])\n    var tailEndNodeAttrs = getTextByPathList(node, [ 'p:spPr', 'a:ln', 'a:tailEnd', 'attrs' ])\n    // type: none, triangle, stealth, diamond, oval, arrow\n\n    ////////////////////effects/////////////////////////////////////////////////////\n    //p:spPr => a:effectLst =>\n    //\"a:blur\"\n    //\"a:fillOverlay\"\n    //\"a:glow\"\n    //\"a:innerShdw\"\n    //\"a:outerShdw\"\n    //\"a:prstShdw\"\n    //\"a:reflection\"\n    //\"a:softEdge\"\n    //p:spPr => a:scene3d\n    //\"a:camera\"\n    //\"a:lightRig\"\n    //\"a:backdrop\"\n    //\"a:extLst\"?\n    //p:spPr => a:sp3d\n    //\"a:bevelT\"\n    //\"a:bevelB\"\n    //\"a:extrusionClr\"\n    //\"a:contourClr\"\n    //\"a:extLst\"?\n    //////////////////////////////outerShdw///////////////////////////////////////////\n    //not support sizing the shadow\n    var outerShdwNode = getTextByPathList(node, [ 'p:spPr', 'a:effectLst', 'a:outerShdw' ])\n    var oShadowSvgUrlStr = ''\n    if (outerShdwNode !== undefined) {\n      var chdwClrNode = getSolidFill(outerShdwNode, undefined, undefined, warpObj)\n      var outerShdwAttrs = outerShdwNode['attrs']\n\n      //var algn = outerShdwAttrs[\"algn\"];\n      var dir = (outerShdwAttrs['dir']) ? (parseInt(outerShdwAttrs['dir']) / 60000) : 0\n      var dist = parseInt(outerShdwAttrs['dist']) * slideFactor//(px) //* (3 / 4); //(pt)\n      //var rotWithShape = outerShdwAttrs[\"rotWithShape\"];\n      var blurRad = (outerShdwAttrs['blurRad']) ? (parseInt(outerShdwAttrs['blurRad']) * slideFactor) : '' //+ \"px\"\n      //var sx = (outerShdwAttrs[\"sx\"]) ? (parseInt(outerShdwAttrs[\"sx\"]) / 100000) : 1;\n      //var sy = (outerShdwAttrs[\"sy\"]) ? (parseInt(outerShdwAttrs[\"sy\"]) / 100000) : 1;\n      var vx = dist * Math.sin(dir * Math.PI / 180)\n      var hx = dist * Math.cos(dir * Math.PI / 180)\n      //SVG\n      //var oShadowId = \"outerhadow_\" + shpId;\n      //oShadowSvgUrlStr = \"filter='url(#\" + oShadowId+\")'\";\n      //var shadowFilterStr = '<filter id=\"' + oShadowId + '\" x=\"0\" y=\"0\" width=\"' + w * (6 / 8) + '\" height=\"' + h + '\">';\n      //1:\n      //shadowFilterStr += '<feDropShadow dx=\"' + vx + '\" dy=\"' + hx + '\" stdDeviation=\"' + blurRad * (3 / 4) + '\" flood-color=\"#' + chdwClrNode +'\" flood-opacity=\"1\" />'\n      //2:\n      //shadowFilterStr += '<feFlood result=\"floodColor\" flood-color=\"red\" flood-opacity=\"0.5\"   width=\"' + w * (6 / 8) + '\" height=\"' + h + '\"  />'; //#' + chdwClrNode +'\n      //shadowFilterStr += '<feOffset result=\"offOut\" in=\"SourceGraph ccfsdf-+ic\"  dx=\"' + vx + '\" dy=\"' + hx + '\"/>'; //how much to offset\n      //shadowFilterStr += '<feGaussianBlur result=\"blurOut\" in=\"offOut\" stdDeviation=\"' + blurRad*(3/4) +'\"/>'; //tdDeviation is how much to blur\n      //shadowFilterStr += '<feComponentTransfer><feFuncA type=\"linear\" slope=\"0.5\"/></feComponentTransfer>'; //slope is the opacity of the shadow\n      //shadowFilterStr += '<feBlend in=\"SourceGraphic\" in2=\"blurOut\"  mode=\"normal\" />'; //this contains the element that the filter is applied to\n      //shadowFilterStr += '</filter>';\n      //result += shadowFilterStr;\n\n      //css:\n      var svg_css_shadow = 'filter:drop-shadow(' + hx + 'px ' + vx + 'px ' + blurRad + 'px #' + chdwClrNode + ');'\n\n      if (svg_css_shadow in styleTable) {\n        svg_css_shadow += 'do-nothing: ' + svgCssName + ';'\n      }\n\n      styleTable[svg_css_shadow] = {\n        'name': effectsClassName,\n        'text': svg_css_shadow\n      }\n\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////\n    if ((headEndNodeAttrs !== undefined && (headEndNodeAttrs['type'] === 'triangle' || headEndNodeAttrs['type'] === 'arrow')) ||\n      (tailEndNodeAttrs !== undefined && (tailEndNodeAttrs['type'] === 'triangle' || tailEndNodeAttrs['type'] === 'arrow'))) {\n      var triangleMarker = '<marker id=\\'markerTriangle_' + shpId + '\\' viewBox=\\'0 0 10 10\\' refX=\\'1\\' refY=\\'5\\' markerWidth=\\'5\\' markerHeight=\\'5\\' stroke=\\'' + border.color + '\\' fill=\\'' + border.color +\n        '\\' orient=\\'auto-start-reverse\\' markerUnits=\\'strokeWidth\\'><path d=\\'M 0 0 L 10 5 L 0 10 z\\' /></marker>'\n      result += triangleMarker\n    }\n    result += '</defs>'\n  }\n  if (shapType !== undefined && custShapType === undefined) {\n    //console.log(\"shapType: \", shapType)\n    switch (shapType) {\n      case 'rect':\n      case 'flowChartProcess':\n      case 'flowChartPredefinedProcess':\n      case 'flowChartInternalStorage':\n      case 'actionButtonBlank':\n        result += '<rect x=\\'0\\' y=\\'0\\' width=\\'' + w + '\\' height=\\'' + h + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' ' + oShadowSvgUrlStr + '  />'\n\n        if (shapType == 'flowChartPredefinedProcess') {\n          result += '<rect x=\\'' + w * (1 / 8) + '\\' y=\\'0\\' width=\\'' + w * (6 / 8) + '\\' height=\\'' + h + '\\' fill=\\'none\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        } else if (shapType == 'flowChartInternalStorage') {\n          result += ' <polyline points=\\'' + w * (1 / 8) + ' 0,' + w * (1 / 8) + ' ' + h + '\\' fill=\\'none\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          result += ' <polyline points=\\'0 ' + h * (1 / 8) + ',' + w + ' ' + h * (1 / 8) + '\\' fill=\\'none\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        }\n        break\n      case 'flowChartCollate':\n        var d = 'M 0,0' +\n          ' L' + w + ',' + 0 +\n          ' L' + 0 + ',' + h +\n          ' L' + w + ',' + h +\n          ' z'\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'flowChartDocument':\n        var y1, y2, y3, x1\n        x1 = w * 10800 / 21600\n        y1 = h * 17322 / 21600\n        y2 = h * 20172 / 21600\n        y3 = h * 23922 / 21600\n        var d = 'M' + 0 + ',' + 0 +\n          ' L' + w + ',' + 0 +\n          ' L' + w + ',' + y1 +\n          ' C' + x1 + ',' + y1 + ' ' + x1 + ',' + y3 + ' ' + 0 + ',' + y2 +\n          ' z'\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'flowChartMultidocument':\n        var y1, y2, y3, y4, y5, y6, y7, y8, y9, x1, x2, x3, x4, x5, x6, x7\n        y1 = h * 18022 / 21600\n        y2 = h * 3675 / 21600\n        y3 = h * 23542 / 21600\n        y4 = h * 1815 / 21600\n        y5 = h * 16252 / 21600\n        y6 = h * 16352 / 21600\n        y7 = h * 14392 / 21600\n        y8 = h * 20782 / 21600\n        y9 = h * 14467 / 21600\n        x1 = w * 1532 / 21600\n        x2 = w * 20000 / 21600\n        x3 = w * 9298 / 21600\n        x4 = w * 19298 / 21600\n        x5 = w * 18595 / 21600\n        x6 = w * 2972 / 21600\n        x7 = w * 20800 / 21600\n        var d = 'M' + 0 + ',' + y2 +\n          ' L' + x5 + ',' + y2 +\n          ' L' + x5 + ',' + y1 +\n          ' C' + x3 + ',' + y1 + ' ' + x3 + ',' + y3 + ' ' + 0 + ',' + y8 +\n          ' z' +\n          'M' + x1 + ',' + y2 +\n          ' L' + x1 + ',' + y4 +\n          ' L' + x2 + ',' + y4 +\n          ' L' + x2 + ',' + y5 +\n          ' C' + x4 + ',' + y5 + ' ' + x5 + ',' + y6 + ' ' + x5 + ',' + y6 +\n          'M' + x6 + ',' + y4 +\n          ' L' + x6 + ',' + 0 +\n          ' L' + w + ',' + 0 +\n          ' L' + w + ',' + y7 +\n          ' C' + x7 + ',' + y7 + ' ' + x2 + ',' + y9 + ' ' + x2 + ',' + y9\n\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'actionButtonBackPrevious':\n        var hc = w / 2, vc = h / 2, ss = Math.min(w, h)\n        var dx2, g9, g10, g11, g12\n\n        dx2 = ss * 3 / 8\n        g9 = vc - dx2\n        g10 = vc + dx2\n        g11 = hc - dx2\n        g12 = hc + dx2\n        var d = 'M' + 0 + ',' + 0 +\n          ' L' + w + ',' + 0 +\n          ' L' + w + ',' + h +\n          ' L' + 0 + ',' + h +\n          ' z' +\n          'M' + g11 + ',' + vc +\n          ' L' + g12 + ',' + g9 +\n          ' L' + g12 + ',' + g10 +\n          ' z'\n\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'actionButtonBeginning':\n        var hc = w / 2, vc = h / 2, ss = Math.min(w, h)\n        var dx2, g9, g10, g11, g12, g13, g14, g15, g16, g17\n\n        dx2 = ss * 3 / 8\n        g9 = vc - dx2\n        g10 = vc + dx2\n        g11 = hc - dx2\n        g12 = hc + dx2\n        g13 = ss * 3 / 4\n        g14 = g13 / 8\n        g15 = g13 / 4\n        g16 = g11 + g14\n        g17 = g11 + g15\n        var d = 'M' + 0 + ',' + 0 +\n          ' L' + w + ',' + 0 +\n          ' L' + w + ',' + h +\n          ' L' + 0 + ',' + h +\n          ' z' +\n          'M' + g17 + ',' + vc +\n          ' L' + g12 + ',' + g9 +\n          ' L' + g12 + ',' + g10 +\n          ' z' +\n          'M' + g16 + ',' + g9 +\n          ' L' + g11 + ',' + g9 +\n          ' L' + g11 + ',' + g10 +\n          ' L' + g16 + ',' + g10 +\n          ' z'\n\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'actionButtonDocument':\n        var hc = w / 2, vc = h / 2, ss = Math.min(w, h)\n        var dx2, g9, g10, dx1, g11, g12, g13, g14, g15\n\n        dx2 = ss * 3 / 8\n        g9 = vc - dx2\n        g10 = vc + dx2\n        dx1 = ss * 9 / 32\n        g11 = hc - dx1\n        g12 = hc + dx1\n        g13 = ss * 3 / 16\n        g14 = g12 - g13\n        g15 = g9 + g13\n        var d = 'M' + 0 + ',' + 0 +\n          ' L' + w + ',' + 0 +\n          ' L' + w + ',' + h +\n          ' L' + 0 + ',' + h +\n          ' z' +\n          'M' + g11 + ',' + g9 +\n          ' L' + g14 + ',' + g9 +\n          ' L' + g12 + ',' + g15 +\n          ' L' + g12 + ',' + g10 +\n          ' L' + g11 + ',' + g10 +\n          ' z' +\n          'M' + g14 + ',' + g9 +\n          ' L' + g14 + ',' + g15 +\n          ' L' + g12 + ',' + g15 +\n          ' z'\n\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'actionButtonEnd':\n        var hc = w / 2, vc = h / 2, ss = Math.min(w, h)\n        var dx2, g9, g10, g11, g12, g13, g14, g15, g16, g17\n\n        dx2 = ss * 3 / 8\n        g9 = vc - dx2\n        g10 = vc + dx2\n        g11 = hc - dx2\n        g12 = hc + dx2\n        g13 = ss * 3 / 4\n        g14 = g13 * 3 / 4\n        g15 = g13 * 7 / 8\n        g16 = g11 + g14\n        g17 = g11 + g15\n        var d = 'M' + 0 + ',' + h +\n          ' L' + w + ',' + h +\n          ' L' + w + ',' + 0 +\n          ' L' + 0 + ',' + 0 +\n          ' z' +\n          ' M' + g17 + ',' + g9 +\n          ' L' + g12 + ',' + g9 +\n          ' L' + g12 + ',' + g10 +\n          ' L' + g17 + ',' + g10 +\n          ' z' +\n          ' M' + g16 + ',' + vc +\n          ' L' + g11 + ',' + g9 +\n          ' L' + g11 + ',' + g10 +\n          ' z'\n\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'actionButtonForwardNext':\n        var hc = w / 2, vc = h / 2, ss = Math.min(w, h)\n        var dx2, g9, g10, g11, g12\n\n        dx2 = ss * 3 / 8\n        g9 = vc - dx2\n        g10 = vc + dx2\n        g11 = hc - dx2\n        g12 = hc + dx2\n\n        var d = 'M' + 0 + ',' + h +\n          ' L' + w + ',' + h +\n          ' L' + w + ',' + 0 +\n          ' L' + 0 + ',' + 0 +\n          ' z' +\n          ' M' + g12 + ',' + vc +\n          ' L' + g11 + ',' + g9 +\n          ' L' + g11 + ',' + g10 +\n          ' z'\n\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'actionButtonHelp':\n        var hc = w / 2, vc = h / 2, ss = Math.min(w, h)\n        var dx2, g9, g11, g13, g14, g15, g16, g19, g20, g21, g23, g24, g27, g29, g30, g31, g33, g36, g37, g41, g42\n\n        dx2 = ss * 3 / 8\n        g9 = vc - dx2\n        g11 = hc - dx2\n        g13 = ss * 3 / 4\n        g14 = g13 / 7\n        g15 = g13 * 3 / 14\n        g16 = g13 * 2 / 7\n        g19 = g13 * 3 / 7\n        g20 = g13 * 4 / 7\n        g21 = g13 * 17 / 28\n        g23 = g13 * 21 / 28\n        g24 = g13 * 11 / 14\n        g27 = g9 + g16\n        g29 = g9 + g21\n        g30 = g9 + g23\n        g31 = g9 + g24\n        g33 = g11 + g15\n        g36 = g11 + g19\n        g37 = g11 + g20\n        g41 = g13 / 14\n        g42 = g13 * 3 / 28\n        var cX1 = g33 + g16\n        var cX2 = g36 + g14\n        var cY3 = g31 + g42\n        var cX4 = (g37 + g36 + g16) / 2\n\n        var d = 'M' + 0 + ',' + 0 +\n          ' L' + w + ',' + 0 +\n          ' L' + w + ',' + h +\n          ' L' + 0 + ',' + h +\n          ' z' +\n          'M' + g33 + ',' + g27 +\n          shapeArc(cX1, g27, g16, g16, 180, 360, false).replace('M', 'L') +\n          shapeArc(cX4, g27, g14, g15, 0, 90, false).replace('M', 'L') +\n          shapeArc(cX4, g29, g41, g42, 270, 180, false).replace('M', 'L') +\n          ' L' + g37 + ',' + g30 +\n          ' L' + g36 + ',' + g30 +\n          ' L' + g36 + ',' + g29 +\n          shapeArc(cX2, g29, g14, g15, 180, 270, false).replace('M', 'L') +\n          shapeArc(g37, g27, g41, g42, 90, 0, false).replace('M', 'L') +\n          shapeArc(cX1, g27, g14, g14, 0, -180, false).replace('M', 'L') +\n          ' z' +\n          'M' + hc + ',' + g31 +\n          shapeArc(hc, cY3, g42, g42, 270, 630, false).replace('M', 'L') +\n          ' z'\n\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'actionButtonHome':\n        var hc = w / 2, vc = h / 2, ss = Math.min(w, h)\n        var dx2, g9, g10, g11, g12, g13, g14, g15, g16, g17, g18, g19, g20, g21, g22, g23, g24, g25, g26, g27, g28, g29,\n          g30, g31, g32, g33\n\n        dx2 = ss * 3 / 8\n        g9 = vc - dx2\n        g10 = vc + dx2\n        g11 = hc - dx2\n        g12 = hc + dx2\n        g13 = ss * 3 / 4\n        g14 = g13 / 16\n        g15 = g13 / 8\n        g16 = g13 * 3 / 16\n        g17 = g13 * 5 / 16\n        g18 = g13 * 7 / 16\n        g19 = g13 * 9 / 16\n        g20 = g13 * 11 / 16\n        g21 = g13 * 3 / 4\n        g22 = g13 * 13 / 16\n        g23 = g13 * 7 / 8\n        g24 = g9 + g14\n        g25 = g9 + g16\n        g26 = g9 + g17\n        g27 = g9 + g21\n        g28 = g11 + g15\n        g29 = g11 + g18\n        g30 = g11 + g19\n        g31 = g11 + g20\n        g32 = g11 + g22\n        g33 = g11 + g23\n\n        var d = 'M' + 0 + ',' + 0 +\n          ' L' + w + ',' + 0 +\n          ' L' + w + ',' + h +\n          ' L' + 0 + ',' + h +\n          ' z' +\n          ' M' + hc + ',' + g9 +\n          ' L' + g11 + ',' + vc +\n          ' L' + g28 + ',' + vc +\n          ' L' + g28 + ',' + g10 +\n          ' L' + g33 + ',' + g10 +\n          ' L' + g33 + ',' + vc +\n          ' L' + g12 + ',' + vc +\n          ' L' + g32 + ',' + g26 +\n          ' L' + g32 + ',' + g24 +\n          ' L' + g31 + ',' + g24 +\n          ' L' + g31 + ',' + g25 +\n          ' z' +\n          ' M' + g29 + ',' + g27 +\n          ' L' + g30 + ',' + g27 +\n          ' L' + g30 + ',' + g10 +\n          ' L' + g29 + ',' + g10 +\n          ' z'\n\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'actionButtonInformation':\n        var hc = w / 2, vc = h / 2, ss = Math.min(w, h)\n        var dx2, g9, g11, g13, g14, g17, g18, g19, g20, g22, g23, g24, g25, g28, g29, g30, g31, g32, g34, g35, g37, g38\n\n        dx2 = ss * 3 / 8\n        g9 = vc - dx2\n        g11 = hc - dx2\n        g13 = ss * 3 / 4\n        g14 = g13 / 32\n        g17 = g13 * 5 / 16\n        g18 = g13 * 3 / 8\n        g19 = g13 * 13 / 32\n        g20 = g13 * 19 / 32\n        g22 = g13 * 11 / 16\n        g23 = g13 * 13 / 16\n        g24 = g13 * 7 / 8\n        g25 = g9 + g14\n        g28 = g9 + g17\n        g29 = g9 + g18\n        g30 = g9 + g23\n        g31 = g9 + g24\n        g32 = g11 + g17\n        g34 = g11 + g19\n        g35 = g11 + g20\n        g37 = g11 + g22\n        g38 = g13 * 3 / 32\n        var cY1 = g9 + dx2\n        var cY2 = g25 + g38\n\n        var d = 'M' + 0 + ',' + 0 +\n          ' L' + w + ',' + 0 +\n          ' L' + w + ',' + h +\n          ' L' + 0 + ',' + h +\n          ' z' +\n          'M' + hc + ',' + g9 +\n          shapeArc(hc, cY1, dx2, dx2, 270, 630, false).replace('M', 'L') +\n          ' z' +\n          'M' + hc + ',' + g25 +\n          shapeArc(hc, cY2, g38, g38, 270, 630, false).replace('M', 'L') +\n          'M' + g32 + ',' + g28 +\n          ' L' + g35 + ',' + g28 +\n          ' L' + g35 + ',' + g30 +\n          ' L' + g37 + ',' + g30 +\n          ' L' + g37 + ',' + g31 +\n          ' L' + g32 + ',' + g31 +\n          ' L' + g32 + ',' + g30 +\n          ' L' + g34 + ',' + g30 +\n          ' L' + g34 + ',' + g29 +\n          ' L' + g32 + ',' + g29 +\n          ' z'\n\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'actionButtonMovie':\n        var hc = w / 2, vc = h / 2, ss = Math.min(w, h)\n        var dx2, g9, g10, g11, g12, g13, g14, g15, g16, g17, g18, g19, g20, g21, g22, g23, g24, g25, g26, g27,\n          g28, g29, g30, g31, g32, g33, g34, g35, g36, g37, g38, g39, g40, g41, g42, g43, g44, g45, g46, g47, g48\n\n        dx2 = ss * 3 / 8\n        g9 = vc - dx2\n        g10 = vc + dx2\n        g11 = hc - dx2\n        g12 = hc + dx2\n        g13 = ss * 3 / 4\n        g14 = g13 * 1455 / 21600\n        g15 = g13 * 1905 / 21600\n        g16 = g13 * 2325 / 21600\n        g17 = g13 * 16155 / 21600\n        g18 = g13 * 17010 / 21600\n        g19 = g13 * 19335 / 21600\n        g20 = g13 * 19725 / 21600\n        g21 = g13 * 20595 / 21600\n        g22 = g13 * 5280 / 21600\n        g23 = g13 * 5730 / 21600\n        g24 = g13 * 6630 / 21600\n        g25 = g13 * 7492 / 21600\n        g26 = g13 * 9067 / 21600\n        g27 = g13 * 9555 / 21600\n        g28 = g13 * 13342 / 21600\n        g29 = g13 * 14580 / 21600\n        g30 = g13 * 15592 / 21600\n        g31 = g11 + g14\n        g32 = g11 + g15\n        g33 = g11 + g16\n        g34 = g11 + g17\n        g35 = g11 + g18\n        g36 = g11 + g19\n        g37 = g11 + g20\n        g38 = g11 + g21\n        g39 = g9 + g22\n        g40 = g9 + g23\n        g41 = g9 + g24\n        g42 = g9 + g25\n        g43 = g9 + g26\n        g44 = g9 + g27\n        g45 = g9 + g28\n        g46 = g9 + g29\n        g47 = g9 + g30\n        g48 = g9 + g31\n\n        var d = 'M' + 0 + ',' + h +\n          ' L' + w + ',' + h +\n          ' L' + w + ',' + 0 +\n          ' L' + 0 + ',' + 0 +\n          ' z' +\n          'M' + g11 + ',' + g39 +\n          ' L' + g11 + ',' + g44 +\n          ' L' + g31 + ',' + g44 +\n          ' L' + g32 + ',' + g43 +\n          ' L' + g33 + ',' + g43 +\n          ' L' + g33 + ',' + g47 +\n          ' L' + g35 + ',' + g47 +\n          ' L' + g35 + ',' + g45 +\n          ' L' + g36 + ',' + g45 +\n          ' L' + g38 + ',' + g46 +\n          ' L' + g12 + ',' + g46 +\n          ' L' + g12 + ',' + g41 +\n          ' L' + g38 + ',' + g41 +\n          ' L' + g37 + ',' + g42 +\n          ' L' + g35 + ',' + g42 +\n          ' L' + g35 + ',' + g41 +\n          ' L' + g34 + ',' + g40 +\n          ' L' + g32 + ',' + g40 +\n          ' L' + g31 + ',' + g39 +\n          ' z'\n\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'actionButtonReturn':\n        var hc = w / 2, vc = h / 2, ss = Math.min(w, h)\n        var dx2, g9, g10, g11, g12, g13, g14, g15, g16, g17, g18, g19, g20, g21, g22, g23, g24, g25, g26, g27\n\n        dx2 = ss * 3 / 8\n        g9 = vc - dx2\n        g10 = vc + dx2\n        g11 = hc - dx2\n        g12 = hc + dx2\n        g13 = ss * 3 / 4\n        g14 = g13 * 7 / 8\n        g15 = g13 * 3 / 4\n        g16 = g13 * 5 / 8\n        g17 = g13 * 3 / 8\n        g18 = g13 / 4\n        g19 = g9 + g15\n        g20 = g9 + g16\n        g21 = g9 + g18\n        g22 = g11 + g14\n        g23 = g11 + g15\n        g24 = g11 + g16\n        g25 = g11 + g17\n        g26 = g11 + g18\n        g27 = g13 / 8\n        var cX1 = g24 - g27\n        var cY2 = g19 - g27\n        var cX3 = g11 + g17\n        var cY4 = g10 - g17\n\n        var d = 'M' + 0 + ',' + h +\n          ' L' + w + ',' + h +\n          ' L' + w + ',' + 0 +\n          ' L' + 0 + ',' + 0 +\n          ' z' +\n          ' M' + g12 + ',' + g21 +\n          ' L' + g23 + ',' + g9 +\n          ' L' + hc + ',' + g21 +\n          ' L' + g24 + ',' + g21 +\n          ' L' + g24 + ',' + g20 +\n          shapeArc(cX1, g20, g27, g27, 0, 90, false).replace('M', 'L') +\n          ' L' + g25 + ',' + g19 +\n          shapeArc(g25, cY2, g27, g27, 90, 180, false).replace('M', 'L') +\n          ' L' + g26 + ',' + g21 +\n          ' L' + g11 + ',' + g21 +\n          ' L' + g11 + ',' + g20 +\n          shapeArc(cX3, g20, g17, g17, 180, 90, false).replace('M', 'L') +\n          ' L' + hc + ',' + g10 +\n          shapeArc(hc, cY4, g17, g17, 90, 0, false).replace('M', 'L') +\n          ' L' + g22 + ',' + g21 +\n          ' z'\n\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'actionButtonSound':\n        var hc = w / 2, vc = h / 2, ss = Math.min(w, h)\n        var dx2, g9, g10, g11, g12, g13, g14, g15, g16, g17, g18, g19, g20, g21, g22, g23, g24, g25, g26\n\n        dx2 = ss * 3 / 8\n        g9 = vc - dx2\n        g10 = vc + dx2\n        g11 = hc - dx2\n        g12 = hc + dx2\n        g13 = ss * 3 / 4\n        g14 = g13 / 8\n        g15 = g13 * 5 / 16\n        g16 = g13 * 5 / 8\n        g17 = g13 * 11 / 16\n        g18 = g13 * 3 / 4\n        g19 = g13 * 7 / 8\n        g20 = g9 + g14\n        g21 = g9 + g15\n        g22 = g9 + g17\n        g23 = g9 + g19\n        g24 = g11 + g15\n        g25 = g11 + g16\n        g26 = g11 + g18\n\n        var d = 'M' + 0 + ',' + 0 +\n          ' L' + w + ',' + 0 +\n          ' L' + w + ',' + h +\n          ' L' + 0 + ',' + h +\n          ' z' +\n          ' M' + g11 + ',' + g21 +\n          ' L' + g24 + ',' + g21 +\n          ' L' + g25 + ',' + g9 +\n          ' L' + g25 + ',' + g10 +\n          ' L' + g24 + ',' + g22 +\n          ' L' + g11 + ',' + g22 +\n          ' z' +\n          ' M' + g26 + ',' + g21 +\n          ' L' + g12 + ',' + g20 +\n          ' M' + g26 + ',' + vc +\n          ' L' + g12 + ',' + vc +\n          ' M' + g26 + ',' + g22 +\n          ' L' + g12 + ',' + g23\n\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'irregularSeal1':\n      case 'irregularSeal2':\n        if (shapType == 'irregularSeal1') {\n          var d = 'M' + w * 10800 / 21600 + ',' + h * 5800 / 21600 +\n            ' L' + w * 14522 / 21600 + ',' + 0 +\n            ' L' + w * 14155 / 21600 + ',' + h * 5325 / 21600 +\n            ' L' + w * 18380 / 21600 + ',' + h * 4457 / 21600 +\n            ' L' + w * 16702 / 21600 + ',' + h * 7315 / 21600 +\n            ' L' + w * 21097 / 21600 + ',' + h * 8137 / 21600 +\n            ' L' + w * 17607 / 21600 + ',' + h * 10475 / 21600 +\n            ' L' + w + ',' + h * 13290 / 21600 +\n            ' L' + w * 16837 / 21600 + ',' + h * 12942 / 21600 +\n            ' L' + w * 18145 / 21600 + ',' + h * 18095 / 21600 +\n            ' L' + w * 14020 / 21600 + ',' + h * 14457 / 21600 +\n            ' L' + w * 13247 / 21600 + ',' + h * 19737 / 21600 +\n            ' L' + w * 10532 / 21600 + ',' + h * 14935 / 21600 +\n            ' L' + w * 8485 / 21600 + ',' + h +\n            ' L' + w * 7715 / 21600 + ',' + h * 15627 / 21600 +\n            ' L' + w * 4762 / 21600 + ',' + h * 17617 / 21600 +\n            ' L' + w * 5667 / 21600 + ',' + h * 13937 / 21600 +\n            ' L' + w * 135 / 21600 + ',' + h * 14587 / 21600 +\n            ' L' + w * 3722 / 21600 + ',' + h * 11775 / 21600 +\n            ' L' + 0 + ',' + h * 8615 / 21600 +\n            ' L' + w * 4627 / 21600 + ',' + h * 7617 / 21600 +\n            ' L' + w * 370 / 21600 + ',' + h * 2295 / 21600 +\n            ' L' + w * 7312 / 21600 + ',' + h * 6320 / 21600 +\n            ' L' + w * 8352 / 21600 + ',' + h * 2295 / 21600 +\n            ' z'\n        } else if (shapType == 'irregularSeal2') {\n          var d = 'M' + w * 11462 / 21600 + ',' + h * 4342 / 21600 +\n            ' L' + w * 14790 / 21600 + ',' + 0 +\n            ' L' + w * 14525 / 21600 + ',' + h * 5777 / 21600 +\n            ' L' + w * 18007 / 21600 + ',' + h * 3172 / 21600 +\n            ' L' + w * 16380 / 21600 + ',' + h * 6532 / 21600 +\n            ' L' + w + ',' + h * 6645 / 21600 +\n            ' L' + w * 16985 / 21600 + ',' + h * 9402 / 21600 +\n            ' L' + w * 18270 / 21600 + ',' + h * 11290 / 21600 +\n            ' L' + w * 16380 / 21600 + ',' + h * 12310 / 21600 +\n            ' L' + w * 18877 / 21600 + ',' + h * 15632 / 21600 +\n            ' L' + w * 14640 / 21600 + ',' + h * 14350 / 21600 +\n            ' L' + w * 14942 / 21600 + ',' + h * 17370 / 21600 +\n            ' L' + w * 12180 / 21600 + ',' + h * 15935 / 21600 +\n            ' L' + w * 11612 / 21600 + ',' + h * 18842 / 21600 +\n            ' L' + w * 9872 / 21600 + ',' + h * 17370 / 21600 +\n            ' L' + w * 8700 / 21600 + ',' + h * 19712 / 21600 +\n            ' L' + w * 7527 / 21600 + ',' + h * 18125 / 21600 +\n            ' L' + w * 4917 / 21600 + ',' + h +\n            ' L' + w * 4805 / 21600 + ',' + h * 18240 / 21600 +\n            ' L' + w * 1285 / 21600 + ',' + h * 17825 / 21600 +\n            ' L' + w * 3330 / 21600 + ',' + h * 15370 / 21600 +\n            ' L' + 0 + ',' + h * 12877 / 21600 +\n            ' L' + w * 3935 / 21600 + ',' + h * 11592 / 21600 +\n            ' L' + w * 1172 / 21600 + ',' + h * 8270 / 21600 +\n            ' L' + w * 5372 / 21600 + ',' + h * 7817 / 21600 +\n            ' L' + w * 4502 / 21600 + ',' + h * 3625 / 21600 +\n            ' L' + w * 8550 / 21600 + ',' + h * 6382 / 21600 +\n            ' L' + w * 9722 / 21600 + ',' + h * 1887 / 21600 +\n            ' z'\n        }\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'flowChartTerminator':\n        var x1, x2, y1, cd2 = 180, cd4 = 90, c3d4 = 270\n        x1 = w * 3475 / 21600\n        x2 = w * 18125 / 21600\n        y1 = h * 10800 / 21600\n        //path attrs: w = 21600; h = 21600;\n        var d = 'M' + x1 + ',' + 0 +\n          ' L' + x2 + ',' + 0 +\n          shapeArc(x2, h / 2, x1, y1, c3d4, c3d4 + cd2, false).replace('M', 'L') +\n          ' L' + x1 + ',' + h +\n          shapeArc(x1, h / 2, x1, y1, cd4, cd4 + cd2, false).replace('M', 'L') +\n          ' z'\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'flowChartPunchedTape':\n        var x1, x1, y1, y2, cd2 = 180\n        x1 = w * 5 / 20\n        y1 = h * 2 / 20\n        y2 = h * 18 / 20\n        var d = 'M' + 0 + ',' + y1 +\n          shapeArc(x1, y1, x1, y1, cd2, 0, false).replace('M', 'L') +\n          shapeArc(w * (3 / 4), y1, x1, y1, cd2, 360, false).replace('M', 'L') +\n          ' L' + w + ',' + y2 +\n          shapeArc(w * (3 / 4), y2, x1, y1, 0, -cd2, false).replace('M', 'L') +\n          shapeArc(x1, y2, x1, y1, 0, cd2, false).replace('M', 'L') +\n          ' z'\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'flowChartOnlineStorage':\n        var x1, y1, c3d4 = 270, cd4 = 90\n        x1 = w * 1 / 6\n        y1 = h * 3 / 6\n        var d = 'M' + x1 + ',' + 0 +\n          ' L' + w + ',' + 0 +\n          shapeArc(w, h / 2, x1, y1, c3d4, 90, false).replace('M', 'L') +\n          ' L' + x1 + ',' + h +\n          shapeArc(x1, h / 2, x1, y1, cd4, 270, false).replace('M', 'L') +\n          ' z'\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'flowChartDisplay':\n        var x1, x2, y1, c3d4 = 270, cd2 = 180\n        x1 = w * 1 / 6\n        x2 = w * 5 / 6\n        y1 = h * 3 / 6\n        //path attrs: w = 6; h = 6;\n        var d = 'M' + 0 + ',' + y1 +\n          ' L' + x1 + ',' + 0 +\n          ' L' + x2 + ',' + 0 +\n          shapeArc(w, h / 2, x1, y1, c3d4, c3d4 + cd2, false).replace('M', 'L') +\n          ' L' + x1 + ',' + h +\n          ' z'\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'flowChartDelay':\n        var wd2 = w / 2, hd2 = h / 2, cd2 = 180, c3d4 = 270, cd4 = 90\n        var d = 'M' + 0 + ',' + 0 +\n          ' L' + wd2 + ',' + 0 +\n          shapeArc(wd2, hd2, wd2, hd2, c3d4, c3d4 + cd2, false).replace('M', 'L') +\n          ' L' + 0 + ',' + h +\n          ' z'\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'flowChartMagneticTape':\n        var wd2 = w / 2, hd2 = h / 2, cd2 = 180, c3d4 = 270, cd4 = 90\n        var idy, ib, ang1\n        idy = hd2 * Math.sin(Math.PI / 4)\n        ib = hd2 + idy\n        ang1 = Math.atan(h / w)\n        var ang1Dg = ang1 * 180 / Math.PI\n        var d = 'M' + wd2 + ',' + h +\n          shapeArc(wd2, hd2, wd2, hd2, cd4, cd2, false).replace('M', 'L') +\n          shapeArc(wd2, hd2, wd2, hd2, cd2, c3d4, false).replace('M', 'L') +\n          shapeArc(wd2, hd2, wd2, hd2, c3d4, 360, false).replace('M', 'L') +\n          shapeArc(wd2, hd2, wd2, hd2, 0, ang1Dg, false).replace('M', 'L') +\n          ' L' + w + ',' + ib +\n          ' L' + w + ',' + h +\n          ' z'\n        result += '<path d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'ellipse':\n      case 'flowChartConnector':\n      case 'flowChartSummingJunction':\n      case 'flowChartOr':\n        result += '<ellipse cx=\\'' + (w / 2) + '\\' cy=\\'' + (h / 2) + '\\' rx=\\'' + (w / 2) + '\\' ry=\\'' + (h / 2) + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        if (shapType == 'flowChartOr') {\n          result += ' <polyline points=\\'' + w / 2 + ' ' + 0 + ',' + w / 2 + ' ' + h + '\\' fill=\\'none\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          result += ' <polyline points=\\'' + 0 + ' ' + h / 2 + ',' + w + ' ' + h / 2 + '\\' fill=\\'none\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        } else if (shapType == 'flowChartSummingJunction') {\n          var iDx, idy, il, ir, it, ib, hc = w / 2, vc = h / 2, wd2 = w / 2, hd2 = h / 2\n          var angVal = Math.PI / 4\n          iDx = wd2 * Math.cos(angVal)\n          idy = hd2 * Math.sin(angVal)\n          il = hc - iDx\n          ir = hc + iDx\n          it = vc - idy\n          ib = vc + idy\n          result += ' <polyline points=\\'' + il + ' ' + it + ',' + ir + ' ' + ib + '\\' fill=\\'none\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n          result += ' <polyline points=\\'' + ir + ' ' + it + ',' + il + ' ' + ib + '\\' fill=\\'none\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        }\n        break\n      case 'roundRect':\n      case 'round1Rect':\n      case 'round2DiagRect':\n      case 'round2SameRect':\n      case 'snip1Rect':\n      case 'snip2DiagRect':\n      case 'snip2SameRect':\n      case 'flowChartAlternateProcess':\n      case 'flowChartPunchedCard':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, sAdj1_val// = 0.33334;\n        var sAdj2, sAdj2_val// = 0.33334;\n        var shpTyp, adjTyp\n        if (shapAdjst_ary !== undefined && shapAdjst_ary.constructor === Array) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              sAdj1_val = parseInt(sAdj1.substr(4)) / 50000\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              sAdj2_val = parseInt(sAdj2.substr(4)) / 50000\n            }\n          }\n        } else if (shapAdjst_ary !== undefined && shapAdjst_ary.constructor !== Array) {\n          var sAdj = getTextByPathList(shapAdjst_ary, [ 'attrs', 'fmla' ])\n          sAdj1_val = parseInt(sAdj.substr(4)) / 50000\n          sAdj2_val = 0\n        }\n        //console.log(\"shapType: \",shapType,\",node: \",node )\n        var tranglRott = ''\n        switch (shapType) {\n          case 'roundRect':\n          case 'flowChartAlternateProcess':\n            shpTyp = 'round'\n            adjTyp = 'cornrAll'\n            if (sAdj1_val === undefined) sAdj1_val = 0.33334\n            sAdj2_val = 0\n            break\n          case 'round1Rect':\n            shpTyp = 'round'\n            adjTyp = 'cornr1'\n            if (sAdj1_val === undefined) sAdj1_val = 0.33334\n            sAdj2_val = 0\n            break\n          case 'round2DiagRect':\n            shpTyp = 'round'\n            adjTyp = 'diag'\n            if (sAdj1_val === undefined) sAdj1_val = 0.33334\n            if (sAdj2_val === undefined) sAdj2_val = 0\n            break\n          case 'round2SameRect':\n            shpTyp = 'round'\n            adjTyp = 'cornr2'\n            if (sAdj1_val === undefined) sAdj1_val = 0.33334\n            if (sAdj2_val === undefined) sAdj2_val = 0\n            break\n          case 'snip1Rect':\n          case 'flowChartPunchedCard':\n            shpTyp = 'snip'\n            adjTyp = 'cornr1'\n            if (sAdj1_val === undefined) sAdj1_val = 0.33334\n            sAdj2_val = 0\n            if (shapType == 'flowChartPunchedCard') {\n              tranglRott = 'transform=\\'translate(' + w + ',0) scale(-1,1)\\''\n            }\n            break\n          case 'snip2DiagRect':\n            shpTyp = 'snip'\n            adjTyp = 'diag'\n            if (sAdj1_val === undefined) sAdj1_val = 0\n            if (sAdj2_val === undefined) sAdj2_val = 0.33334\n            break\n          case 'snip2SameRect':\n            shpTyp = 'snip'\n            adjTyp = 'cornr2'\n            if (sAdj1_val === undefined) sAdj1_val = 0.33334\n            if (sAdj2_val === undefined) sAdj2_val = 0\n            break\n        }\n        var d_val = shapeSnipRoundRect(w, h, sAdj1_val, sAdj2_val, shpTyp, adjTyp)\n        result += '<path ' + tranglRott + '  d=\\'' + d_val + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'snipRoundRect':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, sAdj1_val = 0.33334\n        var sAdj2, sAdj2_val = 0.33334\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              sAdj1_val = parseInt(sAdj1.substr(4)) / 50000\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              sAdj2_val = parseInt(sAdj2.substr(4)) / 50000\n            }\n          }\n        }\n        var d_val = 'M0,' + h + ' L' + w + ',' + h + ' L' + w + ',' + (h / 2) * sAdj2_val +\n          ' L' + (w / 2 + (w / 2) * (1 - sAdj2_val)) + ',0 L' + (w / 2) * sAdj1_val + ',0 Q0,0 0,' + (h / 2) * sAdj1_val + ' z'\n\n        result += '<path   d=\\'' + d_val + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'bentConnector2':\n        var d = ''\n        // if (isFlipV) {\n        //     d = \"M 0 \" + w + \" L \" + h + \" \" + w + \" L \" + h + \" 0\";\n        // } else {\n        d = 'M ' + w + ' 0 L ' + w + ' ' + h + ' L 0 ' + h\n        //}\n        result += '<path d=\\'' + d + '\\' stroke=\\'' + border.color +\n          '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' fill=\\'none\\' '\n        if (headEndNodeAttrs !== undefined && (headEndNodeAttrs['type'] === 'triangle' || headEndNodeAttrs['type'] === 'arrow')) {\n          result += 'marker-start=\\'url(#markerTriangle_' + shpId + ')\\' '\n        }\n        if (tailEndNodeAttrs !== undefined && (tailEndNodeAttrs['type'] === 'triangle' || tailEndNodeAttrs['type'] === 'arrow')) {\n          result += 'marker-end=\\'url(#markerTriangle_' + shpId + ')\\' '\n        }\n        result += '/>'\n        break\n      case 'rtTriangle':\n        result += ' <polygon points=\\'0 0,0 ' + h + ',' + w + ' ' + h + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'triangle':\n      case 'flowChartExtract':\n      case 'flowChartMerge':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var shapAdjst_val = 0.5\n        if (shapAdjst !== undefined) {\n          shapAdjst_val = parseInt(shapAdjst.substr(4)) * slideFactor\n          //console.log(\"w: \"+w+\"\\nh: \"+h+\"\\nshapAdjst: \"+shapAdjst+\"\\nshapAdjst_val: \"+shapAdjst_val);\n        }\n        var tranglRott = ''\n        if (shapType == 'flowChartMerge') {\n          tranglRott = 'transform=\\'rotate(180 ' + w / 2 + ',' + h / 2 + ')\\''\n        }\n        result += ' <polygon ' + tranglRott + ' points=\\'' + (w * shapAdjst_val) + ' 0,0 ' + h + ',' + w + ' ' + h + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'diamond':\n      case 'flowChartDecision':\n      case 'flowChartSort':\n        result += ' <polygon points=\\'' + (w / 2) + ' 0,0 ' + (h / 2) + ',' + (w / 2) + ' ' + h + ',' + w + ' ' + (h / 2) + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        if (shapType == 'flowChartSort') {\n          result += ' <polyline points=\\'0 ' + h / 2 + ',' + w + ' ' + h / 2 + '\\' fill=\\'none\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        }\n        break\n      case 'trapezoid':\n      case 'flowChartManualOperation':\n      case 'flowChartManualInput':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adjst_val = 0.2\n        var max_adj_const = 0.7407\n        if (shapAdjst !== undefined) {\n          var adjst = parseInt(shapAdjst.substr(4)) * slideFactor\n          adjst_val = (adjst * 0.5) / max_adj_const\n          // console.log(\"w: \"+w+\"\\nh: \"+h+\"\\nshapAdjst: \"+shapAdjst+\"\\nadjst_val: \"+adjst_val);\n        }\n        var cnstVal = 0\n        var tranglRott = ''\n        if (shapType == 'flowChartManualOperation') {\n          tranglRott = 'transform=\\'rotate(180 ' + w / 2 + ',' + h / 2 + ')\\''\n        }\n        if (shapType == 'flowChartManualInput') {\n          adjst_val = 0\n          cnstVal = h / 5\n        }\n        result += ' <polygon ' + tranglRott + ' points=\\'' + (w * adjst_val) + ' ' + cnstVal + ',0 ' + h + ',' + w + ' ' + h + ',' + (1 - adjst_val) * w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'parallelogram':\n      case 'flowChartInputOutput':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adjst_val = 0.25\n        var max_adj_const\n        if (w > h) {\n          max_adj_const = w / h\n        } else {\n          max_adj_const = h / w\n        }\n        if (shapAdjst !== undefined) {\n          var adjst = parseInt(shapAdjst.substr(4)) / 100000\n          adjst_val = adjst / max_adj_const\n          //console.log(\"w: \"+w+\"\\nh: \"+h+\"\\nadjst: \"+adjst_val+\"\\nmax_adj_const: \"+max_adj_const);\n        }\n        result += ' <polygon points=\\'' + adjst_val * w + ' 0,0 ' + h + ',' + (1 - adjst_val) * w + ' ' + h + ',' + w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n\n        break\n      case 'pentagon':\n        result += ' <polygon points=\\'' + (0.5 * w) + ' 0,0 ' + (0.375 * h) + ',' + (0.15 * w) + ' ' + h + ',' + 0.85 * w + ' ' + h + ',' + w + ' ' + 0.375 * h + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'hexagon':\n      case 'flowChartPreparation':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adj = 25000 * slideFactor\n        var vf = 115470 * slideFactor\n        \n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        var angVal1 = 60 * Math.PI / 180\n        if (shapAdjst !== undefined) {\n          adj = parseInt(shapAdjst.substr(4)) * slideFactor\n        }\n        var maxAdj, a, shd2, x1, x2, dy1, y1, y2, vc = h / 2, hd2 = h / 2\n        var ss = Math.min(w, h)\n        maxAdj = cnstVal1 * w / ss\n        a = (adj < 0) ? 0 : (adj > maxAdj) ? maxAdj : adj\n        shd2 = hd2 * vf / cnstVal2\n        x1 = ss * a / cnstVal2\n        x2 = w - x1\n        dy1 = shd2 * Math.sin(angVal1)\n        y1 = vc - dy1\n        y2 = vc + dy1\n\n        var d = 'M' + 0 + ',' + vc +\n          ' L' + x1 + ',' + y1 +\n          ' L' + x2 + ',' + y1 +\n          ' L' + w + ',' + vc +\n          ' L' + x2 + ',' + y2 +\n          ' L' + x1 + ',' + y2 +\n          ' z'\n\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'heptagon':\n        result += ' <polygon points=\\'' + (0.5 * w) + ' 0,' + w / 8 + ' ' + h / 4 + ',0 ' + (5 / 8) * h + ',' + w / 4 + ' ' + h + ',' + (3 / 4) * w + ' ' + h + ',' +\n          w + ' ' + (5 / 8) * h + ',' + (7 / 8) * w + ' ' + h / 4 + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'octagon':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adj1 = 0.25\n        if (shapAdjst !== undefined) {\n          adj1 = parseInt(shapAdjst.substr(4)) / 100000\n\n        }\n        var adj2 = (1 - adj1)\n        //console.log(\"adj1: \"+adj1+\"\\nadj2: \"+adj2);\n        result += ' <polygon points=\\'' + adj1 * w + ' 0,0 ' + adj1 * h + ',0 ' + adj2 * h + ',' + adj1 * w + ' ' + h + ',' + adj2 * w + ' ' + h + ',' +\n          w + ' ' + adj2 * h + ',' + w + ' ' + adj1 * h + ',' + adj2 * w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'decagon':\n        result += ' <polygon points=\\'' + (3 / 8) * w + ' 0,' + w / 8 + ' ' + h / 8 + ',0 ' + h / 2 + ',' + w / 8 + ' ' + (7 / 8) * h + ',' + (3 / 8) * w + ' ' + h + ',' +\n          (5 / 8) * w + ' ' + h + ',' + (7 / 8) * w + ' ' + (7 / 8) * h + ',' + w + ' ' + h / 2 + ',' + (7 / 8) * w + ' ' + h / 8 + ',' + (5 / 8) * w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'dodecagon':\n        result += ' <polygon points=\\'' + (3 / 8) * w + ' 0,' + w / 8 + ' ' + h / 8 + ',0 ' + (3 / 8) * h + ',0 ' + (5 / 8) * h + ',' + w / 8 + ' ' + (7 / 8) * h + ',' + (3 / 8) * w + ' ' + h + ',' +\n          (5 / 8) * w + ' ' + h + ',' + (7 / 8) * w + ' ' + (7 / 8) * h + ',' + w + ' ' + (5 / 8) * h + ',' + w + ' ' + (3 / 8) * h + ',' + (7 / 8) * w + ' ' + h / 8 + ',' + (5 / 8) * w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'star4':\n        var a, iwd2, ihd2, sdx, sdy, sx1, sx2, sy1, sy2, yAdj\n        var hc = w / 2, vc = h / 2, wd2 = w / 2, hd2 = h / 2\n        var adj = 19098 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])//[0][\"attrs\"][\"fmla\"];\n        //console.log(\"star4 node: \", node, \"shapAdjst:\", shapAdjst)\n        if (shapAdjst !== undefined) {\n          var name = shapAdjst['attrs']['name']\n          if (name == 'adj') {\n            adj = parseInt(shapAdjst['attrs']['fmla'].substr(4)) * slideFactor\n            //min = 0\n            //max = 50000\n          }\n        }\n        a = (adj < 0) ? 0 : (adj > cnstVal1) ? cnstVal1 : adj\n        iwd2 = wd2 * a / cnstVal1\n        ihd2 = hd2 * a / cnstVal1\n        sdx = iwd2 * Math.cos(0.7853981634) //cd8 = 2700000; (45°) =>\n        sdy = ihd2 * Math.sin(0.7853981634)\n        sx1 = hc - sdx\n        sx2 = hc + sdx\n        sy1 = vc - sdy\n        sy2 = vc + sdy\n        yAdj = vc - ihd2\n\n        var d = 'M0' + ',' + vc +\n          ' L' + sx1 + ',' + sy1 +\n          ' L' + hc + ',0' +\n          ' L' + sx2 + ',' + sy1 +\n          ' L' + w + ',' + vc +\n          ' L' + sx2 + ',' + sy2 +\n          ' L' + hc + ',' + h +\n          ' L' + sx1 + ',' + sy2 +\n          ' z'\n\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'star5':\n        var a, swd2, shd2, svc, dx1, dx2, dy1, dy2, x1, x2, x3, x4, y1, y2, iwd2, ihd2, sdx1, sdx2, sdy1, sdy2, sx1,\n          sx2, sx3, sx4, sy1, sy2, sy3, yAdj\n        var hc = w / 2, vc = h / 2, wd2 = w / 2, hd2 = h / 2\n        var adj = 19098 * slideFactor\n        var hf = 105146 * slideFactor\n        var vf = 110557 * slideFactor\n        var maxAdj = 50000 * slideFactor\n        var cnstVal1 = 100000 * slideFactor\n        //var radians = angle * (Math.PI / 180);\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])//[0][\"attrs\"][\"fmla\"];\n        //console.log(\"star5 node: \", node, \"shapAdjst:\", shapAdjst)\n        if (shapAdjst !== undefined) {\n          Object.keys(shapAdjst).forEach(function (key) {\n            var name = shapAdjst[key]['attrs']['name']\n            if (name == 'adj') {\n              adj = parseInt(shapAdjst[key]['attrs']['fmla'].substr(4)) * slideFactor\n              //min = 0\n              //max = 50000\n            } else if (name == 'hf') {\n              hf = parseInt(shapAdjst[key]['attrs']['fmla'].substr(4)) * slideFactor\n            } else if (name == 'vf') {\n              vf = parseInt(shapAdjst[key]['attrs']['fmla'].substr(4)) * slideFactor\n            }\n          })\n        }\n        a = (adj < 0) ? 0 : (adj > maxAdj) ? maxAdj : adj\n        swd2 = wd2 * hf / cnstVal1\n        shd2 = hd2 * vf / cnstVal1\n        svc = vc * vf / cnstVal1\n        dx1 = swd2 * Math.cos(0.31415926536) // 1080000\n        dx2 = swd2 * Math.cos(5.3407075111) // 18360000\n        dy1 = shd2 * Math.sin(0.31415926536) //1080000\n        dy2 = shd2 * Math.sin(5.3407075111)// 18360000\n        x1 = hc - dx1\n        x2 = hc - dx2\n        x3 = hc + dx2\n        x4 = hc + dx1\n        y1 = svc - dy1\n        y2 = svc - dy2\n        iwd2 = swd2 * a / maxAdj\n        ihd2 = shd2 * a / maxAdj\n        sdx1 = iwd2 * Math.cos(5.9690260418) // 20520000\n        sdx2 = iwd2 * Math.cos(0.94247779608) // 3240000\n        sdy1 = ihd2 * Math.sin(0.94247779608) // 3240000\n        sdy2 = ihd2 * Math.sin(5.9690260418) // 20520000\n        sx1 = hc - sdx1\n        sx2 = hc - sdx2\n        sx3 = hc + sdx2\n        sx4 = hc + sdx1\n        sy1 = svc - sdy1\n        sy2 = svc - sdy2\n        sy3 = svc + ihd2\n        yAdj = svc - ihd2\n\n        var d = 'M' + x1 + ',' + y1 +\n          ' L' + sx2 + ',' + sy1 +\n          ' L' + hc + ',' + 0 +\n          ' L' + sx3 + ',' + sy1 +\n          ' L' + x4 + ',' + y1 +\n          ' L' + sx4 + ',' + sy2 +\n          ' L' + x3 + ',' + y2 +\n          ' L' + hc + ',' + sy3 +\n          ' L' + x2 + ',' + y2 +\n          ' L' + sx1 + ',' + sy2 +\n          ' z'\n\n\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'star6':\n        var a, swd2, dx1, x1, x2, y2, iwd2, ihd2, sdx2, sx1, sx2, sx3, sx4, sdy1, sy1, sy2, yAdj\n        var hc = w / 2, vc = h / 2, wd2 = w / 2, hd2 = h / 2, hd4 = h / 4\n        var adj = 28868 * slideFactor\n        var hf = 115470 * slideFactor\n        var maxAdj = 50000 * slideFactor\n        var cnstVal1 = 100000 * slideFactor\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])//[0][\"attrs\"][\"fmla\"];\n        //console.log(\"star5 node: \", node, \"shapAdjst:\", shapAdjst)\n        if (shapAdjst !== undefined) {\n          Object.keys(shapAdjst).forEach(function (key) {\n            var name = shapAdjst[key]['attrs']['name']\n            if (name == 'adj') {\n              adj = parseInt(shapAdjst[key]['attrs']['fmla'].substr(4)) * slideFactor\n              //min = 0\n              //max = 50000\n            } else if (name == 'hf') {\n              hf = parseInt(shapAdjst[key]['attrs']['fmla'].substr(4)) * slideFactor\n            }\n          })\n        }\n        a = (adj < 0) ? 0 : (adj > maxAdj) ? maxAdj : adj\n        swd2 = wd2 * hf / cnstVal1\n        dx1 = swd2 * Math.cos(0.5235987756) //1800000->30 ->0.5235987756\n        x1 = hc - dx1\n        x2 = hc + dx1\n        y2 = vc + hd4\n        iwd2 = swd2 * a / maxAdj\n        ihd2 = hd2 * a / maxAdj\n        sdx2 = iwd2 / 2\n        sx1 = hc - iwd2\n        sx2 = hc - sdx2\n        sx3 = hc + sdx2\n        sx4 = hc + iwd2\n        sdy1 = ihd2 * Math.sin(1.0471975512) //3600000->60->1.0471975512\n        sy1 = vc - sdy1\n        sy2 = vc + sdy1\n        yAdj = vc - ihd2\n\n        var d = 'M' + x1 + ',' + hd4 +\n          ' L' + sx2 + ',' + sy1 +\n          ' L' + hc + ',0' +\n          ' L' + sx3 + ',' + sy1 +\n          ' L' + x2 + ',' + hd4 +\n          ' L' + sx4 + ',' + vc +\n          ' L' + x2 + ',' + y2 +\n          ' L' + sx3 + ',' + sy2 +\n          ' L' + hc + ',' + h +\n          ' L' + sx2 + ',' + sy2 +\n          ' L' + x1 + ',' + y2 +\n          ' L' + sx1 + ',' + vc +\n          ' z'\n\n\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'star7':\n        var a, swd2, shd2, svc, dx1, dx2, dx3, dy1, dy2, dy3, x1, x2, x3, x4, x5, x6, y1, y2, y3,\n          iwd2, ihd2, sdx1, sdx2, sdx3, sx1, sx2, sx3, sx4, sx5, sx6, sdy1, sdy2, sdy3, sy1, sy2, sy3, sy4, yAdj\n        var hc = w / 2, vc = h / 2, wd2 = w / 2, hd2 = h / 2\n        var adj = 34601 * slideFactor\n        var hf = 102572 * slideFactor\n        var vf = 105210 * slideFactor\n        var maxAdj = 50000 * slideFactor\n        var cnstVal1 = 100000 * slideFactor\n\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])//[0][\"attrs\"][\"fmla\"];\n        //console.log(\"star5 node: \", node, \"shapAdjst:\", shapAdjst)\n        if (shapAdjst !== undefined) {\n          Object.keys(shapAdjst).forEach(function (key) {\n            var name = shapAdjst[key]['attrs']['name']\n            if (name == 'adj') {\n              adj = parseInt(shapAdjst[key]['attrs']['fmla'].substr(4)) * slideFactor\n              //min = 0\n              //max = 50000\n            } else if (name == 'hf') {\n              hf = parseInt(shapAdjst[key]['attrs']['fmla'].substr(4)) * slideFactor\n            } else if (name == 'vf') {\n              vf = parseInt(shapAdjst[key]['attrs']['fmla'].substr(4)) * slideFactor\n            }\n          })\n        }\n        a = (adj < 0) ? 0 : (adj > maxAdj) ? maxAdj : adj\n        swd2 = wd2 * hf / cnstVal1\n        shd2 = hd2 * vf / cnstVal1\n        svc = vc * vf / cnstVal1\n        dx1 = swd2 * 97493 / 100000\n        dx2 = swd2 * 78183 / 100000\n        dx3 = swd2 * 43388 / 100000\n        dy1 = shd2 * 62349 / 100000\n        dy2 = shd2 * 22252 / 100000\n        dy3 = shd2 * 90097 / 100000\n        x1 = hc - dx1\n        x2 = hc - dx2\n        x3 = hc - dx3\n        x4 = hc + dx3\n        x5 = hc + dx2\n        x6 = hc + dx1\n        y1 = svc - dy1\n        y2 = svc + dy2\n        y3 = svc + dy3\n        iwd2 = swd2 * a / maxAdj\n        ihd2 = shd2 * a / maxAdj\n        sdx1 = iwd2 * 97493 / 100000\n        sdx2 = iwd2 * 78183 / 100000\n        sdx3 = iwd2 * 43388 / 100000\n        sx1 = hc - sdx1\n        sx2 = hc - sdx2\n        sx3 = hc - sdx3\n        sx4 = hc + sdx3\n        sx5 = hc + sdx2\n        sx6 = hc + sdx1\n        sdy1 = ihd2 * 90097 / 100000\n        sdy2 = ihd2 * 22252 / 100000\n        sdy3 = ihd2 * 62349 / 100000\n        sy1 = svc - sdy1\n        sy2 = svc - sdy2\n        sy3 = svc + sdy3\n        sy4 = svc + ihd2\n        yAdj = svc - ihd2\n\n        var d = 'M' + x1 + ',' + y2 +\n          ' L' + sx1 + ',' + sy2 +\n          ' L' + x2 + ',' + y1 +\n          ' L' + sx3 + ',' + sy1 +\n          ' L' + hc + ',0' +\n          ' L' + sx4 + ',' + sy1 +\n          ' L' + x5 + ',' + y1 +\n          ' L' + sx6 + ',' + sy2 +\n          ' L' + x6 + ',' + y2 +\n          ' L' + sx5 + ',' + sy3 +\n          ' L' + x4 + ',' + y3 +\n          ' L' + hc + ',' + sy4 +\n          ' L' + x3 + ',' + y3 +\n          ' L' + sx2 + ',' + sy3 +\n          ' z'\n\n\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'star8':\n        var a, dx1, x1, x2, dy1, y1, y2, iwd2, ihd2, sdx1, sdx2, sdy1, sdy2, sx1, sx2, sx3, sx4, sy1, sy2, sy3, sy4,\n          yAdj\n        var hc = w / 2, vc = h / 2, wd2 = w / 2, hd2 = h / 2\n        var adj = 37500 * slideFactor\n        var maxAdj = 50000 * slideFactor\n        var cnstVal1 = 100000 * slideFactor\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])//[0][\"attrs\"][\"fmla\"];\n        //console.log(\"star4 node: \", node, \"shapAdjst:\", shapAdjst)\n        if (shapAdjst !== undefined) {\n          var name = shapAdjst['attrs']['name']\n          if (name == 'adj') {\n            adj = parseInt(shapAdjst['attrs']['fmla'].substr(4)) * slideFactor\n            //min = 0\n            //max = 50000\n          }\n        }\n        a = (adj < 0) ? 0 : (adj > maxAdj) ? maxAdj : adj\n        dx1 = wd2 * Math.cos(0.7853981634) //2700000\n        x1 = hc - dx1\n        x2 = hc + dx1\n        dy1 = hd2 * Math.sin(0.7853981634) //2700000\n        y1 = vc - dy1\n        y2 = vc + dy1\n        iwd2 = wd2 * a / maxAdj\n        ihd2 = hd2 * a / maxAdj\n        sdx1 = iwd2 * 92388 / 100000\n        sdx2 = iwd2 * 38268 / 100000\n        sdy1 = ihd2 * 92388 / 100000\n        sdy2 = ihd2 * 38268 / 100000\n        sx1 = hc - sdx1\n        sx2 = hc - sdx2\n        sx3 = hc + sdx2\n        sx4 = hc + sdx1\n        sy1 = vc - sdy1\n        sy2 = vc - sdy2\n        sy3 = vc + sdy2\n        sy4 = vc + sdy1\n        yAdj = vc - ihd2\n        var d = 'M0' + ',' + vc +\n          ' L' + sx1 + ',' + sy2 +\n          ' L' + x1 + ',' + y1 +\n          ' L' + sx2 + ',' + sy1 +\n          ' L' + hc + ',0' +\n          ' L' + sx3 + ',' + sy1 +\n          ' L' + x2 + ',' + y1 +\n          ' L' + sx4 + ',' + sy2 +\n          ' L' + w + ',' + vc +\n          ' L' + sx4 + ',' + sy3 +\n          ' L' + x2 + ',' + y2 +\n          ' L' + sx3 + ',' + sy4 +\n          ' L' + hc + ',' + h +\n          ' L' + sx2 + ',' + sy4 +\n          ' L' + x1 + ',' + y2 +\n          ' L' + sx1 + ',' + sy3 +\n          ' z'\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n\n      case 'star10':\n        var a, swd2, dx1, dx2, x1, x2, x3, x4, dy1, dy2, y1, y2, y3, y4, iwd2, ihd2,\n          sdx1, sdx2, sdy1, sdy2, sx1, sx2, sx3, sx4, sx5, sx6, sy1, sy2, sy3, sy4, yAdj\n        var hc = w / 2, vc = h / 2, wd2 = w / 2, hd2 = h / 2\n        var adj = 42533 * slideFactor\n        var hf = 105146 * slideFactor\n        var maxAdj = 50000 * slideFactor\n        var cnstVal1 = 100000 * slideFactor\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])//[0][\"attrs\"][\"fmla\"];\n        //console.log(\"star5 node: \", node, \"shapAdjst:\", shapAdjst)\n        if (shapAdjst !== undefined) {\n          Object.keys(shapAdjst).forEach(function (key) {\n            var name = shapAdjst[key]['attrs']['name']\n            if (name == 'adj') {\n              adj = parseInt(shapAdjst[key]['attrs']['fmla'].substr(4)) * slideFactor\n              //min = 0\n              //max = 50000\n            } else if (name == 'hf') {\n              hf = parseInt(shapAdjst[key]['attrs']['fmla'].substr(4)) * slideFactor\n            }\n          })\n        }\n        a = (adj < 0) ? 0 : (adj > maxAdj) ? maxAdj : adj\n        swd2 = wd2 * hf / cnstVal1\n        dx1 = swd2 * 95106 / 100000\n        dx2 = swd2 * 58779 / 100000\n        x1 = hc - dx1\n        x2 = hc - dx2\n        x3 = hc + dx2\n        x4 = hc + dx1\n        dy1 = hd2 * 80902 / 100000\n        dy2 = hd2 * 30902 / 100000\n        y1 = vc - dy1\n        y2 = vc - dy2\n        y3 = vc + dy2\n        y4 = vc + dy1\n        iwd2 = swd2 * a / maxAdj\n        ihd2 = hd2 * a / maxAdj\n        sdx1 = iwd2 * 80902 / 100000\n        sdx2 = iwd2 * 30902 / 100000\n        sdy1 = ihd2 * 95106 / 100000\n        sdy2 = ihd2 * 58779 / 100000\n        sx1 = hc - iwd2\n        sx2 = hc - sdx1\n        sx3 = hc - sdx2\n        sx4 = hc + sdx2\n        sx5 = hc + sdx1\n        sx6 = hc + iwd2\n        sy1 = vc - sdy1\n        sy2 = vc - sdy2\n        sy3 = vc + sdy2\n        sy4 = vc + sdy1\n        yAdj = vc - ihd2\n        var d = 'M' + x1 + ',' + y2 +\n          ' L' + sx2 + ',' + sy2 +\n          ' L' + x2 + ',' + y1 +\n          ' L' + sx3 + ',' + sy1 +\n          ' L' + hc + ',0' +\n          ' L' + sx4 + ',' + sy1 +\n          ' L' + x3 + ',' + y1 +\n          ' L' + sx5 + ',' + sy2 +\n          ' L' + x4 + ',' + y2 +\n          ' L' + sx6 + ',' + vc +\n          ' L' + x4 + ',' + y3 +\n          ' L' + sx5 + ',' + sy3 +\n          ' L' + x3 + ',' + y4 +\n          ' L' + sx4 + ',' + sy4 +\n          ' L' + hc + ',' + h +\n          ' L' + sx3 + ',' + sy4 +\n          ' L' + x2 + ',' + y4 +\n          ' L' + sx2 + ',' + sy3 +\n          ' L' + x1 + ',' + y3 +\n          ' L' + sx1 + ',' + vc +\n          ' z'\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'star12':\n        var a, dx1, dy1, x1, x3, x4, y1, y3, y4, iwd2, ihd2, sdx1, sdx2, sdx3, sdy1,\n          sdy2, sdy3, sx1, sx2, sx3, sx4, sx5, sx6, sy1, sy2, sy3, sy4, sy5, sy6, yAdj\n        var hc = w / 2, vc = h / 2, wd2 = w / 2, hd2 = h / 2, hd4 = h / 4, wd4 = w / 4\n        var adj = 37500 * slideFactor\n        var maxAdj = 50000 * slideFactor\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])//[0][\"attrs\"][\"fmla\"];\n        //console.log(\"star4 node: \", node, \"shapAdjst:\", shapAdjst)\n        if (shapAdjst !== undefined) {\n          var name = shapAdjst['attrs']['name']\n          if (name == 'adj') {\n            adj = parseInt(shapAdjst['attrs']['fmla'].substr(4)) * slideFactor\n            //min = 0\n            //max = 50000\n          }\n        }\n        a = (adj < 0) ? 0 : (adj > maxAdj) ? maxAdj : adj\n        dx1 = wd2 * Math.cos(0.5235987756)\n        dy1 = hd2 * Math.sin(1.0471975512)\n        x1 = hc - dx1\n        x3 = w * 3 / 4\n        x4 = hc + dx1\n        y1 = vc - dy1\n        y3 = h * 3 / 4\n        y4 = vc + dy1\n        iwd2 = wd2 * a / maxAdj\n        ihd2 = hd2 * a / maxAdj\n        sdx1 = iwd2 * Math.cos(0.2617993878) //900000->15\n        sdx2 = iwd2 * Math.cos(0.7853981634)\n        sdx3 = iwd2 * Math.cos(1.308996939) //4500000->75\n        sdy1 = ihd2 * Math.sin(1.308996939)\n        sdy2 = ihd2 * Math.sin(0.7853981634)\n        sdy3 = ihd2 * Math.sin(0.2617993878)\n        sx1 = hc - sdx1\n        sx2 = hc - sdx2\n        sx3 = hc - sdx3\n        sx4 = hc + sdx3\n        sx5 = hc + sdx2\n        sx6 = hc + sdx1\n        sy1 = vc - sdy1\n        sy2 = vc - sdy2\n        sy3 = vc - sdy3\n        sy4 = vc + sdy3\n        sy5 = vc + sdy2\n        sy6 = vc + sdy1\n        yAdj = vc - ihd2\n        var d = 'M0' + ',' + vc +\n          ' L' + sx1 + ',' + sy3 +\n          ' L' + x1 + ',' + hd4 +\n          ' L' + sx2 + ',' + sy2 +\n          ' L' + wd4 + ',' + y1 +\n          ' L' + sx3 + ',' + sy1 +\n          ' L' + hc + ',0' +\n          ' L' + sx4 + ',' + sy1 +\n          ' L' + x3 + ',' + y1 +\n          ' L' + sx5 + ',' + sy2 +\n          ' L' + x4 + ',' + hd4 +\n          ' L' + sx6 + ',' + sy3 +\n          ' L' + w + ',' + vc +\n          ' L' + sx6 + ',' + sy4 +\n          ' L' + x4 + ',' + y3 +\n          ' L' + sx5 + ',' + sy5 +\n          ' L' + x3 + ',' + y4 +\n          ' L' + sx4 + ',' + sy6 +\n          ' L' + hc + ',' + h +\n          ' L' + sx3 + ',' + sy6 +\n          ' L' + wd4 + ',' + y4 +\n          ' L' + sx2 + ',' + sy5 +\n          ' L' + x1 + ',' + y3 +\n          ' L' + sx1 + ',' + sy4 +\n          ' z'\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'star16':\n        var a, dx1, dx2, dx3, dy1, dy2, dy3, x1, x2, x3, x4, x5, x6, y1, y2, y3, y4, y5, y6,\n          iwd2, ihd2, sdx1, sdx2, sdx3, sdx4, sdy1, sdy2, sdy3, sdy4, sx1, sx2, sx3, sx4,\n          sx5, sx6, sx7, sx8, sy1, sy2, sy3, sy4, sy5, sy6, sy7, sy8, iDx, idy, il, it, ir, ib, yAdj\n        var hc = w / 2, vc = h / 2, wd2 = w / 2, hd2 = h / 2\n        var adj = 37500 * slideFactor\n        var maxAdj = 50000 * slideFactor\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])//[0][\"attrs\"][\"fmla\"];\n        //console.log(\"star4 node: \", node, \"shapAdjst:\", shapAdjst)\n        if (shapAdjst !== undefined) {\n          var name = shapAdjst['attrs']['name']\n          if (name == 'adj') {\n            adj = parseInt(shapAdjst['attrs']['fmla'].substr(4)) * slideFactor\n            //min = 0\n            //max = 50000\n          }\n        }\n        a = (adj < 0) ? 0 : (adj > maxAdj) ? maxAdj : adj\n        dx1 = wd2 * 92388 / 100000\n        dx2 = wd2 * 70711 / 100000\n        dx3 = wd2 * 38268 / 100000\n        dy1 = hd2 * 92388 / 100000\n        dy2 = hd2 * 70711 / 100000\n        dy3 = hd2 * 38268 / 100000\n        x1 = hc - dx1\n        x2 = hc - dx2\n        x3 = hc - dx3\n        x4 = hc + dx3\n        x5 = hc + dx2\n        x6 = hc + dx1\n        y1 = vc - dy1\n        y2 = vc - dy2\n        y3 = vc - dy3\n        y4 = vc + dy3\n        y5 = vc + dy2\n        y6 = vc + dy1\n        iwd2 = wd2 * a / maxAdj\n        ihd2 = hd2 * a / maxAdj\n        sdx1 = iwd2 * 98079 / 100000\n        sdx2 = iwd2 * 83147 / 100000\n        sdx3 = iwd2 * 55557 / 100000\n        sdx4 = iwd2 * 19509 / 100000\n        sdy1 = ihd2 * 98079 / 100000\n        sdy2 = ihd2 * 83147 / 100000\n        sdy3 = ihd2 * 55557 / 100000\n        sdy4 = ihd2 * 19509 / 100000\n        sx1 = hc - sdx1\n        sx2 = hc - sdx2\n        sx3 = hc - sdx3\n        sx4 = hc - sdx4\n        sx5 = hc + sdx4\n        sx6 = hc + sdx3\n        sx7 = hc + sdx2\n        sx8 = hc + sdx1\n        sy1 = vc - sdy1\n        sy2 = vc - sdy2\n        sy3 = vc - sdy3\n        sy4 = vc - sdy4\n        sy5 = vc + sdy4\n        sy6 = vc + sdy3\n        sy7 = vc + sdy2\n        sy8 = vc + sdy1\n        iDx = iwd2 * Math.cos(0.7853981634)\n        idy = ihd2 * Math.sin(0.7853981634)\n        il = hc - iDx\n        it = vc - idy\n        ir = hc + iDx\n        ib = vc + idy\n        yAdj = vc - ihd2\n        var d = 'M0' + ',' + vc +\n          ' L' + sx1 + ',' + sy4 +\n          ' L' + x1 + ',' + y3 +\n          ' L' + sx2 + ',' + sy3 +\n          ' L' + x2 + ',' + y2 +\n          ' L' + sx3 + ',' + sy2 +\n          ' L' + x3 + ',' + y1 +\n          ' L' + sx4 + ',' + sy1 +\n          ' L' + hc + ',0' +\n          ' L' + sx5 + ',' + sy1 +\n          ' L' + x4 + ',' + y1 +\n          ' L' + sx6 + ',' + sy2 +\n          ' L' + x5 + ',' + y2 +\n          ' L' + sx7 + ',' + sy3 +\n          ' L' + x6 + ',' + y3 +\n          ' L' + sx8 + ',' + sy4 +\n          ' L' + w + ',' + vc +\n          ' L' + sx8 + ',' + sy5 +\n          ' L' + x6 + ',' + y4 +\n          ' L' + sx7 + ',' + sy6 +\n          ' L' + x5 + ',' + y5 +\n          ' L' + sx6 + ',' + sy7 +\n          ' L' + x4 + ',' + y6 +\n          ' L' + sx5 + ',' + sy8 +\n          ' L' + hc + ',' + h +\n          ' L' + sx4 + ',' + sy8 +\n          ' L' + x3 + ',' + y6 +\n          ' L' + sx3 + ',' + sy7 +\n          ' L' + x2 + ',' + y5 +\n          ' L' + sx2 + ',' + sy6 +\n          ' L' + x1 + ',' + y4 +\n          ' L' + sx1 + ',' + sy5 +\n          ' z'\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'star24':\n        var a, dx1, dx2, dx3, dx4, dx5, dy1, dy2, dy3, dy4, dy5, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10,\n          y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, iwd2, ihd2, sdx1, sdx2, sdx3, sdx4, sdx5, sdx6, sdy1,\n          sdy2, sdy3, sdy4, sdy5, sdy6, sx1, sx2, sx3, sx4, sx5, sx6, sx7, sx8, sx9, sx10, sx11, sx12,\n          sy1, sy2, sy3, sy4, sy5, sy6, sy7, sy8, sy9, sy10, sy11, sy12, iDx, idy, il, it, ir, ib, yAdj\n        var hc = w / 2, vc = h / 2, wd2 = w / 2, hd2 = h / 2, hd4 = h / 4, wd4 = w / 4\n        var adj = 37500 * slideFactor\n        var maxAdj = 50000 * slideFactor\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])//[0][\"attrs\"][\"fmla\"];\n        //console.log(\"star4 node: \", node, \"shapAdjst:\", shapAdjst)\n        if (shapAdjst !== undefined) {\n          var name = shapAdjst['attrs']['name']\n          if (name == 'adj') {\n            adj = parseInt(shapAdjst['attrs']['fmla'].substr(4)) * slideFactor\n          }\n        }\n        a = (adj < 0) ? 0 : (adj > maxAdj) ? maxAdj : adj\n        dx1 = wd2 * Math.cos(0.2617993878)\n        dx2 = wd2 * Math.cos(0.5235987756)\n        dx3 = wd2 * Math.cos(0.7853981634)\n        dx4 = wd4\n        dx5 = wd2 * Math.cos(1.308996939)\n        dy1 = hd2 * Math.sin(1.308996939)\n        dy2 = hd2 * Math.sin(1.0471975512)\n        dy3 = hd2 * Math.sin(0.7853981634)\n        dy4 = hd4\n        dy5 = hd2 * Math.sin(0.2617993878)\n        x1 = hc - dx1\n        x2 = hc - dx2\n        x3 = hc - dx3\n        x4 = hc - dx4\n        x5 = hc - dx5\n        x6 = hc + dx5\n        x7 = hc + dx4\n        x8 = hc + dx3\n        x9 = hc + dx2\n        x10 = hc + dx1\n        y1 = vc - dy1\n        y2 = vc - dy2\n        y3 = vc - dy3\n        y4 = vc - dy4\n        y5 = vc - dy5\n        y6 = vc + dy5\n        y7 = vc + dy4\n        y8 = vc + dy3\n        y9 = vc + dy2\n        y10 = vc + dy1\n        iwd2 = wd2 * a / maxAdj\n        ihd2 = hd2 * a / maxAdj\n        sdx1 = iwd2 * 99144 / 100000\n        sdx2 = iwd2 * 92388 / 100000\n        sdx3 = iwd2 * 79335 / 100000\n        sdx4 = iwd2 * 60876 / 100000\n        sdx5 = iwd2 * 38268 / 100000\n        sdx6 = iwd2 * 13053 / 100000\n        sdy1 = ihd2 * 99144 / 100000\n        sdy2 = ihd2 * 92388 / 100000\n        sdy3 = ihd2 * 79335 / 100000\n        sdy4 = ihd2 * 60876 / 100000\n        sdy5 = ihd2 * 38268 / 100000\n        sdy6 = ihd2 * 13053 / 100000\n        sx1 = hc - sdx1\n        sx2 = hc - sdx2\n        sx3 = hc - sdx3\n        sx4 = hc - sdx4\n        sx5 = hc - sdx5\n        sx6 = hc - sdx6\n        sx7 = hc + sdx6\n        sx8 = hc + sdx5\n        sx9 = hc + sdx4\n        sx10 = hc + sdx3\n        sx11 = hc + sdx2\n        sx12 = hc + sdx1\n        sy1 = vc - sdy1\n        sy2 = vc - sdy2\n        sy3 = vc - sdy3\n        sy4 = vc - sdy4\n        sy5 = vc - sdy5\n        sy6 = vc - sdy6\n        sy7 = vc + sdy6\n        sy8 = vc + sdy5\n        sy9 = vc + sdy4\n        sy10 = vc + sdy3\n        sy11 = vc + sdy2\n        sy12 = vc + sdy1\n        iDx = iwd2 * Math.cos(0.7853981634)\n        idy = ihd2 * Math.sin(0.7853981634)\n        il = hc - iDx\n        it = vc - idy\n        ir = hc + iDx\n        ib = vc + idy\n        yAdj = vc - ihd2\n        var d = 'M0' + ',' + vc +\n          ' L' + sx1 + ',' + sy6 +\n          ' L' + x1 + ',' + y5 +\n          ' L' + sx2 + ',' + sy5 +\n          ' L' + x2 + ',' + y4 +\n          ' L' + sx3 + ',' + sy4 +\n          ' L' + x3 + ',' + y3 +\n          ' L' + sx4 + ',' + sy3 +\n          ' L' + x4 + ',' + y2 +\n          ' L' + sx5 + ',' + sy2 +\n          ' L' + x5 + ',' + y1 +\n          ' L' + sx6 + ',' + sy1 +\n          ' L' + hc + ',' + 0 +\n          ' L' + sx7 + ',' + sy1 +\n          ' L' + x6 + ',' + y1 +\n          ' L' + sx8 + ',' + sy2 +\n          ' L' + x7 + ',' + y2 +\n          ' L' + sx9 + ',' + sy3 +\n          ' L' + x8 + ',' + y3 +\n          ' L' + sx10 + ',' + sy4 +\n          ' L' + x9 + ',' + y4 +\n          ' L' + sx11 + ',' + sy5 +\n          ' L' + x10 + ',' + y5 +\n          ' L' + sx12 + ',' + sy6 +\n          ' L' + w + ',' + vc +\n          ' L' + sx12 + ',' + sy7 +\n          ' L' + x10 + ',' + y6 +\n          ' L' + sx11 + ',' + sy8 +\n          ' L' + x9 + ',' + y7 +\n          ' L' + sx10 + ',' + sy9 +\n          ' L' + x8 + ',' + y8 +\n          ' L' + sx9 + ',' + sy10 +\n          ' L' + x7 + ',' + y9 +\n          ' L' + sx8 + ',' + sy11 +\n          ' L' + x6 + ',' + y10 +\n          ' L' + sx7 + ',' + sy12 +\n          ' L' + hc + ',' + h +\n          ' L' + sx6 + ',' + sy12 +\n          ' L' + x5 + ',' + y10 +\n          ' L' + sx5 + ',' + sy11 +\n          ' L' + x4 + ',' + y9 +\n          ' L' + sx4 + ',' + sy10 +\n          ' L' + x3 + ',' + y8 +\n          ' L' + sx3 + ',' + sy9 +\n          ' L' + x2 + ',' + y7 +\n          ' L' + sx2 + ',' + sy8 +\n          ' L' + x1 + ',' + y6 +\n          ' L' + sx1 + ',' + sy7 +\n          ' z'\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'star32':\n        var a, dx1, dx2, dx3, dx4, dx5, dx6, dx7, dy1, dy2, dy3, dy4, dy5, dy6, dy7, x1, x2, x3, x4, x5, x6,\n          x7, x8, x9, x10, x11, x12, x13, x14, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14,\n          iwd2, ihd2, sdx1, sdx2, sdx3, sdx4, sdx5, sdx6, sdx7, sdx8, sdy1, sdy2, sdy3, sdy4, sdy5, sdy6, sdy7,\n          sdy8, sx1, sx2, sx3, sx4, sx5, sx6, sx7, sx8, sx9, sx10, sx11, sx12, sx13, sx14, sx15, sx16, sy1, sy2,\n          sy3, sy4, sy5, sy6, sy7, sy8, sy9, sy10, sy11, sy12, sy13, sy14, sy15, sy16, iDx, idy, il, it, ir, ib, yAdj\n        var hc = w / 2, vc = h / 2, wd2 = w / 2, hd2 = h / 2, hd4 = h / 4, wd4 = w / 4\n        var adj = 37500 * slideFactor\n        var maxAdj = 50000 * slideFactor\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])//[0][\"attrs\"][\"fmla\"];\n        //console.log(\"star4 node: \", node, \"shapAdjst:\", shapAdjst)\n        if (shapAdjst !== undefined) {\n          var name = shapAdjst['attrs']['name']\n          if (name == 'adj') {\n            adj = parseInt(shapAdjst['attrs']['fmla'].substr(4)) * slideFactor\n          }\n        }\n        a = (adj < 0) ? 0 : (adj > maxAdj) ? maxAdj : adj\n        dx1 = wd2 * 98079 / 100000\n        dx2 = wd2 * 92388 / 100000\n        dx3 = wd2 * 83147 / 100000\n        dx4 = wd2 * Math.cos(0.7853981634)\n        dx5 = wd2 * 55557 / 100000\n        dx6 = wd2 * 38268 / 100000\n        dx7 = wd2 * 19509 / 100000\n        dy1 = hd2 * 98079 / 100000\n        dy2 = hd2 * 92388 / 100000\n        dy3 = hd2 * 83147 / 100000\n        dy4 = hd2 * Math.sin(0.7853981634)\n        dy5 = hd2 * 55557 / 100000\n        dy6 = hd2 * 38268 / 100000\n        dy7 = hd2 * 19509 / 100000\n        x1 = hc - dx1\n        x2 = hc - dx2\n        x3 = hc - dx3\n        x4 = hc - dx4\n        x5 = hc - dx5\n        x6 = hc - dx6\n        x7 = hc - dx7\n        x8 = hc + dx7\n        x9 = hc + dx6\n        x10 = hc + dx5\n        x11 = hc + dx4\n        x12 = hc + dx3\n        x13 = hc + dx2\n        x14 = hc + dx1\n        y1 = vc - dy1\n        y2 = vc - dy2\n        y3 = vc - dy3\n        y4 = vc - dy4\n        y5 = vc - dy5\n        y6 = vc - dy6\n        y7 = vc - dy7\n        y8 = vc + dy7\n        y9 = vc + dy6\n        y10 = vc + dy5\n        y11 = vc + dy4\n        y12 = vc + dy3\n        y13 = vc + dy2\n        y14 = vc + dy1\n        iwd2 = wd2 * a / maxAdj\n        ihd2 = hd2 * a / maxAdj\n        sdx1 = iwd2 * 99518 / 100000\n        sdx2 = iwd2 * 95694 / 100000\n        sdx3 = iwd2 * 88192 / 100000\n        sdx4 = iwd2 * 77301 / 100000\n        sdx5 = iwd2 * 63439 / 100000\n        sdx6 = iwd2 * 47140 / 100000\n        sdx7 = iwd2 * 29028 / 100000\n        sdx8 = iwd2 * 9802 / 100000\n        sdy1 = ihd2 * 99518 / 100000\n        sdy2 = ihd2 * 95694 / 100000\n        sdy3 = ihd2 * 88192 / 100000\n        sdy4 = ihd2 * 77301 / 100000\n        sdy5 = ihd2 * 63439 / 100000\n        sdy6 = ihd2 * 47140 / 100000\n        sdy7 = ihd2 * 29028 / 100000\n        sdy8 = ihd2 * 9802 / 100000\n        sx1 = hc - sdx1\n        sx2 = hc - sdx2\n        sx3 = hc - sdx3\n        sx4 = hc - sdx4\n        sx5 = hc - sdx5\n        sx6 = hc - sdx6\n        sx7 = hc - sdx7\n        sx8 = hc - sdx8\n        sx9 = hc + sdx8\n        sx10 = hc + sdx7\n        sx11 = hc + sdx6\n        sx12 = hc + sdx5\n        sx13 = hc + sdx4\n        sx14 = hc + sdx3\n        sx15 = hc + sdx2\n        sx16 = hc + sdx1\n        sy1 = vc - sdy1\n        sy2 = vc - sdy2\n        sy3 = vc - sdy3\n        sy4 = vc - sdy4\n        sy5 = vc - sdy5\n        sy6 = vc - sdy6\n        sy7 = vc - sdy7\n        sy8 = vc - sdy8\n        sy9 = vc + sdy8\n        sy10 = vc + sdy7\n        sy11 = vc + sdy6\n        sy12 = vc + sdy5\n        sy13 = vc + sdy4\n        sy14 = vc + sdy3\n        sy15 = vc + sdy2\n        sy16 = vc + sdy1\n        iDx = iwd2 * Math.cos(0.7853981634)\n        idy = ihd2 * Math.sin(0.7853981634)\n        il = hc - iDx\n        it = vc - idy\n        ir = hc + iDx\n        ib = vc + idy\n        yAdj = vc - ihd2\n        var d = 'M0' + ',' + vc +\n          ' L' + sx1 + ',' + sy8 +\n          ' L' + x1 + ',' + y7 +\n          ' L' + sx2 + ',' + sy7 +\n          ' L' + x2 + ',' + y6 +\n          ' L' + sx3 + ',' + sy6 +\n          ' L' + x3 + ',' + y5 +\n          ' L' + sx4 + ',' + sy5 +\n          ' L' + x4 + ',' + y4 +\n          ' L' + sx5 + ',' + sy4 +\n          ' L' + x5 + ',' + y3 +\n          ' L' + sx6 + ',' + sy3 +\n          ' L' + x6 + ',' + y2 +\n          ' L' + sx7 + ',' + sy2 +\n          ' L' + x7 + ',' + y1 +\n          ' L' + sx8 + ',' + sy1 +\n          ' L' + hc + ',' + 0 +\n          ' L' + sx9 + ',' + sy1 +\n          ' L' + x8 + ',' + y1 +\n          ' L' + sx10 + ',' + sy2 +\n          ' L' + x9 + ',' + y2 +\n          ' L' + sx11 + ',' + sy3 +\n          ' L' + x10 + ',' + y3 +\n          ' L' + sx12 + ',' + sy4 +\n          ' L' + x11 + ',' + y4 +\n          ' L' + sx13 + ',' + sy5 +\n          ' L' + x12 + ',' + y5 +\n          ' L' + sx14 + ',' + sy6 +\n          ' L' + x13 + ',' + y6 +\n          ' L' + sx15 + ',' + sy7 +\n          ' L' + x14 + ',' + y7 +\n          ' L' + sx16 + ',' + sy8 +\n          ' L' + w + ',' + vc +\n          ' L' + sx16 + ',' + sy9 +\n          ' L' + x14 + ',' + y8 +\n          ' L' + sx15 + ',' + sy10 +\n          ' L' + x13 + ',' + y9 +\n          ' L' + sx14 + ',' + sy11 +\n          ' L' + x12 + ',' + y10 +\n          ' L' + sx13 + ',' + sy12 +\n          ' L' + x11 + ',' + y11 +\n          ' L' + sx12 + ',' + sy13 +\n          ' L' + x10 + ',' + y12 +\n          ' L' + sx11 + ',' + sy14 +\n          ' L' + x9 + ',' + y13 +\n          ' L' + sx10 + ',' + sy15 +\n          ' L' + x8 + ',' + y14 +\n          ' L' + sx9 + ',' + sy16 +\n          ' L' + hc + ',' + h +\n          ' L' + sx8 + ',' + sy16 +\n          ' L' + x7 + ',' + y14 +\n          ' L' + sx7 + ',' + sy15 +\n          ' L' + x6 + ',' + y13 +\n          ' L' + sx6 + ',' + sy14 +\n          ' L' + x5 + ',' + y12 +\n          ' L' + sx5 + ',' + sy13 +\n          ' L' + x4 + ',' + y11 +\n          ' L' + sx4 + ',' + sy12 +\n          ' L' + x3 + ',' + y10 +\n          ' L' + sx3 + ',' + sy11 +\n          ' L' + x2 + ',' + y9 +\n          ' L' + sx2 + ',' + sy10 +\n          ' L' + x1 + ',' + y8 +\n          ' L' + sx1 + ',' + sy9 +\n          ' z'\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n\n      case 'pie':\n      case 'pieWedge':\n      case 'arc':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var adj1, adj2, H, shapAdjst1, shapAdjst2, isClose\n        if (shapType == 'pie') {\n          adj1 = 0\n          adj2 = 270\n          H = h\n          isClose = true\n        } else if (shapType == 'pieWedge') {\n          adj1 = 180\n          adj2 = 270\n          H = 2 * h\n          isClose = true\n        } else if (shapType == 'arc') {\n          adj1 = 270\n          adj2 = 0\n          H = h\n          isClose = false\n        }\n        if (shapAdjst !== undefined) {\n          shapAdjst1 = getTextByPathList(shapAdjst, [ 'attrs', 'fmla' ])\n          shapAdjst2 = shapAdjst1\n          if (shapAdjst1 === undefined) {\n            shapAdjst1 = shapAdjst[0]['attrs']['fmla']\n            shapAdjst2 = shapAdjst[1]['attrs']['fmla']\n          }\n          if (shapAdjst1 !== undefined) {\n            adj1 = parseInt(shapAdjst1.substr(4)) / 60000\n          }\n          if (shapAdjst2 !== undefined) {\n            adj2 = parseInt(shapAdjst2.substr(4)) / 60000\n          }\n        }\n        var pieVals = shapePie(H, w, adj1, adj2, isClose)\n        //console.log(\"shapType: \",shapType,\"\\nimgFillFlg: \",imgFillFlg,\"\\ngrndFillFlg: \",grndFillFlg,\"\\nshpId: \",shpId,\"\\nfillColor: \",fillColor);\n        result += '<path   d=\\'' + pieVals[0] + '\\' transform=\\'' + pieVals[1] + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'chord':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, sAdj1_val = 45\n        var sAdj2, sAdj2_val = 270\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              sAdj1_val = parseInt(sAdj1.substr(4)) / 60000\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              sAdj2_val = parseInt(sAdj2.substr(4)) / 60000\n            }\n          }\n        }\n        var hR = h / 2\n        var wR = w / 2\n        var d_val = shapeArc(wR, hR, wR, hR, sAdj1_val, sAdj2_val, true)\n        //console.log(\"shapType: \",shapType,\", sAdj1_val: \",sAdj1_val,\", sAdj2_val: \",sAdj2_val)\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'frame':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adj1 = 12500 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        if (shapAdjst !== undefined) {\n          adj1 = parseInt(shapAdjst.substr(4)) * slideFactor\n        }\n        var a1, x1, x4, y4\n        if (adj1 < 0) a1 = 0\n        else if (adj1 > cnstVal1) a1 = cnstVal1\n        else a1 = adj1\n        x1 = Math.min(w, h) * a1 / cnstVal2\n        x4 = w - x1\n        y4 = h - x1\n        var d = 'M' + 0 + ',' + 0 +\n          ' L' + w + ',' + 0 +\n          ' L' + w + ',' + h +\n          ' L' + 0 + ',' + h +\n          ' z' +\n          'M' + x1 + ',' + x1 +\n          ' L' + x1 + ',' + y4 +\n          ' L' + x4 + ',' + y4 +\n          ' L' + x4 + ',' + x1 +\n          ' z'\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'donut':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adj = 25000 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        if (shapAdjst !== undefined) {\n          adj = parseInt(shapAdjst.substr(4)) * slideFactor\n        }\n        var a, dr, iwd2, ihd2\n        if (adj < 0) a = 0\n        else if (adj > cnstVal1) a = cnstVal1\n        else a = adj\n        dr = Math.min(w, h) * a / cnstVal2\n        iwd2 = w / 2 - dr\n        ihd2 = h / 2 - dr\n        var d = 'M' + 0 + ',' + h / 2 +\n          shapeArc(w / 2, h / 2, w / 2, h / 2, 180, 270, false).replace('M', 'L') +\n          shapeArc(w / 2, h / 2, w / 2, h / 2, 270, 360, false).replace('M', 'L') +\n          shapeArc(w / 2, h / 2, w / 2, h / 2, 0, 90, false).replace('M', 'L') +\n          shapeArc(w / 2, h / 2, w / 2, h / 2, 90, 180, false).replace('M', 'L') +\n          ' z' +\n          'M' + dr + ',' + h / 2 +\n          shapeArc(w / 2, h / 2, iwd2, ihd2, 180, 90, false).replace('M', 'L') +\n          shapeArc(w / 2, h / 2, iwd2, ihd2, 90, 0, false).replace('M', 'L') +\n          shapeArc(w / 2, h / 2, iwd2, ihd2, 0, -90, false).replace('M', 'L') +\n          shapeArc(w / 2, h / 2, iwd2, ihd2, 270, 180, false).replace('M', 'L') +\n          ' z'\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'noSmoking':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adj = 18750 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        if (shapAdjst !== undefined) {\n          adj = parseInt(shapAdjst.substr(4)) * slideFactor\n        }\n        var a, dr, iwd2, ihd2, ang, ang2rad, ct, st, m, n, drd2, dang, dang2, swAng, t3, stAng1, stAng2\n        if (adj < 0) a = 0\n        else if (adj > cnstVal1) a = cnstVal1\n        else a = adj\n        dr = Math.min(w, h) * a / cnstVal2\n        iwd2 = w / 2 - dr\n        ihd2 = h / 2 - dr\n        ang = Math.atan(h / w)\n        //ang2rad = ang*Math.PI/180;\n        ct = ihd2 * Math.cos(ang)\n        st = iwd2 * Math.sin(ang)\n        m = Math.sqrt(ct * ct + st * st) //\"mod ct st 0\"\n        n = iwd2 * ihd2 / m\n        drd2 = dr / 2\n        dang = Math.atan(drd2 / n)\n        dang2 = dang * 2\n        swAng = -Math.PI + dang2\n        //t3 = Math.atan(h/w);\n        stAng1 = ang - dang\n        stAng2 = stAng1 - Math.PI\n        var ct1, st1, m1, n1, dx1, dy1, x1, y1, y1, y2\n        ct1 = ihd2 * Math.cos(stAng1)\n        st1 = iwd2 * Math.sin(stAng1)\n        m1 = Math.sqrt(ct1 * ct1 + st1 * st1) //\"mod ct1 st1 0\"\n        n1 = iwd2 * ihd2 / m1\n        dx1 = n1 * Math.cos(stAng1)\n        dy1 = n1 * Math.sin(stAng1)\n        x1 = w / 2 + dx1\n        y1 = h / 2 + dy1\n        x2 = w / 2 - dx1\n        y2 = h / 2 - dy1\n        var stAng1deg = stAng1 * 180 / Math.PI\n        var stAng2deg = stAng2 * 180 / Math.PI\n        var swAng2deg = swAng * 180 / Math.PI\n        var d = 'M' + 0 + ',' + h / 2 +\n          shapeArc(w / 2, h / 2, w / 2, h / 2, 180, 270, false).replace('M', 'L') +\n          shapeArc(w / 2, h / 2, w / 2, h / 2, 270, 360, false).replace('M', 'L') +\n          shapeArc(w / 2, h / 2, w / 2, h / 2, 0, 90, false).replace('M', 'L') +\n          shapeArc(w / 2, h / 2, w / 2, h / 2, 90, 180, false).replace('M', 'L') +\n          ' z' +\n          'M' + x1 + ',' + y1 +\n          shapeArc(w / 2, h / 2, iwd2, ihd2, stAng1deg, (stAng1deg + swAng2deg), false).replace('M', 'L') +\n          ' z' +\n          'M' + x2 + ',' + y2 +\n          shapeArc(w / 2, h / 2, iwd2, ihd2, stAng2deg, (stAng2deg + swAng2deg), false).replace('M', 'L') +\n          ' z'\n        //console.log(\"adj: \",adj,\"x1:\",x1,\",y1:\",y1,\" x2:\",x2,\",y2:\",y2,\",stAng1:\",stAng1,\",stAng1deg:\",stAng1deg,\",stAng2:\",stAng2,\",stAng2deg:\",stAng2deg,\",swAng:\",swAng,\",swAng2deg:\",swAng2deg)\n\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'halfFrame':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, sAdj1_val = 3.5\n        var sAdj2, sAdj2_val = 3.5\n        var cnsVal = 100000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              sAdj1_val = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              sAdj2_val = parseInt(sAdj2.substr(4)) * slideFactor\n            }\n          }\n        }\n        var minWH = Math.min(w, h)\n        var maxAdj2 = (cnsVal * w) / minWH\n        var a1, a2\n        if (sAdj2_val < 0) a2 = 0\n        else if (sAdj2_val > maxAdj2) a2 = maxAdj2\n        else a2 = sAdj2_val\n        var x1 = (minWH * a2) / cnsVal\n        var g1 = h * x1 / w\n        var g2 = h - g1\n        var maxAdj1 = (cnsVal * g2) / minWH\n        if (sAdj1_val < 0) a1 = 0\n        else if (sAdj1_val > maxAdj1) a1 = maxAdj1\n        else a1 = sAdj1_val\n        var y1 = minWH * a1 / cnsVal\n        var dx2 = y1 * w / h\n        var x2 = w - dx2\n        var dy2 = x1 * h / w\n        var y2 = h - dy2\n        var d = 'M0,0' +\n          ' L' + w + ',' + 0 +\n          ' L' + x2 + ',' + y1 +\n          ' L' + x1 + ',' + y1 +\n          ' L' + x1 + ',' + y2 +\n          ' L0,' + h + ' z'\n\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        //console.log(\"w: \",w,\", h: \",h,\", sAdj1_val: \",sAdj1_val,\", sAdj2_val: \",sAdj2_val,\",maxAdj1: \",maxAdj1,\",maxAdj2: \",maxAdj2)\n        break\n      case 'blockArc':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 180\n        var sAdj2, adj2 = 0\n        var sAdj3, adj3 = 25000 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) / 60000\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) / 60000\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            }\n          }\n        }\n\n        var stAng, istAng, a3, sw11, sw12, swAng, iswAng\n        var cd1 = 360\n        if (adj1 < 0) stAng = 0\n        else if (adj1 > cd1) stAng = cd1\n        else stAng = adj1 //180\n\n        if (adj2 < 0) istAng = 0\n        else if (adj2 > cd1) istAng = cd1\n        else istAng = adj2 //0\n\n        if (adj3 < 0) a3 = 0\n        else if (adj3 > cnstVal1) a3 = cnstVal1\n        else a3 = adj3\n\n        sw11 = istAng - stAng // -180\n        sw12 = sw11 + cd1 //180\n        swAng = (sw11 > 0) ? sw11 : sw12 //180\n        iswAng = -swAng //-180\n\n        var endAng = stAng + swAng\n        var iendAng = istAng + iswAng\n\n        var wt1, ht1, dx1, dy1, x1, y1, stRd, istRd, wd2, hd2, hc, vc\n        stRd = stAng * (Math.PI) / 180\n        istRd = istAng * (Math.PI) / 180\n        wd2 = w / 2\n        hd2 = h / 2\n        hc = w / 2\n        vc = h / 2\n        if (stAng > 90 && stAng < 270) {\n          wt1 = wd2 * (Math.sin((Math.PI) / 2 - stRd))\n          ht1 = hd2 * (Math.cos((Math.PI) / 2 - stRd))\n\n          dx1 = wd2 * (Math.cos(Math.atan(ht1 / wt1)))\n          dy1 = hd2 * (Math.sin(Math.atan(ht1 / wt1)))\n\n          x1 = hc - dx1\n          y1 = vc - dy1\n        } else {\n          wt1 = wd2 * (Math.sin(stRd))\n          ht1 = hd2 * (Math.cos(stRd))\n\n          dx1 = wd2 * (Math.cos(Math.atan(wt1 / ht1)))\n          dy1 = hd2 * (Math.sin(Math.atan(wt1 / ht1)))\n\n          x1 = hc + dx1\n          y1 = vc + dy1\n        }\n        var dr, iwd2, ihd2, wt2, ht2, dx2, dy2, x2, y2\n        dr = Math.min(w, h) * a3 / cnstVal2\n        iwd2 = wd2 - dr\n        ihd2 = hd2 - dr\n        //console.log(\"stAng: \",stAng,\" swAng: \",swAng ,\" endAng:\",endAng)\n        if ((endAng <= 450 && endAng > 270) || ((endAng >= 630 && endAng < 720))) {\n          wt2 = iwd2 * (Math.sin(istRd))\n          ht2 = ihd2 * (Math.cos(istRd))\n          dx2 = iwd2 * (Math.cos(Math.atan(wt2 / ht2)))\n          dy2 = ihd2 * (Math.sin(Math.atan(wt2 / ht2)))\n          x2 = hc + dx2\n          y2 = vc + dy2\n        } else {\n          wt2 = iwd2 * (Math.sin((Math.PI) / 2 - istRd))\n          ht2 = ihd2 * (Math.cos((Math.PI) / 2 - istRd))\n\n          dx2 = iwd2 * (Math.cos(Math.atan(ht2 / wt2)))\n          dy2 = ihd2 * (Math.sin(Math.atan(ht2 / wt2)))\n          x2 = hc - dx2\n          y2 = vc - dy2\n        }\n        var d = 'M' + x1 + ',' + y1 +\n          shapeArc(wd2, hd2, wd2, hd2, stAng, endAng, false).replace('M', 'L') +\n          ' L' + x2 + ',' + y2 +\n          shapeArc(wd2, hd2, iwd2, ihd2, istAng, iendAng, false).replace('M', 'L') +\n          ' z'\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'bracePair':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adj = 8333 * slideFactor\n        var cnstVal1 = 25000 * slideFactor\n        var cnstVal2 = 50000 * slideFactor\n        var cnstVal3 = 100000 * slideFactor\n        if (shapAdjst !== undefined) {\n          adj = parseInt(shapAdjst.substr(4)) * slideFactor\n        }\n        var vc = h / 2, cd = 360, cd2 = 180, cd4 = 90, c3d4 = 270, a, x1, x2, x3, x4, y2, y3, y4\n        if (adj < 0) a = 0\n        else if (adj > cnstVal1) a = cnstVal1\n        else a = adj\n        var minWH = Math.min(w, h)\n        x1 = minWH * a / cnstVal3\n        x2 = minWH * a / cnstVal2\n        x3 = w - x2\n        x4 = w - x1\n        y2 = vc - x1\n        y3 = vc + x1\n        y4 = h - x1\n        //console.log(\"w:\",w,\" h:\",h,\" x1:\",x1,\" x2:\",x2,\" x3:\",x3,\" x4:\",x4,\" y2:\",y2,\" y3:\",y3,\" y4:\",y4)\n        var d = 'M' + x2 + ',' + h +\n          shapeArc(x2, y4, x1, x1, cd4, cd2, false).replace('M', 'L') +\n          ' L' + x1 + ',' + y3 +\n          shapeArc(0, y3, x1, x1, 0, (-cd4), false).replace('M', 'L') +\n          shapeArc(0, y2, x1, x1, cd4, 0, false).replace('M', 'L') +\n          ' L' + x1 + ',' + x1 +\n          shapeArc(x2, x1, x1, x1, cd2, c3d4, false).replace('M', 'L') +\n          ' M' + x3 + ',' + 0 +\n          shapeArc(x3, x1, x1, x1, c3d4, cd, false).replace('M', 'L') +\n          ' L' + x4 + ',' + y2 +\n          shapeArc(w, y2, x1, x1, cd2, cd4, false).replace('M', 'L') +\n          shapeArc(w, y3, x1, x1, c3d4, cd2, false).replace('M', 'L') +\n          ' L' + x4 + ',' + y4 +\n          shapeArc(x3, y4, x1, x1, 0, cd4, false).replace('M', 'L')\n\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'leftBrace':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 8333 * slideFactor\n        var sAdj2, adj2 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            }\n          }\n        }\n        var vc = h / 2, cd2 = 180, cd4 = 90, c3d4 = 270, a1, a2, q1, q2, q3, y1, y2, y3, y4\n        if (adj2 < 0) a2 = 0\n        else if (adj2 > cnstVal2) a2 = cnstVal2\n        else a2 = adj2\n        var minWH = Math.min(w, h)\n        q1 = cnstVal2 - a2\n        if (q1 < a2) q2 = q1\n        else q2 = a2\n        q3 = q2 / 2\n        var maxAdj1 = q3 * h / minWH\n        if (adj1 < 0) a1 = 0\n        else if (adj1 > maxAdj1) a1 = maxAdj1\n        else a1 = adj1\n        y1 = minWH * a1 / cnstVal2\n        y3 = h * a2 / cnstVal2\n        y2 = y3 - y1\n        y4 = y3 + y1\n        //console.log(\"w:\",w,\" h:\",h,\" q1:\",q1,\" q2:\",q2,\" q3:\",q3,\" y1:\",y1,\" y3:\",y3,\" y4:\",y4,\" maxAdj1:\",maxAdj1)\n        var d = 'M' + w + ',' + h +\n          shapeArc(w, h - y1, w / 2, y1, cd4, cd2, false).replace('M', 'L') +\n          ' L' + w / 2 + ',' + y4 +\n          shapeArc(0, y4, w / 2, y1, 0, (-cd4), false).replace('M', 'L') +\n          shapeArc(0, y2, w / 2, y1, cd4, 0, false).replace('M', 'L') +\n          ' L' + w / 2 + ',' + y1 +\n          shapeArc(w, y1, w / 2, y1, cd2, c3d4, false).replace('M', 'L')\n\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'rightBrace':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 8333 * slideFactor\n        var sAdj2, adj2 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            }\n          }\n        }\n        var vc = h / 2, cd = 360, cd2 = 180, cd4 = 90, c3d4 = 270, a1, a2, q1, q2, q3, y1, y2, y3, y4\n        if (adj2 < 0) a2 = 0\n        else if (adj2 > cnstVal2) a2 = cnstVal2\n        else a2 = adj2\n        var minWH = Math.min(w, h)\n        q1 = cnstVal2 - a2\n        if (q1 < a2) q2 = q1\n        else q2 = a2\n        q3 = q2 / 2\n        var maxAdj1 = q3 * h / minWH\n        if (adj1 < 0) a1 = 0\n        else if (adj1 > maxAdj1) a1 = maxAdj1\n        else a1 = adj1\n        y1 = minWH * a1 / cnstVal2\n        y3 = h * a2 / cnstVal2\n        y2 = y3 - y1\n        y4 = h - y1\n        //console.log(\"w:\",w,\" h:\",h,\" q1:\",q1,\" q2:\",q2,\" q3:\",q3,\" y1:\",y1,\" y2:\",y2,\" y3:\",y3,\" y4:\",y4,\" maxAdj1:\",maxAdj1)\n        var d = 'M' + 0 + ',' + 0 +\n          shapeArc(0, y1, w / 2, y1, c3d4, cd, false).replace('M', 'L') +\n          ' L' + w / 2 + ',' + y2 +\n          shapeArc(w, y2, w / 2, y1, cd2, cd4, false).replace('M', 'L') +\n          shapeArc(w, y3 + y1, w / 2, y1, c3d4, cd2, false).replace('M', 'L') +\n          ' L' + w / 2 + ',' + y4 +\n          shapeArc(0, y4, w / 2, y1, 0, cd4, false).replace('M', 'L')\n\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'bracketPair':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adj = 16667 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        if (shapAdjst !== undefined) {\n          adj = parseInt(shapAdjst.substr(4)) * slideFactor\n        }\n        var r = w, b = h, cd2 = 180, cd4 = 90, c3d4 = 270, a, x1, x2, y2\n        if (adj < 0) a = 0\n        else if (adj > cnstVal1) a = cnstVal1\n        else a = adj\n        x1 = Math.min(w, h) * a / cnstVal2\n        x2 = r - x1\n        y2 = b - x1\n        //console.log(\"w:\",w,\" h:\",h,\" x1:\",x1,\" x2:\",x2,\" y2:\",y2)\n        var d = shapeArc(x1, x1, x1, x1, c3d4, cd2, false) +\n          shapeArc(x1, y2, x1, x1, cd2, cd4, false).replace('M', 'L') +\n          shapeArc(x2, x1, x1, x1, c3d4, (c3d4 + cd4), false) +\n          shapeArc(x2, y2, x1, x1, 0, cd4, false).replace('M', 'L')\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'leftBracket':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adj = 8333 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        var maxAdj = cnstVal1 * h / Math.min(w, h)\n        if (shapAdjst !== undefined) {\n          adj = parseInt(shapAdjst.substr(4)) * slideFactor\n        }\n        var r = w, b = h, cd2 = 180, cd4 = 90, c3d4 = 270, a, y1, y2\n        if (adj < 0) a = 0\n        else if (adj > maxAdj) a = maxAdj\n        else a = adj\n        y1 = Math.min(w, h) * a / cnstVal2\n        if (y1 > w) y1 = w\n        y2 = b - y1\n        var d = 'M' + r + ',' + b +\n          shapeArc(y1, y2, y1, y1, cd4, cd2, false).replace('M', 'L') +\n          ' L' + 0 + ',' + y1 +\n          shapeArc(y1, y1, y1, y1, cd2, c3d4, false).replace('M', 'L') +\n          ' L' + r + ',' + 0\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'rightBracket':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adj = 8333 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        var maxAdj = cnstVal1 * h / Math.min(w, h)\n        if (shapAdjst !== undefined) {\n          adj = parseInt(shapAdjst.substr(4)) * slideFactor\n        }\n        var cd = 360, cd2 = 180, cd4 = 90, c3d4 = 270, a, y1, y2, y3\n        if (adj < 0) a = 0\n        else if (adj > maxAdj) a = maxAdj\n        else a = adj\n        y1 = Math.min(w, h) * a / cnstVal2\n        y2 = h - y1\n        y3 = w - y1\n        //console.log(\"w:\",w,\" h:\",h,\" y1:\",y1,\" y2:\",y2,\" y3:\",y3)\n        var d = 'M' + 0 + ',' + h +\n          shapeArc(y3, y2, y1, y1, cd4, 0, false).replace('M', 'L') +\n          //\" L\"+ r + \",\" + y2 +\n          ' L' + w + ',' + h / 2 +\n          shapeArc(y3, y1, y1, y1, cd, c3d4, false).replace('M', 'L') +\n          ' L' + 0 + ',' + 0\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'moon':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adj = 0.5\n        if (shapAdjst !== undefined) {\n          adj = parseInt(shapAdjst.substr(4)) / 100000//*96/914400;;\n        }\n        var hd2, cd2, cd4\n\n        hd2 = h / 2\n        cd2 = 180\n        cd4 = 90\n\n        var adj2 = (1 - adj) * w\n        var d = 'M' + w + ',' + h +\n          shapeArc(w, hd2, w, hd2, cd4, (cd4 + cd2), false).replace('M', 'L') +\n          shapeArc(w, hd2, adj2, hd2, (cd4 + cd2), cd4, false).replace('M', 'L') +\n          ' z'\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'corner':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, sAdj1_val = 50000 * slideFactor\n        var sAdj2, sAdj2_val = 50000 * slideFactor\n        var cnsVal = 100000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              sAdj1_val = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              sAdj2_val = parseInt(sAdj2.substr(4)) * slideFactor\n            }\n          }\n        }\n        var minWH = Math.min(w, h)\n        var maxAdj1 = cnsVal * h / minWH\n        var maxAdj2 = cnsVal * w / minWH\n        var a1, a2, x1, dy1, y1\n        if (sAdj1_val < 0) a1 = 0\n        else if (sAdj1_val > maxAdj1) a1 = maxAdj1\n        else a1 = sAdj1_val\n\n        if (sAdj2_val < 0) a2 = 0\n        else if (sAdj2_val > maxAdj2) a2 = maxAdj2\n        else a2 = sAdj2_val\n        x1 = minWH * a2 / cnsVal\n        dy1 = minWH * a1 / cnsVal\n        y1 = h - dy1\n\n        var d = 'M0,0' +\n          ' L' + x1 + ',' + 0 +\n          ' L' + x1 + ',' + y1 +\n          ' L' + w + ',' + y1 +\n          ' L' + w + ',' + h +\n          ' L0,' + h + ' z'\n\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'diagStripe':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var sAdj1_val = 50000 * slideFactor\n        var cnsVal = 100000 * slideFactor\n        if (shapAdjst !== undefined) {\n          sAdj1_val = parseInt(shapAdjst.substr(4)) * slideFactor\n        }\n        var a1, x2, y2\n        if (sAdj1_val < 0) a1 = 0\n        else if (sAdj1_val > cnsVal) a1 = cnsVal\n        else a1 = sAdj1_val\n        x2 = w * a1 / cnsVal\n        y2 = h * a1 / cnsVal\n        var d = 'M' + 0 + ',' + y2 +\n          ' L' + x2 + ',' + 0 +\n          ' L' + w + ',' + 0 +\n          ' L' + 0 + ',' + h + ' z'\n\n        result += '<path   d=\\'' + d + '\\'  fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'gear6':\n      case 'gear9':\n        txtRotate = 0\n        var gearNum = shapType.substr(4), d\n        if (gearNum == '6') {\n          d = shapeGear(w, h / 3.5, parseInt(gearNum))\n        } else { //gearNum==\"9\"\n          d = shapeGear(w, h / 3.5, parseInt(gearNum))\n        }\n        result += '<path   d=\\'' + d + '\\' transform=\\'rotate(20,' + (3 / 7) * h + ',' + (3 / 7) * h + ')\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'bentConnector3':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var shapAdjst_val = 0.5\n        if (shapAdjst !== undefined) {\n          shapAdjst_val = parseInt(shapAdjst.substr(4)) / 100000\n          // if (isFlipV) {\n          //     result += \" <polyline points='\" + w + \" 0,\" + ((1 - shapAdjst_val) * w) + \" 0,\" + ((1 - shapAdjst_val) * w) + \" \" + h + \",0 \" + h + \"' fill='transparent'\" +\n          //         \"' stroke='\" + border.color + \"' stroke-width='\" + border.width + \"' stroke-dasharray='\" + border.strokeDasharray + \"' \";\n          // } else {\n          result += ' <polyline points=\\'0 0,' + (shapAdjst_val) * w + ' 0,' + (shapAdjst_val) * w + ' ' + h + ',' + w + ' ' + h + '\\' fill=\\'transparent\\'' +\n            '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' '\n          //}\n          if (headEndNodeAttrs !== undefined && (headEndNodeAttrs['type'] === 'triangle' || headEndNodeAttrs['type'] === 'arrow')) {\n            result += 'marker-start=\\'url(#markerTriangle_' + shpId + ')\\' '\n          }\n          if (tailEndNodeAttrs !== undefined && (tailEndNodeAttrs['type'] === 'triangle' || tailEndNodeAttrs['type'] === 'arrow')) {\n            result += 'marker-end=\\'url(#markerTriangle_' + shpId + ')\\' '\n          }\n          result += '/>'\n        }\n        break\n      case 'plus':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adj1 = 0.25\n        if (shapAdjst !== undefined) {\n          adj1 = parseInt(shapAdjst.substr(4)) / 100000\n\n        }\n        var adj2 = (1 - adj1)\n        result += ' <polygon points=\\'' + adj1 * w + ' 0,' + adj1 * w + ' ' + adj1 * h + ',0 ' + adj1 * h + ',0 ' + adj2 * h + ',' +\n          adj1 * w + ' ' + adj2 * h + ',' + adj1 * w + ' ' + h + ',' + adj2 * w + ' ' + h + ',' + adj2 * w + ' ' + adj2 * h + ',' + w + ' ' + adj2 * h + ',' +\n          +w + ' ' + adj1 * h + ',' + adj2 * w + ' ' + adj1 * h + ',' + adj2 * w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'teardrop':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adj1 = 100000 * slideFactor\n        var cnsVal1 = adj1\n        var cnsVal2 = 200000 * slideFactor\n        if (shapAdjst !== undefined) {\n          adj1 = parseInt(shapAdjst.substr(4)) * slideFactor\n        }\n        var a1, r2, tw, th, sw, sh, dx1, dy1, x1, y1, x2, y2, rd45\n        if (adj1 < 0) a1 = 0\n        else if (adj1 > cnsVal2) a1 = cnsVal2\n        else a1 = adj1\n        r2 = Math.sqrt(2)\n        tw = r2 * (w / 2)\n        th = r2 * (h / 2)\n        sw = (tw * a1) / cnsVal1\n        sh = (th * a1) / cnsVal1\n        rd45 = (45 * (Math.PI) / 180)\n        dx1 = sw * (Math.cos(rd45))\n        dy1 = sh * (Math.cos(rd45))\n        x1 = (w / 2) + dx1\n        y1 = (h / 2) - dy1\n        x2 = ((w / 2) + x1) / 2\n        y2 = ((h / 2) + y1) / 2\n\n        var d_val = shapeArc(w / 2, h / 2, w / 2, h / 2, 180, 270, false) +\n          'Q ' + x2 + ',0 ' + x1 + ',' + y1 +\n          'Q ' + w + ',' + y2 + ' ' + w + ',' + h / 2 +\n          shapeArc(w / 2, h / 2, w / 2, h / 2, 0, 90, false).replace('M', 'L') +\n          shapeArc(w / 2, h / 2, w / 2, h / 2, 90, 180, false).replace('M', 'L') + ' z'\n        result += '<path   d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        // console.log(\"shapAdjst: \",shapAdjst,\", adj1: \",adj1);\n        break\n      case 'plaque':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adj1 = 16667 * slideFactor\n        var cnsVal1 = 50000 * slideFactor\n        var cnsVal2 = 100000 * slideFactor\n        if (shapAdjst !== undefined) {\n          adj1 = parseInt(shapAdjst.substr(4)) * slideFactor\n        }\n        var a1, x1, x2, y2\n        if (adj1 < 0) a1 = 0\n        else if (adj1 > cnsVal1) a1 = cnsVal1\n        else a1 = adj1\n        x1 = a1 * (Math.min(w, h)) / cnsVal2\n        x2 = w - x1\n        y2 = h - x1\n\n        var d_val = 'M0,' + x1 +\n          shapeArc(0, 0, x1, x1, 90, 0, false).replace('M', 'L') +\n          ' L' + x2 + ',' + 0 +\n          shapeArc(w, 0, x1, x1, 180, 90, false).replace('M', 'L') +\n          ' L' + w + ',' + y2 +\n          shapeArc(w, h, x1, x1, 270, 180, false).replace('M', 'L') +\n          ' L' + x1 + ',' + h +\n          shapeArc(0, h, x1, x1, 0, -90, false).replace('M', 'L') + ' z'\n        result += '<path   d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'sun':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var refr = slideFactor\n        var adj1 = 25000 * refr\n        var cnstVal1 = 12500 * refr\n        var cnstVal2 = 46875 * refr\n        if (shapAdjst !== undefined) {\n          adj1 = parseInt(shapAdjst.substr(4)) * refr\n        }\n        var a1\n        if (adj1 < cnstVal1) a1 = cnstVal1\n        else if (adj1 > cnstVal2) a1 = cnstVal2\n        else a1 = adj1\n\n        var cnstVa3 = 50000 * refr\n        var cnstVa4 = 100000 * refr\n        var g0 = cnstVa3 - a1,\n          g1 = g0 * (30274 * refr) / (32768 * refr),\n          g2 = g0 * (12540 * refr) / (32768 * refr),\n          g3 = g1 + cnstVa3,\n          g4 = g2 + cnstVa3,\n          g5 = cnstVa3 - g1,\n          g6 = cnstVa3 - g2,\n          g7 = g0 * (23170 * refr) / (32768 * refr),\n          g8 = cnstVa3 + g7,\n          g9 = cnstVa3 - g7,\n          g10 = g5 * 3 / 4,\n          g11 = g6 * 3 / 4,\n          g12 = g10 + 3662 * refr,\n          g13 = g11 + 36620 * refr,\n          g14 = g11 + 12500 * refr,\n          g15 = cnstVa4 - g10,\n          g16 = cnstVa4 - g12,\n          g17 = cnstVa4 - g13,\n          g18 = cnstVa4 - g14,\n          ox1 = w * (18436 * refr) / (21600 * refr),\n          oy1 = h * (3163 * refr) / (21600 * refr),\n          ox2 = w * (3163 * refr) / (21600 * refr),\n          oy2 = h * (18436 * refr) / (21600 * refr),\n          x8 = w * g8 / cnstVa4,\n          x9 = w * g9 / cnstVa4,\n          x10 = w * g10 / cnstVa4,\n          x12 = w * g12 / cnstVa4,\n          x13 = w * g13 / cnstVa4,\n          x14 = w * g14 / cnstVa4,\n          x15 = w * g15 / cnstVa4,\n          x16 = w * g16 / cnstVa4,\n          x17 = w * g17 / cnstVa4,\n          x18 = w * g18 / cnstVa4,\n          x19 = w * a1 / cnstVa4,\n          wR = w * g0 / cnstVa4,\n          hR = h * g0 / cnstVa4,\n          y8 = h * g8 / cnstVa4,\n          y9 = h * g9 / cnstVa4,\n          y10 = h * g10 / cnstVa4,\n          y12 = h * g12 / cnstVa4,\n          y13 = h * g13 / cnstVa4,\n          y14 = h * g14 / cnstVa4,\n          y15 = h * g15 / cnstVa4,\n          y16 = h * g16 / cnstVa4,\n          y17 = h * g17 / cnstVa4,\n          y18 = h * g18 / cnstVa4\n\n        var d_val = 'M' + w + ',' + h / 2 +\n          ' L' + x15 + ',' + y18 +\n          ' L' + x15 + ',' + y14 +\n          'z' +\n          ' M' + ox1 + ',' + oy1 +\n          ' L' + x16 + ',' + y17 +\n          ' L' + x13 + ',' + y12 +\n          'z' +\n          ' M' + w / 2 + ',' + 0 +\n          ' L' + x18 + ',' + y10 +\n          ' L' + x14 + ',' + y10 +\n          'z' +\n          ' M' + ox2 + ',' + oy1 +\n          ' L' + x17 + ',' + y12 +\n          ' L' + x12 + ',' + y17 +\n          'z' +\n          ' M' + 0 + ',' + h / 2 +\n          ' L' + x10 + ',' + y14 +\n          ' L' + x10 + ',' + y18 +\n          'z' +\n          ' M' + ox2 + ',' + oy2 +\n          ' L' + x12 + ',' + y13 +\n          ' L' + x17 + ',' + y16 +\n          'z' +\n          ' M' + w / 2 + ',' + h +\n          ' L' + x14 + ',' + y15 +\n          ' L' + x18 + ',' + y15 +\n          'z' +\n          ' M' + ox1 + ',' + oy2 +\n          ' L' + x13 + ',' + y16 +\n          ' L' + x16 + ',' + y13 +\n          ' z' +\n          ' M' + x19 + ',' + h / 2 +\n          shapeArc(w / 2, h / 2, wR, hR, 180, 540, false).replace('M', 'L') +\n          ' z'\n        //console.log(\"adj1: \",adj1,d_val);\n        result += '<path   d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n\n        break\n      case 'heart':\n        var dx1, dx2, x1, x2, x3, x4, y1\n        dx1 = w * 49 / 48\n        dx2 = w * 10 / 48\n        x1 = w / 2 - dx1\n        x2 = w / 2 - dx2\n        x3 = w / 2 + dx2\n        x4 = w / 2 + dx1\n        y1 = -h / 3\n        var d_val = 'M' + w / 2 + ',' + h / 4 +\n          'C' + x3 + ',' + y1 + ' ' + x4 + ',' + h / 4 + ' ' + w / 2 + ',' + h +\n          'C' + x1 + ',' + h / 4 + ' ' + x2 + ',' + y1 + ' ' + w / 2 + ',' + h / 4 + ' z'\n\n        result += '<path   d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'lightningBolt':\n        var x1 = w * 5022 / 21600,\n          x2 = w * 11050 / 21600,\n          x3 = w * 8472 / 21600,\n          x4 = w * 8757 / 21600,\n          x5 = w * 10012 / 21600,\n          x6 = w * 14767 / 21600,\n          x7 = w * 12222 / 21600,\n          x8 = w * 12860 / 21600,\n          x9 = w * 13917 / 21600,\n          x10 = w * 7602 / 21600,\n          x11 = w * 16577 / 21600,\n          y1 = h * 3890 / 21600,\n          y2 = h * 6080 / 21600,\n          y3 = h * 6797 / 21600,\n          y4 = h * 7437 / 21600,\n          y5 = h * 12877 / 21600,\n          y6 = h * 9705 / 21600,\n          y7 = h * 12007 / 21600,\n          y8 = h * 13987 / 21600,\n          y9 = h * 8382 / 21600,\n          y10 = h * 14277 / 21600,\n          y11 = h * 14915 / 21600\n\n        var d_val = 'M' + x3 + ',' + 0 +\n          ' L' + x8 + ',' + y2 +\n          ' L' + x2 + ',' + y3 +\n          ' L' + x11 + ',' + y7 +\n          ' L' + x6 + ',' + y5 +\n          ' L' + w + ',' + h +\n          ' L' + x5 + ',' + y11 +\n          ' L' + x7 + ',' + y8 +\n          ' L' + x1 + ',' + y6 +\n          ' L' + x10 + ',' + y9 +\n          ' L' + 0 + ',' + y1 + ' z'\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'cube':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var refr = slideFactor\n        var adj = 25000 * refr\n        if (shapAdjst !== undefined) {\n          adj = parseInt(shapAdjst.substr(4)) * refr\n        }\n        var d_val\n        var cnstVal2 = 100000 * refr\n        var ss = Math.min(w, h)\n        var a, y1, y4, x4\n        a = (adj < 0) ? 0 : (adj > cnstVal2) ? cnstVal2 : adj\n        y1 = ss * a / cnstVal2\n        y4 = h - y1\n        x4 = w - y1\n        d_val = 'M' + 0 + ',' + y1 +\n          ' L' + y1 + ',' + 0 +\n          ' L' + w + ',' + 0 +\n          ' L' + w + ',' + y4 +\n          ' L' + x4 + ',' + h +\n          ' L' + 0 + ',' + h +\n          ' z' +\n          'M' + 0 + ',' + y1 +\n          ' L' + x4 + ',' + y1 +\n          ' M' + x4 + ',' + y1 +\n          ' L' + w + ',' + 0 +\n          'M' + x4 + ',' + y1 +\n          ' L' + x4 + ',' + h\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'bevel':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var refr = slideFactor\n        var adj = 12500 * refr\n        if (shapAdjst !== undefined) {\n          adj = parseInt(shapAdjst.substr(4)) * refr\n        }\n        var d_val\n        var cnstVal1 = 50000 * refr\n        var cnstVal2 = 100000 * refr\n        var ss = Math.min(w, h)\n        var a, x1, x2, y2\n        a = (adj < 0) ? 0 : (adj > cnstVal1) ? cnstVal1 : adj\n        x1 = ss * a / cnstVal2\n        x2 = w - x1\n        y2 = h - x1\n        d_val = 'M' + 0 + ',' + 0 +\n          ' L' + w + ',' + 0 +\n          ' L' + w + ',' + h +\n          ' L' + 0 + ',' + h +\n          ' z' +\n          ' M' + x1 + ',' + x1 +\n          ' L' + x2 + ',' + x1 +\n          ' L' + x2 + ',' + y2 +\n          ' L' + x1 + ',' + y2 +\n          ' z' +\n          ' M' + 0 + ',' + 0 +\n          ' L' + x1 + ',' + x1 +\n          ' M' + 0 + ',' + h +\n          ' L' + x1 + ',' + y2 +\n          ' M' + w + ',' + 0 +\n          ' L' + x2 + ',' + x1 +\n          ' M' + w + ',' + h +\n          ' L' + x2 + ',' + y2\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'foldedCorner':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var refr = slideFactor\n        var adj = 16667 * refr\n        if (shapAdjst !== undefined) {\n          adj = parseInt(shapAdjst.substr(4)) * refr\n        }\n        var d_val\n        var cnstVal1 = 50000 * refr\n        var cnstVal2 = 100000 * refr\n        var ss = Math.min(w, h)\n        var a, dy2, dy1, x1, x2, y2, y1\n        a = (adj < 0) ? 0 : (adj > cnstVal1) ? cnstVal1 : adj\n        dy2 = ss * a / cnstVal2\n        dy1 = dy2 / 5\n        x1 = w - dy2\n        x2 = x1 + dy1\n        y2 = h - dy2\n        y1 = y2 + dy1\n        d_val = 'M' + x1 + ',' + h +\n          ' L' + x2 + ',' + y1 +\n          ' L' + w + ',' + y2 +\n          ' L' + x1 + ',' + h +\n          ' L' + 0 + ',' + h +\n          ' L' + 0 + ',' + 0 +\n          ' L' + w + ',' + 0 +\n          ' L' + w + ',' + y2\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'cloud':\n      case 'cloudCallout':\n        var x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11,\n          rx1, rx2, rx3, rx4, rx5, rx6, rx7, rx8, rx9, rx10, rx11, ry1, ry2, ry3, ry4, ry5, ry6, ry7, ry8, ry9, ry10,\n          ry11\n        x0 = w * 3900 / 43200\n        \n        x1 = w * 4693 / 43200\n        x2 = w * 6928 / 43200\n        x3 = w * 16478 / 43200\n        x4 = w * 28827 / 43200\n        x5 = w * 34129 / 43200\n        x6 = w * 41798 / 43200\n        x7 = w * 38324 / 43200\n        x8 = w * 29078 / 43200\n        x9 = w * 22141 / 43200\n        x10 = w * 14000 / 43200\n        x11 = w * 4127 / 43200\n        y0 = h * 14370 / 43200\n        y1 = h * 26177 / 43200\n        y2 = h * 34899 / 43200\n        y3 = h * 39090 / 43200\n        y4 = h * 34751 / 43200\n        y5 = h * 22954 / 43200\n        y6 = h * 15354 / 43200\n        y7 = h * 5426 / 43200\n        y8 = h * 3952 / 43200\n        y9 = h * 4720 / 43200\n        y10 = h * 5192 / 43200\n        y11 = h * 15789 / 43200\n        //Path:\n        //(path attrs: w = 43200; h = 43200; )\n        var rX1 = w * 6753 / 43200, rY1 = h * 9190 / 43200, rX2 = w * 5333 / 43200, rY2 = h * 7267 / 43200,\n          rX3 = w * 4365 / 43200,\n          rY3 = h * 5945 / 43200, rX4 = w * 4857 / 43200, rY4 = h * 6595 / 43200, rY5 = h * 7273 / 43200,\n          rX6 = w * 6775 / 43200,\n          rY6 = h * 9220 / 43200, rX7 = w * 5785 / 43200, rY7 = h * 7867 / 43200, rX8 = w * 6752 / 43200,\n          rY8 = h * 9215 / 43200,\n          rX9 = w * 7720 / 43200, rY9 = h * 10543 / 43200, rX10 = w * 4360 / 43200, rY10 = h * 5918 / 43200,\n          rX11 = w * 4345 / 43200\n        var sA1 = -11429249 / 60000, wA1 = 7426832 / 60000, sA2 = -8646143 / 60000, wA2 = 5396714 / 60000,\n          sA3 = -8748475 / 60000,\n          wA3 = 5983381 / 60000, sA4 = -7859164 / 60000, wA4 = 7034504 / 60000, sA5 = -4722533 / 60000,\n          wA5 = 6541615 / 60000,\n          sA6 = -2776035 / 60000, wA6 = 7816140 / 60000, sA7 = 37501 / 60000, wA7 = 6842000 / 60000,\n          sA8 = 1347096 / 60000,\n          wA8 = 6910353 / 60000, sA9 = 3974558 / 60000, wA9 = 4542661 / 60000, sA10 = -16496525 / 60000,\n          wA10 = 8804134 / 60000,\n          sA11 = -14809710 / 60000, wA11 = 9151131 / 60000\n\n        var cX0, cX1, cX2, cX3, cX4, cX5, cX6, cX7, cX8, cX9, cX10, cY0, cY1, cY2, cY3, cY4, cY5, cY6, cY7, cY8, cY9,\n          cY10\n        var arc1, arc2, arc3, arc4, arc5, arc6, arc7, arc8, arc9, arc10, arc11\n        var lxy1, lxy2, lxy3, lxy4, lxy5, lxy6, lxy7, lxy8, lxy9, lxy10\n\n        cX0 = x0 - rX1 * Math.cos(sA1 * Math.PI / 180)\n        cY0 = y0 - rY1 * Math.sin(sA1 * Math.PI / 180)\n        arc1 = shapeArc(cX0, cY0, rX1, rY1, sA1, sA1 + wA1, false).replace('M', 'L')\n        lxy1 = arc1.substr(arc1.lastIndexOf('L') + 1).split(' ')\n        cX1 = parseInt(lxy1[0]) - rX2 * Math.cos(sA2 * Math.PI / 180)\n        cY1 = parseInt(lxy1[1]) - rY2 * Math.sin(sA2 * Math.PI / 180)\n        arc2 = shapeArc(cX1, cY1, rX2, rY2, sA2, sA2 + wA2, false).replace('M', 'L')\n        lxy2 = arc2.substr(arc2.lastIndexOf('L') + 1).split(' ')\n        cX2 = parseInt(lxy2[0]) - rX3 * Math.cos(sA3 * Math.PI / 180)\n        cY2 = parseInt(lxy2[1]) - rY3 * Math.sin(sA3 * Math.PI / 180)\n        arc3 = shapeArc(cX2, cY2, rX3, rY3, sA3, sA3 + wA3, false).replace('M', 'L')\n        lxy3 = arc3.substr(arc3.lastIndexOf('L') + 1).split(' ')\n        cX3 = parseInt(lxy3[0]) - rX4 * Math.cos(sA4 * Math.PI / 180)\n        cY3 = parseInt(lxy3[1]) - rY4 * Math.sin(sA4 * Math.PI / 180)\n        arc4 = shapeArc(cX3, cY3, rX4, rY4, sA4, sA4 + wA4, false).replace('M', 'L')\n        lxy4 = arc4.substr(arc4.lastIndexOf('L') + 1).split(' ')\n        cX4 = parseInt(lxy4[0]) - rX2 * Math.cos(sA5 * Math.PI / 180)\n        cY4 = parseInt(lxy4[1]) - rY5 * Math.sin(sA5 * Math.PI / 180)\n        arc5 = shapeArc(cX4, cY4, rX2, rY5, sA5, sA5 + wA5, false).replace('M', 'L')\n        lxy5 = arc5.substr(arc5.lastIndexOf('L') + 1).split(' ')\n        cX5 = parseInt(lxy5[0]) - rX6 * Math.cos(sA6 * Math.PI / 180)\n        cY5 = parseInt(lxy5[1]) - rY6 * Math.sin(sA6 * Math.PI / 180)\n        arc6 = shapeArc(cX5, cY5, rX6, rY6, sA6, sA6 + wA6, false).replace('M', 'L')\n        lxy6 = arc6.substr(arc6.lastIndexOf('L') + 1).split(' ')\n        cX6 = parseInt(lxy6[0]) - rX7 * Math.cos(sA7 * Math.PI / 180)\n        cY6 = parseInt(lxy6[1]) - rY7 * Math.sin(sA7 * Math.PI / 180)\n        arc7 = shapeArc(cX6, cY6, rX7, rY7, sA7, sA7 + wA7, false).replace('M', 'L')\n        lxy7 = arc7.substr(arc7.lastIndexOf('L') + 1).split(' ')\n        cX7 = parseInt(lxy7[0]) - rX8 * Math.cos(sA8 * Math.PI / 180)\n        cY7 = parseInt(lxy7[1]) - rY8 * Math.sin(sA8 * Math.PI / 180)\n        arc8 = shapeArc(cX7, cY7, rX8, rY8, sA8, sA8 + wA8, false).replace('M', 'L')\n        lxy8 = arc8.substr(arc8.lastIndexOf('L') + 1).split(' ')\n        cX8 = parseInt(lxy8[0]) - rX9 * Math.cos(sA9 * Math.PI / 180)\n        cY8 = parseInt(lxy8[1]) - rY9 * Math.sin(sA9 * Math.PI / 180)\n        arc9 = shapeArc(cX8, cY8, rX9, rY9, sA9, sA9 + wA9, false).replace('M', 'L')\n        lxy9 = arc9.substr(arc9.lastIndexOf('L') + 1).split(' ')\n        cX9 = parseInt(lxy9[0]) - rX10 * Math.cos(sA10 * Math.PI / 180)\n        cY9 = parseInt(lxy9[1]) - rY10 * Math.sin(sA10 * Math.PI / 180)\n        arc10 = shapeArc(cX9, cY9, rX10, rY10, sA10, sA10 + wA10, false).replace('M', 'L')\n        lxy10 = arc10.substr(arc10.lastIndexOf('L') + 1).split(' ')\n        cX10 = parseInt(lxy10[0]) - rX11 * Math.cos(sA11 * Math.PI / 180)\n        cY10 = parseInt(lxy10[1]) - rY3 * Math.sin(sA11 * Math.PI / 180)\n        arc11 = shapeArc(cX10, cY10, rX11, rY3, sA11, sA11 + wA11, false).replace('M', 'L')\n\n        var d1 = 'M' + x0 + ',' + y0 +\n          arc1 +\n          arc2 +\n          arc3 +\n          arc4 +\n          arc5 +\n          arc6 +\n          arc7 +\n          arc8 +\n          arc9 +\n          arc10 +\n          arc11 +\n          ' z'\n        if (shapType == 'cloudCallout') {\n          var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n          var refr = slideFactor\n          var sAdj1, adj1 = -20833 * refr\n          var sAdj2, adj2 = 62500 * refr\n          if (shapAdjst_ary !== undefined) {\n            for (var i = 0; i < shapAdjst_ary.length; i++) {\n              var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n              if (sAdj_name == 'adj1') {\n                sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n                adj1 = parseInt(sAdj1.substr(4)) * refr\n              } else if (sAdj_name == 'adj2') {\n                sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n                adj2 = parseInt(sAdj2.substr(4)) * refr\n              }\n            }\n          }\n          var d_val\n          var cnstVal2 = 100000 * refr\n          var ss = Math.min(w, h)\n          var wd2 = w / 2, hd2 = h / 2\n\n          var dxPos, dyPos, xPos, yPos, ht, wt, g2, g3, g4, g5, g6, g7, g8, g9, g10, g11, g12, g13, g14, g15, g16,\n            g17, g18, g19, g20, g21, g22, g23, g24, g25, g26, x23, x24, x25\n\n          dxPos = w * adj1 / cnstVal2\n          dyPos = h * adj2 / cnstVal2\n          xPos = wd2 + dxPos\n          yPos = hd2 + dyPos\n          ht = hd2 * Math.cos(Math.atan(dyPos / dxPos))\n          wt = wd2 * Math.sin(Math.atan(dyPos / dxPos))\n          g2 = wd2 * Math.cos(Math.atan(wt / ht))\n          g3 = hd2 * Math.sin(Math.atan(wt / ht))\n          //console.log(\"adj1: \",adj1,\"adj2: \",adj2)\n          if (adj1 >= 0) {\n            g4 = wd2 + g2\n            g5 = hd2 + g3\n          } else {\n            g4 = wd2 - g2\n            g5 = hd2 - g3\n          }\n          g6 = g4 - xPos\n          g7 = g5 - yPos\n          g8 = Math.sqrt(g6 * g6 + g7 * g7)\n          g9 = ss * 6600 / 21600\n          g10 = g8 - g9\n          g11 = g10 / 3\n          g12 = ss * 1800 / 21600\n          g13 = g11 + g12\n          g14 = g13 * g6 / g8\n          g15 = g13 * g7 / g8\n          g16 = g14 + xPos\n          g17 = g15 + yPos\n          g18 = ss * 4800 / 21600\n          g19 = g11 * 2\n          g20 = g18 + g19\n          g21 = g20 * g6 / g8\n          g22 = g20 * g7 / g8\n          g23 = g21 + xPos\n          g24 = g22 + yPos\n          g25 = ss * 1200 / 21600\n          g26 = ss * 600 / 21600\n          x23 = xPos + g26\n          x24 = g16 + g25\n          x25 = g23 + g12\n\n          d_val = //\" M\" + x23 + \",\" + yPos +\n            shapeArc(x23 - g26, yPos, g26, g26, 0, 360, false) + //.replace(\"M\",\"L\") +\n            ' z' +\n            ' M' + x24 + ',' + g17 +\n            shapeArc(x24 - g25, g17, g25, g25, 0, 360, false).replace('M', 'L') +\n            ' z' +\n            ' M' + x25 + ',' + g24 +\n            shapeArc(x25 - g12, g24, g12, g12, 0, 360, false).replace('M', 'L') +\n            ' z'\n          d1 += d_val\n        }\n        result += '<path d=\\'' + d1 + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'smileyFace':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var refr = slideFactor\n        var adj = 4653 * refr\n        if (shapAdjst !== undefined) {\n          adj = parseInt(shapAdjst.substr(4)) * refr\n        }\n        var d_val\n        var cnstVal1 = 50000 * refr\n        var cnstVal2 = 100000 * refr\n        var cnstVal3 = 4653 * refr\n        var ss = Math.min(w, h)\n        var a, x1, x2, x3, x4, y1, y3, dy2, y2, y4, dy3, y5, wR, hR, wd2, hd2\n        wd2 = w / 2\n        hd2 = h / 2\n        a = (adj < -cnstVal3) ? -cnstVal3 : (adj > cnstVal3) ? cnstVal3 : adj\n        x1 = w * 4969 / 21699\n        x2 = w * 6215 / 21600\n        x3 = w * 13135 / 21600\n        x4 = w * 16640 / 21600\n        y1 = h * 7570 / 21600\n        y3 = h * 16515 / 21600\n        dy2 = h * a / cnstVal2\n        y2 = y3 - dy2\n        y4 = y3 + dy2\n        dy3 = h * a / cnstVal1\n        y5 = y4 + dy3\n        wR = w * 1125 / 21600\n        hR = h * 1125 / 21600\n        var cX1 = x2 - wR * Math.cos(Math.PI)\n        var cY1 = y1 - hR * Math.sin(Math.PI)\n        var cX2 = x3 - wR * Math.cos(Math.PI)\n        d_val = //eyes\n          shapeArc(cX1, cY1, wR, hR, 180, 540, false) +\n          shapeArc(cX2, cY1, wR, hR, 180, 540, false) +\n          //mouth\n          ' M' + x1 + ',' + y2 +\n          ' Q' + wd2 + ',' + y5 + ' ' + x4 + ',' + y2 +\n          ' Q' + wd2 + ',' + y5 + ' ' + x1 + ',' + y2 +\n          //head\n          ' M' + 0 + ',' + hd2 +\n          shapeArc(wd2, hd2, wd2, hd2, 180, 540, false).replace('M', 'L') +\n          ' z'\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'verticalScroll':\n      case 'horizontalScroll':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var refr = slideFactor\n        var adj = 12500 * refr\n        if (shapAdjst !== undefined) {\n          adj = parseInt(shapAdjst.substr(4)) * refr\n        }\n        var d_val\n        var cnstVal1 = 25000 * refr\n        var cnstVal2 = 100000 * refr\n        var ss = Math.min(w, h)\n        var t = 0, l = 0, b = h, r = w\n        var a, ch, ch2, ch4\n        a = (adj < 0) ? 0 : (adj > cnstVal1) ? cnstVal1 : adj\n        ch = ss * a / cnstVal2\n        ch2 = ch / 2\n        ch4 = ch / 4\n        if (shapType == 'verticalScroll') {\n          var x3, x4, x6, x7, x5, y3, y4\n          x3 = ch + ch2\n          x4 = ch + ch\n          x6 = r - ch\n          x7 = r - ch2\n          x5 = x6 - ch2\n          y3 = b - ch\n          y4 = b - ch2\n\n          d_val = 'M' + ch + ',' + y3 +\n            ' L' + ch + ',' + ch2 +\n            shapeArc(x3, ch2, ch2, ch2, 180, 270, false).replace('M', 'L') +\n            ' L' + x7 + ',' + t +\n            shapeArc(x7, ch2, ch2, ch2, 270, 450, false).replace('M', 'L') +\n            ' L' + x6 + ',' + ch +\n            ' L' + x6 + ',' + y4 +\n            shapeArc(x5, y4, ch2, ch2, 0, 90, false).replace('M', 'L') +\n            ' L' + ch2 + ',' + b +\n            shapeArc(ch2, y4, ch2, ch2, 90, 270, false).replace('M', 'L') +\n            ' z' +\n            ' M' + x3 + ',' + t +\n            shapeArc(x3, ch2, ch2, ch2, 270, 450, false).replace('M', 'L') +\n            shapeArc(x3, x3 / 2, ch4, ch4, 90, 270, false).replace('M', 'L') +\n            ' L' + x4 + ',' + ch2 +\n            ' M' + x6 + ',' + ch +\n            ' L' + x3 + ',' + ch +\n            ' M' + ch + ',' + y4 +\n            shapeArc(ch2, y4, ch2, ch2, 0, 270, false).replace('M', 'L') +\n            shapeArc(ch2, (y4 + y3) / 2, ch4, ch4, 270, 450, false).replace('M', 'L') +\n            ' z' +\n            ' M' + ch + ',' + y4 +\n            ' L' + ch + ',' + y3\n        } else if (shapType == 'horizontalScroll') {\n          var y3, y4, y6, y7, y5, x3, x4\n          y3 = ch + ch2\n          y4 = ch + ch\n          y6 = b - ch\n          y7 = b - ch2\n          y5 = y6 - ch2\n          x3 = r - ch\n          x4 = r - ch2\n\n          d_val = 'M' + l + ',' + y3 +\n            shapeArc(ch2, y3, ch2, ch2, 180, 270, false).replace('M', 'L') +\n            ' L' + x3 + ',' + ch +\n            ' L' + x3 + ',' + ch2 +\n            shapeArc(x4, ch2, ch2, ch2, 180, 360, false).replace('M', 'L') +\n            ' L' + r + ',' + y5 +\n            shapeArc(x4, y5, ch2, ch2, 0, 90, false).replace('M', 'L') +\n            ' L' + ch + ',' + y6 +\n            ' L' + ch + ',' + y7 +\n            shapeArc(ch2, y7, ch2, ch2, 0, 180, false).replace('M', 'L') +\n            ' z' +\n            'M' + x4 + ',' + ch +\n            shapeArc(x4, ch2, ch2, ch2, 90, -180, false).replace('M', 'L') +\n            shapeArc((x3 + x4) / 2, ch2, ch4, ch4, 180, 0, false).replace('M', 'L') +\n            ' z' +\n            ' M' + x4 + ',' + ch +\n            ' L' + x3 + ',' + ch +\n            ' M' + ch2 + ',' + y4 +\n            ' L' + ch2 + ',' + y3 +\n            shapeArc(y3 / 2, y3, ch4, ch4, 180, 360, false).replace('M', 'L') +\n            shapeArc(ch2, y3, ch2, ch2, 0, 180, false).replace('M', 'L') +\n            ' M' + ch + ',' + y3 +\n            ' L' + ch + ',' + y6\n        }\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'wedgeEllipseCallout':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var refr = slideFactor\n        var sAdj1, adj1 = -20833 * refr\n        var sAdj2, adj2 = 62500 * refr\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * refr\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * refr\n            }\n          }\n        }\n        var d_val\n        var cnstVal1 = 100000 * slideFactor\n        var angVal1 = 11 * Math.PI / 180\n        var ss = Math.min(w, h)\n        var dxPos, dyPos, xPos, yPos, sdx, sdy, pang, stAng, enAng, dx1, dy1, x1, y1, dx2, dy2,\n          x2, y2, stAng1, enAng1, swAng1, swAng2, swAng,\n          vc = h / 2, hc = w / 2\n        dxPos = w * adj1 / cnstVal1\n        dyPos = h * adj2 / cnstVal1\n        xPos = hc + dxPos\n        yPos = vc + dyPos\n        sdx = dxPos * h\n        sdy = dyPos * w\n        pang = Math.atan(sdy / sdx)\n        stAng = pang + angVal1\n        enAng = pang - angVal1\n        console.log('dxPos: ', dxPos, 'dyPos: ', dyPos)\n        dx1 = hc * Math.cos(stAng)\n        dy1 = vc * Math.sin(stAng)\n        dx2 = hc * Math.cos(enAng)\n        dy2 = vc * Math.sin(enAng)\n        if (dxPos >= 0) {\n          x1 = hc + dx1\n          y1 = vc + dy1\n          x2 = hc + dx2\n          y2 = vc + dy2\n        } else {\n          x1 = hc - dx1\n          y1 = vc - dy1\n          x2 = hc - dx2\n          y2 = vc - dy2\n        }\n        /*\n                        //stAng = pang+angVal1;\n                        //enAng = pang-angVal1;\n                        //dx1 = hc*Math.cos(stAng);\n                        //dy1 = vc*Math.sin(stAng);\n                        x1 = hc+dx1;\n                        y1 = vc+dy1;\n                        dx2 = hc*Math.cos(enAng);\n                        dy2 = vc*Math.sin(enAng);\n                        x2 = hc+dx2;\n                        y2 = vc+dy2;\n                        stAng1 = Math.atan(dy1/dx1);\n                        enAng1 = Math.atan(dy2/dx2);\n                        swAng1 = enAng1-stAng1;\n                        swAng2 = swAng1+2*Math.PI;\n                        swAng = (swAng1 > 0)?swAng1:swAng2;\n                        var stAng1Dg = stAng1*180/Math.PI;\n                        var swAngDg = swAng*180/Math.PI;\n                        var endAng = stAng1Dg + swAngDg;\n                        */\n        d_val = 'M' + x1 + ',' + y1 +\n          ' L' + xPos + ',' + yPos +\n          ' L' + x2 + ',' + y2 +\n          //\" z\" +\n          shapeArc(hc, vc, hc, vc, 0, 360, true)// +\n        //shapeArc(hc,vc,hc,vc,stAng1Dg,stAng1Dg+swAngDg,false).replace(\"M\",\"L\") +\n        //\" z\";\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'wedgeRectCallout':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var refr = slideFactor\n        var sAdj1, adj1 = -20833 * refr\n        var sAdj2, adj2 = 62500 * refr\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * refr\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * refr\n            }\n          }\n        }\n        var d_val\n        var cnstVal1 = 100000 * slideFactor\n        var dxPos, dyPos, xPos, yPos, dx, dy, dq, ady, adq, dz, xg1, xg2, x1, x2,\n          yg1, yg2, y1, y2, t1, xl, t2, xt, t3, xr, t4, xb, t5, yl, t6, yt, t7, yr, t8, yb,\n          vc = h / 2, hc = w / 2\n        dxPos = w * adj1 / cnstVal1\n        dyPos = h * adj2 / cnstVal1\n        xPos = hc + dxPos\n        yPos = vc + dyPos\n        dx = xPos - hc\n        dy = yPos - vc\n        dq = dxPos * h / w\n        ady = Math.abs(dyPos)\n        adq = Math.abs(dq)\n        dz = ady - adq\n        xg1 = (dxPos > 0) ? 7 : 2\n        xg2 = (dxPos > 0) ? 10 : 5\n        x1 = w * xg1 / 12\n        x2 = w * xg2 / 12\n        yg1 = (dyPos > 0) ? 7 : 2\n        yg2 = (dyPos > 0) ? 10 : 5\n        y1 = h * yg1 / 12\n        y2 = h * yg2 / 12\n        t1 = (dxPos > 0) ? 0 : xPos\n        xl = (dz > 0) ? 0 : t1\n        t2 = (dyPos > 0) ? x1 : xPos\n        xt = (dz > 0) ? t2 : x1\n        t3 = (dxPos > 0) ? xPos : w\n        xr = (dz > 0) ? w : t3\n        t4 = (dyPos > 0) ? xPos : x1\n        xb = (dz > 0) ? t4 : x1\n        t5 = (dxPos > 0) ? y1 : yPos\n        yl = (dz > 0) ? y1 : t5\n        t6 = (dyPos > 0) ? 0 : yPos\n        yt = (dz > 0) ? t6 : 0\n        t7 = (dxPos > 0) ? yPos : y1\n        yr = (dz > 0) ? y1 : t7\n        t8 = (dyPos > 0) ? yPos : h\n        yb = (dz > 0) ? t8 : h\n\n        d_val = 'M' + 0 + ',' + 0 +\n          ' L' + x1 + ',' + 0 +\n          ' L' + xt + ',' + yt +\n          ' L' + x2 + ',' + 0 +\n          ' L' + w + ',' + 0 +\n          ' L' + w + ',' + y1 +\n          ' L' + xr + ',' + yr +\n          ' L' + w + ',' + y2 +\n          ' L' + w + ',' + h +\n          ' L' + x2 + ',' + h +\n          ' L' + xb + ',' + yb +\n          ' L' + x1 + ',' + h +\n          ' L' + 0 + ',' + h +\n          ' L' + 0 + ',' + y2 +\n          ' L' + xl + ',' + yl +\n          ' L' + 0 + ',' + y1 +\n          ' z'\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'wedgeRoundRectCallout':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var refr = slideFactor\n        var sAdj1, adj1 = -20833 * refr\n        var sAdj2, adj2 = 62500 * refr\n        var sAdj3, adj3 = 16667 * refr\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * refr\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * refr\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * refr\n            }\n          }\n        }\n        var d_val\n        var cnstVal1 = 100000 * slideFactor\n        var ss = Math.min(w, h)\n        var dxPos, dyPos, xPos, yPos, dq, ady, adq, dz, xg1, xg2, x1, x2, yg1, yg2, y1, y2,\n          t1, xl, t2, xt, t3, xr, t4, xb, t5, yl, t6, yt, t7, yr, t8, yb, u1, u2, v2,\n          vc = h / 2, hc = w / 2\n        dxPos = w * adj1 / cnstVal1\n        dyPos = h * adj2 / cnstVal1\n        xPos = hc + dxPos\n        yPos = vc + dyPos\n        dq = dxPos * h / w\n        ady = Math.abs(dyPos)\n        adq = Math.abs(dq)\n        dz = ady - adq\n        xg1 = (dxPos > 0) ? 7 : 2\n        xg2 = (dxPos > 0) ? 10 : 5\n        x1 = w * xg1 / 12\n        x2 = w * xg2 / 12\n        yg1 = (dyPos > 0) ? 7 : 2\n        yg2 = (dyPos > 0) ? 10 : 5\n        y1 = h * yg1 / 12\n        y2 = h * yg2 / 12\n        t1 = (dxPos > 0) ? 0 : xPos\n        xl = (dz > 0) ? 0 : t1\n        t2 = (dyPos > 0) ? x1 : xPos\n        xt = (dz > 0) ? t2 : x1\n        t3 = (dxPos > 0) ? xPos : w\n        xr = (dz > 0) ? w : t3\n        t4 = (dyPos > 0) ? xPos : x1\n        xb = (dz > 0) ? t4 : x1\n        t5 = (dxPos > 0) ? y1 : yPos\n        yl = (dz > 0) ? y1 : t5\n        t6 = (dyPos > 0) ? 0 : yPos\n        yt = (dz > 0) ? t6 : 0\n        t7 = (dxPos > 0) ? yPos : y1\n        yr = (dz > 0) ? y1 : t7\n        t8 = (dyPos > 0) ? yPos : h\n        yb = (dz > 0) ? t8 : h\n        u1 = ss * adj3 / cnstVal1\n        u2 = w - u1\n        v2 = h - u1\n        d_val = 'M' + 0 + ',' + u1 +\n          shapeArc(u1, u1, u1, u1, 180, 270, false).replace('M', 'L') +\n          ' L' + x1 + ',' + 0 +\n          ' L' + xt + ',' + yt +\n          ' L' + x2 + ',' + 0 +\n          ' L' + u2 + ',' + 0 +\n          shapeArc(u2, u1, u1, u1, 270, 360, false).replace('M', 'L') +\n          ' L' + w + ',' + y1 +\n          ' L' + xr + ',' + yr +\n          ' L' + w + ',' + y2 +\n          ' L' + w + ',' + v2 +\n          shapeArc(u2, v2, u1, u1, 0, 90, false).replace('M', 'L') +\n          ' L' + x2 + ',' + h +\n          ' L' + xb + ',' + yb +\n          ' L' + x1 + ',' + h +\n          ' L' + u1 + ',' + h +\n          shapeArc(u1, v2, u1, u1, 90, 180, false).replace('M', 'L') +\n          ' L' + 0 + ',' + y2 +\n          ' L' + xl + ',' + yl +\n          ' L' + 0 + ',' + y1 +\n          ' z'\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'accentBorderCallout1':\n      case 'accentBorderCallout2':\n      case 'accentBorderCallout3':\n      case 'borderCallout1':\n      case 'borderCallout2':\n      case 'borderCallout3':\n      case 'accentCallout1':\n      case 'accentCallout2':\n      case 'accentCallout3':\n      case 'callout1':\n      case 'callout2':\n      case 'callout3':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var refr = slideFactor\n        var sAdj1, adj1 = 18750 * refr\n        var sAdj2, adj2 = -8333 * refr\n        var sAdj3, adj3 = 18750 * refr\n        var sAdj4, adj4 = -16667 * refr\n        var sAdj5, adj5 = 100000 * refr\n        var sAdj6, adj6 = -16667 * refr\n        var sAdj7, adj7 = 112963 * refr\n        var sAdj8, adj8 = -8333 * refr\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * refr\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * refr\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * refr\n            } else if (sAdj_name == 'adj4') {\n              sAdj4 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj4 = parseInt(sAdj4.substr(4)) * refr\n            } else if (sAdj_name == 'adj5') {\n              sAdj5 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj5 = parseInt(sAdj5.substr(4)) * refr\n            } else if (sAdj_name == 'adj6') {\n              sAdj6 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj6 = parseInt(sAdj6.substr(4)) * refr\n            } else if (sAdj_name == 'adj7') {\n              sAdj7 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj7 = parseInt(sAdj7.substr(4)) * refr\n            } else if (sAdj_name == 'adj8') {\n              sAdj8 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj8 = parseInt(sAdj8.substr(4)) * refr\n            }\n          }\n        }\n        var d_val\n        var cnstVal1 = 100000 * refr\n        var isBorder = true\n        switch (shapType) {\n          case 'borderCallout1':\n          case 'callout1':\n            if (shapType == 'borderCallout1') {\n              isBorder = true\n            } else {\n              isBorder = false\n            }\n            if (shapAdjst_ary === undefined) {\n              adj1 = 18750 * refr\n              adj2 = -8333 * refr\n              adj3 = 112500 * refr\n              adj4 = -38333 * refr\n            }\n            var y1, x1, y2, x2\n            y1 = h * adj1 / cnstVal1\n            x1 = w * adj2 / cnstVal1\n            y2 = h * adj3 / cnstVal1\n            x2 = w * adj4 / cnstVal1\n            d_val = 'M' + 0 + ',' + 0 +\n              ' L' + w + ',' + 0 +\n              ' L' + w + ',' + h +\n              ' L' + 0 + ',' + h +\n              ' z' +\n              ' M' + x1 + ',' + y1 +\n              ' L' + x2 + ',' + y2\n            break\n          case 'borderCallout2':\n          case 'callout2':\n            if (shapType == 'borderCallout2') {\n              isBorder = true\n            } else {\n              isBorder = false\n            }\n            if (shapAdjst_ary === undefined) {\n              adj1 = 18750 * refr\n              adj2 = -8333 * refr\n              adj3 = 18750 * refr\n              adj4 = -16667 * refr\n\n              adj5 = 112500 * refr\n              adj6 = -46667 * refr\n            }\n            var y1, x1, y2, x2, y3, x3\n\n            y1 = h * adj1 / cnstVal1\n            x1 = w * adj2 / cnstVal1\n            y2 = h * adj3 / cnstVal1\n            x2 = w * adj4 / cnstVal1\n\n            y3 = h * adj5 / cnstVal1\n            x3 = w * adj6 / cnstVal1\n            d_val = 'M' + 0 + ',' + 0 +\n              ' L' + w + ',' + 0 +\n              ' L' + w + ',' + h +\n              ' L' + 0 + ',' + h +\n              ' z' +\n\n              ' M' + x1 + ',' + y1 +\n              ' L' + x2 + ',' + y2 +\n\n              ' L' + x3 + ',' + y3 +\n              ' L' + x2 + ',' + y2\n\n            break\n          case 'borderCallout3':\n          case 'callout3':\n            if (shapType == 'borderCallout3') {\n              isBorder = true\n            } else {\n              isBorder = false\n            }\n            if (shapAdjst_ary === undefined) {\n              adj1 = 18750 * refr\n              adj2 = -8333 * refr\n              adj3 = 18750 * refr\n              adj4 = -16667 * refr\n\n              adj5 = 100000 * refr\n              adj6 = -16667 * refr\n\n              adj7 = 112963 * refr\n              adj8 = -8333 * refr\n            }\n            var y1, x1, y2, x2, y3, x3, y4, x4\n\n            y1 = h * adj1 / cnstVal1\n            x1 = w * adj2 / cnstVal1\n            y2 = h * adj3 / cnstVal1\n            x2 = w * adj4 / cnstVal1\n\n            y3 = h * adj5 / cnstVal1\n            x3 = w * adj6 / cnstVal1\n\n            y4 = h * adj7 / cnstVal1\n            x4 = w * adj8 / cnstVal1\n            d_val = 'M' + 0 + ',' + 0 +\n              ' L' + w + ',' + 0 +\n              ' L' + w + ',' + h +\n              ' L' + 0 + ',' + h +\n              ' z' +\n\n              ' M' + x1 + ',' + y1 +\n              ' L' + x2 + ',' + y2 +\n\n              ' L' + x3 + ',' + y3 +\n\n              ' L' + x4 + ',' + y4 +\n              ' L' + x3 + ',' + y3 +\n              ' L' + x2 + ',' + y2\n            break\n          case 'accentBorderCallout1':\n          case 'accentCallout1':\n            if (shapType == 'accentBorderCallout1') {\n              isBorder = true\n            } else {\n              isBorder = false\n            }\n\n            if (shapAdjst_ary === undefined) {\n              adj1 = 18750 * refr\n              adj2 = -8333 * refr\n              adj3 = 112500 * refr\n              adj4 = -38333 * refr\n            }\n            var y1, x1, y2, x2\n            y1 = h * adj1 / cnstVal1\n            x1 = w * adj2 / cnstVal1\n            y2 = h * adj3 / cnstVal1\n            x2 = w * adj4 / cnstVal1\n            d_val = 'M' + 0 + ',' + 0 +\n              ' L' + w + ',' + 0 +\n              ' L' + w + ',' + h +\n              ' L' + 0 + ',' + h +\n              ' z' +\n\n              ' M' + x1 + ',' + y1 +\n              ' L' + x2 + ',' + y2 +\n\n              ' M' + x1 + ',' + 0 +\n              ' L' + x1 + ',' + h\n            break\n          case 'accentBorderCallout2':\n          case 'accentCallout2':\n            if (shapType == 'accentBorderCallout2') {\n              isBorder = true\n            } else {\n              isBorder = false\n            }\n            if (shapAdjst_ary === undefined) {\n              adj1 = 18750 * refr\n              adj2 = -8333 * refr\n              adj3 = 18750 * refr\n              adj4 = -16667 * refr\n              adj5 = 112500 * refr\n              adj6 = -46667 * refr\n            }\n            var y1, x1, y2, x2, y3, x3\n\n            y1 = h * adj1 / cnstVal1\n            x1 = w * adj2 / cnstVal1\n            y2 = h * adj3 / cnstVal1\n            x2 = w * adj4 / cnstVal1\n            y3 = h * adj5 / cnstVal1\n            x3 = w * adj6 / cnstVal1\n            d_val = 'M' + 0 + ',' + 0 +\n              ' L' + w + ',' + 0 +\n              ' L' + w + ',' + h +\n              ' L' + 0 + ',' + h +\n              ' z' +\n\n              ' M' + x1 + ',' + y1 +\n              ' L' + x2 + ',' + y2 +\n              ' L' + x3 + ',' + y3 +\n              ' L' + x2 + ',' + y2 +\n\n              ' M' + x1 + ',' + 0 +\n              ' L' + x1 + ',' + h\n\n            break\n          case 'accentBorderCallout3':\n          case 'accentCallout3':\n            if (shapType == 'accentBorderCallout3') {\n              isBorder = true\n            } else {\n              isBorder = false\n            }\n            isBorder = true\n            if (shapAdjst_ary === undefined) {\n              adj1 = 18750 * refr\n              adj2 = -8333 * refr\n              adj3 = 18750 * refr\n              adj4 = -16667 * refr\n              adj5 = 100000 * refr\n              adj6 = -16667 * refr\n              adj7 = 112963 * refr\n              adj8 = -8333 * refr\n            }\n            var y1, x1, y2, x2, y3, x3, y4, x4\n\n            y1 = h * adj1 / cnstVal1\n            x1 = w * adj2 / cnstVal1\n            y2 = h * adj3 / cnstVal1\n            x2 = w * adj4 / cnstVal1\n            y3 = h * adj5 / cnstVal1\n            x3 = w * adj6 / cnstVal1\n            y4 = h * adj7 / cnstVal1\n            x4 = w * adj8 / cnstVal1\n            d_val = 'M' + 0 + ',' + 0 +\n              ' L' + w + ',' + 0 +\n              ' L' + w + ',' + h +\n              ' L' + 0 + ',' + h +\n              ' z' +\n\n              ' M' + x1 + ',' + y1 +\n              ' L' + x2 + ',' + y2 +\n              ' L' + x3 + ',' + y3 +\n              ' L' + x4 + ',' + y4 +\n              ' L' + x3 + ',' + y3 +\n              ' L' + x2 + ',' + y2 +\n\n              ' M' + x1 + ',' + 0 +\n              ' L' + x1 + ',' + h\n            break\n        }\n\n        //console.log(\"shapType: \", shapType, \",isBorder:\", isBorder)\n        //if(isBorder){\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        //}else{\n        //    result += \"<path d='\"+d_val+\"' fill='\" + (!imgFillFlg?(grndFillFlg?\"url(#linGrd_\"+shpId+\")\":fillColor):\"url(#imgPtrn_\"+shpId+\")\") +\n        //        \"' stroke='none' />\";\n\n        //}\n        break\n      case 'leftRightRibbon':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var refr = slideFactor\n        var sAdj1, adj1 = 50000 * refr\n        var sAdj2, adj2 = 50000 * refr\n        var sAdj3, adj3 = 16667 * refr\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * refr\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * refr\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * refr\n            }\n          }\n        }\n        var d_val\n        var cnstVal1 = 33333 * refr\n        var cnstVal2 = 100000 * refr\n        var cnstVal3 = 200000 * refr\n        var cnstVal4 = 400000 * refr\n        var ss = Math.min(w, h)\n        var a3, maxAdj1, a1, w1, maxAdj2, a2, x1, x4, dy1, dy2, ly1, ry4, ly2, ry3, ly4, ry1,\n          ly3, ry2, hR, x2, x3, y1, y2, wd32 = w / 32, vc = h / 2, hc = w / 2\n\n        a3 = (adj3 < 0) ? 0 : (adj3 > cnstVal1) ? cnstVal1 : adj3\n        maxAdj1 = cnstVal2 - a3\n        a1 = (adj1 < 0) ? 0 : (adj1 > maxAdj1) ? maxAdj1 : adj1\n        w1 = hc - wd32\n        maxAdj2 = cnstVal2 * w1 / ss\n        a2 = (adj2 < 0) ? 0 : (adj2 > maxAdj2) ? maxAdj2 : adj2\n        x1 = ss * a2 / cnstVal2\n        x4 = w - x1\n        dy1 = h * a1 / cnstVal3\n        dy2 = h * a3 / -cnstVal3\n        ly1 = vc + dy2 - dy1\n        ry4 = vc + dy1 - dy2\n        ly2 = ly1 + dy1\n        ry3 = h - ly2\n        ly4 = ly2 * 2\n        ry1 = h - ly4\n        ly3 = ly4 - ly1\n        ry2 = h - ly3\n        hR = a3 * ss / cnstVal4\n        x2 = hc - wd32\n        x3 = hc + wd32\n        y1 = ly1 + hR\n        y2 = ry2 - hR\n\n        d_val = 'M' + 0 + ',' + ly2 +\n          'L' + x1 + ',' + 0 +\n          'L' + x1 + ',' + ly1 +\n          'L' + hc + ',' + ly1 +\n          shapeArc(hc, y1, wd32, hR, 270, 450, false).replace('M', 'L') +\n          shapeArc(hc, y2, wd32, hR, 270, 90, false).replace('M', 'L') +\n          'L' + x4 + ',' + ry2 +\n          'L' + x4 + ',' + ry1 +\n          'L' + w + ',' + ry3 +\n          'L' + x4 + ',' + h +\n          'L' + x4 + ',' + ry4 +\n          'L' + hc + ',' + ry4 +\n          shapeArc(hc, ry4 - hR, wd32, hR, 90, 180, false).replace('M', 'L') +\n          'L' + x2 + ',' + ly3 +\n          'L' + x1 + ',' + ly3 +\n          'L' + x1 + ',' + ly4 +\n          ' z' +\n          'M' + x3 + ',' + y1 +\n          'L' + x3 + ',' + ry2 +\n          'M' + x2 + ',' + y2 +\n          'L' + x2 + ',' + ly3\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'ribbon':\n      case 'ribbon2':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 16667 * slideFactor\n        var sAdj2, adj2 = 50000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            }\n          }\n        }\n        var d_val\n        var cnstVal1 = 25000 * slideFactor\n        var cnstVal2 = 33333 * slideFactor\n        var cnstVal3 = 75000 * slideFactor\n        var cnstVal4 = 100000 * slideFactor\n        var cnstVal5 = 200000 * slideFactor\n        var cnstVal6 = 400000 * slideFactor\n        var hc = w / 2, t = 0, l = 0, b = h, r = w, wd8 = w / 8, wd32 = w / 32\n        var a1, a2, x10, dx2, x2, x9, x3, x8, x5, x6, x4, x7, y1, y2, y4, y3, hR, y6\n        a1 = (adj1 < 0) ? 0 : (adj1 > cnstVal2) ? cnstVal2 : adj1\n        a2 = (adj2 < cnstVal1) ? cnstVal1 : (adj2 > cnstVal3) ? cnstVal3 : adj2\n        x10 = r - wd8\n        dx2 = w * a2 / cnstVal5\n        x2 = hc - dx2\n        x9 = hc + dx2\n        x3 = x2 + wd32\n        x8 = x9 - wd32\n        x5 = x2 + wd8\n        x6 = x9 - wd8\n        x4 = x5 - wd32\n        x7 = x6 + wd32\n        hR = h * a1 / cnstVal6\n        if (shapType == 'ribbon2') {\n          var dy1, dy2, y7\n          dy1 = h * a1 / cnstVal5\n          y1 = b - dy1\n          dy2 = h * a1 / cnstVal4\n          y2 = b - dy2\n          y4 = t + dy2\n          y3 = (y4 + b) / 2\n          y6 = b - hR///////////////////\n          y7 = y1 - hR\n\n          d_val = 'M' + l + ',' + b +\n            ' L' + wd8 + ',' + y3 +\n            ' L' + l + ',' + y4 +\n            ' L' + x2 + ',' + y4 +\n            ' L' + x2 + ',' + hR +\n            shapeArc(x3, hR, wd32, hR, 180, 270, false).replace('M', 'L') +\n            ' L' + x8 + ',' + t +\n            shapeArc(x8, hR, wd32, hR, 270, 360, false).replace('M', 'L') +\n            ' L' + x9 + ',' + y4 +\n            ' L' + x9 + ',' + y4 +\n            ' L' + r + ',' + y4 +\n            ' L' + x10 + ',' + y3 +\n            ' L' + r + ',' + b +\n            ' L' + x7 + ',' + b +\n            shapeArc(x7, y6, wd32, hR, 90, 270, false).replace('M', 'L') +\n            ' L' + x8 + ',' + y1 +\n            shapeArc(x8, y7, wd32, hR, 90, -90, false).replace('M', 'L') +\n            ' L' + x3 + ',' + y2 +\n            shapeArc(x3, y7, wd32, hR, 270, 90, false).replace('M', 'L') +\n            ' L' + x4 + ',' + y1 +\n            shapeArc(x4, y6, wd32, hR, 270, 450, false).replace('M', 'L') +\n            ' z' +\n            ' M' + x5 + ',' + y2 +\n            ' L' + x5 + ',' + y6 +\n            'M' + x6 + ',' + y6 +\n            ' L' + x6 + ',' + y2 +\n            'M' + x2 + ',' + y7 +\n            ' L' + x2 + ',' + y4 +\n            'M' + x9 + ',' + y4 +\n            ' L' + x9 + ',' + y7\n        } else if (shapType == 'ribbon') {\n          var y5\n          y1 = h * a1 / cnstVal5\n          y2 = h * a1 / cnstVal4\n          y4 = b - y2\n          y3 = y4 / 2\n          y5 = b - hR ///////////////////////\n          y6 = y2 - hR\n          d_val = 'M' + l + ',' + t +\n            ' L' + x4 + ',' + t +\n            shapeArc(x4, hR, wd32, hR, 270, 450, false).replace('M', 'L') +\n            ' L' + x3 + ',' + y1 +\n            shapeArc(x3, y6, wd32, hR, 270, 90, false).replace('M', 'L') +\n            ' L' + x8 + ',' + y2 +\n            shapeArc(x8, y6, wd32, hR, 90, -90, false).replace('M', 'L') +\n            ' L' + x7 + ',' + y1 +\n            shapeArc(x7, hR, wd32, hR, 90, 270, false).replace('M', 'L') +\n            ' L' + r + ',' + t +\n            ' L' + x10 + ',' + y3 +\n            ' L' + r + ',' + y4 +\n            ' L' + x9 + ',' + y4 +\n            ' L' + x9 + ',' + y5 +\n            shapeArc(x8, y5, wd32, hR, 0, 90, false).replace('M', 'L') +\n            ' L' + x3 + ',' + b +\n            shapeArc(x3, y5, wd32, hR, 90, 180, false).replace('M', 'L') +\n            ' L' + x2 + ',' + y4 +\n            ' L' + l + ',' + y4 +\n            ' L' + wd8 + ',' + y3 +\n            ' z' +\n            ' M' + x5 + ',' + hR +\n            ' L' + x5 + ',' + y2 +\n            'M' + x6 + ',' + y2 +\n            ' L' + x6 + ',' + hR +\n            'M' + x2 + ',' + y4 +\n            ' L' + x2 + ',' + y6 +\n            'M' + x9 + ',' + y6 +\n            ' L' + x9 + ',' + y4\n        }\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'doubleWave':\n      case 'wave':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = (shapType == 'doubleWave') ? 6250 * slideFactor : 12500 * slideFactor\n        var sAdj2, adj2 = 0\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            }\n          }\n        }\n        var d_val\n        var cnstVal2 = -10000 * slideFactor\n        var cnstVal3 = 50000 * slideFactor\n        var cnstVal4 = 100000 * slideFactor\n        var hc = w / 2, t = 0, l = 0, b = h, r = w, wd8 = w / 8, wd32 = w / 32\n        if (shapType == 'doubleWave') {\n          var cnstVal1 = 12500 * slideFactor\n          var a1, a2, y1, dy2, y2, y3, y4, y5, y6, of2, dx2, x2, dx8, x8, dx3, x3, dx4, x4, x5, x6, x7, x9, x15, x10,\n            x11, x12, x13, x14\n          a1 = (adj1 < 0) ? 0 : (adj1 > cnstVal1) ? cnstVal1 : adj1\n          a2 = (adj2 < cnstVal2) ? cnstVal2 : (adj2 > cnstVal4) ? cnstVal4 : adj2\n          y1 = h * a1 / cnstVal4\n          dy2 = y1 * 10 / 3\n          y2 = y1 - dy2\n          y3 = y1 + dy2\n          y4 = b - y1\n          y5 = y4 - dy2\n          y6 = y4 + dy2\n          of2 = w * a2 / cnstVal3\n          dx2 = (of2 > 0) ? 0 : of2\n          x2 = l - dx2\n          dx8 = (of2 > 0) ? of2 : 0\n          x8 = r - dx8\n          dx3 = (dx2 + x8) / 6\n          x3 = x2 + dx3\n          dx4 = (dx2 + x8) / 3\n          x4 = x2 + dx4\n          x5 = (x2 + x8) / 2\n          x6 = x5 + dx3\n          x7 = (x6 + x8) / 2\n          x9 = l + dx8\n          x15 = r + dx2\n          x10 = x9 + dx3\n          x11 = x9 + dx4\n          x12 = (x9 + x15) / 2\n          x13 = x12 + dx3\n          x14 = (x13 + x15) / 2\n\n          d_val = 'M' + x2 + ',' + y1 +\n            ' C' + x3 + ',' + y2 + ' ' + x4 + ',' + y3 + ' ' + x5 + ',' + y1 +\n            ' C' + x6 + ',' + y2 + ' ' + x7 + ',' + y3 + ' ' + x8 + ',' + y1 +\n            ' L' + x15 + ',' + y4 +\n            ' C' + x14 + ',' + y6 + ' ' + x13 + ',' + y5 + ' ' + x12 + ',' + y4 +\n            ' C' + x11 + ',' + y6 + ' ' + x10 + ',' + y5 + ' ' + x9 + ',' + y4 +\n            ' z'\n        } else if (shapType == 'wave') {\n          var cnstVal5 = 20000 * slideFactor\n          var a1, a2, y1, dy2, y2, y3, y4, y5, y6, of2, dx2, x2, dx5, x5, dx3, x3, x4, x6, x10, x7, x8\n          a1 = (adj1 < 0) ? 0 : (adj1 > cnstVal5) ? cnstVal5 : adj1\n          a2 = (adj2 < cnstVal2) ? cnstVal2 : (adj2 > cnstVal4) ? cnstVal4 : adj2\n          y1 = h * a1 / cnstVal4\n          dy2 = y1 * 10 / 3\n          y2 = y1 - dy2\n          y3 = y1 + dy2\n          y4 = b - y1\n          y5 = y4 - dy2\n          y6 = y4 + dy2\n          of2 = w * a2 / cnstVal3\n          dx2 = (of2 > 0) ? 0 : of2\n          x2 = l - dx2\n          dx5 = (of2 > 0) ? of2 : 0\n          x5 = r - dx5\n          dx3 = (dx2 + x5) / 3\n          x3 = x2 + dx3\n          x4 = (x3 + x5) / 2\n          x6 = l + dx5\n          x10 = r + dx2\n          x7 = x6 + dx3\n          x8 = (x7 + x10) / 2\n\n          d_val = 'M' + x2 + ',' + y1 +\n            ' C' + x3 + ',' + y2 + ' ' + x4 + ',' + y3 + ' ' + x5 + ',' + y1 +\n            ' L' + x10 + ',' + y4 +\n            ' C' + x8 + ',' + y6 + ' ' + x7 + ',' + y5 + ' ' + x6 + ',' + y4 +\n            ' z'\n        }\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'ellipseRibbon':\n      case 'ellipseRibbon2':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 25000 * slideFactor\n        var sAdj2, adj2 = 50000 * slideFactor\n        var sAdj3, adj3 = 12500 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            }\n          }\n        }\n        var d_val\n        var cnstVal1 = 25000 * slideFactor\n        var cnstVal3 = 75000 * slideFactor\n        var cnstVal4 = 100000 * slideFactor\n        var cnstVal5 = 200000 * slideFactor\n        var hc = w / 2, t = 0, l = 0, b = h, r = w, wd8 = w / 8\n        var a1, a2, q10, q11, q12, minAdj3, a3, dx2, x2, x3, x4, x5, x6, dy1, f1, q1, q2,\n          cx1, cx2, q1, dy3, q3, q4, q5, rh, q8, cx4, q9, cx5\n        a1 = (adj1 < 0) ? 0 : (adj1 > cnstVal4) ? cnstVal4 : adj1\n        a2 = (adj2 < cnstVal1) ? cnstVal1 : (adj2 > cnstVal3) ? cnstVal3 : adj2\n        q10 = cnstVal4 - a1\n        q11 = q10 / 2\n        q12 = a1 - q11\n        minAdj3 = (0 > q12) ? 0 : q12\n        a3 = (adj3 < minAdj3) ? minAdj3 : (adj3 > a1) ? a1 : adj3\n        dx2 = w * a2 / cnstVal5\n        x2 = hc - dx2\n        x3 = x2 + wd8\n        x4 = r - x3\n        x5 = r - x2\n        x6 = r - wd8\n        dy1 = h * a3 / cnstVal4\n        f1 = 4 * dy1 / w\n        q1 = x3 * x3 / w\n        q2 = x3 - q1\n        cx1 = x3 / 2\n        cx2 = r - cx1\n        q1 = h * a1 / cnstVal4\n        dy3 = q1 - dy1\n        q3 = x2 * x2 / w\n        q4 = x2 - q3\n        q5 = f1 * q4\n        rh = b - q1\n        q8 = dy1 * 14 / 16\n        cx4 = x2 / 2\n        q9 = f1 * cx4\n        cx5 = r - cx4\n        if (shapType == 'ellipseRibbon') {\n          var y1, cy1, y3, q6, q7, cy3, y2, y5, y6,\n            cy4, cy6, y7, cy7, y8\n          y1 = f1 * q2\n          cy1 = f1 * cx1\n          y3 = q5 + dy3\n          q6 = dy1 + dy3 - y3\n          q7 = q6 + dy1\n          cy3 = q7 + dy3\n          y2 = (q8 + rh) / 2\n          y5 = q5 + rh\n          y6 = y3 + rh\n          cy4 = q9 + rh\n          cy6 = cy3 + rh\n          y7 = y1 + dy3\n          cy7 = q1 + q1 - y7\n          y8 = b - dy1\n          //\n          d_val = 'M' + l + ',' + t +\n            ' Q' + cx1 + ',' + cy1 + ' ' + x3 + ',' + y1 +\n            ' L' + x2 + ',' + y3 +\n            ' Q' + hc + ',' + cy3 + ' ' + x5 + ',' + y3 +\n            ' L' + x4 + ',' + y1 +\n            ' Q' + cx2 + ',' + cy1 + ' ' + r + ',' + t +\n            ' L' + x6 + ',' + y2 +\n            ' L' + r + ',' + rh +\n            ' Q' + cx5 + ',' + cy4 + ' ' + x5 + ',' + y5 +\n            ' L' + x5 + ',' + y6 +\n            ' Q' + hc + ',' + cy6 + ' ' + x2 + ',' + y6 +\n            ' L' + x2 + ',' + y5 +\n            ' Q' + cx4 + ',' + cy4 + ' ' + l + ',' + rh +\n            ' L' + wd8 + ',' + y2 +\n            ' z' +\n            'M' + x2 + ',' + y5 +\n            ' L' + x2 + ',' + y3 +\n            'M' + x5 + ',' + y3 +\n            ' L' + x5 + ',' + y5 +\n            'M' + x3 + ',' + y1 +\n            ' L' + x3 + ',' + y7 +\n            'M' + x4 + ',' + y7 +\n            ' L' + x4 + ',' + y1\n        } else if (shapType == 'ellipseRibbon2') {\n          var u1, y1, cu1, cy1, q3, q5, u3, y3, q6, q7, cu3, cy3, rh, q8, u2, y2,\n            u5, y5, u6, y6, cu4, cy4, cu6, cy6, u7, y7, cu7, cy7\n          u1 = f1 * q2\n          y1 = b - u1\n          cu1 = f1 * cx1\n          cy1 = b - cu1\n          u3 = q5 + dy3\n          y3 = b - u3\n          q6 = dy1 + dy3 - u3\n          q7 = q6 + dy1\n          cu3 = q7 + dy3\n          cy3 = b - cu3\n          u2 = (q8 + rh) / 2\n          y2 = b - u2\n          u5 = q5 + rh\n          y5 = b - u5\n          u6 = u3 + rh\n          y6 = b - u6\n          cu4 = q9 + rh\n          cy4 = b - cu4\n          cu6 = cu3 + rh\n          cy6 = b - cu6\n          u7 = u1 + dy3\n          y7 = b - u7\n          cu7 = q1 + q1 - u7\n          cy7 = b - cu7\n          //\n          d_val = 'M' + l + ',' + b +\n            ' L' + wd8 + ',' + y2 +\n            ' L' + l + ',' + q1 +\n            ' Q' + cx4 + ',' + cy4 + ' ' + x2 + ',' + y5 +\n            ' L' + x2 + ',' + y6 +\n            ' Q' + hc + ',' + cy6 + ' ' + x5 + ',' + y6 +\n            ' L' + x5 + ',' + y5 +\n            ' Q' + cx5 + ',' + cy4 + ' ' + r + ',' + q1 +\n            ' L' + x6 + ',' + y2 +\n            ' L' + r + ',' + b +\n            ' Q' + cx2 + ',' + cy1 + ' ' + x4 + ',' + y1 +\n            ' L' + x5 + ',' + y3 +\n            ' Q' + hc + ',' + cy3 + ' ' + x2 + ',' + y3 +\n            ' L' + x3 + ',' + y1 +\n            ' Q' + cx1 + ',' + cy1 + ' ' + l + ',' + b +\n            ' z' +\n            'M' + x2 + ',' + y3 +\n            ' L' + x2 + ',' + y5 +\n            'M' + x5 + ',' + y5 +\n            ' L' + x5 + ',' + y3 +\n            'M' + x3 + ',' + y7 +\n            ' L' + x3 + ',' + y1 +\n            'M' + x4 + ',' + y1 +\n            ' L' + x4 + ',' + y7\n        }\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'line':\n      case 'straightConnector1':\n      case 'bentConnector4':\n      case 'bentConnector5':\n      case 'curvedConnector2':\n      case 'curvedConnector3':\n      case 'curvedConnector4':\n      case 'curvedConnector5':\n        // if (isFlipV) {\n        //     result += \"<line x1='\" + w + \"' y1='0' x2='0' y2='\" + h + \"' stroke='\" + border.color +\n        //         \"' stroke-width='\" + border.width + \"' stroke-dasharray='\" + border.strokeDasharray + \"' \";\n        // } else {\n        result += '<line x1=\\'0\\' y1=\\'0\\' x2=\\'' + w + '\\' y2=\\'' + h + '\\' stroke=\\'' + border.color +\n          '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' '\n        //}\n        if (headEndNodeAttrs !== undefined && (headEndNodeAttrs['type'] === 'triangle' || headEndNodeAttrs['type'] === 'arrow')) {\n          result += 'marker-start=\\'url(#markerTriangle_' + shpId + ')\\' '\n        }\n        if (tailEndNodeAttrs !== undefined && (tailEndNodeAttrs['type'] === 'triangle' || tailEndNodeAttrs['type'] === 'arrow')) {\n          result += 'marker-end=\\'url(#markerTriangle_' + shpId + ')\\' '\n        }\n        result += '/>'\n        break\n      case 'rightArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, sAdj1_val = 0.25//0.5;\n        var sAdj2, sAdj2_val = 0.5\n        var max_sAdj2_const = w / h\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              sAdj1_val = 0.5 - (parseInt(sAdj1.substr(4)) / 200000)\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              var sAdj2_val2 = parseInt(sAdj2.substr(4)) / 100000\n              sAdj2_val = 1 - ((sAdj2_val2) / max_sAdj2_const)\n            }\n          }\n        }\n        //console.log(\"w: \"+w+\"\\nh: \"+h+\"\\nsAdj1: \"+sAdj1_val+\"\\nsAdj2: \"+sAdj2_val);\n\n        result += ' <polygon points=\\'' + w + ' ' + h / 2 + ',' + sAdj2_val * w + ' 0,' + sAdj2_val * w + ' ' + sAdj1_val * h + ',0 ' + sAdj1_val * h +\n          ',0 ' + (1 - sAdj1_val) * h + ',' + sAdj2_val * w + ' ' + (1 - sAdj1_val) * h + ', ' + sAdj2_val * w + ' ' + h + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'leftArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, sAdj1_val = 0.25//0.5;\n        var sAdj2, sAdj2_val = 0.5\n        var max_sAdj2_const = w / h\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              sAdj1_val = 0.5 - (parseInt(sAdj1.substr(4)) / 200000)\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              var sAdj2_val2 = parseInt(sAdj2.substr(4)) / 100000\n              sAdj2_val = (sAdj2_val2) / max_sAdj2_const\n            }\n          }\n        }\n        //console.log(\"w: \"+w+\"\\nh: \"+h+\"\\nsAdj1: \"+sAdj1_val+\"\\nsAdj2: \"+sAdj2_val);\n\n        result += ' <polygon points=\\'0 ' + h / 2 + ',' + sAdj2_val * w + ' ' + h + ',' + sAdj2_val * w + ' ' + (1 - sAdj1_val) * h + ',' + w + ' ' + (1 - sAdj1_val) * h +\n          ',' + w + ' ' + sAdj1_val * h + ',' + sAdj2_val * w + ' ' + sAdj1_val * h + ', ' + sAdj2_val * w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'downArrow':\n      case 'flowChartOffpageConnector':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, sAdj1_val = 0.25//0.5;\n        var sAdj2, sAdj2_val = 0.5\n        var max_sAdj2_const = h / w\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              sAdj1_val = parseInt(sAdj1.substr(4)) / 200000\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              var sAdj2_val2 = parseInt(sAdj2.substr(4)) / 100000\n              sAdj2_val = (sAdj2_val2) / max_sAdj2_const\n            }\n          }\n        }\n\n        if (shapType == 'flowChartOffpageConnector') {\n          sAdj1_val = 0.5\n          sAdj2_val = 0.212\n        }\n        result += ' <polygon points=\\'' + (0.5 - sAdj1_val) * w + ' 0,' + (0.5 - sAdj1_val) * w + ' ' + (1 - sAdj2_val) * h + ',0 ' + (1 - sAdj2_val) * h + ',' + (w / 2) + ' ' + h +\n          ',' + w + ' ' + (1 - sAdj2_val) * h + ',' + (0.5 + sAdj1_val) * w + ' ' + (1 - sAdj2_val) * h + ', ' + (0.5 + sAdj1_val) * w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'upArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, sAdj1_val = 0.25//0.5;\n        var sAdj2, sAdj2_val = 0.5\n        var max_sAdj2_const = h / w\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              sAdj1_val = parseInt(sAdj1.substr(4)) / 200000\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              var sAdj2_val2 = parseInt(sAdj2.substr(4)) / 100000\n              sAdj2_val = (sAdj2_val2) / max_sAdj2_const\n            }\n          }\n        }\n        result += ' <polygon points=\\'' + (w / 2) + ' 0,0 ' + sAdj2_val * h + ',' + (0.5 - sAdj1_val) * w + ' ' + sAdj2_val * h + ',' + (0.5 - sAdj1_val) * w + ' ' + h +\n          ',' + (0.5 + sAdj1_val) * w + ' ' + h + ',' + (0.5 + sAdj1_val) * w + ' ' + sAdj2_val * h + ', ' + w + ' ' + sAdj2_val * h + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'leftRightArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, sAdj1_val = 0.25\n        var sAdj2, sAdj2_val = 0.25\n        var max_sAdj2_const = w / h\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              sAdj1_val = 0.5 - (parseInt(sAdj1.substr(4)) / 200000)\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              var sAdj2_val2 = parseInt(sAdj2.substr(4)) / 100000\n              sAdj2_val = (sAdj2_val2) / max_sAdj2_const\n            }\n          }\n        }\n        //console.log(\"w: \"+w+\"\\nh: \"+h+\"\\nsAdj1: \"+sAdj1_val+\"\\nsAdj2: \"+sAdj2_val);\n\n        result += ' <polygon points=\\'0 ' + h / 2 + ',' + sAdj2_val * w + ' ' + h + ',' + sAdj2_val * w + ' ' + (1 - sAdj1_val) * h + ',' + (1 - sAdj2_val) * w + ' ' + (1 - sAdj1_val) * h +\n          ',' + (1 - sAdj2_val) * w + ' ' + h + ',' + w + ' ' + h / 2 + ', ' + (1 - sAdj2_val) * w + ' 0,' + (1 - sAdj2_val) * w + ' ' + sAdj1_val * h + ',' +\n          sAdj2_val * w + ' ' + sAdj1_val * h + ',' + sAdj2_val * w + ' 0\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'upDownArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, sAdj1_val = 0.25\n        var sAdj2, sAdj2_val = 0.25\n        var max_sAdj2_const = h / w\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              sAdj1_val = 0.5 - (parseInt(sAdj1.substr(4)) / 200000)\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              var sAdj2_val2 = parseInt(sAdj2.substr(4)) / 100000\n              sAdj2_val = (sAdj2_val2) / max_sAdj2_const\n            }\n          }\n        }\n        //console.log(\"w: \"+w+\"\\nh: \"+h+\"\\nsAdj1: \"+sAdj1_val+\"\\nsAdj2: \"+sAdj2_val);\n\n        result += ' <polygon points=\\'' + w / 2 + ' 0,0 ' + sAdj2_val * h + ',' + sAdj1_val * w + ' ' + sAdj2_val * h + ',' + sAdj1_val * w + ' ' + (1 - sAdj2_val) * h +\n          ',0 ' + (1 - sAdj2_val) * h + ',' + w / 2 + ' ' + h + ', ' + w + ' ' + (1 - sAdj2_val) * h + ',' + (1 - sAdj1_val) * w + ' ' + (1 - sAdj2_val) * h + ',' +\n          (1 - sAdj1_val) * w + ' ' + sAdj2_val * h + ',' + w + ' ' + sAdj2_val * h + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n        break\n      case 'quadArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 22500 * slideFactor\n        var sAdj2, adj2 = 22500 * slideFactor\n        var sAdj3, adj3 = 22500 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        var cnstVal3 = 200000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            }\n          }\n        }\n        var vc = h / 2, hc = w / 2, a1, a2, a3, q1, x1, x2, dx2, x3, dx3, x4, x5, x6, y2, y3, y4, y5, y6, maxAdj1,\n          maxAdj3\n        var minWH = Math.min(w, h)\n        if (adj2 < 0) a2 = 0\n        else if (adj2 > cnstVal1) a2 = cnstVal1\n        else a2 = adj2\n        maxAdj1 = 2 * a2\n        if (adj1 < 0) a1 = 0\n        else if (adj1 > maxAdj1) a1 = maxAdj1\n        else a1 = adj1\n        q1 = cnstVal2 - maxAdj1\n        maxAdj3 = q1 / 2\n        if (adj3 < 0) a3 = 0\n        else if (adj3 > maxAdj3) a3 = maxAdj3\n        else a3 = adj3\n        x1 = minWH * a3 / cnstVal2\n        dx2 = minWH * a2 / cnstVal2\n        x2 = hc - dx2\n        x5 = hc + dx2\n        dx3 = minWH * a1 / cnstVal3\n        x3 = hc - dx3\n        x4 = hc + dx3\n        x6 = w - x1\n        y2 = vc - dx2\n        y5 = vc + dx2\n        y3 = vc - dx3\n        y4 = vc + dx3\n        y6 = h - x1\n        var d_val = 'M' + 0 + ',' + vc +\n          ' L' + x1 + ',' + y2 +\n          ' L' + x1 + ',' + y3 +\n          ' L' + x3 + ',' + y3 +\n          ' L' + x3 + ',' + x1 +\n          ' L' + x2 + ',' + x1 +\n          ' L' + hc + ',' + 0 +\n          ' L' + x5 + ',' + x1 +\n          ' L' + x4 + ',' + x1 +\n          ' L' + x4 + ',' + y3 +\n          ' L' + x6 + ',' + y3 +\n          ' L' + x6 + ',' + y2 +\n          ' L' + w + ',' + vc +\n          ' L' + x6 + ',' + y5 +\n          ' L' + x6 + ',' + y4 +\n          ' L' + x4 + ',' + y4 +\n          ' L' + x4 + ',' + y6 +\n          ' L' + x5 + ',' + y6 +\n          ' L' + hc + ',' + h +\n          ' L' + x2 + ',' + y6 +\n          ' L' + x3 + ',' + y6 +\n          ' L' + x3 + ',' + y4 +\n          ' L' + x1 + ',' + y4 +\n          ' L' + x1 + ',' + y5 + ' z'\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'leftRightUpArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 25000 * slideFactor\n        var sAdj2, adj2 = 25000 * slideFactor\n        var sAdj3, adj3 = 25000 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        var cnstVal3 = 200000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            }\n          }\n        }\n        var vc = h / 2, hc = w / 2, a1, a2, a3, q1, x1, x2, dx2, x3, dx3, x4, x5, x6, y2, dy2, y3, y4, y5, maxAdj1,\n          maxAdj3\n        var minWH = Math.min(w, h)\n        if (adj2 < 0) a2 = 0\n        else if (adj2 > cnstVal1) a2 = cnstVal1\n        else a2 = adj2\n        maxAdj1 = 2 * a2\n        if (adj1 < 0) a1 = 0\n        else if (adj1 > maxAdj1) a1 = maxAdj1\n        else a1 = adj1\n        q1 = cnstVal2 - maxAdj1\n        maxAdj3 = q1 / 2\n        if (adj3 < 0) a3 = 0\n        else if (adj3 > maxAdj3) a3 = maxAdj3\n        else a3 = adj3\n        x1 = minWH * a3 / cnstVal2\n        dx2 = minWH * a2 / cnstVal2\n        x2 = hc - dx2\n        x5 = hc + dx2\n        dx3 = minWH * a1 / cnstVal3\n        x3 = hc - dx3\n        x4 = hc + dx3\n        x6 = w - x1\n        dy2 = minWH * a2 / cnstVal1\n        y2 = h - dy2\n        y4 = h - dx2\n        y3 = y4 - dx3\n        y5 = y4 + dx3\n        var d_val = 'M' + 0 + ',' + y4 +\n          ' L' + x1 + ',' + y2 +\n          ' L' + x1 + ',' + y3 +\n          ' L' + x3 + ',' + y3 +\n          ' L' + x3 + ',' + x1 +\n          ' L' + x2 + ',' + x1 +\n          ' L' + hc + ',' + 0 +\n          ' L' + x5 + ',' + x1 +\n          ' L' + x4 + ',' + x1 +\n          ' L' + x4 + ',' + y3 +\n          ' L' + x6 + ',' + y3 +\n          ' L' + x6 + ',' + y2 +\n          ' L' + w + ',' + y4 +\n          ' L' + x6 + ',' + h +\n          ' L' + x6 + ',' + y5 +\n          ' L' + x1 + ',' + y5 +\n          ' L' + x1 + ',' + h + ' z'\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'leftUpArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 25000 * slideFactor\n        var sAdj2, adj2 = 25000 * slideFactor\n        var sAdj3, adj3 = 25000 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        var cnstVal3 = 200000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            }\n          }\n        }\n        var vc = h / 2, hc = w / 2, a1, a2, a3, x1, x2, dx4, dx3, x3, x4, x5, y2, y3, y4, y5, maxAdj1, maxAdj3\n        var minWH = Math.min(w, h)\n        if (adj2 < 0) a2 = 0\n        else if (adj2 > cnstVal1) a2 = cnstVal1\n        else a2 = adj2\n        maxAdj1 = 2 * a2\n        if (adj1 < 0) a1 = 0\n        else if (adj1 > maxAdj1) a1 = maxAdj1\n        else a1 = adj1\n        maxAdj3 = cnstVal2 - maxAdj1\n        if (adj3 < 0) a3 = 0\n        else if (adj3 > maxAdj3) a3 = maxAdj3\n        else a3 = adj3\n        x1 = minWH * a3 / cnstVal2\n        dx2 = minWH * a2 / cnstVal1\n        x2 = w - dx2\n        y2 = h - dx2\n        dx4 = minWH * a2 / cnstVal2\n        x4 = w - dx4\n        y4 = h - dx4\n        dx3 = minWH * a1 / cnstVal3\n        x3 = x4 - dx3\n        x5 = x4 + dx3\n        y3 = y4 - dx3\n        y5 = y4 + dx3\n        var d_val = 'M' + 0 + ',' + y4 +\n          ' L' + x1 + ',' + y2 +\n          ' L' + x1 + ',' + y3 +\n          ' L' + x3 + ',' + y3 +\n          ' L' + x3 + ',' + x1 +\n          ' L' + x2 + ',' + x1 +\n          ' L' + x4 + ',' + 0 +\n          ' L' + w + ',' + x1 +\n          ' L' + x5 + ',' + x1 +\n          ' L' + x5 + ',' + y5 +\n          ' L' + x1 + ',' + y5 +\n          ' L' + x1 + ',' + h + ' z'\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'bentUpArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 25000 * slideFactor\n        var sAdj2, adj2 = 25000 * slideFactor\n        var sAdj3, adj3 = 25000 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        var cnstVal3 = 200000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            }\n          }\n        }\n        var vc = h / 2, hc = w / 2, a1, a2, a3, dx1, x1, dx2, x2, dx3, x3, x4, y1, y2, dy2\n        var minWH = Math.min(w, h)\n        if (adj1 < 0) a1 = 0\n        else if (adj1 > cnstVal1) a1 = cnstVal1\n        else a1 = adj1\n        if (adj2 < 0) a2 = 0\n        else if (adj2 > cnstVal1) a2 = cnstVal1\n        else a2 = adj2\n        if (adj3 < 0) a3 = 0\n        else if (adj3 > maxAdj3) a3 = maxAdj3\n        else a3 = adj3\n        y1 = minWH * a3 / cnstVal2\n        dx1 = minWH * a2 / cnstVal1\n        x1 = w - dx1\n        dx3 = minWH * a2 / cnstVal2\n        x3 = w - dx3\n        dx2 = minWH * a1 / cnstVal3\n        x2 = x3 - dx2\n        x4 = x3 + dx2\n        dy2 = minWH * a1 / cnstVal2\n        y2 = h - dy2\n        var d_val = 'M' + 0 + ',' + y2 +\n          ' L' + x2 + ',' + y2 +\n          ' L' + x2 + ',' + y1 +\n          ' L' + x1 + ',' + y1 +\n          ' L' + x3 + ',' + 0 +\n          ' L' + w + ',' + y1 +\n          ' L' + x4 + ',' + y1 +\n          ' L' + x4 + ',' + h +\n          ' L' + 0 + ',' + h + ' z'\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'bentArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 25000 * slideFactor\n        var sAdj2, adj2 = 25000 * slideFactor\n        var sAdj3, adj3 = 25000 * slideFactor\n        var sAdj4, adj4 = 43750 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj4') {\n              sAdj4 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj4 = parseInt(sAdj4.substr(4)) * slideFactor\n            }\n          }\n        }\n        var a1, a2, a3, a4, x3, x4, y3, y4, y5, y6, maxAdj1, maxAdj4\n        var minWH = Math.min(w, h)\n        if (adj2 < 0) a2 = 0\n        else if (adj2 > cnstVal1) a2 = cnstVal1\n        else a2 = adj2\n        maxAdj1 = 2 * a2\n        if (adj1 < 0) a1 = 0\n        else if (adj1 > maxAdj1) a1 = maxAdj1\n        else a1 = adj1\n        if (adj3 < 0) a3 = 0\n        else if (adj3 > cnstVal1) a3 = cnstVal1\n        else a3 = adj3\n        var th, aw2, th2, dh2, ah, bw, bh, bs, bd, bd3, bd2,\n          th = minWH * a1 / cnstVal2\n        aw2 = minWH * a2 / cnstVal2\n        th2 = th / 2\n        dh2 = aw2 - th2\n        ah = minWH * a3 / cnstVal2\n        bw = w - ah\n        bh = h - dh2\n        bs = (bw < bh) ? bw : bh\n        maxAdj4 = cnstVal2 * bs / minWH\n        if (adj4 < 0) a4 = 0\n        else if (adj4 > maxAdj4) a4 = maxAdj4\n        else a4 = adj4\n        bd = minWH * a4 / cnstVal2\n        bd3 = bd - th\n        bd2 = (bd3 > 0) ? bd3 : 0\n        x3 = th + bd2\n        x4 = w - ah\n        y3 = dh2 + th\n        y4 = y3 + dh2\n        y5 = dh2 + bd\n        y6 = y3 + bd2\n\n        var d_val = 'M' + 0 + ',' + h +\n          ' L' + 0 + ',' + y5 +\n          shapeArc(bd, y5, bd, bd, 180, 270, false).replace('M', 'L') +\n          ' L' + x4 + ',' + dh2 +\n          ' L' + x4 + ',' + 0 +\n          ' L' + w + ',' + aw2 +\n          ' L' + x4 + ',' + y4 +\n          ' L' + x4 + ',' + y3 +\n          ' L' + x3 + ',' + y3 +\n          shapeArc(x3, y6, bd2, bd2, 270, 180, false).replace('M', 'L') +\n          ' L' + th + ',' + h + ' z'\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'uturnArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 25000 * slideFactor\n        var sAdj2, adj2 = 25000 * slideFactor\n        var sAdj3, adj3 = 25000 * slideFactor\n        var sAdj4, adj4 = 43750 * slideFactor\n        var sAdj5, adj5 = 75000 * slideFactor\n        var cnstVal1 = 25000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj4') {\n              sAdj4 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj4 = parseInt(sAdj4.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj5') {\n              sAdj5 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj5 = parseInt(sAdj5.substr(4)) * slideFactor\n            }\n          }\n        }\n        var a1, a2, a3, a4, a5, q1, q2, q3, x3, x4, x5, x6, x7, x8, x9, y4, y5, minAdj5, maxAdj1, maxAdj3, maxAdj4\n        var minWH = Math.min(w, h)\n        if (adj2 < 0) a2 = 0\n        else if (adj2 > cnstVal1) a2 = cnstVal1\n        else a2 = adj2\n        maxAdj1 = 2 * a2\n        if (adj1 < 0) a1 = 0\n        else if (adj1 > maxAdj1) a1 = maxAdj1\n        else a1 = adj1\n        q2 = a1 * minWH / h\n        q3 = cnstVal2 - q2\n        maxAdj3 = q3 * h / minWH\n        if (adj3 < 0) a3 = 0\n        else if (adj3 > maxAdj3) a3 = maxAdj3\n        else a3 = adj3\n        q1 = a3 + a1\n        minAdj5 = q1 * minWH / h\n        if (adj5 < minAdj5) a5 = minAdj5\n        else if (adj5 > cnstVal2) a5 = cnstVal2\n        else a5 = adj5\n\n        var th, aw2, th2, dh2, ah, bw, bs, bd, bd3, bd2,\n          th = minWH * a1 / cnstVal2\n        aw2 = minWH * a2 / cnstVal2\n        th2 = th / 2\n        dh2 = aw2 - th2\n        y5 = h * a5 / cnstVal2\n        ah = minWH * a3 / cnstVal2\n        y4 = y5 - ah\n        x9 = w - dh2\n        bw = x9 / 2\n        bs = (bw < y4) ? bw : y4\n        maxAdj4 = cnstVal2 * bs / minWH\n        if (adj4 < 0) a4 = 0\n        else if (adj4 > maxAdj4) a4 = maxAdj4\n        else a4 = adj4\n        bd = minWH * a4 / cnstVal2\n        bd3 = bd - th\n        bd2 = (bd3 > 0) ? bd3 : 0\n        x3 = th + bd2\n        x8 = w - aw2\n        x6 = x8 - aw2\n        x7 = x6 + dh2\n        x4 = x9 - bd\n        x5 = x7 - bd2\n        const cx = (th + x7) / 2\n        const cy = (y4 + th) / 2\n        var d_val = 'M' + 0 + ',' + h +\n          ' L' + 0 + ',' + bd +\n          shapeArc(bd, bd, bd, bd, 180, 270, false).replace('M', 'L') +\n          ' L' + x4 + ',' + 0 +\n          shapeArc(x4, bd, bd, bd, 270, 360, false).replace('M', 'L') +\n          ' L' + x9 + ',' + y4 +\n          ' L' + w + ',' + y4 +\n          ' L' + x8 + ',' + y5 +\n          ' L' + x6 + ',' + y4 +\n          ' L' + x7 + ',' + y4 +\n          ' L' + x7 + ',' + x3 +\n          shapeArc(x5, x3, bd2, bd2, 0, -90, false).replace('M', 'L') +\n          ' L' + x3 + ',' + th +\n          shapeArc(x3, x3, bd2, bd2, 270, 180, false).replace('M', 'L') +\n          ' L' + th + ',' + h + ' z'\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'stripedRightArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 50000 * slideFactor\n        var sAdj2, adj2 = 50000 * slideFactor\n        var cnstVal1 = 100000 * slideFactor\n        var cnstVal2 = 200000 * slideFactor\n        var cnstVal3 = 84375 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            }\n          }\n        }\n        var a1, a2, x4, x5, dx5, x6, dx6, y1, dy1, y2, maxAdj2, vc = h / 2\n        var minWH = Math.min(w, h)\n        maxAdj2 = cnstVal3 * w / minWH\n        if (adj1 < 0) a1 = 0\n        else if (adj1 > cnstVal1) a1 = cnstVal1\n        else a1 = adj1\n        if (adj2 < 0) a2 = 0\n        else if (adj2 > maxAdj2) a2 = maxAdj2\n        else a2 = adj2\n        x4 = minWH * 5 / 32\n        dx5 = minWH * a2 / cnstVal1\n        x5 = w - dx5\n        dy1 = h * a1 / cnstVal2\n        y1 = vc - dy1\n        y2 = vc + dy1\n        //dx6 = dy1*dx5/hd2;\n        //x6 = w-dx6;\n        var ssd8 = minWH / 8,\n          ssd16 = minWH / 16,\n          ssd32 = minWH / 32\n        var d_val = 'M' + 0 + ',' + y1 +\n          ' L' + ssd32 + ',' + y1 +\n          ' L' + ssd32 + ',' + y2 +\n          ' L' + 0 + ',' + y2 + ' z' +\n          ' M' + ssd16 + ',' + y1 +\n          ' L' + ssd8 + ',' + y1 +\n          ' L' + ssd8 + ',' + y2 +\n          ' L' + ssd16 + ',' + y2 + ' z' +\n          ' M' + x4 + ',' + y1 +\n          ' L' + x5 + ',' + y1 +\n          ' L' + x5 + ',' + 0 +\n          ' L' + w + ',' + vc +\n          ' L' + x5 + ',' + h +\n          ' L' + x5 + ',' + y2 +\n          ' L' + x4 + ',' + y2 + ' z'\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'notchedRightArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 50000 * slideFactor\n        var sAdj2, adj2 = 50000 * slideFactor\n        var cnstVal1 = 100000 * slideFactor\n        var cnstVal2 = 200000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            }\n          }\n        }\n        var a1, a2, x1, x2, dx2, y1, dy1, y2, maxAdj2, vc = h / 2, hd2 = vc\n        var minWH = Math.min(w, h)\n        maxAdj2 = cnstVal1 * w / minWH\n        if (adj1 < 0) a1 = 0\n        else if (adj1 > cnstVal1) a1 = cnstVal1\n        else a1 = adj1\n        if (adj2 < 0) a2 = 0\n        else if (adj2 > maxAdj2) a2 = maxAdj2\n        else a2 = adj2\n        dx2 = minWH * a2 / cnstVal1\n        x2 = w - dx2\n        dy1 = h * a1 / cnstVal2\n        y1 = vc - dy1\n        y2 = vc + dy1\n        x1 = dy1 * dx2 / hd2\n        var d_val = 'M' + 0 + ',' + y1 +\n          ' L' + x2 + ',' + y1 +\n          ' L' + x2 + ',' + 0 +\n          ' L' + w + ',' + vc +\n          ' L' + x2 + ',' + h +\n          ' L' + x2 + ',' + y2 +\n          ' L' + 0 + ',' + y2 +\n          ' L' + x1 + ',' + vc + ' z'\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'homePlate':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adj = 50000 * slideFactor\n        var cnstVal1 = 100000 * slideFactor\n        if (shapAdjst !== undefined) {\n          adj = parseInt(shapAdjst.substr(4)) * slideFactor\n        }\n        var a, x1, dx1, maxAdj, vc = h / 2\n        var minWH = Math.min(w, h)\n        maxAdj = cnstVal1 * w / minWH\n        if (adj < 0) a = 0\n        else if (adj > maxAdj) a = maxAdj\n        else a = adj\n        dx1 = minWH * a / cnstVal1\n        x1 = w - dx1\n        var d_val = 'M' + 0 + ',' + 0 +\n          ' L' + x1 + ',' + 0 +\n          ' L' + w + ',' + vc +\n          ' L' + x1 + ',' + h +\n          ' L' + 0 + ',' + h + ' z'\n\n        result += '<path  d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'chevron':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adj = 50000 * slideFactor\n        var cnstVal1 = 100000 * slideFactor\n        if (shapAdjst !== undefined) {\n          adj = parseInt(shapAdjst.substr(4)) * slideFactor\n        }\n        var a, x1, dx1, x2, maxAdj, vc = h / 2\n        var minWH = Math.min(w, h)\n        maxAdj = cnstVal1 * w / minWH\n        if (adj < 0) a = 0\n        else if (adj > maxAdj) a = maxAdj\n        else a = adj\n        x1 = minWH * a / cnstVal1\n        x2 = w - x1\n        var d_val = 'M' + 0 + ',' + 0 +\n          ' L' + x2 + ',' + 0 +\n          ' L' + w + ',' + vc +\n          ' L' + x2 + ',' + h +\n          ' L' + 0 + ',' + h +\n          ' L' + x1 + ',' + vc + ' z'\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n\n        break\n      case 'rightArrowCallout':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 25000 * slideFactor\n        var sAdj2, adj2 = 25000 * slideFactor\n        var sAdj3, adj3 = 25000 * slideFactor\n        var sAdj4, adj4 = 64977 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        var cnstVal3 = 200000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj4') {\n              sAdj4 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj4 = parseInt(sAdj4.substr(4)) * slideFactor\n            }\n          }\n        }\n        var maxAdj2, a2, maxAdj1, a1, maxAdj3, a3, q2, maxAdj4, a4, dy1, dy2, y1, y2, y3, y4, dx3, x3, x2, x1\n        var vc = h / 2, r = w, b = h, l = 0, t = 0\n        var ss = Math.min(w, h)\n        maxAdj2 = cnstVal1 * h / ss\n        a2 = (adj2 < 0) ? 0 : (adj2 > maxAdj2) ? maxAdj2 : adj2\n        maxAdj1 = a2 * 2\n        a1 = (adj1 < 0) ? 0 : (adj1 > maxAdj1) ? maxAdj1 : adj1\n        maxAdj3 = cnstVal2 * w / ss\n        a3 = (adj3 < 0) ? 0 : (adj3 > maxAdj3) ? maxAdj3 : adj3\n        q2 = a3 * ss / w\n        maxAdj4 = cnstVal - q2\n        a4 = (adj4 < 0) ? 0 : (adj4 > maxAdj4) ? maxAdj4 : adj4\n        dy1 = ss * a2 / cnstVal2\n        dy2 = ss * a1 / cnstVal3\n        y1 = vc - dy1\n        y2 = vc - dy2\n        y3 = vc + dy2\n        y4 = vc + dy1\n        dx3 = ss * a3 / cnstVal2\n        x3 = r - dx3\n        x2 = w * a4 / cnstVal2\n        x1 = x2 / 2\n        var d_val = 'M' + l + ',' + t +\n          ' L' + x2 + ',' + t +\n          ' L' + x2 + ',' + y2 +\n          ' L' + x3 + ',' + y2 +\n          ' L' + x3 + ',' + y1 +\n          ' L' + r + ',' + vc +\n          ' L' + x3 + ',' + y4 +\n          ' L' + x3 + ',' + y3 +\n          ' L' + x2 + ',' + y3 +\n          ' L' + x2 + ',' + b +\n          ' L' + l + ',' + b +\n          ' z'\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'downArrowCallout':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 25000 * slideFactor\n        var sAdj2, adj2 = 25000 * slideFactor\n        var sAdj3, adj3 = 25000 * slideFactor\n        var sAdj4, adj4 = 64977 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        var cnstVal3 = 200000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj4') {\n              sAdj4 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj4 = parseInt(sAdj4.substr(4)) * slideFactor\n            }\n          }\n        }\n        var maxAdj2, a2, maxAdj1, a1, maxAdj3, a3, q2, maxAdj4, a4, dx1, dx2, x1, x2, x3, x4, dy3, y3, y2, y1\n        var hc = w / 2, r = w, b = h, l = 0, t = 0\n        var ss = Math.min(w, h)\n\n        maxAdj2 = cnstVal1 * w / ss\n        a2 = (adj2 < 0) ? 0 : (adj2 > maxAdj2) ? maxAdj2 : adj2\n        maxAdj1 = a2 * 2\n        a1 = (adj1 < 0) ? 0 : (adj1 > maxAdj1) ? maxAdj1 : adj1\n        maxAdj3 = cnstVal2 * h / ss\n        a3 = (adj3 < 0) ? 0 : (adj3 > maxAdj3) ? maxAdj3 : adj3\n        q2 = a3 * ss / h\n        maxAdj4 = cnstVal2 - q2\n        a4 = (adj4 < 0) ? 0 : (adj4 > maxAdj4) ? maxAdj4 : adj4\n        dx1 = ss * a2 / cnstVal2\n        dx2 = ss * a1 / cnstVal3\n        x1 = hc - dx1\n        x2 = hc - dx2\n        x3 = hc + dx2\n        x4 = hc + dx1\n        dy3 = ss * a3 / cnstVal2\n        y3 = b - dy3\n        y2 = h * a4 / cnstVal2\n        y1 = y2 / 2\n        var d_val = 'M' + l + ',' + t +\n          ' L' + r + ',' + t +\n          ' L' + r + ',' + y2 +\n          ' L' + x3 + ',' + y2 +\n          ' L' + x3 + ',' + y3 +\n          ' L' + x4 + ',' + y3 +\n          ' L' + hc + ',' + b +\n          ' L' + x1 + ',' + y3 +\n          ' L' + x2 + ',' + y3 +\n          ' L' + x2 + ',' + y2 +\n          ' L' + l + ',' + y2 +\n          ' z'\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'leftArrowCallout':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 25000 * slideFactor\n        var sAdj2, adj2 = 25000 * slideFactor\n        var sAdj3, adj3 = 25000 * slideFactor\n        var sAdj4, adj4 = 64977 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        var cnstVal3 = 200000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj4') {\n              sAdj4 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj4 = parseInt(sAdj4.substr(4)) * slideFactor\n            }\n          }\n        }\n        var maxAdj2, a2, maxAdj1, a1, maxAdj3, a3, q2, maxAdj4, a4, dy1, dy2, y1, y2, y3, y4, x1, dx2, x2, x3\n        var vc = h / 2, r = w, b = h, l = 0, t = 0\n        var ss = Math.min(w, h)\n\n        maxAdj2 = cnstVal1 * h / ss\n        a2 = (adj2 < 0) ? 0 : (adj2 > maxAdj2) ? maxAdj2 : adj2\n        maxAdj1 = a2 * 2\n        a1 = (adj1 < 0) ? 0 : (adj1 > maxAdj1) ? maxAdj1 : adj1\n        maxAdj3 = cnstVal2 * w / ss\n        a3 = (adj3 < 0) ? 0 : (adj3 > maxAdj3) ? maxAdj3 : adj3\n        q2 = a3 * ss / w\n        maxAdj4 = cnstVal2 - q2\n        a4 = (adj4 < 0) ? 0 : (adj4 > maxAdj4) ? maxAdj4 : adj4\n        dy1 = ss * a2 / cnstVal2\n        dy2 = ss * a1 / cnstVal3\n        y1 = vc - dy1\n        y2 = vc - dy2\n        y3 = vc + dy2\n        y4 = vc + dy1\n        x1 = ss * a3 / cnstVal2\n        dx2 = w * a4 / cnstVal2\n        x2 = r - dx2\n        x3 = (x2 + r) / 2\n        var d_val = 'M' + l + ',' + vc +\n          ' L' + x1 + ',' + y1 +\n          ' L' + x1 + ',' + y2 +\n          ' L' + x2 + ',' + y2 +\n          ' L' + x2 + ',' + t +\n          ' L' + r + ',' + t +\n          ' L' + r + ',' + b +\n          ' L' + x2 + ',' + b +\n          ' L' + x2 + ',' + y3 +\n          ' L' + x1 + ',' + y3 +\n          ' L' + x1 + ',' + y4 +\n          ' z'\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'upArrowCallout':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 25000 * slideFactor\n        var sAdj2, adj2 = 25000 * slideFactor\n        var sAdj3, adj3 = 25000 * slideFactor\n        var sAdj4, adj4 = 64977 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        var cnstVal3 = 200000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj4') {\n              sAdj4 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj4 = parseInt(sAdj4.substr(4)) * slideFactor\n            }\n          }\n        }\n        var maxAdj2, a2, maxAdj1, a1, maxAdj3, a3, q2, maxAdj4, a4, dx1, dx2, x1, x2, x3, x4, y1, dy2, y2, y3\n        var hc = w / 2, r = w, b = h, l = 0, t = 0\n        var ss = Math.min(w, h)\n        maxAdj2 = cnstVal1 * w / ss\n        a2 = (adj2 < 0) ? 0 : (adj2 > maxAdj2) ? maxAdj2 : adj2\n        maxAdj1 = a2 * 2\n        a1 = (adj1 < 0) ? 0 : (adj1 > maxAdj1) ? maxAdj1 : adj1\n        maxAdj3 = cnstVal2 * h / ss\n        a3 = (adj3 < 0) ? 0 : (adj3 > maxAdj3) ? maxAdj3 : adj3\n        q2 = a3 * ss / h\n        maxAdj4 = cnstVal2 - q2\n        a4 = (adj4 < 0) ? 0 : (adj4 > maxAdj4) ? maxAdj4 : adj4\n        dx1 = ss * a2 / cnstVal2\n        dx2 = ss * a1 / cnstVal3\n        x1 = hc - dx1\n        x2 = hc - dx2\n        x3 = hc + dx2\n        x4 = hc + dx1\n        y1 = ss * a3 / cnstVal2\n        dy2 = h * a4 / cnstVal2\n        y2 = b - dy2\n        y3 = (y2 + b) / 2\n\n        var d_val = 'M' + l + ',' + y2 +\n          ' L' + x2 + ',' + y2 +\n          ' L' + x2 + ',' + y1 +\n          ' L' + x1 + ',' + y1 +\n          ' L' + hc + ',' + t +\n          ' L' + x4 + ',' + y1 +\n          ' L' + x3 + ',' + y1 +\n          ' L' + x3 + ',' + y2 +\n          ' L' + r + ',' + y2 +\n          ' L' + r + ',' + b +\n          ' L' + l + ',' + b +\n          ' z'\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'leftRightArrowCallout':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 25000 * slideFactor\n        var sAdj2, adj2 = 25000 * slideFactor\n        var sAdj3, adj3 = 25000 * slideFactor\n        var sAdj4, adj4 = 48123 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        var cnstVal3 = 200000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj4') {\n              sAdj4 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj4 = parseInt(sAdj4.substr(4)) * slideFactor\n            }\n          }\n        }\n        var maxAdj2, a2, maxAdj1, a1, maxAdj3, a3, q2, maxAdj4, a4, dy1, dy2, y1, y2, y3, y4, x1, x4, dx2, x2, x3\n        var vc = h / 2, hc = w / 2, r = w, b = h, l = 0, t = 0\n        var ss = Math.min(w, h)\n        maxAdj2 = cnstVal1 * h / ss\n        a2 = (adj2 < 0) ? 0 : (adj2 > maxAdj2) ? maxAdj2 : adj2\n        maxAdj1 = a2 * 2\n        a1 = (adj1 < 0) ? 0 : (adj1 > maxAdj1) ? maxAdj1 : adj1\n        maxAdj3 = cnstVal1 * w / ss\n        a3 = (adj3 < 0) ? 0 : (adj3 > maxAdj3) ? maxAdj3 : adj3\n        q2 = a3 * ss / wd2\n        maxAdj4 = cnstVal2 - q2\n        a4 = (adj4 < 0) ? 0 : (adj4 > maxAdj4) ? maxAdj4 : adj4\n        dy1 = ss * a2 / cnstVal2\n        dy2 = ss * a1 / cnstVal3\n        y1 = vc - dy1\n        y2 = vc - dy2\n        y3 = vc + dy2\n        y4 = vc + dy1\n        x1 = ss * a3 / cnstVal2\n        x4 = r - x1\n        dx2 = w * a4 / cnstVal3\n        x2 = hc - dx2\n        x3 = hc + dx2\n        var d_val = 'M' + l + ',' + vc +\n          ' L' + x1 + ',' + y1 +\n          ' L' + x1 + ',' + y2 +\n          ' L' + x2 + ',' + y2 +\n          ' L' + x2 + ',' + t +\n          ' L' + x3 + ',' + t +\n          ' L' + x3 + ',' + y2 +\n          ' L' + x4 + ',' + y2 +\n          ' L' + x4 + ',' + y1 +\n          ' L' + r + ',' + vc +\n          ' L' + x4 + ',' + y4 +\n          ' L' + x4 + ',' + y3 +\n          ' L' + x3 + ',' + y3 +\n          ' L' + x3 + ',' + b +\n          ' L' + x2 + ',' + b +\n          ' L' + x2 + ',' + y3 +\n          ' L' + x1 + ',' + y3 +\n          ' L' + x1 + ',' + y4 +\n          ' z'\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'quadArrowCallout':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 18515 * slideFactor\n        var sAdj2, adj2 = 18515 * slideFactor\n        var sAdj3, adj3 = 18515 * slideFactor\n        var sAdj4, adj4 = 48123 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        var cnstVal3 = 200000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj4') {\n              sAdj4 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj4 = parseInt(sAdj4.substr(4)) * slideFactor\n            }\n          }\n        }\n        var vc = h / 2, hc = w / 2, r = w, b = h, l = 0, t = 0\n        var ss = Math.min(w, h)\n        var a2, maxAdj1, a1, maxAdj3, a3, q2, maxAdj4, a4, dx2, dx3, ah, dx1, dy1, x8, x2, x7, x3, x6, x4, x5, y8, y2,\n          y7, y3, y6, y4, y5\n        a2 = (adj2 < 0) ? 0 : (adj2 > cnstVal1) ? cnstVal1 : adj2\n        maxAdj1 = a2 * 2\n        a1 = (adj1 < 0) ? 0 : (adj1 > maxAdj1) ? maxAdj1 : adj1\n        maxAdj3 = cnstVal1 - a2\n        a3 = (adj3 < 0) ? 0 : (adj3 > maxAdj3) ? maxAdj3 : adj3\n        q2 = a3 * 2\n        maxAdj4 = cnstVal2 - q2\n        a4 = (adj4 < a1) ? a1 : (adj4 > maxAdj4) ? maxAdj4 : adj4\n        dx2 = ss * a2 / cnstVal2\n        dx3 = ss * a1 / cnstVal3\n        ah = ss * a3 / cnstVal2\n        dx1 = w * a4 / cnstVal3\n        dy1 = h * a4 / cnstVal3\n        x8 = r - ah\n        x2 = hc - dx1\n        x7 = hc + dx1\n        x3 = hc - dx2\n        x6 = hc + dx2\n        x4 = hc - dx3\n        x5 = hc + dx3\n        y8 = b - ah\n        y2 = vc - dy1\n        y7 = vc + dy1\n        y3 = vc - dx2\n        y6 = vc + dx2\n        y4 = vc - dx3\n        y5 = vc + dx3\n        var d_val = 'M' + l + ',' + vc +\n          ' L' + ah + ',' + y3 +\n          ' L' + ah + ',' + y4 +\n          ' L' + x2 + ',' + y4 +\n          ' L' + x2 + ',' + y2 +\n          ' L' + x4 + ',' + y2 +\n          ' L' + x4 + ',' + ah +\n          ' L' + x3 + ',' + ah +\n          ' L' + hc + ',' + t +\n          ' L' + x6 + ',' + ah +\n          ' L' + x5 + ',' + ah +\n          ' L' + x5 + ',' + y2 +\n          ' L' + x7 + ',' + y2 +\n          ' L' + x7 + ',' + y4 +\n          ' L' + x8 + ',' + y4 +\n          ' L' + x8 + ',' + y3 +\n          ' L' + r + ',' + vc +\n          ' L' + x8 + ',' + y6 +\n          ' L' + x8 + ',' + y5 +\n          ' L' + x7 + ',' + y5 +\n          ' L' + x7 + ',' + y7 +\n          ' L' + x5 + ',' + y7 +\n          ' L' + x5 + ',' + y8 +\n          ' L' + x6 + ',' + y8 +\n          ' L' + hc + ',' + b +\n          ' L' + x3 + ',' + y8 +\n          ' L' + x4 + ',' + y8 +\n          ' L' + x4 + ',' + y7 +\n          ' L' + x2 + ',' + y7 +\n          ' L' + x2 + ',' + y5 +\n          ' L' + ah + ',' + y5 +\n          ' L' + ah + ',' + y6 +\n          ' z'\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'curvedDownArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 25000 * slideFactor\n        var sAdj2, adj2 = 50000 * slideFactor\n        var sAdj3, adj3 = 25000 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            }\n          }\n        }\n        var vc = h / 2, hc = w / 2, wd2 = w / 2, r = w, b = h, l = 0, t = 0, c3d4 = 270, cd2 = 180, cd4 = 90\n        var ss = Math.min(w, h)\n        var maxAdj2, a2, a1, th, aw, q1, wR, q7, q8, q9, q10, q11, idy, maxAdj3, a3, ah, x3, q2, q3, q4, q5, dx, x5, x7,\n          q6, dh, x4, x8, aw2, x6, y1, swAng, mswAng, iy, ix, q12, dang2, stAng, stAng2, swAng2, swAng3\n\n        maxAdj2 = cnstVal1 * w / ss\n        a2 = (adj2 < 0) ? 0 : (adj2 > maxAdj2) ? maxAdj2 : adj2\n        a1 = (adj1 < 0) ? 0 : (adj1 > cnstVal2) ? cnstVal2 : adj1\n        th = ss * a1 / cnstVal2\n        aw = ss * a2 / cnstVal2\n        q1 = (th + aw) / 4\n        wR = wd2 - q1\n        q7 = wR * 2\n        q8 = q7 * q7\n        q9 = th * th\n        q10 = q8 - q9\n        q11 = Math.sqrt(q10)\n        idy = q11 * h / q7\n        maxAdj3 = cnstVal2 * idy / ss\n        a3 = (adj3 < 0) ? 0 : (adj3 > maxAdj3) ? maxAdj3 : adj3\n        ah = ss * adj3 / cnstVal2\n        x3 = wR + th\n        q2 = h * h\n        q3 = ah * ah\n        q4 = q2 - q3\n        q5 = Math.sqrt(q4)\n        dx = q5 * wR / h\n        x5 = wR + dx\n        x7 = x3 + dx\n        q6 = aw - th\n        dh = q6 / 2\n        x4 = x5 - dh\n        x8 = x7 + dh\n        aw2 = aw / 2\n        x6 = r - aw2\n        y1 = b - ah\n        swAng = Math.atan(dx / ah)\n        var swAngDeg = swAng * 180 / Math.PI\n        mswAng = -swAngDeg\n        iy = b - idy\n        ix = (wR + x3) / 2\n        q12 = th / 2\n        dang2 = Math.atan(q12 / idy)\n        var dang2Deg = dang2 * 180 / Math.PI\n        stAng = c3d4 + swAngDeg\n        stAng2 = c3d4 - dang2Deg\n        swAng2 = dang2Deg - cd4\n        swAng3 = cd4 + dang2Deg\n        //var cX = x5 - Math.cos(stAng*Math.PI/180) * wR;\n        //var cY = y1 - Math.sin(stAng*Math.PI/180) * h;\n\n        var d_val = 'M' + x6 + ',' + b +\n          ' L' + x4 + ',' + y1 +\n          ' L' + x5 + ',' + y1 +\n          shapeArc(wR, h, wR, h, stAng, (stAng + mswAng), false).replace('M', 'L') +\n          ' L' + x3 + ',' + t +\n          shapeArc(x3, h, wR, h, c3d4, (c3d4 + swAngDeg), false).replace('M', 'L') +\n          ' L' + (x5 + th) + ',' + y1 +\n          ' L' + x8 + ',' + y1 +\n          ' z' +\n          'M' + x3 + ',' + t +\n          shapeArc(x3, h, wR, h, stAng2, (stAng2 + swAng2), false).replace('M', 'L') +\n          shapeArc(wR, h, wR, h, cd2, (cd2 + swAng3), false).replace('M', 'L')\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'curvedLeftArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 25000 * slideFactor\n        var sAdj2, adj2 = 50000 * slideFactor\n        var sAdj3, adj3 = 25000 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            }\n          }\n        }\n        var vc = h / 2, hc = w / 2, hd2 = h / 2, r = w, b = h, l = 0, t = 0, c3d4 = 270, cd2 = 180, cd4 = 90\n        var ss = Math.min(w, h)\n        var maxAdj2, a2, a1, th, aw, q1, hR, q7, q8, q9, q10, q11, iDx, maxAdj3, a3, ah, y3, q2, q3, q4, q5, dy, y5, y7,\n          q6, dh, y4, y8, aw2, y6, x1, swAng, mswAng, ix, iy, q12, dang2, swAng2, swAng3, stAng3\n\n        maxAdj2 = cnstVal1 * h / ss\n        a2 = (adj2 < 0) ? 0 : (adj2 > maxAdj2) ? maxAdj2 : adj2\n        a1 = (adj1 < 0) ? 0 : (adj1 > a2) ? a2 : adj1\n        th = ss * a1 / cnstVal2\n        aw = ss * a2 / cnstVal2\n        q1 = (th + aw) / 4\n        hR = hd2 - q1\n        q7 = hR * 2\n        q8 = q7 * q7\n        q9 = th * th\n        q10 = q8 - q9\n        q11 = Math.sqrt(q10)\n        iDx = q11 * w / q7\n        maxAdj3 = cnstVal2 * iDx / ss\n        a3 = (adj3 < 0) ? 0 : (adj3 > maxAdj3) ? maxAdj3 : adj3\n        ah = ss * a3 / cnstVal2\n        y3 = hR + th\n        q2 = w * w\n        q3 = ah * ah\n        q4 = q2 - q3\n        q5 = Math.sqrt(q4)\n        dy = q5 * hR / w\n        y5 = hR + dy\n        y7 = y3 + dy\n        q6 = aw - th\n        dh = q6 / 2\n        y4 = y5 - dh\n        y8 = y7 + dh\n        aw2 = aw / 2\n        y6 = b - aw2\n        x1 = l + ah\n        swAng = Math.atan(dy / ah)\n        mswAng = -swAng\n        ix = l + iDx\n        iy = (hR + y3) / 2\n        q12 = th / 2\n        dang2 = Math.atan(q12 / iDx)\n        swAng2 = dang2 - swAng\n        swAng3 = swAng + dang2\n        stAng3 = -dang2\n        var swAngDg, swAng2Dg, swAng3Dg, stAng3dg\n        swAngDg = swAng * 180 / Math.PI\n        swAng2Dg = swAng2 * 180 / Math.PI\n        swAng3Dg = swAng3 * 180 / Math.PI\n        stAng3dg = stAng3 * 180 / Math.PI\n\n        var d_val = 'M' + r + ',' + y3 +\n          shapeArc(l, hR, w, hR, 0, -cd4, false).replace('M', 'L') +\n          ' L' + l + ',' + t +\n          shapeArc(l, y3, w, hR, c3d4, (c3d4 + cd4), false).replace('M', 'L') +\n          ' L' + r + ',' + y3 +\n          shapeArc(l, y3, w, hR, 0, swAngDg, false).replace('M', 'L') +\n          ' L' + x1 + ',' + y7 +\n          ' L' + x1 + ',' + y8 +\n          ' L' + l + ',' + y6 +\n          ' L' + x1 + ',' + y4 +\n          ' L' + x1 + ',' + y5 +\n          shapeArc(l, hR, w, hR, swAngDg, (swAngDg + swAng2Dg), false).replace('M', 'L') +\n          shapeArc(l, hR, w, hR, 0, -cd4, false).replace('M', 'L') +\n          shapeArc(l, y3, w, hR, c3d4, (c3d4 + cd4), false).replace('M', 'L')\n\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'curvedRightArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 25000 * slideFactor\n        var sAdj2, adj2 = 50000 * slideFactor\n        var sAdj3, adj3 = 25000 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            }\n          }\n        }\n        var vc = h / 2, hc = w / 2, hd2 = h / 2, r = w, b = h, l = 0, t = 0, c3d4 = 270, cd2 = 180, cd4 = 90\n        var ss = Math.min(w, h)\n        var maxAdj2, a2, a1, th, aw, q1, hR, q7, q8, q9, q10, q11, iDx, maxAdj3, a3, ah, y3, q2, q3, q4, q5, dy,\n          y5, y7, q6, dh, y4, y8, aw2, y6, x1, swAng, stAng, mswAng, ix, iy, q12, dang2, swAng2, swAng3, stAng3\n\n        maxAdj2 = cnstVal1 * h / ss\n        a2 = (adj2 < 0) ? 0 : (adj2 > maxAdj2) ? maxAdj2 : adj2\n        a1 = (adj1 < 0) ? 0 : (adj1 > a2) ? a2 : adj1\n        th = ss * a1 / cnstVal2\n        aw = ss * a2 / cnstVal2\n        q1 = (th + aw) / 4\n        hR = hd2 - q1\n        q7 = hR * 2\n        q8 = q7 * q7\n        q9 = th * th\n        q10 = q8 - q9\n        q11 = Math.sqrt(q10)\n        iDx = q11 * w / q7\n        maxAdj3 = cnstVal2 * iDx / ss\n        a3 = (adj3 < 0) ? 0 : (adj3 > maxAdj3) ? maxAdj3 : adj3\n        ah = ss * a3 / cnstVal2\n        y3 = hR + th\n        q2 = w * w\n        q3 = ah * ah\n        q4 = q2 - q3\n        q5 = Math.sqrt(q4)\n        dy = q5 * hR / w\n        y5 = hR + dy\n        y7 = y3 + dy\n        q6 = aw - th\n        dh = q6 / 2\n        y4 = y5 - dh\n        y8 = y7 + dh\n        aw2 = aw / 2\n        y6 = b - aw2\n        x1 = r - ah\n        swAng = Math.atan(dy / ah)\n        stAng = Math.PI + 0 - swAng\n        mswAng = -swAng\n        ix = r - iDx\n        iy = (hR + y3) / 2\n        q12 = th / 2\n        dang2 = Math.atan(q12 / iDx)\n        swAng2 = dang2 - Math.PI / 2\n        swAng3 = Math.PI / 2 + dang2\n        stAng3 = Math.PI - dang2\n\n        var stAngDg, mswAngDg, swAngDg, swAng2dg\n        stAngDg = stAng * 180 / Math.PI\n        mswAngDg = mswAng * 180 / Math.PI\n        swAngDg = swAng * 180 / Math.PI\n        swAng2dg = swAng2 * 180 / Math.PI\n\n        var d_val = 'M' + l + ',' + hR +\n          shapeArc(w, hR, w, hR, cd2, cd2 + mswAngDg, false).replace('M', 'L') +\n          ' L' + x1 + ',' + y5 +\n          ' L' + x1 + ',' + y4 +\n          ' L' + r + ',' + y6 +\n          ' L' + x1 + ',' + y8 +\n          ' L' + x1 + ',' + y7 +\n          shapeArc(w, y3, w, hR, stAngDg, stAngDg + swAngDg, false).replace('M', 'L') +\n          ' L' + l + ',' + hR +\n          shapeArc(w, hR, w, hR, cd2, cd2 + cd4, false).replace('M', 'L') +\n          ' L' + r + ',' + th +\n          shapeArc(w, y3, w, hR, c3d4, c3d4 + swAng2dg, false).replace('M', 'L')\n        ''\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'curvedUpArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 25000 * slideFactor\n        var sAdj2, adj2 = 50000 * slideFactor\n        var sAdj3, adj3 = 25000 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = parseInt(sAdj3.substr(4)) * slideFactor\n            }\n          }\n        }\n        var vc = h / 2, hc = w / 2, wd2 = w / 2, r = w, b = h, l = 0, t = 0, c3d4 = 270, cd2 = 180, cd4 = 90\n        var ss = Math.min(w, h)\n        var maxAdj2, a2, a1, th, aw, q1, wR, q7, q8, q9, q10, q11, idy, maxAdj3, a3, ah, x3, q2, q3, q4, q5, dx, x5, x7,\n          q6, dh, x4, x8, aw2, x6, y1, swAng, mswAng, iy, ix, q12, dang2, swAng2, mswAng2, stAng3, swAng3, stAng2\n\n        maxAdj2 = cnstVal1 * w / ss\n        a2 = (adj2 < 0) ? 0 : (adj2 > maxAdj2) ? maxAdj2 : adj2\n        a1 = (adj1 < 0) ? 0 : (adj1 > cnstVal2) ? cnstVal2 : adj1\n        th = ss * a1 / cnstVal2\n        aw = ss * a2 / cnstVal2\n        q1 = (th + aw) / 4\n        wR = wd2 - q1\n        q7 = wR * 2\n        q8 = q7 * q7\n        q9 = th * th\n        q10 = q8 - q9\n        q11 = Math.sqrt(q10)\n        idy = q11 * h / q7\n        maxAdj3 = cnstVal2 * idy / ss\n        a3 = (adj3 < 0) ? 0 : (adj3 > maxAdj3) ? maxAdj3 : adj3\n        ah = ss * adj3 / cnstVal2\n        x3 = wR + th\n        q2 = h * h\n        q3 = ah * ah\n        q4 = q2 - q3\n        q5 = Math.sqrt(q4)\n        dx = q5 * wR / h\n        x5 = wR + dx\n        x7 = x3 + dx\n        q6 = aw - th\n        dh = q6 / 2\n        x4 = x5 - dh\n        x8 = x7 + dh\n        aw2 = aw / 2\n        x6 = r - aw2\n        y1 = t + ah\n        swAng = Math.atan(dx / ah)\n        mswAng = -swAng\n        iy = t + idy\n        ix = (wR + x3) / 2\n        q12 = th / 2\n        dang2 = Math.atan(q12 / idy)\n        swAng2 = dang2 - swAng\n        mswAng2 = -swAng2\n        stAng3 = Math.PI / 2 - swAng\n        swAng3 = swAng + dang2\n        stAng2 = Math.PI / 2 - dang2\n\n        var stAng2dg, swAng2dg, swAngDg, swAng2dg\n        stAng2dg = stAng2 * 180 / Math.PI\n        swAng2dg = swAng2 * 180 / Math.PI\n        stAng3dg = stAng3 * 180 / Math.PI\n        swAngDg = swAng * 180 / Math.PI\n\n        var d_val = //\"M\" + ix + \",\" +iy +\n          shapeArc(wR, 0, wR, h, stAng2dg, stAng2dg + swAng2dg, false) + //.replace(\"M\",\"L\") +\n          ' L' + x5 + ',' + y1 +\n          ' L' + x4 + ',' + y1 +\n          ' L' + x6 + ',' + t +\n          ' L' + x8 + ',' + y1 +\n          ' L' + x7 + ',' + y1 +\n          shapeArc(x3, 0, wR, h, stAng3dg, stAng3dg + swAngDg, false).replace('M', 'L') +\n          ' L' + wR + ',' + b +\n          shapeArc(wR, 0, wR, h, cd4, cd2, false).replace('M', 'L') +\n          ' L' + th + ',' + t +\n          shapeArc(x3, 0, wR, h, cd2, cd4, false).replace('M', 'L') +\n          ''\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'mathDivide':\n      case 'mathEqual':\n      case 'mathMinus':\n      case 'mathMultiply':\n      case 'mathNotEqual':\n      case 'mathPlus':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1\n        var sAdj2, adj2\n        var sAdj3, adj3\n        if (shapAdjst_ary !== undefined) {\n          if (shapAdjst_ary.constructor === Array) {\n            for (var i = 0; i < shapAdjst_ary.length; i++) {\n              var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n              if (sAdj_name == 'adj1') {\n                sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n                adj1 = parseInt(sAdj1.substr(4))\n              } else if (sAdj_name == 'adj2') {\n                sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n                adj2 = parseInt(sAdj2.substr(4))\n              } else if (sAdj_name == 'adj3') {\n                sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n                adj3 = parseInt(sAdj3.substr(4))\n              }\n            }\n          } else {\n            sAdj1 = getTextByPathList(shapAdjst_ary, [ 'attrs', 'fmla' ])\n            adj1 = parseInt(sAdj1.substr(4))\n          }\n        }\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        var cnstVal3 = 200000 * slideFactor\n        var dVal\n        var hc = w / 2, vc = h / 2, hd2 = h / 2\n        if (shapType == 'mathNotEqual') {\n          if (shapAdjst_ary === undefined) {\n            adj1 = 23520 * slideFactor\n            adj2 = 110 * Math.PI / 180\n            adj3 = 11760 * slideFactor\n          } else {\n            adj1 = adj1 * slideFactor\n            adj2 = (adj2 / 60000) * Math.PI / 180\n            adj3 = adj3 * slideFactor\n          }\n          var a1, crAng, a2a1, maxAdj3, a3, dy1, dy2, dx1, x1, x8, y2, y3, y1, y4,\n            cadj2, xadj2, len, bhw, bhw2, x7, dx67, x6, dx57, x5, dx47, x4, dx37,\n            x3, dx27, x2, rx7, rx6, rx5, rx4, rx3, rx2, dx7, rxt, lxt, rx, lx,\n            dy3, dy4, ry, ly, dlx, drx, dly, dry, xC1, xC2, yC1, yC2, yC3, yC4\n          var angVal1 = 70 * Math.PI / 180, angVal2 = 110 * Math.PI / 180\n          var cnstVal4 = 73490 * slideFactor\n          //var cd4 = 90;\n          a1 = (adj1 < 0) ? 0 : (adj1 > cnstVal1) ? cnstVal1 : adj1\n          crAng = (adj2 < angVal1) ? angVal1 : (adj2 > angVal2) ? angVal2 : adj2\n          a2a1 = a1 * 2\n          maxAdj3 = cnstVal2 - a2a1\n          a3 = (adj3 < 0) ? 0 : (adj3 > maxAdj3) ? maxAdj3 : adj3\n          dy1 = h * a1 / cnstVal2\n          dy2 = h * a3 / cnstVal3\n          dx1 = w * cnstVal4 / cnstVal3\n          x1 = hc - dx1\n          x8 = hc + dx1\n          y2 = vc - dy2\n          y3 = vc + dy2\n          y1 = y2 - dy1\n          y4 = y3 + dy1\n          cadj2 = crAng - Math.PI / 2\n          xadj2 = hd2 * Math.tan(cadj2)\n          len = Math.sqrt(xadj2 * xadj2 + hd2 * hd2)\n          bhw = len * dy1 / hd2\n          bhw2 = bhw / 2\n          x7 = hc + xadj2 - bhw2\n          dx67 = xadj2 * y1 / hd2\n          x6 = x7 - dx67\n          dx57 = xadj2 * y2 / hd2\n          x5 = x7 - dx57\n          dx47 = xadj2 * y3 / hd2\n          x4 = x7 - dx47\n          dx37 = xadj2 * y4 / hd2\n          x3 = x7 - dx37\n          dx27 = xadj2 * 2\n          x2 = x7 - dx27\n          rx7 = x7 + bhw\n          rx6 = x6 + bhw\n          rx5 = x5 + bhw\n          rx4 = x4 + bhw\n          rx3 = x3 + bhw\n          rx2 = x2 + bhw\n          dx7 = dy1 * hd2 / len\n          rxt = x7 + dx7\n          lxt = rx7 - dx7\n          rx = (cadj2 > 0) ? rxt : rx7\n          lx = (cadj2 > 0) ? x7 : lxt\n          dy3 = dy1 * xadj2 / len\n          dy4 = -dy3\n          ry = (cadj2 > 0) ? dy3 : 0\n          ly = (cadj2 > 0) ? 0 : dy4\n          dlx = w - rx\n          drx = w - lx\n          dly = h - ry\n          dry = h - ly\n          xC1 = (rx + lx) / 2\n          xC2 = (drx + dlx) / 2\n          yC1 = (ry + ly) / 2\n          yC2 = (y1 + y2) / 2\n          yC3 = (y3 + y4) / 2\n          yC4 = (dry + dly) / 2\n\n          dVal = 'M' + x1 + ',' + y1 +\n            ' L' + x6 + ',' + y1 +\n            ' L' + lx + ',' + ly +\n            ' L' + rx + ',' + ry +\n            ' L' + rx6 + ',' + y1 +\n            ' L' + x8 + ',' + y1 +\n            ' L' + x8 + ',' + y2 +\n            ' L' + rx5 + ',' + y2 +\n            ' L' + rx4 + ',' + y3 +\n            ' L' + x8 + ',' + y3 +\n            ' L' + x8 + ',' + y4 +\n            ' L' + rx3 + ',' + y4 +\n            ' L' + drx + ',' + dry +\n            ' L' + dlx + ',' + dly +\n            ' L' + x3 + ',' + y4 +\n            ' L' + x1 + ',' + y4 +\n            ' L' + x1 + ',' + y3 +\n            ' L' + x4 + ',' + y3 +\n            ' L' + x5 + ',' + y2 +\n            ' L' + x1 + ',' + y2 +\n            ' z'\n        } else if (shapType == 'mathDivide') {\n          if (shapAdjst_ary === undefined) {\n            adj1 = 23520 * slideFactor\n            adj2 = 5880 * slideFactor\n            adj3 = 11760 * slideFactor\n          } else {\n            adj1 = adj1 * slideFactor\n            adj2 = adj2 * slideFactor\n            adj3 = adj3 * slideFactor\n          }\n          var a1, ma1, ma3h, ma3w, maxAdj3, a3, m4a3, maxAdj2, a2, dy1, yg, rad, dx1,\n            y3, y4, a, y2, y1, y5, x1, x3, x2\n          var cnstVal4 = 1000 * slideFactor\n          var cnstVal5 = 36745 * slideFactor\n          var cnstVal6 = 73490 * slideFactor\n          a1 = (adj1 < cnstVal4) ? cnstVal4 : (adj1 > cnstVal5) ? cnstVal5 : adj1\n          ma1 = -a1\n          ma3h = (cnstVal6 + ma1) / 4\n          ma3w = cnstVal5 * w / h\n          maxAdj3 = (ma3h < ma3w) ? ma3h : ma3w\n          a3 = (adj3 < cnstVal4) ? cnstVal4 : (adj3 > maxAdj3) ? maxAdj3 : adj3\n          m4a3 = -4 * a3\n          maxAdj2 = cnstVal6 + m4a3 - a1\n          a2 = (adj2 < 0) ? 0 : (adj2 > maxAdj2) ? maxAdj2 : adj2\n          dy1 = h * a1 / cnstVal3\n          yg = h * a2 / cnstVal2\n          rad = h * a3 / cnstVal2\n          dx1 = w * cnstVal6 / cnstVal3\n          y3 = vc - dy1\n          y4 = vc + dy1\n          a = yg + rad\n          y2 = y3 - a\n          y1 = y2 - rad\n          y5 = h - y1\n          x1 = hc - dx1\n          x3 = hc + dx1\n          x2 = hc - rad\n          var cd4 = 90, c3d4 = 270\n          var cX1 = hc - Math.cos(c3d4 * Math.PI / 180) * rad\n          var cY1 = y1 - Math.sin(c3d4 * Math.PI / 180) * rad\n          var cX2 = hc - Math.cos(Math.PI / 2) * rad\n          var cY2 = y5 - Math.sin(Math.PI / 2) * rad\n          dVal = 'M' + hc + ',' + y1 +\n            shapeArc(cX1, cY1, rad, rad, c3d4, c3d4 + 360, false).replace('M', 'L') +\n            ' z' +\n            ' M' + hc + ',' + y5 +\n            shapeArc(cX2, cY2, rad, rad, cd4, cd4 + 360, false).replace('M', 'L') +\n            ' z' +\n            ' M' + x1 + ',' + y3 +\n            ' L' + x3 + ',' + y3 +\n            ' L' + x3 + ',' + y4 +\n            ' L' + x1 + ',' + y4 +\n            ' z'\n        } else if (shapType == 'mathEqual') {\n          if (shapAdjst_ary === undefined) {\n            adj1 = 23520 * slideFactor\n            adj2 = 11760 * slideFactor\n          } else {\n            adj1 = adj1 * slideFactor\n            adj2 = adj2 * slideFactor\n          }\n          var cnstVal5 = 36745 * slideFactor\n          var cnstVal6 = 73490 * slideFactor\n          var a1, a2a1, mAdj2, a2, dy1, dy2, dx1, y2, y3, y1, y4, x1, x2, yC1, yC2\n\n          a1 = (adj1 < 0) ? 0 : (adj1 > cnstVal5) ? cnstVal5 : adj1\n          a2a1 = a1 * 2\n          mAdj2 = cnstVal2 - a2a1\n          a2 = (adj2 < 0) ? 0 : (adj2 > mAdj2) ? mAdj2 : adj2\n          dy1 = h * a1 / cnstVal2\n          dy2 = h * a2 / cnstVal3\n          dx1 = w * cnstVal6 / cnstVal3\n          y2 = vc - dy2\n          y3 = vc + dy2\n          y1 = y2 - dy1\n          y4 = y3 + dy1\n          x1 = hc - dx1\n          x2 = hc + dx1\n          yC1 = (y1 + y2) / 2\n          yC2 = (y3 + y4) / 2\n          dVal = 'M' + x1 + ',' + y1 +\n            ' L' + x2 + ',' + y1 +\n            ' L' + x2 + ',' + y2 +\n            ' L' + x1 + ',' + y2 +\n            ' z' +\n            'M' + x1 + ',' + y3 +\n            ' L' + x2 + ',' + y3 +\n            ' L' + x2 + ',' + y4 +\n            ' L' + x1 + ',' + y4 +\n            ' z'\n        } else if (shapType == 'mathMinus') {\n          if (shapAdjst_ary === undefined) {\n            adj1 = 23520 * slideFactor\n          } else {\n            adj1 = adj1 * slideFactor\n          }\n          var cnstVal6 = 73490 * slideFactor\n          var a1, dy1, dx1, y1, y2, x1, x2\n          a1 = (adj1 < 0) ? 0 : (adj1 > cnstVal2) ? cnstVal2 : adj1\n          dy1 = h * a1 / cnstVal3\n          dx1 = w * cnstVal6 / cnstVal3\n          y1 = vc - dy1\n          y2 = vc + dy1\n          x1 = hc - dx1\n          x2 = hc + dx1\n\n          dVal = 'M' + x1 + ',' + y1 +\n            ' L' + x2 + ',' + y1 +\n            ' L' + x2 + ',' + y2 +\n            ' L' + x1 + ',' + y2 +\n            ' z'\n        } else if (shapType == 'mathMultiply') {\n          if (shapAdjst_ary === undefined) {\n            adj1 = 23520 * slideFactor\n          } else {\n            adj1 = adj1 * slideFactor\n          }\n          var cnstVal6 = 51965 * slideFactor\n          var a1, th, a, sa, ca, ta, dl, rw, lM, xM, yM, dxAM, dyAM,\n            xA, yA, xB, yB, xBC, yBC, yC, xD, xE, yFE, xFE, xF, xL, yG, yH, yI, xC2, yC3\n          var ss = Math.min(w, h)\n          a1 = (adj1 < 0) ? 0 : (adj1 > cnstVal6) ? cnstVal6 : adj1\n          th = ss * a1 / cnstVal2\n          a = Math.atan(h / w)\n          sa = 1 * Math.sin(a)\n          ca = 1 * Math.cos(a)\n          ta = 1 * Math.tan(a)\n          dl = Math.sqrt(w * w + h * h)\n          rw = dl * cnstVal6 / cnstVal2\n          lM = dl - rw\n          xM = ca * lM / 2\n          yM = sa * lM / 2\n          dxAM = sa * th / 2\n          dyAM = ca * th / 2\n          xA = xM - dxAM\n          yA = yM + dyAM\n          xB = xM + dxAM\n          yB = yM - dyAM\n          xBC = hc - xB\n          yBC = xBC * ta\n          yC = yBC + yB\n          xD = w - xB\n          xE = w - xA\n          yFE = vc - yA\n          xFE = yFE / ta\n          xF = xE - xFE\n          xL = xA + xFE\n          yG = h - yA\n          yH = h - yB\n          yI = h - yC\n          xC2 = w - xM\n          yC3 = h - yM\n\n          dVal = 'M' + xA + ',' + yA +\n            ' L' + xB + ',' + yB +\n            ' L' + hc + ',' + yC +\n            ' L' + xD + ',' + yB +\n            ' L' + xE + ',' + yA +\n            ' L' + xF + ',' + vc +\n            ' L' + xE + ',' + yG +\n            ' L' + xD + ',' + yH +\n            ' L' + hc + ',' + yI +\n            ' L' + xB + ',' + yH +\n            ' L' + xA + ',' + yG +\n            ' L' + xL + ',' + vc +\n            ' z'\n        } else if (shapType == 'mathPlus') {\n          if (shapAdjst_ary === undefined) {\n            adj1 = 23520 * slideFactor\n          } else {\n            adj1 = adj1 * slideFactor\n          }\n          var cnstVal6 = 73490 * slideFactor\n          var ss = Math.min(w, h)\n          var a1, dx1, dy1, dx2, x1, x2, x3, x4, y1, y2, y3, y4\n\n          a1 = (adj1 < 0) ? 0 : (adj1 > cnstVal6) ? cnstVal6 : adj1\n          dx1 = w * cnstVal6 / cnstVal3\n          dy1 = h * cnstVal6 / cnstVal3\n          dx2 = ss * a1 / cnstVal3\n          x1 = hc - dx1\n          x2 = hc - dx2\n          x3 = hc + dx2\n          x4 = hc + dx1\n          y1 = vc - dy1\n          y2 = vc - dx2\n          y3 = vc + dx2\n          y4 = vc + dy1\n\n          dVal = 'M' + x1 + ',' + y2 +\n            ' L' + x2 + ',' + y2 +\n            ' L' + x2 + ',' + y1 +\n            ' L' + x3 + ',' + y1 +\n            ' L' + x3 + ',' + y2 +\n            ' L' + x4 + ',' + y2 +\n            ' L' + x4 + ',' + y3 +\n            ' L' + x3 + ',' + y3 +\n            ' L' + x3 + ',' + y4 +\n            ' L' + x2 + ',' + y4 +\n            ' L' + x2 + ',' + y3 +\n            ' L' + x1 + ',' + y3 +\n            ' z'\n        }\n        result += '<path d=\\'' + dVal + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        //console.log(shapType);\n        break\n      case 'can':\n      case 'flowChartMagneticDisk':\n      case 'flowChartMagneticDrum':\n        var shapAdjst = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd', 'attrs', 'fmla' ])\n        var adj = 25000 * slideFactor\n        var cnstVal1 = 50000 * slideFactor\n        var cnstVal2 = 200000 * slideFactor\n        if (shapAdjst !== undefined) {\n          adj = parseInt(shapAdjst.substr(4)) * slideFactor\n        }\n        var ss = Math.min(w, h)\n        var maxAdj, a, y1, y2, y3, dVal\n        if (shapType == 'flowChartMagneticDisk' || shapType == 'flowChartMagneticDrum') {\n          adj = 50000 * slideFactor\n        }\n        maxAdj = cnstVal1 * h / ss\n        a = (adj < 0) ? 0 : (adj > maxAdj) ? maxAdj : adj\n        y1 = ss * a / cnstVal2\n        y2 = y1 + y1\n        y3 = h - y1\n        var cd2 = 180, wd2 = w / 2\n\n        var tranglRott = ''\n        if (shapType == 'flowChartMagneticDrum') {\n          tranglRott = 'transform=\\'rotate(90 ' + w / 2 + ',' + h / 2 + ')\\''\n        }\n        dVal = shapeArc(wd2, y1, wd2, y1, 0, cd2, false) +\n          shapeArc(wd2, y1, wd2, y1, cd2, cd2 + cd2, false).replace('M', 'L') +\n          ' L' + w + ',' + y3 +\n          shapeArc(wd2, y3, wd2, y1, 0, cd2, false).replace('M', 'L') +\n          ' L' + 0 + ',' + y1\n\n        result += '<path ' + tranglRott + ' d=\\'' + dVal + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'swooshArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var refr = slideFactor\n        var sAdj1, adj1 = 25000 * refr\n        var sAdj2, adj2 = 16667 * refr\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * refr\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = parseInt(sAdj2.substr(4)) * refr\n            }\n          }\n        }\n        var cnstVal1 = 1 * refr\n        var cnstVal2 = 70000 * refr\n        var cnstVal3 = 75000 * refr\n        var cnstVal4 = 100000 * refr\n        var ss = Math.min(w, h)\n        var ssd8 = ss / 8\n        var hd6 = h / 6\n\n        var a1, maxAdj2, a2, ad1, ad2, xB, yB, alfa, dx0, xC, dx1, yF, xF, xE, yE, dy2, dy22, dy3, yD, dy4, yP1, xP1,\n          dy5, yP2, xP2\n\n        a1 = (adj1 < cnstVal1) ? cnstVal1 : (adj1 > cnstVal3) ? cnstVal3 : adj1\n        maxAdj2 = cnstVal2 * w / ss\n        a2 = (adj2 < 0) ? 0 : (adj2 > maxAdj2) ? maxAdj2 : adj2\n        ad1 = h * a1 / cnstVal4\n        ad2 = ss * a2 / cnstVal4\n        xB = w - ad2\n        yB = ssd8\n        alfa = (Math.PI / 2) / 14\n        dx0 = ssd8 * Math.tan(alfa)\n        xC = xB - dx0\n        dx1 = ad1 * Math.tan(alfa)\n        yF = yB + ad1\n        xF = xB + dx1\n        xE = xF + dx0\n        yE = yF + ssd8\n        dy2 = yE - 0\n        dy22 = dy2 / 2\n        dy3 = h / 20\n        yD = dy22 - dy3\n        dy4 = hd6\n        yP1 = hd6 + dy4\n        xP1 = w / 6\n        dy5 = hd6 / 2\n        yP2 = yF + dy5\n        xP2 = w / 4\n\n        var dVal = 'M' + 0 + ',' + h +\n          ' Q' + xP1 + ',' + yP1 + ' ' + xB + ',' + yB +\n          ' L' + xC + ',' + 0 +\n          ' L' + w + ',' + yD +\n          ' L' + xE + ',' + yE +\n          ' L' + xF + ',' + yF +\n          ' Q' + xP2 + ',' + yP2 + ' ' + 0 + ',' + h +\n          ' z'\n\n        result += '<path d=\\'' + dVal + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'circularArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 12500 * slideFactor\n        var sAdj2, adj2 = (1142319 / 60000) * Math.PI / 180\n        var sAdj3, adj3 = (20457681 / 60000) * Math.PI / 180\n        var sAdj4, adj4 = (10800000 / 60000) * Math.PI / 180\n        var sAdj5, adj5 = 12500 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = (parseInt(sAdj2.substr(4)) / 60000) * Math.PI / 180\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = (parseInt(sAdj3.substr(4)) / 60000) * Math.PI / 180\n            } else if (sAdj_name == 'adj4') {\n              sAdj4 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj4 = (parseInt(sAdj4.substr(4)) / 60000) * Math.PI / 180\n            } else if (sAdj_name == 'adj5') {\n              sAdj5 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj5 = parseInt(sAdj5.substr(4)) * slideFactor\n            }\n          }\n        }\n        var vc = h / 2, hc = w / 2, r = w, b = h, l = 0, t = 0, wd2 = w / 2, hd2 = h / 2\n        var ss = Math.min(w, h)\n        var a5, maxAdj1, a1, enAng, stAng, th, thh, th2, rw1, rh1, rw2, rh2, rw3, rh3, wtH, htH, dxH,\n          dyH, xH, yH, rI, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11, u12, u13, u14, u15, u16, u17,\n          u18, u19, u20, u21, maxAng, aAng, ptAng, wtA, htA, dxA, dyA, xA, yA, wtE, htE, dxE, dyE, xE, yE,\n          dxG, dyG, xG, yG, dxB, dyB, xB, yB, sx1, sy1, sx2, sy2, rO, x1O, y1O, x2O, y2O, dxO, dyO, dO,\n          q1, q2, DO, q3, q4, q5, q6, q7, q8, sdelO, ndyO, sdyO, q9, q10, q11, dxF1, q12, dxF2, adyO,\n          q13, q14, dyF1, q15, dyF2, q16, q17, q18, q19, q20, q21, q22, dxF, dyF, sdxF, sdyF, xF, yF,\n          x1I, y1I, x2I, y2I, dxI, dyI, dI, v1, v2, DI, v3, v4, v5, v6, v7, v8, sdelI, v9, v10, v11,\n          dxC1, v12, dxC2, adyI, v13, v14, dyC1, v15, dyC2, v16, v17, v18, v19, v20, v21, v22, dxC, dyC,\n          sdxC, sdyC, xC, yC, ist0, ist1, istAng, isw1, isw2, iswAng, p1, p2, p3, p4, p5, xGp, yGp,\n          xBp, yBp, en0, en1, en2, sw0, sw1, swAng\n        var cnstVal1 = 25000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        var rdAngVal1 = (1 / 60000) * Math.PI / 180\n        var rdAngVal2 = (21599999 / 60000) * Math.PI / 180\n        var rdAngVal3 = 2 * Math.PI\n\n        a5 = (adj5 < 0) ? 0 : (adj5 > cnstVal1) ? cnstVal1 : adj5\n        maxAdj1 = a5 * 2\n        a1 = (adj1 < 0) ? 0 : (adj1 > maxAdj1) ? maxAdj1 : adj1\n        enAng = (adj3 < rdAngVal1) ? rdAngVal1 : (adj3 > rdAngVal2) ? rdAngVal2 : adj3\n        stAng = (adj4 < 0) ? 0 : (adj4 > rdAngVal2) ? rdAngVal2 : adj4 //////////////////////////////////////////\n        th = ss * a1 / cnstVal2\n        thh = ss * a5 / cnstVal2\n        th2 = th / 2\n        rw1 = wd2 + th2 - thh\n        rh1 = hd2 + th2 - thh\n        rw2 = rw1 - th\n        rh2 = rh1 - th\n        rw3 = rw2 + th2\n        rh3 = rh2 + th2\n        wtH = rw3 * Math.sin(enAng)\n        htH = rh3 * Math.cos(enAng)\n\n        //dxH = rw3*Math.cos(Math.atan(wtH/htH));\n        //dyH = rh3*Math.sin(Math.atan(wtH/htH));\n        dxH = rw3 * Math.cos(Math.atan2(wtH, htH))\n        dyH = rh3 * Math.sin(Math.atan2(wtH, htH))\n\n        xH = hc + dxH\n        yH = vc + dyH\n        rI = (rw2 < rh2) ? rw2 : rh2\n        u1 = dxH * dxH\n        u2 = dyH * dyH\n        u3 = rI * rI\n        u4 = u1 - u3\n        u5 = u2 - u3\n        u6 = u4 * u5 / u1\n        u7 = u6 / u2\n        u8 = 1 - u7\n        u9 = Math.sqrt(u8)\n        u10 = u4 / dxH\n        u11 = u10 / dyH\n        u12 = (1 + u9) / u11\n\n        //u13 = Math.atan(u12/1);\n        u13 = Math.atan2(u12, 1)\n\n        u14 = u13 + rdAngVal3\n        u15 = (u13 > 0) ? u13 : u14\n        u16 = u15 - enAng\n        u17 = u16 + rdAngVal3\n        u18 = (u16 > 0) ? u16 : u17\n        u19 = u18 - cd2\n        u20 = u18 - rdAngVal3\n        u21 = (u19 > 0) ? u20 : u18\n        maxAng = Math.abs(u21)\n        aAng = (adj2 < 0) ? 0 : (adj2 > maxAng) ? maxAng : adj2\n        ptAng = enAng + aAng\n        wtA = rw3 * Math.sin(ptAng)\n        htA = rh3 * Math.cos(ptAng)\n        //dxA = rw3*Math.cos(Math.atan(wtA/htA));\n        //dyA = rh3*Math.sin(Math.atan(wtA/htA));\n        dxA = rw3 * Math.cos(Math.atan2(wtA, htA))\n        dyA = rh3 * Math.sin(Math.atan2(wtA, htA))\n\n        xA = hc + dxA\n        yA = vc + dyA\n        wtE = rw1 * Math.sin(stAng)\n        htE = rh1 * Math.cos(stAng)\n\n        //dxE = rw1*Math.cos(Math.atan(wtE/htE));\n        //dyE = rh1*Math.sin(Math.atan(wtE/htE));\n        dxE = rw1 * Math.cos(Math.atan2(wtE, htE))\n        dyE = rh1 * Math.sin(Math.atan2(wtE, htE))\n\n        xE = hc + dxE\n        yE = vc + dyE\n        dxG = thh * Math.cos(ptAng)\n        dyG = thh * Math.sin(ptAng)\n        xG = xH + dxG\n        yG = yH + dyG\n        dxB = thh * Math.cos(ptAng)\n        dyB = thh * Math.sin(ptAng)\n        xB = xH - dxB\n        yB = yH - dyB\n        sx1 = xB - hc\n        sy1 = yB - vc\n        sx2 = xG - hc\n        sy2 = yG - vc\n        rO = (rw1 < rh1) ? rw1 : rh1\n        x1O = sx1 * rO / rw1\n        y1O = sy1 * rO / rh1\n        x2O = sx2 * rO / rw1\n        y2O = sy2 * rO / rh1\n        dxO = x2O - x1O\n        dyO = y2O - y1O\n        dO = Math.sqrt(dxO * dxO + dyO * dyO)\n        q1 = x1O * y2O\n        q2 = x2O * y1O\n        DO = q1 - q2\n        q3 = rO * rO\n        q4 = dO * dO\n        q5 = q3 * q4\n        q6 = DO * DO\n        q7 = q5 - q6\n        q8 = (q7 > 0) ? q7 : 0\n        sdelO = Math.sqrt(q8)\n        ndyO = dyO * -1\n        sdyO = (ndyO > 0) ? -1 : 1\n        q9 = sdyO * dxO\n        q10 = q9 * sdelO\n        q11 = DO * dyO\n        dxF1 = (q11 + q10) / q4\n        q12 = q11 - q10\n        dxF2 = q12 / q4\n        adyO = Math.abs(dyO)\n        q13 = adyO * sdelO\n        q14 = DO * dxO / -1\n        dyF1 = (q14 + q13) / q4\n        q15 = q14 - q13\n        dyF2 = q15 / q4\n        q16 = x2O - dxF1\n        q17 = x2O - dxF2\n        q18 = y2O - dyF1\n        q19 = y2O - dyF2\n        q20 = Math.sqrt(q16 * q16 + q18 * q18)\n        q21 = Math.sqrt(q17 * q17 + q19 * q19)\n        q22 = q21 - q20\n        dxF = (q22 > 0) ? dxF1 : dxF2\n        dyF = (q22 > 0) ? dyF1 : dyF2\n        sdxF = dxF * rw1 / rO\n        sdyF = dyF * rh1 / rO\n        xF = hc + sdxF\n        yF = vc + sdyF\n        x1I = sx1 * rI / rw2\n        y1I = sy1 * rI / rh2\n        x2I = sx2 * rI / rw2\n        y2I = sy2 * rI / rh2\n        dxI = x2I - x1I\n        dyI = y2I - y1I\n        dI = Math.sqrt(dxI * dxI + dyI * dyI)\n        v1 = x1I * y2I\n        v2 = x2I * y1I\n        DI = v1 - v2\n        v3 = rI * rI\n        v4 = dI * dI\n        v5 = v3 * v4\n        v6 = DI * DI\n        v7 = v5 - v6\n        v8 = (v7 > 0) ? v7 : 0\n        sdelI = Math.sqrt(v8)\n        v9 = sdyO * dxI\n        v10 = v9 * sdelI\n        v11 = DI * dyI\n        dxC1 = (v11 + v10) / v4\n        v12 = v11 - v10\n        dxC2 = v12 / v4\n        adyI = Math.abs(dyI)\n        v13 = adyI * sdelI\n        v14 = DI * dxI / -1\n        dyC1 = (v14 + v13) / v4\n        v15 = v14 - v13\n        dyC2 = v15 / v4\n        v16 = x1I - dxC1\n        v17 = x1I - dxC2\n        v18 = y1I - dyC1\n        v19 = y1I - dyC2\n        v20 = Math.sqrt(v16 * v16 + v18 * v18)\n        v21 = Math.sqrt(v17 * v17 + v19 * v19)\n        v22 = v21 - v20\n        dxC = (v22 > 0) ? dxC1 : dxC2\n        dyC = (v22 > 0) ? dyC1 : dyC2\n        sdxC = dxC * rw2 / rI\n        sdyC = dyC * rh2 / rI\n        xC = hc + sdxC\n        yC = vc + sdyC\n\n        //ist0 = Math.atan(sdyC/sdxC);\n        ist0 = Math.atan2(sdyC, sdxC)\n\n        ist1 = ist0 + rdAngVal3\n        istAng = (ist0 > 0) ? ist0 : ist1\n        isw1 = stAng - istAng\n        isw2 = isw1 - rdAngVal3\n        iswAng = (isw1 > 0) ? isw2 : isw1\n        p1 = xF - xC\n        p2 = yF - yC\n        p3 = Math.sqrt(p1 * p1 + p2 * p2)\n        p4 = p3 / 2\n        p5 = p4 - thh\n        xGp = (p5 > 0) ? xF : xG\n        yGp = (p5 > 0) ? yF : yG\n        xBp = (p5 > 0) ? xC : xB\n        yBp = (p5 > 0) ? yC : yB\n\n        //en0 = Math.atan(sdyF/sdxF);\n        en0 = Math.atan2(sdyF, sdxF)\n\n        en1 = en0 + rdAngVal3\n        en2 = (en0 > 0) ? en0 : en1\n        sw0 = en2 - stAng\n        sw1 = sw0 + rdAngVal3\n        swAng = (sw0 > 0) ? sw0 : sw1\n\n        var strtAng = stAng * 180 / Math.PI\n        var endAng = strtAng + (swAng * 180 / Math.PI)\n        var stiAng = istAng * 180 / Math.PI\n        var swiAng = iswAng * 180 / Math.PI\n        var ediAng = stiAng + swiAng\n\n        var d_val = shapeArc(w / 2, h / 2, rw1, rh1, strtAng, endAng, false) +\n          ' L' + xGp + ',' + yGp +\n          ' L' + xA + ',' + yA +\n          ' L' + xBp + ',' + yBp +\n          ' L' + xC + ',' + yC +\n          shapeArc(w / 2, h / 2, rw2, rh2, stiAng, ediAng, false).replace('M', 'L') +\n          ' z'\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'leftCircularArrow':\n        var shapAdjst_ary = getTextByPathList(node, [ 'p:spPr', 'a:prstGeom', 'a:avLst', 'a:gd' ])\n        var sAdj1, adj1 = 12500 * slideFactor\n        var sAdj2, adj2 = (-1142319 / 60000) * Math.PI / 180\n        var sAdj3, adj3 = (1142319 / 60000) * Math.PI / 180\n        var sAdj4, adj4 = (10800000 / 60000) * Math.PI / 180\n        var sAdj5, adj5 = 12500 * slideFactor\n        if (shapAdjst_ary !== undefined) {\n          for (var i = 0; i < shapAdjst_ary.length; i++) {\n            var sAdj_name = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'name' ])\n            if (sAdj_name == 'adj1') {\n              sAdj1 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj1 = parseInt(sAdj1.substr(4)) * slideFactor\n            } else if (sAdj_name == 'adj2') {\n              sAdj2 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj2 = (parseInt(sAdj2.substr(4)) / 60000) * Math.PI / 180\n            } else if (sAdj_name == 'adj3') {\n              sAdj3 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj3 = (parseInt(sAdj3.substr(4)) / 60000) * Math.PI / 180\n            } else if (sAdj_name == 'adj4') {\n              sAdj4 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj4 = (parseInt(sAdj4.substr(4)) / 60000) * Math.PI / 180\n            } else if (sAdj_name == 'adj5') {\n              sAdj5 = getTextByPathList(shapAdjst_ary[i], [ 'attrs', 'fmla' ])\n              adj5 = parseInt(sAdj5.substr(4)) * slideFactor\n            }\n          }\n        }\n        var vc = h / 2, hc = w / 2, r = w, b = h, l = 0, t = 0, wd2 = w / 2, hd2 = h / 2\n        var ss = Math.min(w, h)\n        var cnstVal1 = 25000 * slideFactor\n        var cnstVal2 = 100000 * slideFactor\n        var rdAngVal1 = (1 / 60000) * Math.PI / 180\n        var rdAngVal2 = (21599999 / 60000) * Math.PI / 180\n        var rdAngVal3 = 2 * Math.PI\n        var a5, maxAdj1, a1, enAng, stAng, th, thh, th2, rw1, rh1, rw2, rh2, rw3, rh3, wtH, htH, dxH, dyH, xH, yH, rI,\n          u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11, u12, u13, u14, u15, u16, u17, u18, u19, u20, u21, u22,\n          minAng, u23, a2, aAng, ptAng, wtA, htA, dxA, dyA, xA, yA, wtE, htE, dxE, dyE, xE, yE, wtD, htD, dxD, dyD,\n          xD, yD, dxG, dyG, xG, yG, dxB, dyB, xB, yB, sx1, sy1, sx2, sy2, rO, x1O, y1O, x2O, y2O, dxO, dyO, dO,\n          q1, q2, DO, q3, q4, q5, q6, q7, q8, sdelO, ndyO, sdyO, q9, q10, q11, dxF1, q12, dxF2, adyO, q13, q14, dyF1,\n          q15, dyF2, q16, q17, q18, q19, q20, q21, q22, dxF, dyF, sdxF, sdyF, xF, yF, x1I, y1I, x2I, y2I, dxI, dyI, dI,\n          v1, v2, DI, v3, v4, v5, v6, v7, v8, sdelI, v9, v10, v11, dxC1, v12, dxC2, adyI, v13, v14, dyC1, v15, dyC2,\n          v16,\n          v17, v18, v19, v20, v21, v22, dxC, dyC, sdxC, sdyC, xC, yC, ist0, ist1, istAng0, isw1, isw2, iswAng0, istAng,\n          iswAng, p1, p2, p3, p4, p5, xGp, yGp, xBp, yBp, en0, en1, en2, sw0, sw1, swAng, stAng0\n\n        a5 = (adj5 < 0) ? 0 : (adj5 > cnstVal1) ? cnstVal1 : adj5\n        maxAdj1 = a5 * 2\n        a1 = (adj1 < 0) ? 0 : (adj1 > maxAdj1) ? maxAdj1 : adj1\n        enAng = (adj3 < rdAngVal1) ? rdAngVal1 : (adj3 > rdAngVal2) ? rdAngVal2 : adj3\n        stAng = (adj4 < 0) ? 0 : (adj4 > rdAngVal2) ? rdAngVal2 : adj4\n        th = ss * a1 / cnstVal2\n        thh = ss * a5 / cnstVal2\n        th2 = th / 2\n        rw1 = wd2 + th2 - thh\n        rh1 = hd2 + th2 - thh\n        rw2 = rw1 - th\n        rh2 = rh1 - th\n        rw3 = rw2 + th2\n        rh3 = rh2 + th2\n        wtH = rw3 * Math.sin(enAng)\n        htH = rh3 * Math.cos(enAng)\n        dxH = rw3 * Math.cos(Math.atan2(wtH, htH))\n        dyH = rh3 * Math.sin(Math.atan2(wtH, htH))\n        xH = hc + dxH\n        yH = vc + dyH\n        rI = (rw2 < rh2) ? rw2 : rh2\n        u1 = dxH * dxH\n        u2 = dyH * dyH\n        u3 = rI * rI\n        u4 = u1 - u3\n        u5 = u2 - u3\n        u6 = u4 * u5 / u1\n        u7 = u6 / u2\n        u8 = 1 - u7\n        u9 = Math.sqrt(u8)\n        u10 = u4 / dxH\n        u11 = u10 / dyH\n        u12 = (1 + u9) / u11\n        u13 = Math.atan2(u12, 1)\n        u14 = u13 + rdAngVal3\n        u15 = (u13 > 0) ? u13 : u14\n        u16 = u15 - enAng\n        u17 = u16 + rdAngVal3\n        u18 = (u16 > 0) ? u16 : u17\n        u19 = u18 - cd2\n        u20 = u18 - rdAngVal3\n        u21 = (u19 > 0) ? u20 : u18\n        u22 = Math.abs(u21)\n        minAng = u22 * -1\n        u23 = Math.abs(adj2)\n        a2 = u23 * -1\n        aAng = (a2 < minAng) ? minAng : (a2 > 0) ? 0 : a2\n        ptAng = enAng + aAng\n        wtA = rw3 * Math.sin(ptAng)\n        htA = rh3 * Math.cos(ptAng)\n        dxA = rw3 * Math.cos(Math.atan2(wtA, htA))\n        dyA = rh3 * Math.sin(Math.atan2(wtA, htA))\n        xA = hc + dxA\n        yA = vc + dyA\n        wtE = rw1 * Math.sin(stAng)\n        htE = rh1 * Math.cos(stAng)\n        dxE = rw1 * Math.cos(Math.atan2(wtE, htE))\n        dyE = rh1 * Math.sin(Math.atan2(wtE, htE))\n        xE = hc + dxE\n        yE = vc + dyE\n        wtD = rw2 * Math.sin(stAng)\n        htD = rh2 * Math.cos(stAng)\n        dxD = rw2 * Math.cos(Math.atan2(wtD, htD))\n        dyD = rh2 * Math.sin(Math.atan2(wtD, htD))\n        xD = hc + dxD\n        yD = vc + dyD\n        dxG = thh * Math.cos(ptAng)\n        dyG = thh * Math.sin(ptAng)\n        xG = xH + dxG\n        yG = yH + dyG\n        dxB = thh * Math.cos(ptAng)\n        dyB = thh * Math.sin(ptAng)\n        xB = xH - dxB\n        yB = yH - dyB\n        sx1 = xB - hc\n        sy1 = yB - vc\n        sx2 = xG - hc\n        sy2 = yG - vc\n        rO = (rw1 < rh1) ? rw1 : rh1\n        x1O = sx1 * rO / rw1\n        y1O = sy1 * rO / rh1\n        x2O = sx2 * rO / rw1\n        y2O = sy2 * rO / rh1\n        dxO = x2O - x1O\n        dyO = y2O - y1O\n        dO = Math.sqrt(dxO * dxO + dyO * dyO)\n        q1 = x1O * y2O\n        q2 = x2O * y1O\n        DO = q1 - q2\n        q3 = rO * rO\n        q4 = dO * dO\n        q5 = q3 * q4\n        q6 = DO * DO\n        q7 = q5 - q6\n        q8 = (q7 > 0) ? q7 : 0\n        sdelO = Math.sqrt(q8)\n        ndyO = dyO * -1\n        sdyO = (ndyO > 0) ? -1 : 1\n        q9 = sdyO * dxO\n        q10 = q9 * sdelO\n        q11 = DO * dyO\n        dxF1 = (q11 + q10) / q4\n        q12 = q11 - q10\n        dxF2 = q12 / q4\n        adyO = Math.abs(dyO)\n        q13 = adyO * sdelO\n        q14 = DO * dxO / -1\n        dyF1 = (q14 + q13) / q4\n        q15 = q14 - q13\n        dyF2 = q15 / q4\n        q16 = x2O - dxF1\n        q17 = x2O - dxF2\n        q18 = y2O - dyF1\n        q19 = y2O - dyF2\n        q20 = Math.sqrt(q16 * q16 + q18 * q18)\n        q21 = Math.sqrt(q17 * q17 + q19 * q19)\n        q22 = q21 - q20\n        dxF = (q22 > 0) ? dxF1 : dxF2\n        dyF = (q22 > 0) ? dyF1 : dyF2\n        sdxF = dxF * rw1 / rO\n        sdyF = dyF * rh1 / rO\n        xF = hc + sdxF\n        yF = vc + sdyF\n        x1I = sx1 * rI / rw2\n        y1I = sy1 * rI / rh2\n        x2I = sx2 * rI / rw2\n        y2I = sy2 * rI / rh2\n        dxI = x2I - x1I\n        dyI = y2I - y1I\n        dI = Math.sqrt(dxI * dxI + dyI * dyI)\n        v1 = x1I * y2I\n        v2 = x2I * y1I\n        DI = v1 - v2\n        v3 = rI * rI\n        v4 = dI * dI\n        v5 = v3 * v4\n        v6 = DI * DI\n        v7 = v5 - v6\n        v8 = (v7 > 0) ? v7 : 0\n        sdelI = Math.sqrt(v8)\n        v9 = sdyO * dxI\n        v10 = v9 * sdelI\n        v11 = DI * dyI\n        dxC1 = (v11 + v10) / v4\n        v12 = v11 - v10\n        dxC2 = v12 / v4\n        adyI = Math.abs(dyI)\n        v13 = adyI * sdelI\n        v14 = DI * dxI / -1\n        dyC1 = (v14 + v13) / v4\n        v15 = v14 - v13\n        dyC2 = v15 / v4\n        v16 = x1I - dxC1\n        v17 = x1I - dxC2\n        v18 = y1I - dyC1\n        v19 = y1I - dyC2\n        v20 = Math.sqrt(v16 * v16 + v18 * v18)\n        v21 = Math.sqrt(v17 * v17 + v19 * v19)\n        v22 = v21 - v20\n        dxC = (v22 > 0) ? dxC1 : dxC2\n        dyC = (v22 > 0) ? dyC1 : dyC2\n        sdxC = dxC * rw2 / rI\n        sdyC = dyC * rh2 / rI\n        xC = hc + sdxC\n        yC = vc + sdyC\n        ist0 = Math.atan2(sdyC, sdxC)\n        ist1 = ist0 + rdAngVal3\n        istAng0 = (ist0 > 0) ? ist0 : ist1\n        isw1 = stAng - istAng0\n        isw2 = isw1 + rdAngVal3\n        iswAng0 = (isw1 > 0) ? isw1 : isw2\n        istAng = istAng0 + iswAng0\n        iswAng = -iswAng0\n        p1 = xF - xC\n        p2 = yF - yC\n        p3 = Math.sqrt(p1 * p1 + p2 * p2)\n        p4 = p3 / 2\n        p5 = p4 - thh\n        xGp = (p5 > 0) ? xF : xG\n        yGp = (p5 > 0) ? yF : yG\n        xBp = (p5 > 0) ? xC : xB\n        yBp = (p5 > 0) ? yC : yB\n        en0 = Math.atan2(sdyF, sdxF)\n        en1 = en0 + rdAngVal3\n        en2 = (en0 > 0) ? en0 : en1\n        sw0 = en2 - stAng\n        sw1 = sw0 - rdAngVal3\n        swAng = (sw0 > 0) ? sw1 : sw0\n        stAng0 = stAng + swAng\n\n        var strtAng = stAng0 * 180 / Math.PI\n        var endAng = stAng * 180 / Math.PI\n        var stiAng = istAng * 180 / Math.PI\n        var swiAng = iswAng * 180 / Math.PI\n        var ediAng = stiAng + swiAng\n\n        var d_val = 'M' + xE + ',' + yE +\n          ' L' + xD + ',' + yD +\n          shapeArc(w / 2, h / 2, rw2, rh2, stiAng, ediAng, false).replace('M', 'L') +\n          ' L' + xBp + ',' + yBp +\n          ' L' + xA + ',' + yA +\n          ' L' + xGp + ',' + yGp +\n          ' L' + xF + ',' + yF +\n          shapeArc(w / 2, h / 2, rw1, rh1, strtAng, endAng, false).replace('M', 'L') +\n          ' z'\n        result += '<path d=\\'' + d_val + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n          '\\' stroke=\\'' + border.color + '\\' stroke-width=\\'' + border.width + '\\' stroke-dasharray=\\'' + border.strokeDasharray + '\\' />'\n\n        break\n      case 'leftRightCircularArrow':\n      case 'chartPlus':\n      case 'chartStar':\n      case 'chartX':\n      case 'cornerTabs':\n      case 'flowChartOfflineStorage':\n      case 'folderCorner':\n      case 'funnel':\n      case 'lineInv':\n      case 'nonIsoscelesTrapezoid':\n      case 'plaqueTabs':\n      case 'squareTabs':\n      case 'upDownArrowCallout':\n        console.log(shapType, ' -unsupported shape type.')\n        break\n      case undefined:\n      default:\n        console.warn('Undefine shape type.(' + shapType + ')')\n    }\n\n    result += '</svg>'\n\n    result += '<div class=\\'block ' + getVerticalAlign(node, slideLayoutSpNode, slideMasterSpNode, type) + //block content\n      ' ' + getContentDir(node, type, warpObj) +\n      '\\' _id=\\'' + id + '\\' _idx=\\'' + idx + '\\' _type=\\'' + type + '\\' _name=\\'' + name +\n      '\\' style=\\'' +\n      getPosition(slideXfrmNode, pNode, slideLayoutXfrmNode, slideMasterXfrmNode, sType) +\n      getSize(slideXfrmNode, slideLayoutXfrmNode, slideMasterXfrmNode) +\n      ' z-index: ' + order + ';' +\n      'transform: rotate(' + ((txtRotate !== undefined) ? txtRotate : 0) + 'deg);' +\n      '\\'>'\n\n    // TextBody\n    if (node['p:txBody'] !== undefined && (isUserDrawnBg === undefined || isUserDrawnBg === true)) {\n      if (type != 'diagram' && type != 'textBox') {\n        type = 'shape'\n      }\n      result += await genTextBody(node['p:txBody'], node, slideLayoutSpNode, slideMasterSpNode, type, idx, warpObj) //type='shape'\n    }\n    result += '</div>'\n  } else if (custShapType !== undefined) {\n    //custGeom here - Amir ///////////////////////////////////////////////////////\n    //http://officeopenxml.com/drwSp-custGeom.php\n    var pathLstNode = getTextByPathList(custShapType, [ 'a:pathLst' ])\n    var pathNodes = getTextByPathList(pathLstNode, [ 'a:path' ])\n    //var pathNode = getTextByPathList(pathLstNode, [\"a:path\", \"attrs\"]);\n    const attrs = pathNodes['attrs'] || { w: slideWidth, h: slideHeight }\n    var maxX = parseInt(attrs['w'])// * slideFactor;\n    var maxY = parseInt(attrs['h'])// * slideFactor;\n    var cX = (1 / maxX) * w\n    var cY = (1 / maxY) * h\n    //console.log(\"w = \"+w+\"\\nh = \"+h+\"\\nmaxX = \"+maxX +\"\\nmaxY = \" + maxY);\n    //cheke if it is close shape\n\n    //console.log(\"custShapType : \", custShapType, \", pathLstNode: \", pathLstNode, \", node: \", node);//, \", y:\", y, \", w:\", w, \", h:\", h);\n\n    var moveToNode = getTextByPathList(pathNodes, [ 'a:moveTo' ]) || []\n    var total_shapes = moveToNode.length\n\n    var lnToNodes = pathNodes['a:lnTo'] //total a:pt : 1\n    var cubicBezToNodes = pathNodes['a:cubicBezTo'] //total a:pt : 3\n    var arcToNodes = pathNodes['a:arcTo'] //total a:pt : 0?1? ; attrs: ~4 ()\n    var closeNode = getTextByPathList(pathNodes, [ 'a:close' ]) //total a:pt : 0\n    //quadBezTo //total a:pt : 2 - TODO\n    //console.log(\"ia moveToNode array: \", Array.isArray(moveToNode))\n    if (!Array.isArray(moveToNode)) {\n      moveToNode = [ moveToNode ]\n    }\n    //console.log(\"ia moveToNode array: \", Array.isArray(moveToNode))\n\n    var multiSapeAry = []\n    if (moveToNode.length > 0) {\n      //a:moveTo\n      Object.keys(moveToNode).forEach(function (key) {\n        var moveToPtNode = moveToNode[key]['a:pt']\n        if (moveToPtNode !== undefined) {\n          Object.keys(moveToPtNode).forEach(function (key2) {\n            var ptObj = {}\n            var moveToNoPt = moveToPtNode[key2]\n            var spX = moveToNoPt['attrs', 'x']//parseInt(moveToNoPt[\"attrs\", \"x\"]) * slideFactor;\n            var spY = moveToNoPt['attrs', 'y']//parseInt(moveToNoPt[\"attrs\", \"y\"]) * slideFactor;\n            var ptOrdr = moveToNoPt['attrs', 'order']\n            ptObj.type = 'movto'\n            ptObj.order = ptOrdr\n            ptObj.x = spX\n            ptObj.y = spY\n            multiSapeAry.push(ptObj)\n            //console.log(key2, lnToNoPt);\n\n          })\n        }\n      })\n      //a:lnTo\n      if (lnToNodes !== undefined) {\n        Object.keys(lnToNodes).forEach(function (key) {\n          var lnToPtNode = lnToNodes[key]['a:pt']\n          if (lnToPtNode !== undefined) {\n            Object.keys(lnToPtNode).forEach(function (key2) {\n              var ptObj = {}\n              var lnToNoPt = lnToPtNode[key2]\n              var ptX = lnToNoPt['attrs', 'x']\n              var ptY = lnToNoPt['attrs', 'y']\n              var ptOrdr = lnToNoPt['attrs', 'order']\n              ptObj.type = 'lnto'\n              ptObj.order = ptOrdr\n              ptObj.x = ptX\n              ptObj.y = ptY\n              multiSapeAry.push(ptObj)\n              //console.log(key2, lnToNoPt);\n            })\n          }\n        })\n      }\n      //a:cubicBezTo\n      if (cubicBezToNodes !== undefined) {\n\n        var cubicBezToPtNodesAry = []\n        //console.log(\"cubicBezToNodes: \", cubicBezToNodes, \", is arry: \", Array.isArray(cubicBezToNodes))\n        if (!Array.isArray(cubicBezToNodes)) {\n          cubicBezToNodes = [ cubicBezToNodes ]\n        }\n        Object.keys(cubicBezToNodes).forEach(function (key) {\n          //console.log(\"cubicBezTo[\" + key + \"]:\");\n          cubicBezToPtNodesAry.push(cubicBezToNodes[key]['a:pt'])\n        })\n\n        //console.log(\"cubicBezToNodes: \", cubicBezToPtNodesAry)\n        cubicBezToPtNodesAry.forEach(function (key2) {\n          //console.log(\"cubicBezToPtNodesAry: key2 : \", key2)\n          var nodeObj = {}\n          nodeObj.type = 'cubicBezTo'\n          nodeObj.order = key2[0]['attrs']['order']\n          var pts_ary = []\n          key2.forEach(function (pt) {\n            var pt_obj = {\n              x: pt['attrs']['x'],\n              y: pt['attrs']['y']\n            }\n            pts_ary.push(pt_obj)\n          })\n          nodeObj.cubBzPt = pts_ary//key2;\n          multiSapeAry.push(nodeObj)\n        })\n      }\n      //a:arcTo\n      if (arcToNodes !== undefined) {\n        var arcToNodesAttrs = arcToNodes['attrs']\n        var arcOrder = arcToNodesAttrs['order']\n        var hR = arcToNodesAttrs['hR']\n        var wR = arcToNodesAttrs['wR']\n        var stAng = arcToNodesAttrs['stAng']\n        var swAng = arcToNodesAttrs['swAng']\n        var shftX = 0\n        var shftY = 0\n        var arcToPtNode = getTextByPathList(arcToNodes, [ 'a:pt', 'attrs' ])\n        if (arcToPtNode !== undefined) {\n          shftX = arcToPtNode['x']\n          shftY = arcToPtNode['y']\n          //console.log(\"shftX: \",shftX,\" shftY: \",shftY)\n        }\n        var ptObj = {}\n        ptObj.type = 'arcTo'\n        ptObj.order = arcOrder\n        ptObj.hR = hR\n        ptObj.wR = wR\n        ptObj.stAng = stAng\n        ptObj.swAng = swAng\n        ptObj.shftX = shftX\n        ptObj.shftY = shftY\n        multiSapeAry.push(ptObj)\n\n      }\n      //a:quadBezTo - TODO\n\n      //a:close\n      if (closeNode !== undefined) {\n\n        if (!Array.isArray(closeNode)) {\n          closeNode = [ closeNode ]\n        }\n        // Object.keys(closeNode).forEach(function (key) {\n        //     //console.log(\"cubicBezTo[\" + key + \"]:\");\n        //     cubicBezToPtNodesAry.push(closeNode[key][\"a:pt\"]);\n        // });\n        Object.keys(closeNode).forEach(function (key) {\n          //console.log(\"custShapType >> closeNode: key: \", key);\n          var clsAttrs = closeNode[key]['attrs']\n          //var clsAttrs = closeNode[\"attrs\"];\n          var clsOrder = clsAttrs['order']\n          var ptObj = {}\n          ptObj.type = 'close'\n          ptObj.order = clsOrder\n          multiSapeAry.push(ptObj)\n\n        })\n\n      }\n\n      // console.log(\"custShapType >> multiSapeAry: \", multiSapeAry);\n\n      multiSapeAry.sort(function (a, b) {\n        return a.order - b.order\n      })\n\n      //console.log(\"custShapType >>sorted  multiSapeAry: \");\n      //console.log(multiSapeAry);\n      var k = 0\n      var isClose = false\n      var d = ''\n      while (k < multiSapeAry.length) {\n\n        if (multiSapeAry[k].type == 'movto') {\n          //start point\n          var spX = parseInt(multiSapeAry[k].x) * cX//slideFactor;\n          var spY = parseInt(multiSapeAry[k].y) * cY//slideFactor;\n          // if (d == \"\") {\n          //     d = \"M\" + spX + \",\" + spY;\n          // } else {\n          //     //shape without close : then close the shape and start new path\n          //     result += \"<path d='\" + d + \"' fill='\" + (!imgFillFlg ? (grndFillFlg ? \"url(#linGrd_\" + shpId + \")\" : fillColor) : \"url(#imgPtrn_\" + shpId + \")\") +\n          //         \"' stroke='\" + ((border === undefined) ? \"\" : border.color) + \"' stroke-width='\" + ((border === undefined) ? \"\" : border.width) + \"' stroke-dasharray='\" + ((border === undefined) ? \"\" : border.strokeDasharray) + \"' \";\n          //     result += \"/>\";\n\n          //     if (headEndNodeAttrs !== undefined && (headEndNodeAttrs[\"type\"] === \"triangle\" || headEndNodeAttrs[\"type\"] === \"arrow\")) {\n          //         result += \"marker-start='url(#markerTriangle_\" + shpId + \")' \";\n          //     }\n          //     if (tailEndNodeAttrs !== undefined && (tailEndNodeAttrs[\"type\"] === \"triangle\" || tailEndNodeAttrs[\"type\"] === \"arrow\")) {\n          //         result += \"marker-end='url(#markerTriangle_\" + shpId + \")' \";\n          //     }\n          //     result += \"/>\";\n\n          //     d = \"M\" + spX + \",\" + spY;\n          //     isClose = true;\n          // }\n\n          d += ' M' + spX + ',' + spY\n\n        } else if (multiSapeAry[k].type == 'lnto') {\n          var Lx = parseInt(multiSapeAry[k].x) * cX//slideFactor;\n          var Ly = parseInt(multiSapeAry[k].y) * cY//slideFactor;\n          d += ' L' + Lx + ',' + Ly\n\n        } else if (multiSapeAry[k].type == 'cubicBezTo') {\n          var Cx1 = parseInt(multiSapeAry[k].cubBzPt[0].x) * cX//slideFactor;\n          var Cy1 = parseInt(multiSapeAry[k].cubBzPt[0].y) * cY//slideFactor;\n          var Cx2 = parseInt(multiSapeAry[k].cubBzPt[1].x) * cX//slideFactor;\n          var Cy2 = parseInt(multiSapeAry[k].cubBzPt[1].y) * cY//slideFactor;\n          var Cx3 = parseInt(multiSapeAry[k].cubBzPt[2].x) * cX//slideFactor;\n          var Cy3 = parseInt(multiSapeAry[k].cubBzPt[2].y) * cY//slideFactor;\n          d += ' C' + Cx1 + ',' + Cy1 + ' ' + Cx2 + ',' + Cy2 + ' ' + Cx3 + ',' + Cy3\n        } else if (multiSapeAry[k].type == 'arcTo') {\n          var hR = parseInt(multiSapeAry[k].hR) * cX//slideFactor;\n          var wR = parseInt(multiSapeAry[k].wR) * cY//slideFactor;\n          var stAng = parseInt(multiSapeAry[k].stAng) / 60000\n          var swAng = parseInt(multiSapeAry[k].swAng) / 60000\n          //var shftX = parseInt(multiSapeAry[k].shftX) * slideFactor;\n          //var shftY = parseInt(multiSapeAry[k].shftY) * slideFactor;\n          var endAng = stAng + swAng\n\n          d += shapeArc(wR, hR, wR, hR, stAng, endAng, false)\n        } else if (multiSapeAry[k].type == 'quadBezTo') {\n          console.log('custShapType: quadBezTo - TODO')\n\n        } else if (multiSapeAry[k].type == 'close') {\n          // result += \"<path d='\" + d + \"' fill='\" + (!imgFillFlg ? (grndFillFlg ? \"url(#linGrd_\" + shpId + \")\" : fillColor) : \"url(#imgPtrn_\" + shpId + \")\") +\n          //     \"' stroke='\" + ((border === undefined) ? \"\" : border.color) + \"' stroke-width='\" + ((border === undefined) ? \"\" : border.width) + \"' stroke-dasharray='\" + ((border === undefined) ? \"\" : border.strokeDasharray) + \"' \";\n          // result += \"/>\";\n          // d = \"\";\n          // isClose = true;\n\n          d += 'z'\n        }\n        k++\n      }\n      //if (!isClose) {\n      //only one \"moveTo\" and no \"close\"\n      result += '<path d=\\'' + d + '\\' fill=\\'' + (!imgFillFlg ? (grndFillFlg ? 'url(#linGrd_' + shpId + ')' : fillColor) : 'url(#imgPtrn_' + shpId + ')') +\n        '\\' stroke=\\'' + ((border === undefined) ? '' : border.color) + '\\' stroke-width=\\'' + ((border === undefined) ? '' : border.width) + '\\' stroke-dasharray=\\'' + ((border === undefined) ? '' : border.strokeDasharray) + '\\' '\n      result += '/>'\n      //console.log(result);\n    }\n\n    result += '</svg>'\n    result += '<div class=\\'block ' + getVerticalAlign(node, slideLayoutSpNode, slideMasterSpNode, type) + //block content\n      ' ' + getContentDir(node, type, warpObj) +\n      '\\' _id=\\'' + id + '\\' _idx=\\'' + idx + '\\' _type=\\'' + type + '\\' _name=\\'' + name +\n      '\\' style=\\'' +\n      getPosition(slideXfrmNode, pNode, slideLayoutXfrmNode, slideMasterXfrmNode, sType) +\n      getSize(slideXfrmNode, slideLayoutXfrmNode, slideMasterXfrmNode) +\n      ' z-index: ' + order + ';' +\n      'transform: rotate(' + ((txtRotate !== undefined) ? txtRotate : 0) + 'deg);' +\n      '\\'>'\n\n    // TextBody\n    if (node['p:txBody'] !== undefined && (isUserDrawnBg === undefined || isUserDrawnBg === true)) {\n      if (type != 'diagram' && type != 'textBox') {\n        type = 'shape'\n      }\n      result += await genTextBody(node['p:txBody'], node, slideLayoutSpNode, slideMasterSpNode, type, idx, warpObj) //type=shape\n    }\n    result += '</div>'\n\n    // result = \"\";\n  } else {\n\n    result += '<div class=\\'block ' + getVerticalAlign(node, slideLayoutSpNode, slideMasterSpNode, type) +//block content\n      ' ' + getContentDir(node, type, warpObj) +\n      '\\' _id=\\'' + id + '\\' _idx=\\'' + idx + '\\' _type=\\'' + type + '\\' _name=\\'' + name +\n      '\\' style=\\'' +\n      getPosition(slideXfrmNode, pNode, slideLayoutXfrmNode, slideMasterXfrmNode, sType) +\n      getSize(slideXfrmNode, slideLayoutXfrmNode, slideMasterXfrmNode) +\n      getBorder(node, pNode, false, 'shape', warpObj) +\n      await getShapeFill(node, pNode, false, warpObj, source) +\n      ' z-index: ' + order + ';' +\n      'transform: rotate(' + ((txtRotate !== undefined) ? txtRotate : 0) + 'deg);' +\n      '\\'>'\n\n    // TextBody\n    if (node['p:txBody'] !== undefined && (isUserDrawnBg === undefined || isUserDrawnBg === true)) {\n      result += await genTextBody(node['p:txBody'], node, slideLayoutSpNode, slideMasterSpNode, type, idx, warpObj)\n    }\n    result += '</div>'\n\n  }\n  //console.log(\"div block result:\\n\", result)\n  return result\n}\n\nfunction shapePie(H, w, adj1, adj2, isClose) {\n  var pieVal = parseInt(adj2)\n  var piAngle = parseInt(adj1)\n  var size = parseInt(H),\n    radius = (size / 2),\n    value = pieVal - piAngle\n  if (value < 0) {\n    value = 360 + value\n  }\n  //console.log(\"value: \",value)\n  value = Math.min(Math.max(value, 0), 360)\n\n  //calculate x,y coordinates of the point on the circle to draw the arc to.\n  var x = Math.cos((2 * Math.PI) / (360 / value))\n  var y = Math.sin((2 * Math.PI) / (360 / value))\n\n\n  //d is a string that describes the path of the slice.\n  var longArc, d, rot\n  if (isClose) {\n    longArc = (value <= 180) ? 0 : 1\n    d = 'M' + radius + ',' + radius + ' L' + radius + ',' + 0 + ' A' + radius + ',' + radius + ' 0 ' + longArc + ',1 ' + (radius + y * radius) + ',' + (radius - x * radius) + ' z'\n    rot = 'rotate(' + (piAngle - 270) + ', ' + radius + ', ' + radius + ')'\n  } else {\n    longArc = (value <= 180) ? 0 : 1\n    var radius1 = radius\n    var radius2 = w / 2\n    d = 'M' + radius1 + ',' + 0 + ' A' + radius2 + ',' + radius1 + ' 0 ' + longArc + ',1 ' + (radius2 + y * radius2) + ',' + (radius1 - x * radius1)\n    rot = 'rotate(' + (piAngle + 90) + ', ' + radius + ', ' + radius + ')'\n  }\n\n  return [d, rot]\n}\nfunction shapeGear(w, h, points) {\n  var innerRadius = h//gear.innerRadius;\n  var outerRadius = 1.5 * innerRadius\n  var cx = outerRadius//Math.max(innerRadius, outerRadius),                   // center x\n  const cy = outerRadius//Math.max(innerRadius, outerRadius),                    // center y\n  const notches = points,//gear.points,                      // num. of notches\n    radiusO = outerRadius,                    // outer radius\n    radiusI = innerRadius,                    // inner radius\n    taperO = 50,                     // outer taper %\n    taperI = 35,                     // inner taper %\n    // pre-calculate values for loop\n    pi2 = 2 * Math.PI,            // cache 2xPI (360deg)\n    angle = pi2 / (notches * 2),    // angle between notches\n    taperAI = angle * taperI * 0.005, // inner taper offset (100% = half notch)\n    taperAO = angle * taperO * 0.005 // outer taper offset\n  let a = angle,                  // iterator (angle)\n    toggle = false\n  // move to starting point\n  var d = ' M' + (cx + radiusO * Math.cos(taperAO)) + ' ' + (cy + radiusO * Math.sin(taperAO))\n\n  // loop\n  for (; a <= pi2 + angle; a += angle) {\n    // draw inner to outer line\n    if (toggle) {\n      d += ' L' + (cx + radiusI * Math.cos(a - taperAI)) + ',' + (cy + radiusI * Math.sin(a - taperAI))\n      d += ' L' + (cx + radiusO * Math.cos(a + taperAO)) + ',' + (cy + radiusO * Math.sin(a + taperAO))\n    } else { // draw outer to inner line\n      d += ' L' + (cx + radiusO * Math.cos(a - taperAO)) + ',' + (cy + radiusO * Math.sin(a - taperAO)) // outer line\n      d += ' L' + (cx + radiusI * Math.cos(a + taperAI)) + ',' + (cy + radiusI * Math.sin(a + taperAI))// inner line\n\n    }\n    // switch level\n    toggle = !toggle\n  }\n  // close the final line\n  d += ' '\n  return d\n}\nfunction shapeArc(cX, cY, rX, rY, stAng, endAng, isClose) {\n  var dData\n  var angle = stAng\n  if (endAng >= stAng) {\n    while (angle <= endAng) {\n      var radians = angle * (Math.PI / 180)  // convert degree to radians\n      var x = cX + Math.cos(radians) * rX\n      var y = cY + Math.sin(radians) * rY\n      if (angle == stAng) {\n        dData = ' M' + x + ' ' + y\n      }\n      dData += ' L' + x + ' ' + y\n      angle++\n    }\n  } else {\n    while (angle > endAng) {\n      var radians = angle * (Math.PI / 180)  // convert degree to radians\n      var x = cX + Math.cos(radians) * rX\n      var y = cY + Math.sin(radians) * rY\n      if (angle == stAng) {\n        dData = ' M ' + x + ' ' + y\n      }\n      dData += ' L ' + x + ' ' + y\n      angle--\n    }\n  }\n  dData += (isClose ? ' z' : '')\n  return dData\n}\nfunction shapeSnipRoundRect(w, h, adj1, adj2, shapeType, adjType) {\n  /*\n            shapeType: snip,round\n            adjType: cornr1,cornr2,cornrAll,diag\n            */\n  var adjA, adjB, adjC, adjD\n  if (adjType == 'cornr1') {\n    adjA = 0\n    adjB = 0\n    adjC = 0\n    adjD = adj1\n  } else if (adjType == 'cornr2') {\n    adjA = adj1\n    adjB = adj2\n    adjC = adj2\n    adjD = adj1\n  } else if (adjType == 'cornrAll') {\n    adjA = adj1\n    adjB = adj1\n    adjC = adj1\n    adjD = adj1\n  } else if (adjType == 'diag') {\n    adjA = adj1\n    adjB = adj2\n    adjC = adj1\n    adjD = adj2\n  }\n  //d is a string that describes the path of the slice.\n  var d\n  if (shapeType == 'round') {\n    d = 'M0' + ',' + (h / 2 + (1 - adjB) * (h / 2)) + ' Q' + 0 + ',' + h + ' ' + adjB * (w / 2) + ',' + h + ' L' + (w / 2 + (1 - adjC) * (w / 2)) + ',' + h +\n      ' Q' + w + ',' + h + ' ' + w + ',' + (h / 2 + (h / 2) * (1 - adjC)) + 'L' + w + ',' + (h / 2) * adjD +\n      ' Q' + w + ',' + 0 + ' ' + (w / 2 + (w / 2) * (1 - adjD)) + ',0 L' + (w / 2) * adjA + ',0' +\n      ' Q' + 0 + ',' + 0 + ' 0,' + (h / 2) * (adjA) + ' z'\n  } else if (shapeType == 'snip') {\n    d = 'M0' + ',' + adjA * (h / 2) + ' L0' + ',' + (h / 2 + (h / 2) * (1 - adjB)) + 'L' + adjB * (w / 2) + ',' + h +\n      ' L' + (w / 2 + (w / 2) * (1 - adjC)) + ',' + h + 'L' + w + ',' + (h / 2 + (h / 2) * (1 - adjC)) +\n      ' L' + w + ',' + adjD * (h / 2) + 'L' + (w / 2 + (w / 2) * (1 - adjD)) + ',0 L' + ((w / 2) * adjA) + ',0 z'\n  }\n  return d\n}\n/*\n        function shapePolygon(sidesNum) {\n            var sides  = sidesNum;\n            var radius = 100;\n            var angle  = 2 * Math.PI / sides;\n            var points = [];\n\n            for (var i = 0; i < sides; i++) {\n                points.push(radius + radius * Math.sin(i * angle));\n                points.push(radius - radius * Math.cos(i * angle));\n            }\n\n            return points;\n        }\n        */\nasync function processPicNode(node, warpObj, source, sType) {\n  //console.log(\"processPicNode node:\", node, \"source:\", source, \"sType:\", sType, \"warpObj;\", warpObj);\n  var rtrnData = ''\n  var mediaPicFlag = false\n  var order = node['attrs']['order']\n\n  var rid = node['p:blipFill']['a:blip']['attrs']['r:embed']\n  var resObj\n  if (source == 'slideMasterBg') {\n    resObj = warpObj['masterResObj']\n  } else if (source == 'slideLayoutBg') {\n    resObj = warpObj['layoutResObj']\n  } else {\n    //imgName = warpObj[\"slideResObj\"][rid][\"target\"];\n    resObj = warpObj['slideResObj']\n  }\n  var imgName = resObj[rid]['target']\n\n  //console.log(\"processPicNode imgName:\", imgName);\n  var imgFileExt = extractFileExtension(imgName).toLowerCase()\n  var zip = warpObj['zip']\n  var imgArrayBuffer = await zip.file(imgName).async('arraybuffer')\n  var mimeType = ''\n  var xfrmNode = node['p:spPr']['a:xfrm']\n  if (xfrmNode === undefined) {\n    var idx = getTextByPathList(node, ['p:nvPicPr', 'p:nvPr', 'p:ph', 'attrs', 'idx'])\n    var type = getTextByPathList(node, ['p:nvPicPr', 'p:nvPr', 'p:ph', 'attrs', 'type'])\n    if (idx !== undefined) {\n      xfrmNode = getTextByPathList(warpObj['slideLayoutTables'], ['idxTable', idx, 'p:spPr', 'a:xfrm'])\n    }\n  }\n  ///////////////////////////////////////Amir//////////////////////////////\n  var rotate = 0\n  var rotateNode = getTextByPathList(node, ['p:spPr', 'a:xfrm', 'attrs', 'rot'])\n  if (rotateNode !== undefined) {\n    rotate = angleToDegrees(rotateNode)\n  }\n  //video\n  var vdoNode = getTextByPathList(node, ['p:nvPicPr', 'p:nvPr', 'a:videoFile'])\n  var vdoRid, vdoFile, vdoFileExt, vdoMimeType, uInt8Array, blob, vdoBlob, mediaSupportFlag = false, isVdeoLink = false\n  var mediaProcess = settings.mediaProcess\n  if (vdoNode !== undefined & mediaProcess) {\n    vdoRid = vdoNode['attrs']['r:link']\n    vdoFile = resObj[vdoRid]['target']\n    var checkIfLink = IsVideoLink(vdoFile)\n    if (checkIfLink) {\n      vdoFile = escapeHtml(vdoFile)\n      //vdoBlob = vdoFile;\n      isVdeoLink = true\n      mediaSupportFlag = true\n      mediaPicFlag = true\n    } else {\n      vdoFileExt = extractFileExtension(vdoFile).toLowerCase()\n      if (vdoFileExt == 'mp4' || vdoFileExt == 'webm' || vdoFileExt == 'ogg') {\n        uInt8Array = await zip.file(vdoFile).async('arraybuffer')\n        vdoMimeType = getMimeType(vdoFileExt)\n        blob = new Blob([uInt8Array], {\n          type: vdoMimeType\n        })\n        vdoBlob = URL.createObjectURL(blob)\n        mediaSupportFlag = true\n        mediaPicFlag = true\n      }\n    }\n  }\n  //Audio\n  var audioNode = getTextByPathList(node, ['p:nvPicPr', 'p:nvPr', 'a:audioFile'])\n  var audioRid, audioFile, audioFileExt, audioMimeType, uInt8ArrayAudio, blobAudio, audioBlob\n  var audioPlayerFlag = false\n  var audioObjc\n  if (audioNode !== undefined & mediaProcess) {\n    audioRid = audioNode['attrs']['r:link']\n    audioFile = resObj[audioRid]['target']\n    audioFileExt = extractFileExtension(audioFile).toLowerCase()\n    if (audioFileExt == 'mp3' || audioFileExt == 'wav' || audioFileExt == 'ogg') {\n      uInt8ArrayAudio = await zip.file(audioFile).async('arraybuffer')\n      blobAudio = new Blob([uInt8ArrayAudio])\n      audioBlob = URL.createObjectURL(blobAudio)\n      var cx = parseInt(xfrmNode['a:ext']['attrs']['cx']) * 20\n      var cy = xfrmNode['a:ext']['attrs']['cy']\n      var x = parseInt(xfrmNode['a:off']['attrs']['x']) / 2.5\n      var y = xfrmNode['a:off']['attrs']['y']\n      audioObjc = {\n        'a:ext': {\n          'attrs': {\n            'cx': cx,\n            'cy': cy\n          }\n        },\n        'a:off': {\n          'attrs': {\n            'x': x,\n            'y': y\n\n          }\n        }\n      }\n      audioPlayerFlag = true\n      mediaSupportFlag = true\n      mediaPicFlag = true\n    }\n  }\n  //console.log(node)\n  //////////////////////////////////////////////////////////////////////////\n  mimeType = getMimeType(imgFileExt)\n  rtrnData = '<div class=\\'block content\\' style=\\'' +\n    ((mediaProcess && audioPlayerFlag) ? getPosition(audioObjc, node, undefined, undefined) : getPosition(xfrmNode, node, undefined, undefined)) +\n    ((mediaProcess && audioPlayerFlag) ? getSize(audioObjc, undefined, undefined) : getSize(xfrmNode, undefined, undefined)) +\n    ' z-index: ' + order + ';' +\n    'transform: rotate(' + rotate + 'deg);\\'>'\n  if ((vdoNode === undefined && audioNode === undefined) || !mediaProcess || !mediaSupportFlag) {\n    rtrnData += '<img src=\\'data:' + mimeType + ';base64,' + base64ArrayBuffer(imgArrayBuffer) + '\\' style=\\'width: 100%; height: 100%\\'/>'\n  } else if ((vdoNode !== undefined || audioNode !== undefined) && mediaProcess && mediaSupportFlag) {\n    if (vdoNode !== undefined && !isVdeoLink) {\n      rtrnData += '<video  src=\\'' + vdoBlob + '\\' controls style=\\'width: 100%; height: 100%\\'>Your browser does not support the video tag.</video>'\n    } else if (vdoNode !== undefined && isVdeoLink) {\n      rtrnData += '<iframe   src=\\'' + vdoFile + '\\' controls style=\\'width: 100%; height: 100%\\'></iframe >'\n    }\n    if (audioNode !== undefined) {\n      rtrnData += '<audio id=\"audio_player\" controls ><source src=\"' + audioBlob + '\"></audio>'\n      //'<button onclick=\"audio_player.play()\">Play</button>'+\n      //'<button onclick=\"audio_player.pause()\">Pause</button>';\n    }\n  }\n  if (!mediaSupportFlag && mediaPicFlag) {\n    rtrnData += '<span style=\\'color:red;font-size:40px;position: absolute;\\'>This media file Not supported by HTML5</span>'\n  }\n  if ((vdoNode !== undefined || audioNode !== undefined) && !mediaProcess && mediaSupportFlag) {\n    console.log('Founded supported media file but media process disabled (mediaProcess=false)')\n  }\n  rtrnData += '</div>'\n  //console.log(rtrnData)\n  return rtrnData\n}\n\nasync function processGraphicFrameNode(node, warpObj, source, sType) {\n\n  var result = ''\n  var graphicTypeUri = getTextByPathList(node, ['a:graphic', 'a:graphicData', 'attrs', 'uri'])\n\n  switch (graphicTypeUri) {\n    case 'http://schemas.openxmlformats.org/drawingml/2006/table':\n      result = await genTable(node, warpObj)\n      break\n    case 'http://schemas.openxmlformats.org/drawingml/2006/chart':\n      result = await genChart(node, warpObj)\n      break\n    case 'http://schemas.openxmlformats.org/drawingml/2006/diagram':\n      result = await genDiagram(node, warpObj, source, sType)\n      break\n    case 'http://schemas.openxmlformats.org/presentationml/2006/ole':\n      //result = genDiagram(node, warpObj, source, sType);\n      var oleObjNode = getTextByPathList(node, ['a:graphic', 'a:graphicData', 'mc:AlternateContent', 'mc:Fallback','p:oleObj'])\n\n      if (oleObjNode === undefined) {\n        oleObjNode = getTextByPathList(node, ['a:graphic', 'a:graphicData', 'p:oleObj'])\n      }\n      //console.log(\"node:\", node, \"oleObjNode:\", oleObjNode)\n      if (oleObjNode !== undefined){\n        result = await processGroupSpNode(oleObjNode, warpObj, source)\n      }\n      break\n    default:\n  }\n\n  return result\n}\n\nfunction processSpPrNode(node, warpObj) {\n\n  /*\n            * 2241 <xsd:complexType name=\"CT_ShapeProperties\">\n            * 2242   <xsd:sequence>\n            * 2243     <xsd:element name=\"xfrm\" type=\"CT_Transform2D\"  minOccurs=\"0\" maxOccurs=\"1\"/>\n            * 2244     <xsd:group   ref=\"EG_Geometry\"                  minOccurs=\"0\" maxOccurs=\"1\"/>\n            * 2245     <xsd:group   ref=\"EG_FillProperties\"            minOccurs=\"0\" maxOccurs=\"1\"/>\n            * 2246     <xsd:element name=\"ln\" type=\"CT_LineProperties\" minOccurs=\"0\" maxOccurs=\"1\"/>\n            * 2247     <xsd:group   ref=\"EG_EffectProperties\"          minOccurs=\"0\" maxOccurs=\"1\"/>\n            * 2248     <xsd:element name=\"scene3d\" type=\"CT_Scene3D\"   minOccurs=\"0\" maxOccurs=\"1\"/>\n            * 2249     <xsd:element name=\"sp3d\" type=\"CT_Shape3D\"      minOccurs=\"0\" maxOccurs=\"1\"/>\n            * 2250     <xsd:element name=\"extLst\" type=\"CT_OfficeArtExtensionList\" minOccurs=\"0\" maxOccurs=\"1\"/>\n            * 2251   </xsd:sequence>\n            * 2252   <xsd:attribute name=\"bwMode\" type=\"ST_BlackWhiteMode\" use=\"optional\"/>\n            * 2253 </xsd:complexType>\n            */\n\n  // TODO:\n}\n\nvar is_first_br = false\nasync function genTextBody(textBodyNode, spNode, slideLayoutSpNode, slideMasterSpNode, type, idx, warpObj, tbl_col_width) {\n  var text = ''\n  var slideMasterTextStyles = warpObj['slideMasterTextStyles']\n\n  if (textBodyNode === undefined) {\n    return text\n  }\n  //rtl : <p:txBody>\n  //          <a:bodyPr wrap=\"square\" rtlCol=\"1\">\n\n  var pFontStyle = getTextByPathList(spNode, [ 'p:style', 'a:fontRef' ])\n  //console.log(\"genTextBody spNode: \", getTextByPathList(spNode,[\"p:spPr\",\"a:xfrm\",\"a:ext\"]));\n\n  //var lstStyle = textBodyNode[\"a:lstStyle\"];\n\n  var apNode = textBodyNode['a:p']\n  if (apNode.constructor !== Array) {\n    apNode = [ apNode ]\n  }\n\n  for (var i = 0; i < apNode.length; i++) {\n    var pNode = apNode[i]\n    var rNode = pNode['a:r']\n    var fldNode = pNode['a:fld']\n    var brNode = pNode['a:br']\n    if (rNode !== undefined) {\n      rNode = (rNode.constructor === Array) ? rNode : [ rNode ]\n    }\n    if (rNode !== undefined && fldNode !== undefined) {\n      fldNode = (fldNode.constructor === Array) ? fldNode : [ fldNode ]\n      rNode = rNode.concat(fldNode)\n    }\n    if (rNode !== undefined && brNode !== undefined) {\n      is_first_br = true\n      brNode = (brNode.constructor === Array) ? brNode : [ brNode ]\n      brNode.forEach(function (item, indx) {\n        item.type = 'br'\n      })\n      if (brNode.length > 1) {\n        brNode.shift()\n      }\n      rNode = rNode.concat(brNode)\n      //console.log(\"single a:p  rNode:\", rNode, \"brNode:\", brNode )\n      rNode.sort(function (a, b) {\n        return a.attrs.order - b.attrs.order\n      })\n      //console.log(\"sorted rNode:\",rNode)\n    }\n    //rtlStr = \"\";//\"dir='\"+isRTL+\"'\";\n    var styleText = ''\n    var marginsVer = getVerticalMargins(pNode, textBodyNode, type, idx, warpObj)\n    if (marginsVer != '') {\n      styleText = marginsVer\n    }\n    if (type == 'body' || type == 'obj' || type == 'shape') {\n      styleText += 'font-size: 0px;'\n      //styleText += \"line-height: 0;\";\n      styleText += 'font-weight: 100;'\n      styleText += 'font-style: normal;'\n    }\n    var cssName = ''\n\n    if (styleText in styleTable) {\n      cssName = styleTable[styleText]['name']\n    } else {\n      cssName = '_css_' + (Object.keys(styleTable).length + 1)\n      styleTable[styleText] = {\n        'name': cssName,\n        'text': styleText\n      }\n    }\n    //console.log(\"textBodyNode: \", textBodyNode[\"a:lstStyle\"])\n    var prg_width_node = getTextByPathList(spNode, [ 'p:spPr', 'a:xfrm', 'a:ext', 'attrs', 'cx' ])\n    var prg_height_node// = getTextByPathList(spNode, [\"p:spPr\", \"a:xfrm\", \"a:ext\", \"attrs\", \"cy\"]);\n    var sld_prg_width = ((prg_width_node !== undefined) ? ('width:' + (computedFactor(parseInt(prg_width_node))) + 'px;') : 'width:inherit;')\n    var sld_prg_height = ((prg_height_node !== undefined) ? ('height:' + (computedFactor(parseInt(prg_height_node))) + 'px;') : '')\n    var prg_dir = getPregraphDir(pNode, textBodyNode, idx, type, warpObj)\n    text += '<div style=\\'display: flex;' + sld_prg_width + sld_prg_height + '\\' class=\\'slide-prgrph ' + getHorizontalAlign(pNode, textBodyNode, idx, type, prg_dir, warpObj) + ' ' +\n      prg_dir + ' ' + cssName + '\\' >'\n    var buText_ary = await genBuChar(pNode, i, spNode, textBodyNode, pFontStyle, idx, type, warpObj)\n    var isBullate = (buText_ary[0] !== undefined && buText_ary[0] !== null && buText_ary[0] != '') ? true : false\n    var bu_width = (buText_ary[1] !== undefined && buText_ary[1] !== null && isBullate) ? buText_ary[1] + buText_ary[2] : 0\n    text += (buText_ary[0] !== undefined) ? buText_ary[0] : ''\n    //get text margin\n    var margin_ary = getPregraphMargn(pNode, idx, type, isBullate, warpObj)\n    var margin = margin_ary[0]\n    var mrgin_val = margin_ary[1]\n    if (prg_width_node === undefined && tbl_col_width !== undefined && prg_width_node != 0) {\n      //sorce : table text\n      prg_width_node = tbl_col_width\n    }\n\n    var prgrph_text = ''\n    //var prgr_txt_art = [];\n    var total_text_len = 0\n    if (rNode === undefined && pNode !== undefined) {\n      // without r\n      var prgr_text = await genSpanElement(pNode, undefined, spNode, textBodyNode, pFontStyle, slideLayoutSpNode, idx, type, 1, warpObj, isBullate)\n      if (isBullate) {\n        var txt_obj = $(prgr_text)\n          .css({ 'position': 'absolute', 'float': 'left', 'white-space': 'nowrap', 'visibility': 'hidden' })\n          .appendTo($('body'))\n        total_text_len += txt_obj.outerWidth()\n        txt_obj.remove()\n      }\n      prgrph_text += prgr_text\n    } else if (rNode !== undefined) {\n      // with multi r\n      for (var j = 0; j < rNode.length; j++) {\n        var prgr_text = await genSpanElement(rNode[j], j, pNode, textBodyNode, pFontStyle, slideLayoutSpNode, idx, type, rNode.length, warpObj, isBullate)\n        if (isBullate) {\n          var txt_obj = $(prgr_text)\n            .css({ 'position': 'absolute', 'float': 'left', 'white-space': 'nowrap', 'visibility': 'hidden' })\n            .appendTo($('body'))\n          total_text_len += txt_obj.outerWidth()\n          txt_obj.remove()\n        }\n        prgrph_text += prgr_text\n      }\n    }\n\n    prg_width_node = computedFactor(parseInt(prg_width_node)) - bu_width - mrgin_val\n    if (isBullate) {\n      //get prg_width_node if there is a bulltes\n      //console.log(\"total_text_len: \", total_text_len, \"prg_width_node:\", prg_width_node)\n\n      if (total_text_len < prg_width_node) {\n        prg_width_node = total_text_len + bu_width\n      }\n    }\n    var prg_width = ((prg_width_node !== undefined) ? ('width:' + (prg_width_node)) + 'px;' : 'width:inherit;')\n    text += '<div style=\\'height: 100%;direction: initial;overflow-wrap:break-word;word-wrap: break-word;' + prg_width + margin + '\\' >'\n    text += prgrph_text\n    text += '</div>'\n    text += '</div>'\n  }\n\n  return text\n}\n\nasync function genBuChar(node, i, spNode, textBodyNode, pFontStyle, idx, type, warpObj) {\n  //console.log(\"genBuChar node: \", node, \", spNode: \", spNode, \", pFontStyle: \", pFontStyle, \"type\", type)\n  ///////////////////////////////////////Amir///////////////////////////////\n  var sldMstrTxtStyles = warpObj['slideMasterTextStyles']\n  var lstStyle = textBodyNode['a:lstStyle']\n  let bullet = ''\n\n  var rNode = getTextByPathList(node, [ 'a:r' ])\n  if (rNode !== undefined && rNode.constructor === Array) {\n    rNode = rNode[0] //bulvar only to first \"a:r\"\n  }\n  var lvl = parseInt(getTextByPathList(node['a:pPr'], [ 'attrs', 'lvl' ])) + 1\n  if (isNaN(lvl)) {\n    lvl = 1\n  }\n  var lvlStr = 'a:lvl' + lvl + 'pPr'\n  var dfltBultColor, dfltBultSize, bultColor, bultSize, color_tye\n\n  if (rNode !== undefined) {\n    dfltBultColor = await getFontColorPr(rNode, spNode, lstStyle, pFontStyle, lvl, idx, type, warpObj)\n    color_tye = dfltBultColor[2]\n    dfltBultSize = getFontSize(rNode, textBodyNode, pFontStyle, lvl, type, warpObj)\n  } else {\n    return ''\n  }\n  //console.log(\"Bulvar Size: \" + bultSize);\n\n  var bulvar = '', marRStr = '', marLStr = '', margin_val = 0, font_val = 0\n  /////////////////////////////////////////////////////////////////\n\n\n  var pPrNode = node['a:pPr']\n  var BullNONE = getTextByPathList(pPrNode, [ 'a:buNone' ])\n  if (BullNONE !== undefined) {\n    return ''\n  }\n\n  var buType = 'TYPE_NONE'\n\n  var layoutMasterNode = getLayoutAndMasterNode(node, idx, type, warpObj)\n  var pPrNodeLaout = layoutMasterNode.nodeLaout\n  var pPrNodeMaster = layoutMasterNode.nodeMaster\n\n  var buChar = getTextByPathList(pPrNode, [ 'a:buChar', 'attrs', 'char' ])\n  var buNum = getTextByPathList(pPrNode, [ 'a:buAutoNum', 'attrs', 'type' ])\n  var buPic = getTextByPathList(pPrNode, [ 'a:buBlip' ])\n  if (buChar !== undefined) {\n    buType = 'TYPE_BULLET'\n  }\n  if (buNum !== undefined) {\n    buType = 'TYPE_NUMERIC'\n  }\n  if (buPic !== undefined) {\n    buType = 'TYPE_BULPIC'\n  }\n\n  var buFontSize = getTextByPathList(pPrNode, [ 'a:buSzPts', 'attrs', 'val' ])\n  if (buFontSize === undefined) {\n    buFontSize = getTextByPathList(pPrNode, [ 'a:buSzPct', 'attrs', 'val' ])\n    if (buFontSize !== undefined) {\n      var prcnt = parseInt(buFontSize) / 100000\n      //dfltBultSize = XXpt\n      //var dfltBultSizeNoPt = dfltBultSize.substr(0, dfltBultSize.length - 2);\n      var dfltBultSizeNoPt = parseInt(dfltBultSize, 'px')\n      bultSize = prcnt * (parseInt(dfltBultSizeNoPt)) + 'px'// + \"pt\";\n    }\n  } else {\n    bultSize = (parseInt(buFontSize) / 100) * fontSizeFactor + 'px'\n  }\n\n  //get definde bulvar COLOR\n  var buClrNode = getTextByPathList(pPrNode, [ 'a:buClr' ])\n\n\n  if (buChar === undefined && buNum === undefined && buPic === undefined) {\n\n    if (lstStyle !== undefined) {\n      BullNONE = getTextByPathList(lstStyle, [ lvlStr, 'a:buNone' ])\n      if (BullNONE !== undefined) {\n        return ''\n      }\n      buType = 'TYPE_NONE'\n      buChar = getTextByPathList(lstStyle, [ lvlStr, 'a:buChar', 'attrs', 'char' ])\n      buNum = getTextByPathList(lstStyle, [ lvlStr, 'a:buAutoNum', 'attrs', 'type' ])\n      buPic = getTextByPathList(lstStyle, [ lvlStr, 'a:buBlip' ])\n      if (buChar !== undefined) {\n        buType = 'TYPE_BULLET'\n      }\n      if (buNum !== undefined) {\n        buType = 'TYPE_NUMERIC'\n      }\n      if (buPic !== undefined) {\n        buType = 'TYPE_BULPIC'\n      }\n      if (buChar !== undefined || buNum !== undefined || buPic !== undefined) {\n        pPrNode = lstStyle[lvlStr]\n      }\n    }\n  }\n  if (buChar === undefined && buNum === undefined && buPic === undefined) {\n    //check in slidelayout and masterlayout - TODO\n    if (pPrNodeLaout !== undefined) {\n      BullNONE = getTextByPathList(pPrNodeLaout, [ 'a:buNone' ])\n      if (BullNONE !== undefined) {\n        return ''\n      }\n      buType = 'TYPE_NONE'\n      buChar = getTextByPathList(pPrNodeLaout, [ 'a:buChar', 'attrs', 'char' ])\n      buNum = getTextByPathList(pPrNodeLaout, [ 'a:buAutoNum', 'attrs', 'type' ])\n      buPic = getTextByPathList(pPrNodeLaout, [ 'a:buBlip' ])\n      if (buChar !== undefined) {\n        buType = 'TYPE_BULLET'\n      }\n      if (buNum !== undefined) {\n        buType = 'TYPE_NUMERIC'\n      }\n      if (buPic !== undefined) {\n        buType = 'TYPE_BULPIC'\n      }\n    }\n    if (buChar === undefined && buNum === undefined && buPic === undefined) {\n      //masterlayout\n\n      if (pPrNodeMaster !== undefined) {\n        BullNONE = getTextByPathList(pPrNodeMaster, [ 'a:buNone' ])\n        if (BullNONE !== undefined) {\n          return ''\n        }\n        buType = 'TYPE_NONE'\n        buChar = getTextByPathList(pPrNodeMaster, [ 'a:buChar', 'attrs', 'char' ])\n        buNum = getTextByPathList(pPrNodeMaster, [ 'a:buAutoNum', 'attrs', 'type' ])\n        buPic = getTextByPathList(pPrNodeMaster, [ 'a:buBlip' ])\n        if (buChar !== undefined) {\n          buType = 'TYPE_BULLET'\n        }\n        if (buNum !== undefined) {\n          buType = 'TYPE_NUMERIC'\n        }\n        if (buPic !== undefined) {\n          buType = 'TYPE_BULPIC'\n        }\n      }\n\n    }\n\n  }\n  //rtl\n  var getRtlVal = getTextByPathList(pPrNode, [ 'attrs', 'rtl' ])\n  if (getRtlVal === undefined) {\n    getRtlVal = getTextByPathList(pPrNodeLaout, [ 'attrs', 'rtl' ])\n    if (getRtlVal === undefined && type != 'shape') {\n      getRtlVal = getTextByPathList(pPrNodeMaster, [ 'attrs', 'rtl' ])\n    }\n  }\n  var isRTL = false\n  if (getRtlVal !== undefined && getRtlVal == '1') {\n    isRTL = true\n  }\n  //align\n  var alignNode = getTextByPathList(pPrNode, [ 'attrs', 'algn' ]) //\"l\" | \"ctr\" | \"r\" | \"just\" | \"justLow\" | \"dist\" | \"thaiDist\n  if (alignNode === undefined) {\n    alignNode = getTextByPathList(pPrNodeLaout, [ 'attrs', 'algn' ])\n    if (alignNode === undefined) {\n      alignNode = getTextByPathList(pPrNodeMaster, [ 'attrs', 'algn' ])\n    }\n  }\n  //indent?\n  var indentNode = getTextByPathList(pPrNode, [ 'attrs', 'indent' ])\n  if (indentNode === undefined) {\n    indentNode = getTextByPathList(pPrNodeLaout, [ 'attrs', 'indent' ])\n    if (indentNode === undefined) {\n      indentNode = getTextByPathList(pPrNodeMaster, [ 'attrs', 'indent' ])\n    }\n  }\n  var indent = 0\n  if (indentNode !== undefined) {\n    indent = parseInt(indentNode) * slideFactor\n  }\n  //marL\n  var marLNode = getTextByPathList(pPrNode, [ 'attrs', 'marL' ])\n  if (marLNode === undefined) {\n    marLNode = getTextByPathList(pPrNodeLaout, [ 'attrs', 'marL' ])\n    if (marLNode === undefined) {\n      marLNode = getTextByPathList(pPrNodeMaster, [ 'attrs', 'marL' ])\n    }\n  }\n  //console.log(\"genBuChar() isRTL\", isRTL, \"alignNode:\", alignNode)\n  if (marLNode !== undefined) {\n    var marginLeft = parseInt(marLNode) * slideFactor\n    if (isRTL) {// && alignNode == \"r\") {\n      marLStr = 'padding-right:'// \"margin-right: \";\n    } else {\n      marLStr = 'padding-left:'//\"margin-left: \";\n    }\n    margin_val = ((marginLeft + indent < 0) ? 0 : (marginLeft + indent))\n    marLStr += margin_val + 'px;'\n  }\n\n  //marR?\n  var marRNode = getTextByPathList(pPrNode, [ 'attrs', 'marR' ])\n  if (marRNode === undefined && marLNode === undefined) {\n    //need to check if this posble - TODO\n    marRNode = getTextByPathList(pPrNodeLaout, [ 'attrs', 'marR' ])\n    if (marRNode === undefined) {\n      marRNode = getTextByPathList(pPrNodeMaster, [ 'attrs', 'marR' ])\n    }\n  }\n  if (marRNode !== undefined) {\n    var marginRight = parseInt(marRNode) * slideFactor\n    if (isRTL) {// && alignNode == \"r\") {\n      marLStr = 'padding-right:'// \"margin-right: \";\n    } else {\n      marLStr = 'padding-left:'//\"margin-left: \";\n    }\n    marRStr += ((marginRight + indent < 0) ? 0 : (marginRight + indent)) + 'px;'\n  }\n\n  if (buType != 'TYPE_NONE') {\n    //var buFontAttrs = getTextByPathList(pPrNode, [\"a:buFont\", \"attrs\"]);\n  }\n  //console.log(\"Bulvar Type: \" + buType);\n  //console.log(\"NumericTypr: \" + buNum);\n  //console.log(\"buChar: \" + (buChar === undefined?'':buChar.charCodeAt(0)));\n  //get definde bulvar COLOR\n  if (buClrNode === undefined) {\n    //lstStyle\n    buClrNode = getTextByPathList(lstStyle, [ lvlStr, 'a:buClr' ])\n  }\n  if (buClrNode === undefined) {\n    buClrNode = getTextByPathList(pPrNodeLaout, [ 'a:buClr' ])\n    if (buClrNode === undefined) {\n      buClrNode = getTextByPathList(pPrNodeMaster, [ 'a:buClr' ])\n    }\n  }\n  var defBultColor\n  if (buClrNode !== undefined) {\n    defBultColor = getSolidFill(buClrNode, undefined, undefined, warpObj)\n  } else {\n    if (pFontStyle !== undefined) {\n      //console.log(\"genBuChar pFontStyle: \", pFontStyle)\n      defBultColor = getSolidFill(pFontStyle, undefined, undefined, warpObj)\n    }\n  }\n  if (defBultColor === undefined || defBultColor == 'NONE') {\n    bultColor = dfltBultColor\n  } else {\n    bultColor = [ defBultColor, '', 'solid' ]\n    color_tye = 'solid'\n  }\n  //console.log(\"genBuChar node:\", node, \"pPrNode\", pPrNode, \" buClrNode: \", buClrNode, \"defBultColor:\", defBultColor,\"dfltBultColor:\" , dfltBultColor , \"bultColor:\", bultColor)\n\n  //console.log(\"genBuChar: buClrNode: \", buClrNode, \"bultColor\", bultColor)\n  //get definde bulvar SIZE\n  if (buFontSize === undefined) {\n    buFontSize = getTextByPathList(pPrNodeLaout, [ 'a:buSzPts', 'attrs', 'val' ])\n    if (buFontSize === undefined) {\n      buFontSize = getTextByPathList(pPrNodeLaout, [ 'a:buSzPct', 'attrs', 'val' ])\n      if (buFontSize !== undefined) {\n        var prcnt = parseInt(buFontSize) / 100000\n        //var dfltBultSizeNoPt = dfltBultSize.substr(0, dfltBultSize.length - 2);\n        var dfltBultSizeNoPt = parseInt(dfltBultSize, 'px')\n        bultSize = prcnt * (parseInt(dfltBultSizeNoPt)) + 'px'// + \"pt\";\n      }\n    } else {\n      bultSize = (parseInt(buFontSize) / 100) * fontSizeFactor + 'px'\n    }\n  }\n  if (buFontSize === undefined) {\n    buFontSize = getTextByPathList(pPrNodeMaster, [ 'a:buSzPts', 'attrs', 'val' ])\n    if (buFontSize === undefined) {\n      buFontSize = getTextByPathList(pPrNodeMaster, [ 'a:buSzPct', 'attrs', 'val' ])\n      if (buFontSize !== undefined) {\n        var prcnt = parseInt(buFontSize) / 100000\n        //dfltBultSize = XXpt\n        //var dfltBultSizeNoPt = dfltBultSize.substr(0, dfltBultSize.length - 2);\n        var dfltBultSizeNoPt = parseInt(dfltBultSize, 'px')\n        bultSize = prcnt * (parseInt(dfltBultSizeNoPt)) + 'px'// + \"pt\";\n      }\n    } else {\n      bultSize = (parseInt(buFontSize) / 100) * fontSizeFactor + 'px'\n    }\n  }\n  if (buFontSize === undefined) {\n    bultSize = dfltBultSize\n  }\n  font_val = parseInt(bultSize, 'px')\n  ////////////////////////////////////////////////////////////////////////\n  if (buType == 'TYPE_BULLET') {\n    var typefaceNode = getTextByPathList(pPrNode, [ 'a:buFont', 'attrs', 'typeface' ])\n    var typeface = ''\n    if (typefaceNode !== undefined) {\n      typeface = 'font-family: ' + typefaceNode\n    }\n    // var marginLeft = parseInt(getTextByPathList(marLNode)) * slideFactor;\n    // var marginRight = parseInt(getTextByPathList(marRNode)) * slideFactor;\n    // if (isNaN(marginLeft)) {\n    //     marginLeft = 328600 * slideFactor;\n    // }\n    // if (isNaN(marginRight)) {\n    //     marginRight = 0;\n    // }\n\n    bulvar = '<div style=\\'height: 100%;' + typeface + ';' +\n      marLStr + marRStr +\n      'font-size:' + bultSize + ';'\n\n    //bulvar += \"display: table-cell;\";\n    //\"line-height: 0px;\";\n    if (color_tye == 'solid') {\n      if (bultColor[0] !== undefined && bultColor[0] != '') {\n        bulvar += 'color:#' + bultColor[0] + '; '\n      }\n      if (bultColor[1] !== undefined && bultColor[1] != '' && bultColor[1] != ';') {\n        bulvar += 'text-shadow:' + bultColor[1] + ';'\n      }\n      //no highlight/background-color to bullet\n      // if (bultColor[3] !== undefined && bultColor[3] != \"\") {\n      //     styleText += \"background-color: #\" + bultColor[3] + \";\";\n      // }\n    } else if (color_tye == 'pattern' || color_tye == 'pic' || color_tye == 'gradient') {\n      if (color_tye == 'pattern') {\n        bulvar += 'background:' + bultColor[0][0] + ';'\n        if (bultColor[0][1] !== null && bultColor[0][1] !== undefined && bultColor[0][1] != '') {\n          bulvar += 'background-size:' + bultColor[0][1] + ';'//\" 2px 2px;\" +\n        }\n        if (bultColor[0][2] !== null && bultColor[0][2] !== undefined && bultColor[0][2] != '') {\n          bulvar += 'background-position:' + bultColor[0][2] + ';'//\" 2px 2px;\" +\n        }\n        // bulvar += \"-webkit-background-clip: text;\" +\n        //     \"background-clip: text;\" +\n        //     \"color: transparent;\" +\n        //     \"-webkit-text-stroke: \" + bultColor[1].border + \";\" +\n        //     \"filter: \" + bultColor[1].effcts + \";\";\n      } else if (color_tye == 'pic') {\n        bulvar += bultColor[0] + ';'\n        // bulvar += \"-webkit-background-clip: text;\" +\n        //     \"background-clip: text;\" +\n        //     \"color: transparent;\" +\n        //     \"-webkit-text-stroke: \" + bultColor[1].border + \";\";\n\n      } else if (color_tye == 'gradient') {\n\n        var colorAry = bultColor[0].color\n        var rot = bultColor[0].rot\n\n        bulvar += 'background: linear-gradient(' + rot + 'deg,'\n        for (var i = 0; i < colorAry.length; i++) {\n          if (i == colorAry.length - 1) {\n            bulvar += '#' + colorAry[i] + ');'\n          } else {\n            bulvar += '#' + colorAry[i] + ', '\n          }\n        }\n        // bulvar += \"color: transparent;\" +\n        //     \"-webkit-background-clip: text;\" +\n        //     \"background-clip: text;\" +\n        //     \"-webkit-text-stroke: \" + bultColor[1].border + \";\";\n      }\n      bulvar += '-webkit-background-clip: text;' +\n        'background-clip: text;' +\n        'color: transparent;'\n      if (bultColor[1].border !== undefined && bultColor[1].border !== '') {\n        bulvar += '-webkit-text-stroke: ' + bultColor[1].border + ';'\n      }\n      if (bultColor[1].effcts !== undefined && bultColor[1].effcts !== '') {\n        bulvar += 'filter: ' + bultColor[1].effcts + ';'\n      }\n    }\n\n    if (isRTL) {\n      //bulvar += \"display: inline-block;white-space: nowrap ;direction:rtl\"; // float: right;\n      bulvar += 'white-space: nowrap ;direction:rtl' // display: table-cell;;\n    }\n    var htmlBu = buChar\n\n    if (!isIE11) {\n      //ie11 does not support unicode ?\n      htmlBu = getHtmlBullet(typefaceNode, buChar)\n    }\n    bulvar += '\\'><div style=\\'line-height: ' + (font_val / 2) + 'px;\\'>' + htmlBu + '</div></div>' //font_val\n    //}\n    // else {\n    //     marginLeft = 328600 * slideFactor * lvl;\n\n    //     bulvar = \"<div style='\" + marLStr + \"'>\" + buChar + \"</div>\";\n    // }\n  } else if (buType == 'TYPE_NUMERIC') { ///////////Amir///////////////////////////////\n    //if (buFontAttrs !== undefined) {\n    // var marginLeft = parseInt(getTextByPathList(pPrNode, [\"attrs\", \"marL\"])) * slideFactor;\n    // var marginRight = parseInt(buFontAttrs[\"pitchFamily\"]);\n\n    // if (isNaN(marginLeft)) {\n    //     marginLeft = 328600 * slideFactor;\n    // }\n    // if (isNaN(marginRight)) {\n    //     marginRight = 0;\n    // }\n    //var typeface = buFontAttrs[\"typeface\"];\n\n    bulvar = '<div style=\\'height: 100%;' + marLStr + marRStr +\n      'color:#' + bultColor[0] + ';' +\n      'font-size:' + bultSize + ';'// +\n    //\"line-height: 0px;\";\n    if (isRTL) {\n      bulvar += 'display: inline-block;white-space: nowrap ;direction:rtl;' // float: right;\n    } else {\n      bulvar += 'display: inline-block;white-space: nowrap ;direction:ltr;' //float: left;\n    }\n    bulvar += '\\' data-bulltname = \\'' + buNum + '\\' data-bulltlvl = \\'' + lvl + '\\' class=\\'numeric-bullet-style\\'></div>'\n    // } else {\n    //     marginLeft = 328600 * slideFactor * lvl;\n    //     bulvar = \"<div style='margin-left: \" + marginLeft + \"px;\";\n    //     if (isRTL) {\n    //         bulvar += \" float: right; direction:rtl;\";\n    //     } else {\n    //         bulvar += \" float: left; direction:ltr;\";\n    //     }\n    //     bulvar += \"' data-bulltname = '\" + buNum + \"' data-bulltlvl = '\" + lvl + \"' class='numeric-bullet-style'></div>\";\n    // }\n\n  } else if (buType == 'TYPE_BULPIC') { //PIC BULLET\n    // var marginLeft = parseInt(getTextByPathList(pPrNode, [\"attrs\", \"marL\"])) * slideFactor;\n    // var marginRight = parseInt(getTextByPathList(pPrNode, [\"attrs\", \"marR\"])) * slideFactor;\n\n    // if (isNaN(marginRight)) {\n    //     marginRight = 0;\n    // }\n    // //console.log(\"marginRight: \"+marginRight)\n    // //buPic\n    // if (isNaN(marginLeft)) {\n    //     marginLeft = 328600 * slideFactor;\n    // } else {\n    //     marginLeft = 0;\n    // }\n    //var buPicId = getTextByPathList(buPic, [\"a:blip\",\"a:extLst\",\"a:ext\",\"asvg:svgBlip\" , \"attrs\", \"r:embed\"]);\n    var buPicId = getTextByPathList(buPic, [ 'a:blip', 'attrs', 'r:embed' ])\n    var svgPicPath = ''\n    var buImg\n    if (buPicId !== undefined) {\n      //svgPicPath = warpObj[\"slideResObj\"][buPicId][\"target\"];\n      //buImg = warpObj[\"zip\"].file(svgPicPath).asText();\n      //}else{\n      //buPicId = getTextByPathList(buPic, [\"a:blip\", \"attrs\", \"r:embed\"]);\n      var imgPath = warpObj['slideResObj'][buPicId]['target']\n      //console.log(\"imgPath: \", imgPath);\n      var imgArrayBuffer = await warpObj['zip'].file(imgPath).async('arraybuffer')\n      var imgExt = imgPath.split('.').pop()\n      var imgMimeType = getMimeType(imgExt)\n      buImg = '<img src=\\'data:' + imgMimeType + ';base64,' + base64ArrayBuffer(imgArrayBuffer) + '\\' style=\\'width: 100%;\\'/>'// height: 100%\n      //console.log(\"imgPath: \"+imgPath+\"\\nimgMimeType: \"+imgMimeType)\n    }\n    if (buPicId === undefined) {\n      buImg = '&#8227;'\n    }\n    bulvar = '<div style=\\'height: 100%;' + marLStr + marRStr +\n      'width:' + bultSize + ';display: inline-block; '// +\n    //\"line-height: 0px;\";\n    if (isRTL) {\n      bulvar += 'display: inline-block;white-space: nowrap ;direction:rtl;' //direction:rtl; float: right;\n    }\n    bulvar += '\\'>' + buImg + '  </div>'\n    //////////////////////////////////////////////////////////////////////////////////////\n  }\n  // else {\n  //     bulvar = \"<div style='margin-left: \" + 328600 * slideFactor * lvl + \"px\" +\n  //         \"; margin-right: \" + 0 + \"px;'></div>\";\n  // }\n  //console.log(\"genBuChar: width: \", $(bullet).outerWidth())\n  return [ bullet, margin_val, font_val ]//$(bullet).outerWidth()];\n}\nfunction getHtmlBullet(typefaceNode, buChar) {\n  //http://www.alanwood.net/demos/wingdings.html\n  //not work for IE11\n  //console.log(\"genBuChar typefaceNode:\", typefaceNode, \" buChar:\", buChar, \"charCodeAt:\", buChar.charCodeAt(0))\n  switch (buChar) {\n    case '§':\n      return '&#9632;'//\"■\"; //9632 | U+25A0 | Black square\n      break\n    case 'q':\n      return '&#10065;'//\"❑\"; // 10065 | U+2751 | Lower right shadowed white square\n      break\n    case 'v':\n      return '&#10070;'//\"❖\"; //10070 | U+2756 | Black diamond minus white X\n      break\n    case 'Ø':\n      return '&#11162;'//\"⮚\"; //11162 | U+2B9A | Three-D top-lighted rightwards equilateral arrowhead\n      break\n    case 'ü':\n      return '&#10004;'//\"✔\";  //10004 | U+2714 | Heavy check mark\n      break\n    default:\n      if (/*typefaceNode == \"Wingdings\" ||*/ typefaceNode == 'Wingdings 2' || typefaceNode == 'Wingdings 3'){\n        var wingCharCode =  getDingbatToUnicode(typefaceNode, buChar)\n        if (wingCharCode !== null){\n          return '&#' + wingCharCode + ';'\n        }\n      }\n      return '&#' + (buChar.charCodeAt(0)) + ';'\n  }\n}\nfunction getDingbatToUnicode(typefaceNode, buChar){\n  if (_lib_dingbat__WEBPACK_IMPORTED_MODULE_4___default.a){\n    var dingbat_code = buChar.codePointAt(0) & 0xFFF\n    var char_unicode = null\n    var len = _lib_dingbat__WEBPACK_IMPORTED_MODULE_4___default.a.length\n    var i = 0\n    while (len--) {\n      // blah blah\n      var item = _lib_dingbat__WEBPACK_IMPORTED_MODULE_4___default.a[i]\n      if (item.f == typefaceNode && item.code == dingbat_code) {\n        char_unicode = item.unicode\n        break\n      }\n      i++\n    }\n    return char_unicode\n  }\n}\n\nfunction getLayoutAndMasterNode(node, idx, type, warpObj) {\n  var pPrNodeLaout, pPrNodeMaster\n  var pPrNode = node['a:pPr']\n  //lvl\n  var lvl = 1\n  var lvlNode = getTextByPathList(pPrNode, ['attrs', 'lvl'])\n  if (lvlNode !== undefined) {\n    lvl = parseInt(lvlNode) + 1\n  }\n  if (idx !== undefined) {\n    //slidelayout\n    pPrNodeLaout = getTextByPathList(warpObj['slideLayoutTables']['idxTable'][idx], ['p:txBody', 'a:lstStyle', 'a:lvl' + lvl + 'pPr'])\n    if (pPrNodeLaout === undefined) {\n      pPrNodeLaout = getTextByPathList(warpObj['slideLayoutTables']['idxTable'][idx], ['p:txBody', 'a:p', 'a:pPr'])\n      if (pPrNodeLaout === undefined) {\n        pPrNodeLaout = getTextByPathList(warpObj['slideLayoutTables']['idxTable'][idx], ['p:txBody', 'a:p', (lvl - 1), 'a:pPr'])\n      }\n    }\n  }\n  if (type !== undefined) {\n    //slidelayout\n    var lvlStr = 'a:lvl' + lvl + 'pPr'\n    if (pPrNodeLaout === undefined) {\n      pPrNodeLaout = getTextByPathList(warpObj, ['slideLayoutTables', 'typeTable', type, 'p:txBody', 'a:lstStyle', lvlStr])\n    }\n    //masterlayout\n    if (type == 'title' || type == 'ctrTitle') {\n      pPrNodeMaster = getTextByPathList(warpObj, ['slideMasterTextStyles', 'p:titleStyle', lvlStr])\n    } else if (type == 'body' || type == 'obj' || type == 'subTitle') {\n      pPrNodeMaster = getTextByPathList(warpObj, ['slideMasterTextStyles', 'p:bodyStyle', lvlStr])\n    } else if (type == 'shape' || type == 'diagram') {\n      pPrNodeMaster = getTextByPathList(warpObj, ['slideMasterTextStyles', 'p:otherStyle', lvlStr])\n    } else if (type == 'textBox') {\n      pPrNodeMaster = getTextByPathList(warpObj, ['defaultTextStyle', lvlStr])\n    } else {\n      pPrNodeMaster = getTextByPathList(warpObj, ['slideMasterTables', 'typeTable', type, 'p:txBody', 'a:lstStyle', lvlStr])\n    }\n  }\n  return {\n    'nodeLaout': pPrNodeLaout,\n    'nodeMaster': pPrNodeMaster\n  }\n}\nasync function genSpanElement(node, rIndex, pNode, textBodyNode, pFontStyle, slideLayoutSpNode, idx, type, rNodeLength, warpObj, isBullate) {\n  //https://codepen.io/imdunn/pen/GRgwaye ?\n  var text_style = ''\n  var lstStyle = textBodyNode['a:lstStyle']\n  var slideMasterTextStyles = warpObj['slideMasterTextStyles']\n\n  var text = node['a:t']\n  //var text_count = text.length;\n\n  var openElemnt = '<sapn'//\"<bdi\";\n  var closeElemnt = '</sapn>'// \"</bdi>\";\n  var styleText = ''\n  if (text === undefined && node['type'] !== undefined) {\n    if (is_first_br) {\n      //openElemnt = \"<br\";\n      //closeElemnt = \"\";\n      //return \"<br style='font-size: initial'>\"\n      is_first_br = false\n      return '<sapn class=\\'line-break-br\\' ></sapn>'\n    } else {\n      // styleText += \"display: block;\";\n      // openElemnt = \"<sapn\";\n      // closeElemnt = \"</sapn>\";\n    }\n\n    styleText += 'display: block;'\n    //openElemnt = \"<sapn\";\n    //closeElemnt = \"</sapn>\";\n  } else {\n\n    is_first_br = true\n  }\n  if (typeof text !== 'string') {\n    text = getTextByPathList(node, [ 'a:fld', 'a:t' ])\n    if (typeof text !== 'string') {\n      text = '&nbsp;'\n      //return \"<span class='text-block '>&nbsp;</span>\";\n    }\n    // if (text === undefined) {\n    //     return \"\";\n    // }\n  }\n\n  var pPrNode = pNode['a:pPr']\n  //lvl\n  var lvl = 1\n  var lvlNode = getTextByPathList(pPrNode, [ 'attrs', 'lvl' ])\n  if (lvlNode !== undefined) {\n    lvl = parseInt(lvlNode) + 1\n  }\n  //console.log(\"genSpanElement node: \", node, \"rIndex: \", rIndex, \", pNode: \", pNode, \",pPrNode: \", pPrNode, \"pFontStyle:\", pFontStyle, \", idx: \", idx, \"type:\", type, warpObj);\n  var layoutMasterNode = getLayoutAndMasterNode(pNode, idx, type, warpObj)\n  var pPrNodeLaout = layoutMasterNode.nodeLaout\n  var pPrNodeMaster = layoutMasterNode.nodeMaster\n\n  //Language\n  var lang = getTextByPathList(node, [ 'a:rPr', 'attrs', 'lang' ])\n  var isRtlLan = (lang !== undefined && rtl_langs_array.indexOf(lang) !== -1) ? true : false\n  //rtl\n  var getRtlVal = getTextByPathList(pPrNode, [ 'attrs', 'rtl' ])\n  if (getRtlVal === undefined) {\n    getRtlVal = getTextByPathList(pPrNodeLaout, [ 'attrs', 'rtl' ])\n    if (getRtlVal === undefined && type != 'shape') {\n      getRtlVal = getTextByPathList(pPrNodeMaster, [ 'attrs', 'rtl' ])\n    }\n  }\n  var isRTL = false\n  var dirStr = 'ltr'\n  if (getRtlVal !== undefined && getRtlVal == '1') {\n    isRTL = true\n    dirStr = 'rtl'\n  }\n\n  var linkID = getTextByPathList(node, [ 'a:rPr', 'a:hlinkClick', 'attrs', 'r:id' ])\n  var linkTooltip = ''\n  var defLinkClr\n  if (linkID !== undefined) {\n    linkTooltip = getTextByPathList(node, [ 'a:rPr', 'a:hlinkClick', 'attrs', 'tooltip' ])\n    if (linkTooltip !== undefined) {\n      linkTooltip = 'title=\\'' + linkTooltip + '\\''\n    }\n    defLinkClr = getSchemeColorFromTheme('a:hlink', undefined, undefined, warpObj)\n\n    var linkClrNode = getTextByPathList(node, [ 'a:rPr', 'a:solidFill' ])// getTextByPathList(node, [\"a:rPr\", \"a:solidFill\"]);\n    var rPrlinkClr = getSolidFill(linkClrNode, undefined, undefined, warpObj)\n\n\n    //console.log(\"genSpanElement defLinkClr: \", defLinkClr, \"rPrlinkClr:\", rPrlinkClr)\n    if (rPrlinkClr !== undefined && rPrlinkClr != '') {\n      defLinkClr = rPrlinkClr\n    }\n\n  }\n  /////////////////////////////////////////////////////////////////////////////////////\n  //getFontColor\n  var fontClrPr = await getFontColorPr(node, pNode, lstStyle, pFontStyle, lvl, idx, type, warpObj)\n  var fontClrType = fontClrPr[2]\n  //console.log(\"genSpanElement fontClrPr: \", fontClrPr, \"linkID\", linkID);\n  if (fontClrType == 'solid') {\n    if (linkID === undefined && fontClrPr[0] !== undefined && fontClrPr[0] != '') {\n      styleText += 'color: #' + fontClrPr[0] + ';'\n    } else if (linkID !== undefined && defLinkClr !== undefined) {\n      styleText += 'color: #' + defLinkClr + ';'\n    }\n\n    if (fontClrPr[1] !== undefined && fontClrPr[1] != '' && fontClrPr[1] != ';') {\n      styleText += 'text-shadow:' + fontClrPr[1] + ';'\n    }\n    if (fontClrPr[3] !== undefined && fontClrPr[3] != '') {\n      styleText += 'background-color: #' + fontClrPr[3] + ';'\n    }\n  } else if (fontClrType == 'pattern' || fontClrType == 'pic' || fontClrType == 'gradient') {\n    if (fontClrType == 'pattern') {\n      styleText += 'background:' + fontClrPr[0][0] + ';'\n      if (fontClrPr[0][1] !== null && fontClrPr[0][1] !== undefined && fontClrPr[0][1] != '') {\n        styleText += 'background-size:' + fontClrPr[0][1] + ';'//\" 2px 2px;\" +\n      }\n      if (fontClrPr[0][2] !== null && fontClrPr[0][2] !== undefined && fontClrPr[0][2] != '') {\n        styleText += 'background-position:' + fontClrPr[0][2] + ';'//\" 2px 2px;\" +\n      }\n      // styleText += \"-webkit-background-clip: text;\" +\n      //     \"background-clip: text;\" +\n      //     \"color: transparent;\" +\n      //     \"-webkit-text-stroke: \" + fontClrPr[1].border + \";\" +\n      //     \"filter: \" + fontClrPr[1].effcts + \";\";\n    } else if (fontClrType == 'pic') {\n      styleText += fontClrPr[0] + ';'\n      // styleText += \"-webkit-background-clip: text;\" +\n      //     \"background-clip: text;\" +\n      //     \"color: transparent;\" +\n      //     \"-webkit-text-stroke: \" + fontClrPr[1].border + \";\";\n    } else if (fontClrType == 'gradient') {\n\n      var colorAry = fontClrPr[0].color\n      var rot = fontClrPr[0].rot\n\n      styleText += 'background: linear-gradient(' + rot + 'deg,'\n      for (var i = 0; i < colorAry.length; i++) {\n        if (i == colorAry.length - 1) {\n          styleText += '#' + colorAry[i] + ');'\n        } else {\n          styleText += '#' + colorAry[i] + ', '\n        }\n      }\n      // styleText += \"-webkit-background-clip: text;\" +\n      //     \"background-clip: text;\" +\n      //     \"color: transparent;\" +\n      //     \"-webkit-text-stroke: \" + fontClrPr[1].border + \";\";\n\n    }\n    styleText += '-webkit-background-clip: text;' +\n      'background-clip: text;' +\n      'color: transparent;'\n    if (fontClrPr[1].border !== undefined && fontClrPr[1].border !== '') {\n      styleText += '-webkit-text-stroke: ' + fontClrPr[1].border + ';'\n    }\n    if (fontClrPr[1].effcts !== undefined && fontClrPr[1].effcts !== '') {\n      styleText += 'filter: ' + fontClrPr[1].effcts + ';'\n    }\n  }\n  var font_size = getFontSize(node, textBodyNode, pFontStyle, lvl, type, warpObj)\n  //text_style += \"font-size:\" + font_size + \";\"\n\n  text_style += 'font-size:' + font_size + ';' +\n    // marLStr +\n    'font-family:' + getFontType(node, type, warpObj, pFontStyle) + ';' +\n    'font-weight:' + getFontBold(node, type, slideMasterTextStyles) + ';' +\n    'font-style:' + getFontItalic(node, type, slideMasterTextStyles) + ';' +\n    'text-decoration:' + getFontDecoration(node, type, slideMasterTextStyles) + ';' +\n    'text-align:' + getTextHorizontalAlign(node, pNode, type, warpObj) + ';' +\n    'vertical-align:' + getTextVerticalAlign(node, type, slideMasterTextStyles) + ';'\n  //rNodeLength\n  //console.log(\"genSpanElement node:\", node, \"lang:\", lang, \"isRtlLan:\", isRtlLan, \"span parent dir:\", dirStr)\n  if (isRtlLan) { //|| rIndex === undefined\n    styleText += 'direction:rtl;'\n  } else { //|| rIndex === undefined\n    styleText += 'direction:ltr;'\n  }\n  // } else if (dirStr == \"rtl\" && isRtlLan ) {\n  //     styleText += \"direction:rtl;\";\n\n  // } else if (dirStr == \"ltr\" && !isRtlLan ) {\n  //     styleText += \"direction:ltr;\";\n  // } else if (dirStr == \"ltr\" && isRtlLan){\n  //     styleText += \"direction:ltr;\";\n  // }else{\n  //     styleText += \"direction:inherit;\";\n  // }\n\n  // if (dirStr == \"rtl\" && !isRtlLan) { //|| rIndex === undefined\n  //     styleText += \"direction:ltr;\";\n  // } else if (dirStr == \"rtl\" && isRtlLan) {\n  //     styleText += \"direction:rtl;\";\n  // } else if (dirStr == \"ltr\" && !isRtlLan) {\n  //     styleText += \"direction:ltr;\";\n  // } else if (dirStr == \"ltr\" && isRtlLan) {\n  //     styleText += \"direction:rtl;\";\n  // } else {\n  //     styleText += \"direction:inherit;\";\n  // }\n\n  //     //\"direction:\" + dirStr + \";\";\n  //if (rNodeLength == 1 || rIndex == 0 ){\n  //styleText += \"display: table-cell;white-space: nowrap;\";\n  //}\n  var highlight = getTextByPathList(node, [ 'a:rPr', 'a:highlight' ])\n  if (highlight !== undefined) {\n    styleText += 'background-color:#' + getSolidFill(highlight, undefined, undefined, warpObj) + ';'\n    //styleText += \"Opacity:\" + getColorOpacity(highlight) + \";\";\n  }\n\n  //letter-spacing:\n  var spcNode = getTextByPathList(node, [ 'a:rPr', 'attrs', 'spc' ])\n  if (spcNode === undefined) {\n    spcNode = getTextByPathList(pPrNodeLaout, [ 'a:defRPr', 'attrs', 'spc' ])\n    if (spcNode === undefined) {\n      spcNode = getTextByPathList(pPrNodeMaster, [ 'a:defRPr', 'attrs', 'spc' ])\n    }\n  }\n  if (spcNode !== undefined) {\n    var ltrSpc = parseInt(spcNode) / 100 //pt\n    styleText += 'letter-spacing: ' + ltrSpc + 'px;'// + \"pt;\";\n  }\n\n  //Text Cap Types\n  var capNode = getTextByPathList(node, [ 'a:rPr', 'attrs', 'cap' ])\n  if (capNode === undefined) {\n    capNode = getTextByPathList(pPrNodeLaout, [ 'a:defRPr', 'attrs', 'cap' ])\n    if (capNode === undefined) {\n      capNode = getTextByPathList(pPrNodeMaster, [ 'a:defRPr', 'attrs', 'cap' ])\n    }\n  }\n  if (capNode == 'small' || capNode == 'all') {\n    styleText += 'text-transform: uppercase'\n  }\n  //styleText += \"word-break: break-word;\";\n  //console.log(\"genSpanElement node: \", node, \", capNode: \", capNode, \",pPrNodeLaout: \", pPrNodeLaout, \", pPrNodeMaster: \", pPrNodeMaster, \"warpObj:\", warpObj);\n\n  var cssName = ''\n\n  if (styleText in styleTable) {\n    cssName = styleTable[styleText]['name']\n  } else {\n    cssName = '_css_' + (Object.keys(styleTable).length + 1)\n    styleTable[styleText] = {\n      'name': cssName,\n      'text': styleText\n    }\n  }\n  var linkColorSyle = ''\n  if (fontClrType == 'solid' && linkID !== undefined) {\n    linkColorSyle = 'style=\\'color: inherit;\\''\n  }\n\n  if (linkID !== undefined && linkID != '') {\n    var linkURL = warpObj['slideResObj'][linkID]['target']\n    linkURL = escapeHtml(linkURL)\n    return openElemnt + ' class=\\'text-block ' + cssName + '\\' style=\\'' + text_style + '\\'><a href=\\'' + linkURL + '\\' ' + linkColorSyle + '  ' + linkTooltip + ' target=\\'_blank\\'>' +\n      text.replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;').replace(/\\s/g, '&nbsp;') + '</a>' + closeElemnt\n  } else {\n    return openElemnt + ' class=\\'text-block ' + cssName + '\\' style=\\'' + text_style + '\\'>' + text.replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;').replace(/\\s/g, '&nbsp;') + closeElemnt//\"</bdi>\";\n  }\n\n}\n\nfunction getPregraphMargn(pNode, idx, type, isBullate, warpObj){\n  if (!isBullate){\n    return ['',0]\n  }\n  var marLStr = '', marRStr = '' , maginVal = 0\n  var pPrNode = pNode['a:pPr']\n  var layoutMasterNode = getLayoutAndMasterNode(pNode, idx, type, warpObj)\n  var pPrNodeLaout = layoutMasterNode.nodeLaout\n  var pPrNodeMaster = layoutMasterNode.nodeMaster\n\n  // var lang = getTextByPathList(node, [\"a:rPr\", \"attrs\", \"lang\"]);\n  // var isRtlLan = (lang !== undefined && rtl_langs_array.indexOf(lang) !== -1) ? true : false;\n  //rtl\n  var getRtlVal = getTextByPathList(pPrNode, ['attrs', 'rtl'])\n  if (getRtlVal === undefined) {\n    getRtlVal = getTextByPathList(pPrNodeLaout, ['attrs', 'rtl'])\n    if (getRtlVal === undefined && type != 'shape') {\n      getRtlVal = getTextByPathList(pPrNodeMaster, ['attrs', 'rtl'])\n    }\n  }\n  var isRTL = false\n  var dirStr = 'ltr'\n  if (getRtlVal !== undefined && getRtlVal == '1') {\n    isRTL = true\n    dirStr = 'rtl'\n  }\n\n  //align\n  var alignNode = getTextByPathList(pPrNode, ['attrs', 'algn']) //\"l\" | \"ctr\" | \"r\" | \"just\" | \"justLow\" | \"dist\" | \"thaiDist\n  if (alignNode === undefined) {\n    alignNode = getTextByPathList(pPrNodeLaout, ['attrs', 'algn'])\n    if (alignNode === undefined) {\n      alignNode = getTextByPathList(pPrNodeMaster, ['attrs', 'algn'])\n    }\n  }\n  //indent?\n  var indentNode = getTextByPathList(pPrNode, ['attrs', 'indent'])\n  if (indentNode === undefined) {\n    indentNode = getTextByPathList(pPrNodeLaout, ['attrs', 'indent'])\n    if (indentNode === undefined) {\n      indentNode = getTextByPathList(pPrNodeMaster, ['attrs', 'indent'])\n    }\n  }\n  var indent = 0\n  if (indentNode !== undefined) {\n    indent = parseInt(indentNode) * slideFactor\n  }\n  //\n  //marL\n  var marLNode = getTextByPathList(pPrNode, ['attrs', 'marL'])\n  if (marLNode === undefined) {\n    marLNode = getTextByPathList(pPrNodeLaout, ['attrs', 'marL'])\n    if (marLNode === undefined) {\n      marLNode = getTextByPathList(pPrNodeMaster, ['attrs', 'marL'])\n    }\n  }\n  var marginLeft = 0\n  if (marLNode !== undefined) {\n    marginLeft = parseInt(marLNode) * slideFactor\n  }\n  if ((indentNode !== undefined || marLNode !== undefined)) {\n    //var lvlIndent = defTabSz * lvl;\n\n    if (isRTL) {// && alignNode == \"r\") {\n      //marLStr = \"margin-right: \";\n      marLStr = 'padding-right: '\n    } else {\n      //marLStr = \"margin-left: \";\n      marLStr = 'padding-left: '\n    }\n    if (isBullate) {\n      maginVal = Math.abs(0 - indent)\n      marLStr += maginVal + 'px;'  // (minus bullate numeric lenght/size - TODO\n    } else {\n      maginVal = Math.abs(marginLeft + indent)\n      marLStr += maginVal + 'px;'  // (minus bullate numeric lenght/size - TODO\n    }\n  }\n\n  //marR?\n  var marRNode = getTextByPathList(pPrNode, ['attrs', 'marR'])\n  if (marRNode === undefined && marLNode === undefined) {\n    //need to check if this posble - TODO\n    marRNode = getTextByPathList(pPrNodeLaout, ['attrs', 'marR'])\n    if (marRNode === undefined) {\n      marRNode = getTextByPathList(pPrNodeMaster, ['attrs', 'marR'])\n    }\n  }\n  if (marRNode !== undefined && isBullate) {\n    var marginRight = parseInt(marRNode) * slideFactor\n    if (isRTL) {// && alignNode == \"r\") {\n      //marRStr = \"margin-right: \";\n      marRStr = 'padding-right: '\n    } else {\n      //marRStr = \"margin-left: \";\n      marRStr = 'padding-left: '\n    }\n    marRStr += Math.abs(0 - indent) + 'px;'\n  }\n  return [marLStr, maginVal]\n}\n\nfunction genGlobalCSS() {\n  var cssText = ''\n  //console.log(\"styleTable: \", styleTable)\n  for (var key in styleTable) {\n    var tagname = ''\n    //ADD suffix\n    cssText += tagname + ' .' + styleTable[key]['name'] +\n      ((styleTable[key]['suffix']) ? styleTable[key]['suffix'] : '') +\n      '{' + styleTable[key]['text'] + '}\\n' //section > div\n  }\n  return cssText\n}\n\nasync function genTable(node, warpObj) {\n  var order = node['attrs']['order']\n  var tableNode = getTextByPathList(node, [ 'a:graphic', 'a:graphicData', 'a:tbl' ])\n  var xfrmNode = getTextByPathList(node, [ 'p:xfrm' ])\n  /////////////////////////////////////////Amir////////////////////////////////////////////////\n  var getTblPr = getTextByPathList(node, [ 'a:graphic', 'a:graphicData', 'a:tbl', 'a:tblPr' ])\n  var getColsGrid = getTextByPathList(node, [ 'a:graphic', 'a:graphicData', 'a:tbl', 'a:tblGrid', 'a:gridCol' ])\n  var tblDir = ''\n  if (getTblPr !== undefined) {\n    var isRTL = getTblPr['attrs']['rtl']\n    tblDir = (isRTL == 1 ? 'dir=rtl' : 'dir=ltr')\n  }\n  var firstRowAttr = getTblPr['attrs']['firstRow'] //associated element <a:firstRow> in the table styles\n  var firstColAttr = getTblPr['attrs']['firstCol'] //associated element <a:firstCol> in the table styles\n  var lastRowAttr = getTblPr['attrs']['lastRow'] //associated element <a:lastRow> in the table styles\n  var lastColAttr = getTblPr['attrs']['lastCol'] //associated element <a:lastCol> in the table styles\n  var bandRowAttr = getTblPr['attrs']['bandRow'] //associated element <a:band1H>, <a:band2H> in the table styles\n  var bandColAttr = getTblPr['attrs']['bandCol'] //associated element <a:band1V>, <a:band2V> in the table styles\n  //console.log(\"getTblPr: \", getTblPr);\n  var tblStylAttrObj = {\n    isFrstRowAttr: (firstRowAttr !== undefined && firstRowAttr == '1') ? 1 : 0,\n    isFrstColAttr: (firstColAttr !== undefined && firstColAttr == '1') ? 1 : 0,\n    isLstRowAttr: (lastRowAttr !== undefined && lastRowAttr == '1') ? 1 : 0,\n    isLstColAttr: (lastColAttr !== undefined && lastColAttr == '1') ? 1 : 0,\n    isBandRowAttr: (bandRowAttr !== undefined && bandRowAttr == '1') ? 1 : 0,\n    isBandColAttr: (bandColAttr !== undefined && bandColAttr == '1') ? 1 : 0\n  }\n\n  var thisTblStyle\n  var tbleStyleId = getTblPr['a:tableStyleId']\n  if (tbleStyleId !== undefined) {\n    var tbleStylList = tableStyles['a:tblStyleLst']['a:tblStyle']\n    if (tbleStylList !== undefined) {\n      if (tbleStylList.constructor === Array) {\n        for (var k = 0; k < tbleStylList.length; k++) {\n          if (tbleStylList[k]['attrs']['styleId'] == tbleStyleId) {\n            thisTblStyle = tbleStylList[k]\n          }\n        }\n      } else {\n        if (tbleStylList['attrs']['styleId'] == tbleStyleId) {\n          thisTblStyle = tbleStylList\n        }\n      }\n    }\n  }\n  if (thisTblStyle !== undefined) {\n    thisTblStyle['tblStylAttrObj'] = tblStylAttrObj\n    warpObj['thisTbiStyle'] = thisTblStyle\n  }\n  var tblStyl = getTextByPathList(thisTblStyle, [ 'a:wholeTbl', 'a:tcStyle' ])\n  var tblBorderStyl = getTextByPathList(tblStyl, [ 'a:tcBdr' ])\n  var tbl_borders = ''\n  if (tblBorderStyl !== undefined) {\n    tbl_borders = getTableBorders(tblBorderStyl, warpObj)\n  }\n  var tbl_bgcolor = ''\n  var tbl_opacity = 1\n  var tbl_bgFillschemeClr = getTextByPathList(thisTblStyle, [ 'a:tblBg', 'a:fillRef' ])\n  //console.log( \"thisTblStyle:\", thisTblStyle, \"warpObj:\", warpObj)\n  if (tbl_bgFillschemeClr !== undefined) {\n    tbl_bgcolor = getSolidFill(tbl_bgFillschemeClr, undefined, undefined, warpObj)\n  }\n  if (tbl_bgFillschemeClr === undefined) {\n    tbl_bgFillschemeClr = getTextByPathList(thisTblStyle, [ 'a:wholeTbl', 'a:tcStyle', 'a:fill', 'a:solidFill' ])\n    tbl_bgcolor = getSolidFill(tbl_bgFillschemeClr, undefined, undefined, warpObj)\n  }\n  if (tbl_bgcolor !== '') {\n    tbl_bgcolor = 'background-color: #' + tbl_bgcolor + ';'\n  }\n  ////////////////////////////////////////////////////////////////////////////////////////////\n  var tableHtml = '<table ' + tblDir + ' style=\\'border-collapse: collapse;' +\n    getPosition(xfrmNode, node, undefined, undefined) +\n    getSize(xfrmNode, undefined, undefined) +\n    ' z-index: ' + order + ';' +\n    tbl_borders + ';' +\n    tbl_bgcolor + '\\'>'\n\n  var trNodes = tableNode['a:tr']\n  if (trNodes.constructor !== Array) {\n    trNodes = [ trNodes ]\n  }\n  //if (trNodes.constructor === Array) {\n  //multi rows\n  var totalrowSpan = 0\n  var rowSpanAry = []\n  for (var i = 0; i < trNodes.length; i++) {\n    //////////////rows Style ////////////Amir\n    var rowHeightParam = trNodes[i]['attrs']['h']\n    var rowHeight = 0\n    var rowsStyl = ''\n    if (rowHeightParam !== undefined) {\n      rowHeight = parseInt(rowHeightParam) * slideFactor\n      rowsStyl += 'height:' + rowHeight + 'px;'\n    }\n    var fillColor = ''\n    var row_borders = ''\n    var fontClrPr = ''\n    var fontWeight = ''\n    var band_1H_fillColor\n    var band_2H_fillColor\n\n    if (thisTblStyle !== undefined && thisTblStyle['a:wholeTbl'] !== undefined) {\n      var bgFillschemeClr = getTextByPathList(thisTblStyle, [ 'a:wholeTbl', 'a:tcStyle', 'a:fill', 'a:solidFill' ])\n      if (bgFillschemeClr !== undefined) {\n        var local_fillColor = getSolidFill(bgFillschemeClr, undefined, undefined, warpObj)\n        if (local_fillColor !== undefined) {\n          fillColor = local_fillColor\n        }\n      }\n      var rowTxtStyl = getTextByPathList(thisTblStyle, [ 'a:wholeTbl', 'a:tcTxStyle' ])\n      if (rowTxtStyl !== undefined) {\n        var local_fontColor = getSolidFill(rowTxtStyl, undefined, undefined, warpObj)\n        if (local_fontColor !== undefined) {\n          fontClrPr = local_fontColor\n        }\n\n        var local_fontWeight = ((getTextByPathList(rowTxtStyl, [ 'attrs', 'b' ]) == 'on') ? 'bold' : '')\n        if (local_fontWeight != '') {\n          fontWeight = local_fontWeight\n        }\n      }\n    }\n\n    if (i == 0 && tblStylAttrObj['isFrstRowAttr'] == 1 && thisTblStyle !== undefined) {\n\n      var bgFillschemeClr = getTextByPathList(thisTblStyle, [ 'a:firstRow', 'a:tcStyle', 'a:fill', 'a:solidFill' ])\n      if (bgFillschemeClr !== undefined) {\n        var local_fillColor = getSolidFill(bgFillschemeClr, undefined, undefined, warpObj)\n        if (local_fillColor !== undefined) {\n          fillColor = local_fillColor\n        }\n      }\n      var borderStyl = getTextByPathList(thisTblStyle, [ 'a:firstRow', 'a:tcStyle', 'a:tcBdr' ])\n      if (borderStyl !== undefined) {\n        var local_row_borders = getTableBorders(borderStyl, warpObj)\n        if (local_row_borders != '') {\n          row_borders = local_row_borders\n        }\n      }\n      var rowTxtStyl = getTextByPathList(thisTblStyle, [ 'a:firstRow', 'a:tcTxStyle' ])\n      if (rowTxtStyl !== undefined) {\n        var local_fontClrPr = getSolidFill(rowTxtStyl, undefined, undefined, warpObj)\n        if (local_fontClrPr !== undefined) {\n          fontClrPr = local_fontClrPr\n        }\n        var local_fontWeight = ((getTextByPathList(rowTxtStyl, [ 'attrs', 'b' ]) == 'on') ? 'bold' : '')\n        if (local_fontWeight !== '') {\n          fontWeight = local_fontWeight\n        }\n      }\n\n    } else if (i > 0 && tblStylAttrObj['isBandRowAttr'] == 1 && thisTblStyle !== undefined) {\n      fillColor = ''\n      row_borders = undefined\n      if ((i % 2) == 0 && thisTblStyle['a:band2H'] !== undefined) {\n        // console.log(\"i: \", i, 'thisTblStyle[\"a:band2H\"]:', thisTblStyle[\"a:band2H\"])\n        //check if there is a row bg\n        var bgFillschemeClr = getTextByPathList(thisTblStyle, [ 'a:band2H', 'a:tcStyle', 'a:fill', 'a:solidFill' ])\n        if (bgFillschemeClr !== undefined) {\n          var local_fillColor = getSolidFill(bgFillschemeClr, undefined, undefined, warpObj)\n          if (local_fillColor !== '') {\n            fillColor = local_fillColor\n            band_2H_fillColor = local_fillColor\n          }\n        }\n\n\n        var borderStyl = getTextByPathList(thisTblStyle, [ 'a:band2H', 'a:tcStyle', 'a:tcBdr' ])\n        if (borderStyl !== undefined) {\n          var local_row_borders = getTableBorders(borderStyl, warpObj)\n          if (local_row_borders != '') {\n            row_borders = local_row_borders\n          }\n        }\n        var rowTxtStyl = getTextByPathList(thisTblStyle, [ 'a:band2H', 'a:tcTxStyle' ])\n        if (rowTxtStyl !== undefined) {\n          var local_fontClrPr = getSolidFill(rowTxtStyl, undefined, undefined, warpObj)\n          if (local_fontClrPr !== undefined) {\n            fontClrPr = local_fontClrPr\n          }\n        }\n\n        var local_fontWeight = ((getTextByPathList(rowTxtStyl, [ 'attrs', 'b' ]) == 'on') ? 'bold' : '')\n\n        if (local_fontWeight !== '') {\n          fontWeight = local_fontWeight\n        }\n      }\n      if ((i % 2) != 0 && thisTblStyle['a:band1H'] !== undefined) {\n        var bgFillschemeClr = getTextByPathList(thisTblStyle, [ 'a:band1H', 'a:tcStyle', 'a:fill', 'a:solidFill' ])\n        if (bgFillschemeClr !== undefined) {\n          var local_fillColor = getSolidFill(bgFillschemeClr, undefined, undefined, warpObj)\n          if (local_fillColor !== undefined) {\n            fillColor = local_fillColor\n            band_1H_fillColor = local_fillColor\n          }\n        }\n        var borderStyl = getTextByPathList(thisTblStyle, [ 'a:band1H', 'a:tcStyle', 'a:tcBdr' ])\n        if (borderStyl !== undefined) {\n          var local_row_borders = getTableBorders(borderStyl, warpObj)\n          if (local_row_borders != '') {\n            row_borders = local_row_borders\n          }\n        }\n        var rowTxtStyl = getTextByPathList(thisTblStyle, [ 'a:band1H', 'a:tcTxStyle' ])\n        if (rowTxtStyl !== undefined) {\n          var local_fontClrPr = getSolidFill(rowTxtStyl, undefined, undefined, warpObj)\n          if (local_fontClrPr !== undefined) {\n            fontClrPr = local_fontClrPr\n          }\n          var local_fontWeight = ((getTextByPathList(rowTxtStyl, [ 'attrs', 'b' ]) == 'on') ? 'bold' : '')\n          if (local_fontWeight != '') {\n            fontWeight = local_fontWeight\n          }\n        }\n      }\n\n    }\n    //last row\n    if (i == (trNodes.length - 1) && tblStylAttrObj['isLstRowAttr'] == 1 && thisTblStyle !== undefined) {\n      var bgFillschemeClr = getTextByPathList(thisTblStyle, [ 'a:lastRow', 'a:tcStyle', 'a:fill', 'a:solidFill' ])\n      if (bgFillschemeClr !== undefined) {\n        var local_fillColor = getSolidFill(bgFillschemeClr, undefined, undefined, warpObj)\n        if (local_fillColor !== undefined) {\n          fillColor = local_fillColor\n        }\n        // var local_colorOpacity = getColorOpacity(bgFillschemeClr);\n        // if(local_colorOpacity !== undefined){\n        //     colorOpacity = local_colorOpacity;\n        // }\n      }\n      var borderStyl = getTextByPathList(thisTblStyle, [ 'a:lastRow', 'a:tcStyle', 'a:tcBdr' ])\n      if (borderStyl !== undefined) {\n        var local_row_borders = getTableBorders(borderStyl, warpObj)\n        if (local_row_borders != '') {\n          row_borders = local_row_borders\n        }\n      }\n      var rowTxtStyl = getTextByPathList(thisTblStyle, [ 'a:lastRow', 'a:tcTxStyle' ])\n      if (rowTxtStyl !== undefined) {\n        var local_fontClrPr = getSolidFill(rowTxtStyl, undefined, undefined, warpObj)\n        if (local_fontClrPr !== undefined) {\n          fontClrPr = local_fontClrPr\n        }\n\n        var local_fontWeight = ((getTextByPathList(rowTxtStyl, [ 'attrs', 'b' ]) == 'on') ? 'bold' : '')\n        if (local_fontWeight !== '') {\n          fontWeight = local_fontWeight\n        }\n      }\n    }\n    rowsStyl += ((row_borders !== undefined) ? row_borders : '')\n    rowsStyl += ((fontClrPr !== undefined) ? ' color: #' + fontClrPr + ';' : '')\n    rowsStyl += ((fontWeight != '') ? ' font-weight:' + fontWeight + ';' : '')\n    if (fillColor !== undefined && fillColor != '') {\n      //rowsStyl += \"background-color: rgba(\" + hexToRgbNew(fillColor) + \",\" + colorOpacity + \");\";\n      rowsStyl += 'background-color: #' + fillColor + ';'\n    }\n    tableHtml += '<tr style=\\'' + rowsStyl + '\\'>'\n    ////////////////////////////////////////////////\n\n    var tcNodes = trNodes[i]['a:tc']\n    if (tcNodes !== undefined) {\n      if (tcNodes.constructor === Array) {\n        //multi columns\n        var j = 0\n        if (rowSpanAry.length == 0) {\n          rowSpanAry = Array.apply(null, Array(tcNodes.length)).map(function () {\n            return 0\n          })\n        }\n        var totalColSpan = 0\n        while (j < tcNodes.length) {\n          if (rowSpanAry[j] == 0 && totalColSpan == 0) {\n            var a_sorce\n            //j=0 : first col\n            if (j == 0 && tblStylAttrObj['isFrstColAttr'] == 1) {\n              a_sorce = 'a:firstCol'\n              if (tblStylAttrObj['isLstRowAttr'] == 1 && i == (trNodes.length - 1) &&\n                getTextByPathList(thisTblStyle, [ 'a:seCell' ]) !== undefined) {\n                a_sorce = 'a:seCell'\n              } else if (tblStylAttrObj['isFrstRowAttr'] == 1 && i == 0 &&\n                getTextByPathList(thisTblStyle, [ 'a:neCell' ]) !== undefined) {\n                a_sorce = 'a:neCell'\n              }\n            } else if ((j > 0 && tblStylAttrObj['isBandColAttr'] == 1) &&\n              !(tblStylAttrObj['isFrstColAttr'] == 1 && i == 0) &&\n              !(tblStylAttrObj['isLstRowAttr'] == 1 && i == (trNodes.length - 1)) &&\n              j != (tcNodes.length - 1)) {\n\n              if ((j % 2) != 0) {\n\n                var aBandNode = getTextByPathList(thisTblStyle, [ 'a:band2V' ])\n                if (aBandNode === undefined) {\n                  aBandNode = getTextByPathList(thisTblStyle, [ 'a:band1V' ])\n                  if (aBandNode !== undefined) {\n                    a_sorce = 'a:band2V'\n                  }\n                } else {\n                  a_sorce = 'a:band2V'\n                }\n\n              }\n            }\n\n            if (j == (tcNodes.length - 1) && tblStylAttrObj['isLstColAttr'] == 1) {\n              a_sorce = 'a:lastCol'\n              if (tblStylAttrObj['isLstRowAttr'] == 1 && i == (trNodes.length - 1) && getTextByPathList(thisTblStyle, [ 'a:swCell' ]) !== undefined) {\n                a_sorce = 'a:swCell'\n              } else if (tblStylAttrObj['isFrstRowAttr'] == 1 && i == 0 && getTextByPathList(thisTblStyle, [ 'a:nwCell' ]) !== undefined) {\n                a_sorce = 'a:nwCell'\n              }\n            }\n\n            var cellParmAry = await getTableCellParams(tcNodes[j], getColsGrid, i, j, thisTblStyle, a_sorce, warpObj)\n            var text = cellParmAry[0]\n            var colStyl = cellParmAry[1]\n            var cssName = cellParmAry[2]\n            var rowSpan = cellParmAry[3]\n            var colSpan = cellParmAry[4]\n\n\n            if (rowSpan !== undefined) {\n              totalrowSpan++\n              rowSpanAry[j] = parseInt(rowSpan) - 1\n              tableHtml += '<td class=\\'' + cssName + '\\' data-row=\\'' + i + ',' + j + '\\' rowspan =\\'' +\n                parseInt(rowSpan) + '\\' style=\\'' + colStyl + '\\'>' + text + '</td>'\n            } else if (colSpan !== undefined) {\n              tableHtml += '<td class=\\'' + cssName + '\\' data-row=\\'' + i + ',' + j + '\\' colspan = \\'' +\n                parseInt(colSpan) + '\\' style=\\'' + colStyl + '\\'>' + text + '</td>'\n              totalColSpan = parseInt(colSpan) - 1\n            } else {\n              tableHtml += '<td class=\\'' + cssName + '\\' data-row=\\'' + i + ',' + j + '\\' style = \\'' + colStyl + '\\'>' + text + '</td>'\n            }\n\n          } else {\n            if (rowSpanAry[j] != 0) {\n              rowSpanAry[j] -= 1\n            }\n            if (totalColSpan != 0) {\n              totalColSpan--\n            }\n          }\n          j++\n        }\n      } else {\n        //single column\n\n        var a_sorce\n        if (tblStylAttrObj['isFrstColAttr'] == 1 && !(tblStylAttrObj['isLstRowAttr'] == 1)) {\n          a_sorce = 'a:firstCol'\n\n        } else if ((tblStylAttrObj['isBandColAttr'] == 1) && !(tblStylAttrObj['isLstRowAttr'] == 1)) {\n\n          var aBandNode = getTextByPathList(thisTblStyle, [ 'a:band2V' ])\n          if (aBandNode === undefined) {\n            aBandNode = getTextByPathList(thisTblStyle, [ 'a:band1V' ])\n            if (aBandNode !== undefined) {\n              a_sorce = 'a:band2V'\n            }\n          } else {\n            a_sorce = 'a:band2V'\n          }\n        }\n\n        if (tblStylAttrObj['isLstColAttr'] == 1 && !(tblStylAttrObj['isLstRowAttr'] == 1)) {\n          a_sorce = 'a:lastCol'\n        }\n\n\n        var cellParmAry = await getTableCellParams(tcNodes, getColsGrid, i, undefined, thisTblStyle, a_sorce, warpObj)\n        var text = cellParmAry[0]\n        var colStyl = cellParmAry[1]\n        var cssName = cellParmAry[2]\n        var rowSpan = cellParmAry[3]\n\n        if (rowSpan !== undefined) {\n          tableHtml += '<td  class=\\'' + cssName + '\\' rowspan=\\'' + parseInt(rowSpan) + '\\' style = \\'' + colStyl + '\\'>' + text + '</td>'\n        } else {\n          tableHtml += '<td class=\\'' + cssName + '\\' style=\\'' + colStyl + '\\'>' + text + '</td>'\n        }\n      }\n    }\n    tableHtml += '</tr>'\n  }\n  //////////////////////////////////////////////////////////////////////////////////\n\n\n  return tableHtml\n}\n\nasync function getTableCellParams(tcNodes, getColsGrid, row_idx, col_idx, thisTblStyle, cellSource, warpObj) {\n  //thisTblStyle[\"a:band1V\"] => thisTblStyle[cellSource]\n  //text, cell-width, cell-borders,\n  //var text = genTextBody(tcNodes[\"a:txBody\"], tcNodes, undefined, undefined, undefined, undefined, warpObj);//tableStyles\n  var rowSpan = getTextByPathList(tcNodes, [ 'attrs', 'rowSpan' ])\n  var colSpan = getTextByPathList(tcNodes, [ 'attrs', 'gridSpan' ])\n  var vMerge = getTextByPathList(tcNodes, [ 'attrs', 'vMerge' ])\n  var hMerge = getTextByPathList(tcNodes, [ 'attrs', 'hMerge' ])\n  var colStyl = 'word-wrap: break-word;'\n  var colWidth\n  var celFillColor = ''\n  var col_borders = ''\n  var colFontClrPr = ''\n  var colFontWeight = ''\n  var lin_bottm = '',\n    lin_top = '',\n    lin_left = '',\n    lin_right = '',\n    lin_bottom_left_to_top_right = '',\n    lin_top_left_to_bottom_right = ''\n\n  var colSapnInt = parseInt(colSpan)\n  var total_col_width = 0\n  if (!isNaN(colSapnInt) && colSapnInt > 1) {\n    for (var k = 0; k < colSapnInt; k++) {\n      total_col_width += parseInt(getTextByPathList(getColsGrid[col_idx + k], [ 'attrs', 'w' ]))\n    }\n  } else {\n    total_col_width = getTextByPathList((col_idx === undefined) ? getColsGrid : getColsGrid[col_idx], [ 'attrs', 'w' ])\n  }\n\n\n  var text = await genTextBody(tcNodes['a:txBody'], tcNodes, undefined, undefined, undefined, undefined, warpObj, total_col_width)//tableStyles\n\n  if (total_col_width != 0 /*&& row_idx == 0*/) {\n    colWidth = parseInt(total_col_width) * slideFactor\n    colStyl += 'width:' + colWidth + 'px;'\n  }\n\n  //cell bords\n  lin_bottm = getTextByPathList(tcNodes, [ 'a:tcPr', 'a:lnB' ])\n  if (lin_bottm === undefined && cellSource !== undefined) {\n    if (cellSource !== undefined)\n      lin_bottm = getTextByPathList(thisTblStyle[cellSource], [ 'a:tcStyle', 'a:tcBdr', 'a:bottom', 'a:ln' ])\n    if (lin_bottm === undefined) {\n      lin_bottm = getTextByPathList(thisTblStyle, [ 'a:wholeTbl', 'a:tcStyle', 'a:tcBdr', 'a:bottom', 'a:ln' ])\n    }\n  }\n  lin_top = getTextByPathList(tcNodes, [ 'a:tcPr', 'a:lnT' ])\n  if (lin_top === undefined) {\n    if (cellSource !== undefined)\n      lin_top = getTextByPathList(thisTblStyle[cellSource], [ 'a:tcStyle', 'a:tcBdr', 'a:top', 'a:ln' ])\n    if (lin_top === undefined) {\n      lin_top = getTextByPathList(thisTblStyle, [ 'a:wholeTbl', 'a:tcStyle', 'a:tcBdr', 'a:top', 'a:ln' ])\n    }\n  }\n  lin_left = getTextByPathList(tcNodes, [ 'a:tcPr', 'a:lnL' ])\n  if (lin_left === undefined) {\n    if (cellSource !== undefined)\n      lin_left = getTextByPathList(thisTblStyle[cellSource], [ 'a:tcStyle', 'a:tcBdr', 'a:left', 'a:ln' ])\n    if (lin_left === undefined) {\n      lin_left = getTextByPathList(thisTblStyle, [ 'a:wholeTbl', 'a:tcStyle', 'a:tcBdr', 'a:left', 'a:ln' ])\n    }\n  }\n  lin_right = getTextByPathList(tcNodes, [ 'a:tcPr', 'a:lnR' ])\n  if (lin_right === undefined) {\n    if (cellSource !== undefined)\n      lin_right = getTextByPathList(thisTblStyle[cellSource], [ 'a:tcStyle', 'a:tcBdr', 'a:right', 'a:ln' ])\n    if (lin_right === undefined) {\n      lin_right = getTextByPathList(thisTblStyle, [ 'a:wholeTbl', 'a:tcStyle', 'a:tcBdr', 'a:right', 'a:ln' ])\n    }\n  }\n  lin_bottom_left_to_top_right = getTextByPathList(tcNodes, [ 'a:tcPr', 'a:lnBlToTr' ])\n  lin_top_left_to_bottom_right = getTextByPathList(tcNodes, [ 'a:tcPr', 'a:InTlToBr' ])\n\n  if (lin_bottm !== undefined && lin_bottm != '') {\n    var bottom_line_border = getBorder(lin_bottm, undefined, false, '', warpObj)\n    if (bottom_line_border != '') {\n      colStyl += 'border-bottom:' + bottom_line_border + ';'\n    }\n  }\n  if (lin_top !== undefined && lin_top != '') {\n    var top_line_border = getBorder(lin_top, undefined, false, '', warpObj)\n    if (top_line_border != '') {\n      colStyl += 'border-top: ' + top_line_border + ';'\n    }\n  }\n  if (lin_left !== undefined && lin_left != '') {\n    var left_line_border = getBorder(lin_left, undefined, false, '', warpObj)\n    if (left_line_border != '') {\n      colStyl += 'border-left: ' + left_line_border + ';'\n    }\n  }\n  if (lin_right !== undefined && lin_right != '') {\n    var right_line_border = getBorder(lin_right, undefined, false, '', warpObj)\n    if (right_line_border != '') {\n      colStyl += 'border-right:' + right_line_border + ';'\n    }\n  }\n\n  //cell fill color custom\n  var getCelFill = getTextByPathList(tcNodes, [ 'a:tcPr' ])\n  if (getCelFill !== undefined && getCelFill != '') {\n    var cellObj = {\n      'p:spPr': getCelFill\n    }\n    celFillColor = await getShapeFill(cellObj, undefined, false, warpObj, 'slide')\n  }\n\n  //cell fill color theme\n  if (celFillColor == '' || celFillColor == 'background-color: inherit;') {\n    var bgFillschemeClr\n    if (cellSource !== undefined)\n      bgFillschemeClr = getTextByPathList(thisTblStyle, [ cellSource, 'a:tcStyle', 'a:fill', 'a:solidFill' ])\n    if (bgFillschemeClr !== undefined) {\n      var local_fillColor = getSolidFill(bgFillschemeClr, undefined, undefined, warpObj)\n      if (local_fillColor !== undefined) {\n        celFillColor = ' background-color: #' + local_fillColor + ';'\n      }\n    }\n  }\n  var cssName = ''\n  if (celFillColor !== undefined && celFillColor != '') {\n    if (celFillColor in styleTable) {\n      cssName = styleTable[celFillColor]['name']\n    } else {\n      cssName = '_tbl_cell_css_' + (Object.keys(styleTable).length + 1)\n      styleTable[celFillColor] = {\n        'name': cssName,\n        'text': celFillColor\n      }\n    }\n\n  }\n\n  //border\n  // var borderStyl = getTextByPathList(thisTblStyle, [cellSource, \"a:tcStyle\", \"a:tcBdr\"]);\n  // if (borderStyl !== undefined) {\n  //     var local_col_borders = getTableBorders(borderStyl, warpObj);\n  //     if (local_col_borders != \"\") {\n  //         col_borders = local_col_borders;\n  //     }\n  // }\n  // if (col_borders != \"\") {\n  //     colStyl += col_borders;\n  // }\n\n  //Text style\n  var rowTxtStyl\n  if (cellSource !== undefined) {\n    rowTxtStyl = getTextByPathList(thisTblStyle, [ cellSource, 'a:tcTxStyle' ])\n  }\n  // if (rowTxtStyl === undefined) {\n  //     rowTxtStyl = getTextByPathList(thisTblStyle, [\"a:wholeTbl\", \"a:tcTxStyle\"]);\n  // }\n  if (rowTxtStyl !== undefined) {\n    var local_fontClrPr = getSolidFill(rowTxtStyl, undefined, undefined, warpObj)\n    if (local_fontClrPr !== undefined) {\n      colFontClrPr = local_fontClrPr\n    }\n    var local_fontWeight = ((getTextByPathList(rowTxtStyl, [ 'attrs', 'b' ]) == 'on') ? 'bold' : '')\n    if (local_fontWeight !== '') {\n      colFontWeight = local_fontWeight\n    }\n  }\n  colStyl += ((colFontClrPr !== '') ? 'color: #' + colFontClrPr + ';' : '')\n  colStyl += ((colFontWeight != '') ? ' font-weight:' + colFontWeight + ';' : '')\n\n  return [ text, colStyl, cssName, rowSpan, colSpan ]\n}\n\nasync function genChart(node, warpObj) {\n\n  var order = node['attrs']['order']\n  var xfrmNode = getTextByPathList(node, ['p:xfrm'])\n  var result = '<div id=\\'chart' + chartID + '\\' class=\\'block content\\' style=\\'' +\n    getPosition(xfrmNode, node, undefined, undefined) + getSize(xfrmNode, undefined, undefined) +\n    ' z-index: ' + order + ';\\'></div>'\n\n  var rid = node['a:graphic']['a:graphicData']['c:chart']['attrs']['r:id']\n  var refName = warpObj['slideResObj'][rid]['target']\n  var content = await readXmlFile(warpObj['zip'], refName)\n  var plotArea = getTextByPathList(content, ['c:chartSpace', 'c:chart', 'c:plotArea'])\n\n  var chartData = null\n  for (var key in plotArea) {\n    switch (key) {\n      case 'c:lineChart':\n        chartData = {\n          'type': 'createChart',\n          'data': {\n            'chartID': 'chart' + chartID,\n            'chartType': 'lineChart',\n            'chartData': extractChartData(plotArea[key]['c:ser'])\n          }\n        }\n        break\n      case 'c:barChart':\n        chartData = {\n          'type': 'createChart',\n          'data': {\n            'chartID': 'chart' + chartID,\n            'chartType': 'barChart',\n            'chartData': extractChartData(plotArea[key]['c:ser'])\n          }\n        }\n        break\n      case 'c:pieChart':\n        chartData = {\n          'type': 'createChart',\n          'data': {\n            'chartID': 'chart' + chartID,\n            'chartType': 'pieChart',\n            'chartData': extractChartData(plotArea[key]['c:ser'])\n          }\n        }\n        break\n      case 'c:pie3DChart':\n        chartData = {\n          'type': 'createChart',\n          'data': {\n            'chartID': 'chart' + chartID,\n            'chartType': 'pie3DChart',\n            'chartData': extractChartData(plotArea[key]['c:ser'])\n          }\n        }\n        break\n      case 'c:areaChart':\n        chartData = {\n          'type': 'createChart',\n          'data': {\n            'chartID': 'chart' + chartID,\n            'chartType': 'areaChart',\n            'chartData': extractChartData(plotArea[key]['c:ser'])\n          }\n        }\n        break\n      case 'c:scatterChart':\n        chartData = {\n          'type': 'createChart',\n          'data': {\n            'chartID': 'chart' + chartID,\n            'chartType': 'scatterChart',\n            'chartData': extractChartData(plotArea[key]['c:ser'])\n          }\n        }\n        break\n      case 'c:catAx':\n        break\n      case 'c:valAx':\n        break\n      default:\n    }\n  }\n\n  if (chartData !== null) {\n    MsgQueue.push(chartData)\n  }\n\n  chartID++\n  return result\n}\n\nasync function genDiagram(node, warpObj, source, sType) {\n  //console.log(warpObj)\n  //readXmlFile(zip, sldFileName)\n  /**files define the diagram:\n   * 1-colors#.xml,\n   * 2-data#.xml,\n   * 3-layout#.xml,\n   * 4-quickStyle#.xml.\n   * 5-drawing#.xml, which Microsoft added as an extension for persisting diagram layout information.\n   */\n    ///get colors#.xml, data#.xml , layout#.xml , quickStyle#.xml\n  var order = node['attrs']['order']\n  var zip = warpObj['zip']\n  var xfrmNode = getTextByPathList(node, ['p:xfrm'])\n  var dgmRelIds = getTextByPathList(node, ['a:graphic', 'a:graphicData', 'dgm:relIds', 'attrs'])\n  //console.log(dgmRelIds)\n  var dgmClrFileId = dgmRelIds['r:cs']\n  var dgmDataFileId = dgmRelIds['r:dm']\n  var dgmLayoutFileId = dgmRelIds['r:lo']\n  var dgmQuickStyleFileId = dgmRelIds['r:qs']\n  var dgmClrFileName = warpObj['slideResObj'][dgmClrFileId].target,\n    dgmDataFileName = warpObj['slideResObj'][dgmDataFileId].target,\n    dgmLayoutFileName = warpObj['slideResObj'][dgmLayoutFileId].target,\n    dgmQuickStyleFileName = warpObj['slideResObj'][dgmQuickStyleFileId].target\n  //console.log(\"dgmClrFileName: \" , dgmClrFileName,\", dgmDataFileName: \",dgmDataFileName,\", dgmLayoutFileName: \",dgmLayoutFileName,\", dgmQuickStyleFileName: \",dgmQuickStyleFileName);\n  var dgmClr = await readXmlFile(zip, dgmClrFileName)\n  var dgmData = await readXmlFile(zip, dgmDataFileName)\n  var dgmLayout = await readXmlFile(zip, dgmLayoutFileName)\n  var dgmQuickStyle = await readXmlFile(zip, dgmQuickStyleFileName)\n  //console.log(dgmClr,dgmData,dgmLayout,dgmQuickStyle)\n  ///get drawing#.xml\n  // var dgmDrwFileName = \"\";\n  // var dataModelExt = getTextByPathList(dgmData, [\"dgm:dataModel\", \"dgm:extLst\", \"a:ext\", \"dsp:dataModelExt\", \"attrs\"]);\n  // if (dataModelExt !== undefined) {\n  //     var dgmDrwFileId = dataModelExt[\"relId\"];\n  //     dgmDrwFileName = warpObj[\"slideResObj\"][dgmDrwFileId][\"target\"];\n  // }\n  // var dgmDrwFile = \"\";\n  // if (dgmDrwFileName != \"\") {\n  //     dgmDrwFile = await readXmlFile(zip, dgmDrwFileName);\n  // }\n  // var dgmDrwSpArray = getTextByPathList(dgmDrwFile, [\"dsp:drawing\", \"dsp:spTree\", \"dsp:sp\"]);\n  //var dgmDrwSpArray = getTextByPathList(warpObj[\"digramFileContent\"], [\"dsp:drawing\", \"dsp:spTree\", \"dsp:sp\"]);\n  var dgmDrwSpArray = getTextByPathList(warpObj['digramFileContent'], ['p:drawing', 'p:spTree', 'p:sp'])\n  var rslt = ''\n  if (dgmDrwSpArray !== undefined) {\n    var dgmDrwSpArrayLen = dgmDrwSpArray.length\n    for (var i = 0; i < dgmDrwSpArrayLen; i++) {\n      var dspSp = dgmDrwSpArray[i]\n      // var dspSpObjToStr = JSON.stringify(dspSp);\n      // var pSpStr = dspSpObjToStr.replace(/dsp:/g, \"p:\");\n      // var pSpStrToObj = JSON.parse(pSpStr);\n      //console.log(\"pSpStrToObj[\" + i + \"]: \", pSpStrToObj);\n      //rslt += processSpNode(pSpStrToObj, node, warpObj, \"diagramBg\", sType)\n      rslt += await processSpNode(dspSp, node, warpObj, 'diagramBg', sType)\n    }\n    // dgmDrwFile: \"dsp:\"-> \"p:\"\n  }\n\n  return '<div class=\\'block diagram-content\\' style=\\'' +\n    getPosition(xfrmNode, node, undefined, undefined, sType) +\n    getSize(xfrmNode, undefined, undefined) +\n    '\\'>' + rslt + '</div>'\n}\n\nfunction getPosition(slideSpNode, pNode, slideLayoutSpNode, slideMasterSpNode, sType) {\n  var off\n  var x = -1, y = -1\n\n  if (slideSpNode !== undefined) {\n    off = slideSpNode['a:off']['attrs']\n  }\n\n  if (off === undefined && slideLayoutSpNode !== undefined) {\n    off = slideLayoutSpNode['a:off']['attrs']\n  } else if (off === undefined && slideMasterSpNode !== undefined) {\n    off = slideMasterSpNode['a:off']['attrs']\n  }\n  var offX = 0, offY = 0\n  var grpX = 0, grpY = 0\n  if (sType == 'group') {\n\n    var grpXfrmNode = getTextByPathList(pNode, ['p:grpSpPr', 'a:xfrm'])\n    if (xfrmNode !== undefined) {\n      grpX = parseInt(grpXfrmNode['a:off']['attrs']['x']) * slideFactor\n      grpY = parseInt(grpXfrmNode['a:off']['attrs']['y']) * slideFactor\n      // var chx = parseInt(grpXfrmNode[\"a:chOff\"][\"attrs\"][\"x\"]) * slideFactor;\n      // var chy = parseInt(grpXfrmNode[\"a:chOff\"][\"attrs\"][\"y\"]) * slideFactor;\n      // var cx = parseInt(grpXfrmNode[\"a:ext\"][\"attrs\"][\"cx\"]) * slideFactor;\n      // var cy = parseInt(grpXfrmNode[\"a:ext\"][\"attrs\"][\"cy\"]) * slideFactor;\n      // var chcx = parseInt(grpXfrmNode[\"a:chExt\"][\"attrs\"][\"cx\"]) * slideFactor;\n      // var chcy = parseInt(grpXfrmNode[\"a:chExt\"][\"attrs\"][\"cy\"]) * slideFactor;\n      // var rotate = parseInt(grpXfrmNode[\"attrs\"][\"rot\"])\n    }\n  }\n  if (sType == 'group-rotate' && pNode['p:grpSpPr'] !== undefined) {\n    var xfrmNode = pNode['p:grpSpPr']['a:xfrm']\n    // var ox = parseInt(xfrmNode[\"a:off\"][\"attrs\"][\"x\"]) * slideFactor;\n    // var oy = parseInt(xfrmNode[\"a:off\"][\"attrs\"][\"y\"]) * slideFactor;\n    var chx = parseInt(xfrmNode['a:chOff']['attrs']['x']) * slideFactor\n    var chy = parseInt(xfrmNode['a:chOff']['attrs']['y']) * slideFactor\n\n    offX = chx\n    offY = chy\n  }\n  if (off === undefined) {\n    return ''\n  } else {\n    x = parseInt(off['x']) * slideFactor\n    y = parseInt(off['y']) * slideFactor\n    // if (type = \"body\")\n    //     console.log(\"getPosition: slideSpNode: \", slideSpNode, \", type: \", type, \"x: \", x, \"offX:\", offX, \"y:\", y, \"offY:\", offY)\n    return (isNaN(x) || isNaN(y)) ? '' : 'top:' + (y - offY + grpY) + 'px; left:' + (x - offX + grpX) + 'px;'\n  }\n\n}\n\nfunction getSize(slideSpNode, slideLayoutSpNode, slideMasterSpNode) {\n  var ext = undefined\n  var w = -1, h = -1\n\n  if (slideSpNode !== undefined) {\n    ext = slideSpNode['a:ext']['attrs']\n  } else if (slideLayoutSpNode !== undefined) {\n    ext = slideLayoutSpNode['a:ext']['attrs']\n  } else if (slideMasterSpNode !== undefined) {\n    ext = slideMasterSpNode['a:ext']['attrs']\n  }\n\n  if (ext === undefined) {\n    return ''\n  } else {\n    w = computedFactor(parseInt(ext['cx']))\n    h = computedFactor(parseInt(ext['cy']))\n    return (isNaN(w) || isNaN(h)) ? '' : 'width:' + w + 'px; height:' + h + 'px;'\n  }\n\n}\nfunction getVerticalMargins(pNode, textBodyNode, type, idx, warpObj) {\n  //margin-top ;\n  //a:pPr => a:spcBef => a:spcPts (/100) | a:spcPct (/?)\n  //margin-bottom\n  //a:pPr => a:spcAft => a:spcPts (/100) | a:spcPct (/?)\n  //+\n  //a:pPr =>a:lnSpc => a:spcPts (/?) | a:spcPct (/?)\n  //console.log(\"getVerticalMargins \", pNode, type,idx, warpObj)\n  //var lstStyle = textBodyNode[\"a:lstStyle\"];\n  var lvl = 1\n  var spcBefNode = getTextByPathList(pNode, ['a:pPr', 'a:spcBef', 'a:spcPts', 'attrs', 'val'])\n  var spcAftNode = getTextByPathList(pNode, ['a:pPr', 'a:spcAft', 'a:spcPts', 'attrs', 'val'])\n  var lnSpcNode = getTextByPathList(pNode, ['a:pPr', 'a:lnSpc', 'a:spcPct', 'attrs', 'val'])\n  var lnSpcNodeType = 'Pct'\n  if (lnSpcNode === undefined) {\n    lnSpcNode = getTextByPathList(pNode, ['a:pPr', 'a:lnSpc', 'a:spcPts', 'attrs', 'val'])\n    if (lnSpcNode !== undefined) {\n      lnSpcNodeType = 'Pts'\n    }\n  }\n  var lvlNode = getTextByPathList(pNode, ['a:pPr', 'attrs', 'lvl'])\n  if (lvlNode !== undefined) {\n    lvl = parseInt(lvlNode) + 1\n  }\n  var fontSize\n  if (getTextByPathList(pNode, ['a:r']) !== undefined) {\n    var fontSizeStr = getFontSize(pNode['a:r'], textBodyNode,undefined, lvl, type, warpObj)\n    if (fontSizeStr != 'inherit') {\n      fontSize = parseInt(fontSizeStr, 'px') //pt\n    }\n  }\n  //var spcBef = \"\";\n  //console.log(\"getVerticalMargins 1\", fontSizeStr, fontSize, lnSpcNode, parseInt(lnSpcNode) / 100000, spcBefNode, spcAftNode)\n  // if(spcBefNode !== undefined){\n  //     spcBef = \"margin-top:\" + parseInt(spcBefNode)/100 + \"pt;\"\n  // }\n  // else{\n  //    //i did not found case with percentage\n  //     spcBefNode = getTextByPathList(pNode, [\"a:pPr\", \"a:spcBef\", \"a:spcPct\",\"attrs\",\"val\"]);\n  //     if(spcBefNode !== undefined){\n  //         spcBef = \"margin-top:\" + parseInt(spcBefNode)/100 + \"%;\"\n  //     }\n  // }\n  //var spcAft = \"\";\n  // if(spcAftNode !== undefined){\n  //     spcAft = \"margin-bottom:\" + parseInt(spcAftNode)/100 + \"pt;\"\n  // }\n  // else{\n  //    //i did not found case with percentage\n  //     spcAftNode = getTextByPathList(pNode, [\"a:pPr\", \"a:spcAft\", \"a:spcPct\",\"attrs\",\"val\"]);\n  //     if(spcAftNode !== undefined){\n  //         spcBef = \"margin-bottom:\" + parseInt(spcAftNode)/100 + \"%;\"\n  //     }\n  // }\n  // if(spcAftNode !== undefined){\n  //     //check in layout and then in master\n  // }\n  var isInLayoutOrMaster = true\n  if(type == 'shape' || type == 'textBox'){\n    isInLayoutOrMaster = false\n  }\n  if (isInLayoutOrMaster && (spcBefNode === undefined || spcAftNode === undefined || lnSpcNode === undefined)) {\n    //check in layout\n    if (idx !== undefined) {\n      var laypPrNode = getTextByPathList(warpObj, ['slideLayoutTables', 'idxTable', idx, 'p:txBody', 'a:p', (lvl - 1), 'a:pPr'])\n\n      if (spcBefNode === undefined) {\n        spcBefNode = getTextByPathList(laypPrNode, ['a:spcBef', 'a:spcPts', 'attrs', 'val'])\n        // if(spcBefNode !== undefined){\n        //     spcBef = \"margin-top:\" + parseInt(spcBefNode)/100 + \"pt;\"\n        // }\n        // else{\n        //    //i did not found case with percentage\n        //     spcBefNode = getTextByPathList(laypPrNode, [\"a:spcBef\", \"a:spcPct\",\"attrs\",\"val\"]);\n        //     if(spcBefNode !== undefined){\n        //         spcBef = \"margin-top:\" + parseInt(spcBefNode)/100 + \"%;\"\n        //     }\n        // }\n      }\n\n      if (spcAftNode === undefined) {\n        spcAftNode = getTextByPathList(laypPrNode, ['a:spcAft', 'a:spcPts', 'attrs', 'val'])\n        // if(spcAftNode !== undefined){\n        //     spcAft = \"margin-bottom:\" + parseInt(spcAftNode)/100 + \"pt;\"\n        // }\n        // else{\n        //    //i did not found case with percentage\n        //     spcAftNode = getTextByPathList(laypPrNode, [\"a:spcAft\", \"a:spcPct\",\"attrs\",\"val\"]);\n        //     if(spcAftNode !== undefined){\n        //         spcBef = \"margin-bottom:\" + parseInt(spcAftNode)/100 + \"%;\"\n        //     }\n        // }\n      }\n\n      if (lnSpcNode === undefined) {\n        lnSpcNode = getTextByPathList(laypPrNode, ['a:lnSpc', 'a:spcPct', 'attrs', 'val'])\n        if (lnSpcNode === undefined) {\n          lnSpcNode = getTextByPathList(laypPrNode, ['a:pPr', 'a:lnSpc', 'a:spcPts', 'attrs', 'val'])\n          if (lnSpcNode !== undefined) {\n            lnSpcNodeType = 'Pts'\n          }\n        }\n      }\n    }\n\n  }\n  if (isInLayoutOrMaster && (spcBefNode === undefined || spcAftNode === undefined || lnSpcNode === undefined)) {\n    //check in master\n    //slideMasterTextStyles\n    var slideMasterTextStyles = warpObj['slideMasterTextStyles']\n    var dirLoc = ''\n    var lvl = 'a:lvl' + lvl + 'pPr'\n    switch (type) {\n      case 'title':\n      case 'ctrTitle':\n        dirLoc = 'p:titleStyle'\n        break\n      case 'body':\n      case 'obj':\n      case 'dt':\n      case 'ftr':\n      case 'sldNum':\n      case 'textBox':\n        // case \"shape\":\n        dirLoc = 'p:bodyStyle'\n        break\n      case 'shape':\n      //case \"textBox\":\n      default:\n        dirLoc = 'p:otherStyle'\n    }\n    // if (type == \"shape\" || type == \"textBox\") {\n    //     lvl = \"a:lvl1pPr\";\n    // }\n    var inLvlNode = getTextByPathList(slideMasterTextStyles, [dirLoc, lvl])\n    if (inLvlNode !== undefined) {\n      if (spcBefNode === undefined) {\n        spcBefNode = getTextByPathList(inLvlNode, ['a:spcBef', 'a:spcPts', 'attrs', 'val'])\n        // if(spcBefNode !== undefined){\n        //     spcBef = \"margin-top:\" + parseInt(spcBefNode)/100 + \"pt;\"\n        // }\n        // else{\n        //    //i did not found case with percentage\n        //     spcBefNode = getTextByPathList(inLvlNode, [\"a:spcBef\", \"a:spcPct\",\"attrs\",\"val\"]);\n        //     if(spcBefNode !== undefined){\n        //         spcBef = \"margin-top:\" + parseInt(spcBefNode)/100 + \"%;\"\n        //     }\n        // }\n      }\n\n      if (spcAftNode === undefined) {\n        spcAftNode = getTextByPathList(inLvlNode, ['a:spcAft', 'a:spcPts', 'attrs', 'val'])\n        // if(spcAftNode !== undefined){\n        //     spcAft = \"margin-bottom:\" + parseInt(spcAftNode)/100 + \"pt;\"\n        // }\n        // else{\n        //    //i did not found case with percentage\n        //     spcAftNode = getTextByPathList(inLvlNode, [\"a:spcAft\", \"a:spcPct\",\"attrs\",\"val\"]);\n        //     if(spcAftNode !== undefined){\n        //         spcBef = \"margin-bottom:\" + parseInt(spcAftNode)/100 + \"%;\"\n        //     }\n        // }\n      }\n\n      if (lnSpcNode === undefined) {\n        lnSpcNode = getTextByPathList(inLvlNode, ['a:lnSpc', 'a:spcPct', 'attrs', 'val'])\n        if (lnSpcNode === undefined) {\n          lnSpcNode = getTextByPathList(inLvlNode, ['a:pPr', 'a:lnSpc', 'a:spcPts', 'attrs', 'val'])\n          if (lnSpcNode !== undefined) {\n            lnSpcNodeType = 'Pts'\n          }\n        }\n      }\n    }\n  }\n  var spcBefor = 0, spcAfter = 0, spcLines = 0\n  var marginTopBottomStr = ''\n  if (spcBefNode !== undefined) {\n    spcBefor = parseInt(spcBefNode) / 100\n  }\n  if (spcAftNode !== undefined) {\n    spcAfter = parseInt(spcAftNode) / 100\n  }\n\n  if (lnSpcNode !== undefined && fontSize !== undefined) {\n    if (lnSpcNodeType == 'Pts') {\n      marginTopBottomStr += 'padding-top: ' + ((parseInt(lnSpcNode) / 100) - fontSize) + 'px;'//+ \"pt;\";\n    } else {\n      var fct = parseInt(lnSpcNode) / 100000\n      spcLines = fontSize * (fct - 1) - fontSize// fontSize *\n      var pTop = (fct > 1) ? spcLines : 0\n      var pBottom = (fct > 1) ? fontSize : 0\n      // marginTopBottomStr += \"padding-top: \" + spcLines + \"pt;\";\n      // marginTopBottomStr += \"padding-bottom: \" + pBottom + \"pt;\";\n      marginTopBottomStr += 'padding-top: ' + pBottom + 'px;'// + \"pt;\";\n      marginTopBottomStr += 'padding-bottom: ' + spcLines + 'px;'// + \"pt;\";\n    }\n  }\n\n  //if (spcBefNode !== undefined || lnSpcNode !== undefined) {\n  marginTopBottomStr += 'margin-top: ' + (spcBefor - 1) + 'px;'// + \"pt;\"; //margin-top: + spcLines // minus 1 - to fix space\n  //}\n  if (spcAftNode !== undefined || lnSpcNode !== undefined) {\n    //marginTopBottomStr += \"margin-bottom: \" + ((spcAfter - fontSize < 0) ? 0 : (spcAfter - fontSize)) + \"pt;\"; //margin-bottom: + spcLines\n    //marginTopBottomStr += \"margin-bottom: \" + spcAfter * (1 / 4) + \"px;\";// + \"pt;\";\n    marginTopBottomStr += 'margin-bottom: ' + spcAfter  + 'px;'// + \"pt;\";\n  }\n\n  //console.log(\"getVerticalMargins 2 fontSize:\", fontSize, \"lnSpcNode:\", lnSpcNode, \"spcLines:\", spcLines, \"spcBefor:\", spcBefor, \"spcAfter:\", spcAfter)\n  //console.log(\"getVerticalMargins 3 \", marginTopBottomStr, pNode, warpObj)\n\n  //return spcAft + spcBef;\n  return marginTopBottomStr\n}\nfunction getHorizontalAlign(node, textBodyNode, idx, type, prg_dir, warpObj) {\n  var algn = getTextByPathList(node, ['a:pPr', 'attrs', 'algn'])\n  if (algn === undefined) {\n    //var layoutMasterNode = getLayoutAndMasterNode(node, idx, type, warpObj);\n    // var pPrNodeLaout = layoutMasterNode.nodeLaout;\n    // var pPrNodeMaster = layoutMasterNode.nodeMaster;\n    var lvlIdx = 1\n    var lvlNode = getTextByPathList(node, ['a:pPr', 'attrs', 'lvl'])\n    if (lvlNode !== undefined) {\n      lvlIdx = parseInt(lvlNode) + 1\n    }\n    var lvlStr = 'a:lvl' + lvlIdx + 'pPr'\n\n    var lstStyle = textBodyNode['a:lstStyle']\n    algn = getTextByPathList(lstStyle, [lvlStr, 'attrs', 'algn'])\n\n    if (algn === undefined && idx !== undefined ) {\n      //slidelayout\n      algn = getTextByPathList(warpObj['slideLayoutTables']['idxTable'][idx], ['p:txBody', 'a:lstStyle', lvlStr, 'attrs', 'algn'])\n      if (algn === undefined) {\n        algn = getTextByPathList(warpObj['slideLayoutTables']['idxTable'][idx], ['p:txBody', 'a:p', 'a:pPr', 'attrs', 'algn'])\n        if (algn === undefined) {\n          algn = getTextByPathList(warpObj['slideLayoutTables']['idxTable'][idx], ['p:txBody', 'a:p', (lvlIdx - 1), 'a:pPr', 'attrs', 'algn'])\n        }\n      }\n    }\n    if (algn === undefined) {\n      if (type !== undefined) {\n        //slidelayout\n        algn = getTextByPathList(warpObj, ['slideLayoutTables', 'typeTable', type, 'p:txBody', 'a:lstStyle', lvlStr, 'attrs', 'algn'])\n\n        if (algn === undefined) {\n          //masterlayout\n          if (type == 'title' || type == 'ctrTitle') {\n            algn = getTextByPathList(warpObj, ['slideMasterTextStyles', 'p:titleStyle', lvlStr, 'attrs', 'algn'])\n          } else if (type == 'body' || type == 'obj' || type == 'subTitle') {\n            algn = getTextByPathList(warpObj, ['slideMasterTextStyles', 'p:bodyStyle', lvlStr, 'attrs', 'algn'])\n          } else if (type == 'shape' || type == 'diagram') {\n            algn = getTextByPathList(warpObj, ['slideMasterTextStyles', 'p:otherStyle', lvlStr, 'attrs', 'algn'])\n          } else if (type == 'textBox') {\n            algn = getTextByPathList(warpObj, ['defaultTextStyle', lvlStr, 'attrs', 'algn'])\n          } else {\n            algn = getTextByPathList(warpObj, ['slideMasterTables', 'typeTable', type, 'p:txBody', 'a:lstStyle', lvlStr, 'attrs', 'algn'])\n          }\n        }\n      } else {\n        algn = getTextByPathList(warpObj, ['slideMasterTextStyles', 'p:bodyStyle', lvlStr, 'attrs', 'algn'])\n      }\n    }\n  }\n\n  if (algn === undefined) {\n    if (type == 'title' || type == 'subTitle' || type == 'ctrTitle') {\n      return 'h-mid'\n    } else if (type == 'sldNum') {\n      return 'h-right'\n    }\n  }\n  if (algn !== undefined) {\n    switch (algn) {\n      case 'l':\n        if (prg_dir == 'pregraph-rtl'){\n          //return \"h-right\";\n          return 'h-left-rtl'\n        }else{\n          return 'h-left'\n        }\n        break\n      case 'r':\n        if (prg_dir == 'pregraph-rtl') {\n          //return \"h-left\";\n          return 'h-right-rtl'\n        }else{\n          return 'h-right'\n        }\n        break\n      case 'ctr':\n        return 'h-mid'\n        break\n      case 'just':\n      case 'dist':\n      default:\n        return 'h-' + algn\n    }\n  }\n  //return algn === \"ctr\" ? \"h-mid\" : algn === \"r\" ? \"h-right\" : \"h-left\";\n}\nfunction getPregraphDir(node, textBodyNode, idx, type, warpObj) {\n  var rtl = getTextByPathList(node, ['a:pPr', 'attrs', 'rtl'])\n  //console.log(\"getPregraphDir node:\", node, \"textBodyNode\", textBodyNode, \"rtl:\", rtl, \"idx\", idx, \"type\", type, \"warpObj\", warpObj)\n\n\n  if (rtl === undefined) {\n    var layoutMasterNode = getLayoutAndMasterNode(node, idx, type, warpObj)\n    var pPrNodeLaout = layoutMasterNode.nodeLaout\n    var pPrNodeMaster = layoutMasterNode.nodeMaster\n    rtl = getTextByPathList(pPrNodeLaout, ['attrs', 'rtl'])\n    if (rtl === undefined && type != 'shape') {\n      rtl = getTextByPathList(pPrNodeMaster, ['attrs', 'rtl'])\n    }\n  }\n\n  if (rtl == '1') {\n    return 'pregraph-rtl'\n  } else if (rtl == '0') {\n    return 'pregraph-ltr'\n  }\n  return 'pregraph-inherit'\n\n  // var contentDir = getContentDir(type, warpObj);\n  // console.log(\"getPregraphDir node:\", node[\"a:r\"], \"rtl:\", rtl, \"idx\", idx, \"type\", type, \"contentDir:\", contentDir)\n\n  // if (contentDir == \"content\"){\n  //     return \"pregraph-ltr\";\n  // } else if (contentDir == \"content-rtl\"){\n  //     return \"pregraph-rtl\";\n  // }\n  // return \"\";\n}\nfunction getVerticalAlign(node, slideLayoutSpNode, slideMasterSpNode, type) {\n\n  //X, <a:bodyPr anchor=\"ctr\">, <a:bodyPr anchor=\"b\">\n  var anchor = getTextByPathList(node, ['p:txBody', 'a:bodyPr', 'attrs', 'anchor'])\n  //console.log(\"getVerticalAlign anchor:\", anchor, \"slideLayoutSpNode: \", slideLayoutSpNode)\n  if (anchor === undefined) {\n    //console.log(\"getVerticalAlign type:\", type,\" node:\", node, \"slideLayoutSpNode:\", slideLayoutSpNode, \"slideMasterSpNode:\", slideMasterSpNode)\n    anchor = getTextByPathList(slideLayoutSpNode, ['p:txBody', 'a:bodyPr', 'attrs', 'anchor'])\n    if (anchor === undefined) {\n      anchor = getTextByPathList(slideMasterSpNode, ['p:txBody', 'a:bodyPr', 'attrs', 'anchor'])\n      if (anchor === undefined) {\n        //\"If this attribute is omitted, then a value of t, or top is implied.\"\n        anchor = 't'//getTextByPathList(slideMasterSpNode, [\"p:txBody\", \"a:bodyPr\", \"attrs\", \"anchor\"]);\n      }\n    }\n  }\n  //console.log(\"getVerticalAlign:\", node, slideLayoutSpNode, slideMasterSpNode, type, anchor)\n  return (anchor === 'ctr')?'v-mid' : ((anchor === 'b') ? 'v-down' : 'v-up')\n}\n\nfunction getContentDir(node, type, warpObj) {\n  return 'content'\n  var defRtl = getTextByPathList(node, ['p:txBody', 'a:lstStyle', 'a:defPPr', 'attrs', 'rtl'])\n  if (defRtl !== undefined) {\n    if (defRtl == '1'){\n      return 'content-rtl'\n    } else if (defRtl == '0') {\n      return 'content'\n    }\n  }\n  //var lvl1Rtl = getTextByPathList(node, [\"p:txBody\", \"a:lstStyle\", \"lvl1pPr\", \"attrs\", \"rtl\"]);\n  // if (lvl1Rtl !== undefined) {\n  //     if (lvl1Rtl == \"1\") {\n  //         return \"content-rtl\";\n  //     } else if (lvl1Rtl == \"0\") {\n  //         return \"content\";\n  //     }\n  // }\n  var rtlCol = getTextByPathList(node, ['p:txBody', 'a:bodyPr', 'attrs', 'rtlCol'])\n  if (rtlCol !== undefined) {\n    if (rtlCol == '1') {\n      return 'content-rtl'\n    } else if (rtlCol == '0') {\n      return 'content'\n    }\n  }\n  //console.log(\"getContentDir node:\", node, \"rtlCol:\", rtlCol)\n\n  if (type === undefined) {\n    return 'content'\n  }\n  var slideMasterTextStyles = warpObj['slideMasterTextStyles']\n  var dirLoc = ''\n\n  switch (type) {\n    case 'title':\n    case 'ctrTitle':\n      dirLoc = 'p:titleStyle'\n      break\n    case 'body':\n    case 'dt':\n    case 'ftr':\n    case 'sldNum':\n    case 'textBox':\n      dirLoc = 'p:bodyStyle'\n      break\n    case 'shape':\n      dirLoc = 'p:otherStyle'\n  }\n  if (slideMasterTextStyles !== undefined && dirLoc !== '') {\n    var dirVal = getTextByPathList(slideMasterTextStyles[dirLoc], ['a:lvl1pPr', 'attrs', 'rtl'])\n    if (dirVal == '1') {\n      return 'content-rtl'\n    }\n  }\n  // else {\n  //     if (type == \"textBox\") {\n  //         var dirVal = getTextByPathList(warpObj, [\"defaultTextStyle\", \"a:lvl1pPr\", \"attrs\", \"rtl\"]);\n  //         if (dirVal == \"1\") {\n  //             return \"content-rtl\";\n  //         }\n  //     }\n  // }\n  return 'content'\n  //console.log(\"getContentDir() type:\", type, \"slideMasterTextStyles:\", slideMasterTextStyles,\"dirNode:\",dirVal)\n}\n\nfunction getFontType(node, type, warpObj, pFontStyle) {\n  var typeface = getTextByPathList(node, ['a:rPr', 'a:latin', 'attrs', 'typeface'])\n\n  if (typeface === undefined) {\n    var fontIdx = ''\n    var fontGrup = ''\n    if (pFontStyle !== undefined) {\n      fontIdx = getTextByPathList(pFontStyle, ['attrs', 'idx'])\n    }\n    var fontSchemeNode = getTextByPathList(warpObj['themeContent'], ['a:theme', 'a:themeElements', 'a:fontScheme'])\n    if (fontIdx == '') {\n      if (type == 'title' || type == 'subTitle' || type == 'ctrTitle') {\n        fontIdx = 'major'\n      } else {\n        fontIdx = 'minor'\n      }\n    }\n    fontGrup = 'a:' + fontIdx + 'Font'\n    typeface = getTextByPathList(fontSchemeNode, [fontGrup, 'a:latin', 'attrs', 'typeface'])\n  }\n\n  return (typeface === undefined) ? 'inherit' : typeface\n}\n\nasync function getFontColorPr(node, pNode, lstStyle, pFontStyle, lvl, idx, type, warpObj) {\n  //text border using: text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;\n  //{getFontColor(..) return color} -> getFontColorPr(..) return array[color,textBordr/shadow]\n  //https://stackoverflow.com/questions/2570972/css-font-border\n  //https://www.w3schools.com/cssref/css3_pr_text-shadow.asp\n  //themeContent\n  //console.log(\"getFontColorPr>> type:\", type, \", node: \", node)\n  var rPrNode = getTextByPathList(node, ['a:rPr'])\n  var filTyp, color, textBordr, colorType = '', highlightColor = ''\n  //console.log(\"getFontColorPr type:\", type, \", node: \", node, \"pNode:\", pNode, \"pFontStyle:\", pFontStyle)\n  if (rPrNode !== undefined) {\n    filTyp = getFillType(rPrNode)\n    if (filTyp == 'SOLID_FILL') {\n      var solidFillNode = rPrNode['a:solidFill']// getTextByPathList(node, [\"a:rPr\", \"a:solidFill\"]);\n      color = getSolidFill(solidFillNode, undefined, undefined, warpObj)\n      var highlightNode = rPrNode['a:highlight']\n      if (highlightNode !== undefined) {\n        highlightColor = getSolidFill(highlightNode, undefined, undefined, warpObj)\n      }\n      colorType = 'solid'\n    } else if (filTyp == 'PATTERN_FILL') {\n      var pattFill = rPrNode['a:pattFill']// getTextByPathList(node, [\"a:rPr\", \"a:pattFill\"]);\n      color = getPatternFill(pattFill, warpObj)\n      colorType = 'pattern'\n    } else if (filTyp == 'PIC_FILL') {\n      color = await getBgPicFill(rPrNode, 'slideBg', warpObj, undefined, undefined)\n      //color = getPicFill(\"slideBg\", rPrNode[\"a:blipFill\"], warpObj);\n      colorType = 'pic'\n    } else if (filTyp == 'GRADIENT_FILL') {\n      var shpFill = rPrNode['a:gradFill']\n      color = getGradientFill(shpFill, warpObj)\n      colorType = 'gradient'\n    }\n  }\n  if (color === undefined && getTextByPathList(lstStyle, ['a:lvl' + lvl + 'pPr', 'a:defRPr']) !== undefined) {\n    //lstStyle\n    var lstStyledefRPr = getTextByPathList(lstStyle, ['a:lvl' + lvl + 'pPr', 'a:defRPr'])\n    filTyp = getFillType(lstStyledefRPr)\n    if (filTyp == 'SOLID_FILL') {\n      var solidFillNode = lstStyledefRPr['a:solidFill']// getTextByPathList(node, [\"a:rPr\", \"a:solidFill\"]);\n      color = getSolidFill(solidFillNode, undefined, undefined, warpObj)\n      var highlightNode = lstStyledefRPr['a:highlight']\n      if (highlightNode !== undefined) {\n        highlightColor = getSolidFill(highlightNode, undefined, undefined, warpObj)\n      }\n      colorType = 'solid'\n    } else if (filTyp == 'PATTERN_FILL') {\n      var pattFill = lstStyledefRPr['a:pattFill']// getTextByPathList(node, [\"a:rPr\", \"a:pattFill\"]);\n      color = getPatternFill(pattFill, warpObj)\n      colorType = 'pattern'\n    } else if (filTyp == 'PIC_FILL') {\n      color = await getBgPicFill(lstStyledefRPr, 'slideBg', warpObj, undefined, undefined)\n      //color = getPicFill(\"slideBg\", rPrNode[\"a:blipFill\"], warpObj);\n      colorType = 'pic'\n    } else if (filTyp == 'GRADIENT_FILL') {\n      var shpFill = lstStyledefRPr['a:gradFill']\n      color = getGradientFill(shpFill, warpObj)\n      colorType = 'gradient'\n    }\n\n  }\n  if (color === undefined) {\n    var sPstyle = getTextByPathList(pNode, ['p:style', 'a:fontRef'])\n    if (sPstyle !== undefined) {\n      color = getSolidFill(sPstyle, undefined, undefined, warpObj)\n      if (color !== undefined) {\n        colorType = 'solid'\n      }\n      var highlightNode = sPstyle['a:highlight'] //is \"a:highlight\" node in 'a:fontRef' ?\n      if (highlightNode !== undefined) {\n        highlightColor = getSolidFill(highlightNode, undefined, undefined, warpObj)\n      }\n    }\n    if (color === undefined) {\n      if (pFontStyle !== undefined) {\n        color = getSolidFill(pFontStyle, undefined, undefined, warpObj)\n        if (color !== undefined) {\n          colorType = 'solid'\n        }\n      }\n    }\n  }\n  //console.log(\"getFontColorPr node\", node, \"colorType: \", colorType,\"color: \",color)\n\n  if (color === undefined) {\n\n    var layoutMasterNode = getLayoutAndMasterNode(pNode, idx, type, warpObj)\n    var pPrNodeLaout = layoutMasterNode.nodeLaout\n    var pPrNodeMaster = layoutMasterNode.nodeMaster\n\n    if (pPrNodeLaout !== undefined) {\n      var defRpRLaout = getTextByPathList(pPrNodeLaout, ['a:defRPr', 'a:solidFill'])\n      if (defRpRLaout !== undefined) {\n        color = getSolidFill(defRpRLaout, undefined, undefined, warpObj)\n        var highlightNode = getTextByPathList(pPrNodeLaout, ['a:defRPr', 'a:highlight'])\n        if (highlightNode !== undefined) {\n          highlightColor = getSolidFill(highlightNode, undefined, undefined, warpObj)\n        }\n        colorType = 'solid'\n      }\n    }\n    if (color === undefined) {\n\n      if (pPrNodeMaster !== undefined) {\n        var defRprMaster = getTextByPathList(pPrNodeMaster, ['a:defRPr', 'a:solidFill'])\n        if (defRprMaster !== undefined) {\n          color = getSolidFill(defRprMaster, undefined, undefined, warpObj)\n          var highlightNode = getTextByPathList(pPrNodeMaster, ['a:defRPr', 'a:highlight'])\n          if (highlightNode !== undefined) {\n            highlightColor = getSolidFill(highlightNode, undefined, undefined, warpObj)\n          }\n          colorType = 'solid'\n        }\n      }\n    }\n  }\n  var txtEffects = []\n  var txtEffObj = {}\n  //textBordr\n  var txtBrdrNode = getTextByPathList(node, ['a:rPr', 'a:ln'])\n  var textBordr = ''\n  if (txtBrdrNode !== undefined && txtBrdrNode['a:noFill'] === undefined) {\n    var txBrd = getBorder(node, pNode, false, 'text', warpObj)\n    var txBrdAry = txBrd.split(' ')\n    //var brdSize = (parseInt(txBrdAry[0].substring(0, txBrdAry[0].indexOf(\"pt\")))) + \"px\";\n    var brdSize = (parseInt(txBrdAry[0].substring(0, txBrdAry[0].indexOf('px')))) + 'px'\n    var brdClr = txBrdAry[2]\n    //var brdTyp = txBrdAry[1]; //not in use\n    //console.log(\"getFontColorPr txBrdAry:\", txBrdAry)\n    if (colorType == 'solid') {\n      textBordr = '-' + brdSize + ' 0 ' + brdClr + ', 0 ' + brdSize + ' ' + brdClr + ', ' + brdSize + ' 0 ' + brdClr + ', 0 -' + brdSize + ' ' + brdClr\n      // if (oShadowStr != \"\") {\n      //     textBordr += \",\" + oShadowStr;\n      // } else {\n      //     textBordr += \";\";\n      // }\n      txtEffects.push(textBordr)\n    } else {\n      //textBordr = brdSize + \" \" + brdClr;\n      txtEffObj.border = brdSize + ' ' + brdClr\n    }\n  }\n  // else {\n  //     //if no border but exist/not exist shadow\n  //     if (colorType == \"solid\") {\n  //         textBordr = oShadowStr;\n  //     } else {\n  //         //TODO\n  //     }\n  // }\n  var txtGlowNode = getTextByPathList(node, ['a:rPr', 'a:effectLst', 'a:glow'])\n  var oGlowStr = ''\n  if (txtGlowNode !== undefined) {\n    var glowClr = getSolidFill(txtGlowNode, undefined, undefined, warpObj)\n    var rad = (txtGlowNode['attrs']['rad']) ? (txtGlowNode['attrs']['rad'] * slideFactor) : 0\n    oGlowStr = '0 0 ' + rad + 'px #' + glowClr +\n      ', 0 0 ' + rad + 'px #' + glowClr +\n      ', 0 0 ' + rad + 'px #' + glowClr +\n      ', 0 0 ' + rad + 'px #' + glowClr +\n      ', 0 0 ' + rad + 'px #' + glowClr +\n      ', 0 0 ' + rad + 'px #' + glowClr +\n      ', 0 0 ' + rad + 'px #' + glowClr\n    if (colorType == 'solid') {\n      txtEffects.push(oGlowStr)\n    } else {\n      // txtEffObj.glow = {\n      //     radiuse: rad,\n      //     color: glowClr\n      // }\n      txtEffects.push(\n        'drop-shadow(0 0 ' + rad / 3 + 'px #' + glowClr + ') ' +\n        'drop-shadow(0 0 ' + rad * 2 / 3 + 'px #' + glowClr + ') ' +\n        'drop-shadow(0 0 ' + rad + 'px #' + glowClr + ')'\n      )\n    }\n  }\n  var txtShadow = getTextByPathList(node, ['a:rPr', 'a:effectLst', 'a:outerShdw'])\n  var oShadowStr = ''\n  if (txtShadow !== undefined) {\n    //https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/drop-shadow()\n    //https://stackoverflow.com/questions/60468487/css-text-with-linear-gradient-shadow-and-text-outline\n    //https://css-tricks.com/creating-playful-effects-with-css-text-shadows/\n    //https://designshack.net/articles/css/12-fun-css-text-shadows-you-can-copy-and-paste/\n\n    var shadowClr = getSolidFill(txtShadow, undefined, undefined, warpObj)\n    var outerShdwAttrs = txtShadow['attrs']\n    // algn: \"bl\"\n    // dir: \"2640000\"\n    // dist: \"38100\"\n    // rotWithShape: \"0/1\" - Specifies whether the shadow rotates with the shape if the shape is rotated.\n    //blurRad (Blur Radius) - Specifies the blur radius of the shadow.\n    //kx (Horizontal Skew) - Specifies the horizontal skew angle.\n    //ky (Vertical Skew) - Specifies the vertical skew angle.\n    //sx (Horizontal Scaling Factor) - Specifies the horizontal scaling slideFactor; negative scaling causes a flip.\n    //sy (Vertical Scaling Factor) - Specifies the vertical scaling slideFactor; negative scaling causes a flip.\n    var algn = outerShdwAttrs['algn']\n    var dir = (outerShdwAttrs['dir']) ? (parseInt(outerShdwAttrs['dir']) / 60000) : 0\n    var dist = parseInt(outerShdwAttrs['dist']) * slideFactor//(px) //* (3 / 4); //(pt)\n    var rotWithShape = outerShdwAttrs['rotWithShape']\n    var blurRad = (outerShdwAttrs['blurRad']) ? (parseInt(outerShdwAttrs['blurRad']) * slideFactor + 'px') : ''\n    var sx = (outerShdwAttrs['sx']) ? (parseInt(outerShdwAttrs['sx']) / 100000) : 1\n    var sy = (outerShdwAttrs['sy']) ? (parseInt(outerShdwAttrs['sy']) / 100000) : 1\n    var vx = dist * Math.sin(dir * Math.PI / 180)\n    var hx = dist * Math.cos(dir * Math.PI / 180)\n\n    //console.log(\"getFontColorPr outerShdwAttrs:\", outerShdwAttrs, \", shadowClr:\", shadowClr, \", algn: \", algn, \",dir: \", dir, \", dist: \", dist, \",rotWithShape: \", rotWithShape, \", color: \", color)\n\n    if (!isNaN(vx) && !isNaN(hx)) {\n      oShadowStr = hx + 'px ' + vx + 'px ' + blurRad + ' #' + shadowClr// + \";\";\n      if (colorType == 'solid') {\n        txtEffects.push(oShadowStr)\n      } else {\n\n        // txtEffObj.oShadow = {\n        //     hx: hx,\n        //     vx: vx,\n        //     radius: blurRad,\n        //     color: shadowClr\n        // }\n\n        //txtEffObj.oShadow = hx + \"px \" + vx + \"px \" + blurRad + \" #\" + shadowClr;\n\n        txtEffects.push('drop-shadow(' + hx + 'px ' + vx + 'px ' + blurRad + ' #' + shadowClr + ')')\n      }\n    }\n    //console.log(\"getFontColorPr vx:\", vx, \", hx: \", hx, \", sx: \", sx, \", sy: \", sy, \",oShadowStr: \", oShadowStr)\n  }\n  //console.log(\"getFontColorPr>>> color:\", color)\n  // if (color === undefined || color === \"FFF\") {\n  //     color = \"#000\";\n  // } else {\n  //     color = \"\" + color;\n  // }\n  var text_effcts = '', txt_effects\n  if (colorType == 'solid') {\n    if (txtEffects.length > 0) {\n      text_effcts = txtEffects.join(',')\n    }\n    txt_effects = text_effcts + ';'\n  } else {\n    if (txtEffects.length > 0) {\n      text_effcts = txtEffects.join(' ')\n    }\n    txtEffObj.effcts = text_effcts\n    txt_effects = txtEffObj\n  }\n  //console.log(\"getFontColorPr txt_effects:\", txt_effects)\n\n  //return [color, textBordr, colorType];\n  return [color, txt_effects, colorType, highlightColor]\n}\nfunction getFontSize(node, textBodyNode, pFontStyle, lvl, type, warpObj) {\n  // if(type == \"sldNum\")\n  //console.log(\"getFontSize node:\", node, \"lstStyle\", lstStyle, \"lvl:\", lvl, 'type:', type, \"warpObj:\", warpObj)\n  var lstStyle = (textBodyNode !== undefined)? textBodyNode['a:lstStyle'] : undefined\n  var lvlpPr = 'a:lvl' + lvl + 'pPr'\n  var fontSize = undefined\n  var sz, kern\n  if (node['a:rPr'] !== undefined) {\n    fontSize = parseInt(node['a:rPr']['attrs']['sz']) / 100\n  }\n  if (isNaN(fontSize) || fontSize === undefined && node['a:fld'] !== undefined) {\n    sz = getTextByPathList(node['a:fld'], ['a:rPr', 'attrs', 'sz'])\n    fontSize = parseInt(sz) / 100\n  }\n  if ((isNaN(fontSize) || fontSize === undefined) && node['a:t'] === undefined) {\n    sz = getTextByPathList(node['a:endParaRPr'], [ 'attrs', 'sz'])\n    fontSize = parseInt(sz) / 100\n  }\n  if ((isNaN(fontSize) || fontSize === undefined) && lstStyle !== undefined) {\n    sz = getTextByPathList(lstStyle, [lvlpPr, 'a:defRPr', 'attrs', 'sz'])\n    fontSize = parseInt(sz) / 100\n  }\n  //a:spAutoFit\n  var isAutoFit = false\n  var isKerning = false\n  if (textBodyNode !== undefined){\n    var spAutoFitNode = getTextByPathList(textBodyNode, ['a:bodyPr', 'a:spAutoFit'])\n    // if (spAutoFitNode === undefined) {\n    //     spAutoFitNode = getTextByPathList(textBodyNode, [\"a:bodyPr\", \"a:normAutofit\"]);\n    // }\n    if (spAutoFitNode !== undefined){\n      isAutoFit = true\n      isKerning = true\n    }\n  }\n  if (isNaN(fontSize) || fontSize === undefined) {\n    // if (type == \"shape\" || type == \"textBox\") {\n    //     type = \"body\";\n    //     lvlpPr = \"a:lvl1pPr\";\n    // }\n    sz = getTextByPathList(warpObj['slideLayoutTables'], ['typeTable', type, 'p:txBody', 'a:lstStyle', lvlpPr, 'a:defRPr', 'attrs', 'sz'])\n    fontSize = parseInt(sz) / 100\n    kern = getTextByPathList(warpObj['slideLayoutTables'], ['typeTable', type, 'p:txBody', 'a:lstStyle', lvlpPr, 'a:defRPr', 'attrs', 'kern'])\n    if (isKerning && kern !== undefined && !isNaN(fontSize) && (fontSize - parseInt(kern) / 100) > 0){\n      fontSize = fontSize - parseInt(kern) / 100\n    }\n  }\n\n  if (isNaN(fontSize) || fontSize === undefined) {\n    // if (type == \"shape\" || type == \"textBox\") {\n    //     type = \"body\";\n    //     lvlpPr = \"a:lvl1pPr\";\n    // }\n    sz = getTextByPathList(warpObj['slideMasterTables'], ['typeTable', type, 'p:txBody', 'a:lstStyle', lvlpPr, 'a:defRPr', 'attrs', 'sz'])\n    kern = getTextByPathList(warpObj['slideMasterTables'], ['typeTable', type, 'p:txBody', 'a:lstStyle', lvlpPr, 'a:defRPr', 'attrs', 'kern'])\n    if (sz === undefined) {\n      if (type == 'title' || type == 'subTitle' || type == 'ctrTitle') {\n        sz = getTextByPathList(warpObj['slideMasterTextStyles'], ['p:titleStyle', lvlpPr, 'a:defRPr', 'attrs', 'sz'])\n        kern = getTextByPathList(warpObj['slideMasterTextStyles'], ['p:titleStyle', lvlpPr, 'a:defRPr', 'attrs', 'kern'])\n      } else if (type == 'body' || type == 'obj' || type == 'dt' || type == 'sldNum' || type === 'textBox') {\n        sz = getTextByPathList(warpObj['slideMasterTextStyles'], ['p:bodyStyle', lvlpPr, 'a:defRPr', 'attrs', 'sz'])\n        kern = getTextByPathList(warpObj['slideMasterTextStyles'], ['p:bodyStyle', lvlpPr, 'a:defRPr', 'attrs', 'kern'])\n      }\n      else if (type == 'shape') {\n        //textBox and shape text does not indent\n        sz = getTextByPathList(warpObj['slideMasterTextStyles'], ['p:otherStyle', lvlpPr, 'a:defRPr', 'attrs', 'sz'])\n        kern = getTextByPathList(warpObj['slideMasterTextStyles'], ['p:otherStyle', lvlpPr, 'a:defRPr', 'attrs', 'kern'])\n        isKerning = false\n      }\n\n      if (sz === undefined) {\n        sz = getTextByPathList(warpObj['defaultTextStyle'], [lvlpPr, 'a:defRPr', 'attrs', 'sz'])\n        kern = (kern === undefined)? getTextByPathList(warpObj['defaultTextStyle'], [lvlpPr, 'a:defRPr', 'attrs', 'kern']) : undefined\n        isKerning = false\n      }\n      //  else if (type === undefined || type == \"shape\") {\n      //     sz = getTextByPathList(warpObj[\"slideMasterTextStyles\"], [\"p:otherStyle\", lvlpPr, \"a:defRPr\", \"attrs\", \"sz\"]);\n      //     kern = getTextByPathList(warpObj[\"slideMasterTextStyles\"], [\"p:otherStyle\", lvlpPr, \"a:defRPr\", \"attrs\", \"kern\"]);\n      // }\n      // else if (type == \"textBox\") {\n      //     sz = getTextByPathList(warpObj[\"slideMasterTextStyles\"], [\"p:otherStyle\", lvlpPr, \"a:defRPr\", \"attrs\", \"sz\"]);\n      //     kern = getTextByPathList(warpObj[\"slideMasterTextStyles\"], [\"p:otherStyle\", lvlpPr, \"a:defRPr\", \"attrs\", \"kern\"]);\n      // }\n    }\n    fontSize = parseInt(sz) / 100\n    if (isKerning && kern !== undefined && !isNaN(fontSize) && ((fontSize - parseInt(kern) / 100) > parseInt(kern) / 100 )) {\n      fontSize = fontSize - parseInt(kern) / 100\n      //fontSize =  parseInt(kern) / 100;\n    }\n  }\n\n  var baseline = getTextByPathList(node, ['a:rPr', 'attrs', 'baseline'])\n  if (baseline !== undefined && !isNaN(fontSize)) {\n    var baselineVl = parseInt(baseline) / 100000\n    //fontSize -= 10;\n    // fontSize = fontSize * baselineVl;\n    fontSize -= baselineVl\n  }\n\n  if (!isNaN(fontSize)){\n    var normAutofit = getTextByPathList(textBodyNode, ['a:bodyPr', 'a:normAutofit', 'attrs', 'fontScale'])\n    if (normAutofit !== undefined && normAutofit != 0){\n      //console.log(\"fontSize\", fontSize, \"normAutofit: \", normAutofit, normAutofit/100000)\n      fontSize = Math.round(fontSize * (normAutofit / 100000))\n    }\n  }\n\n  return isNaN(fontSize) ? ((type == 'br') ? 'initial' : 'inherit') : (fontSize * fontSizeFactor + 'px')// + \"pt\");\n}\n\nfunction getFontBold(node, type, slideMasterTextStyles) {\n  return (node['a:rPr'] !== undefined && node['a:rPr']['attrs']['b'] === '1') ? 'bold' : 'inherit'\n}\n\nfunction getFontItalic(node, type, slideMasterTextStyles) {\n  return (node['a:rPr'] !== undefined && node['a:rPr']['attrs']['i'] === '1') ? 'italic' : 'inherit'\n}\n\nfunction getFontDecoration(node, type, slideMasterTextStyles) {\n  ///////////////////////////////Amir///////////////////////////////\n  if (node['a:rPr'] !== undefined) {\n    var underLine = node['a:rPr']['attrs']['u'] !== undefined ? node['a:rPr']['attrs']['u'] : 'none'\n    var strikethrough = node['a:rPr']['attrs']['strike'] !== undefined ? node['a:rPr']['attrs']['strike'] : 'noStrike'\n    //console.log(\"strikethrough: \"+strikethrough);\n\n    if (underLine != 'none' && strikethrough == 'noStrike') {\n      return 'underline'\n    } else if (underLine == 'none' && strikethrough != 'noStrike') {\n      return 'line-through'\n    } else if (underLine != 'none' && strikethrough != 'noStrike') {\n      return 'underline line-through'\n    } else {\n      return 'inherit'\n    }\n  } else {\n    return 'inherit'\n  }\n  /////////////////////////////////////////////////////////////////\n  //return (node[\"a:rPr\"] !== undefined && node[\"a:rPr\"][\"attrs\"][\"u\"] === \"sng\") ? \"underline\" : \"inherit\";\n}\n////////////////////////////////////Amir/////////////////////////////////////\nfunction getTextHorizontalAlign(node, pNode, type, warpObj) {\n  //console.log(\"getTextHorizontalAlign: type: \", type, \", node: \", node)\n  var getAlgn = getTextByPathList(node, ['a:pPr', 'attrs', 'algn'])\n  if (getAlgn === undefined) {\n    getAlgn = getTextByPathList(pNode, ['a:pPr', 'attrs', 'algn'])\n  }\n  if (getAlgn === undefined) {\n    if (type == 'title' || type == 'ctrTitle' || type == 'subTitle') {\n      var lvlIdx = 1\n      var lvlNode = getTextByPathList(pNode, ['a:pPr', 'attrs', 'lvl'])\n      if (lvlNode !== undefined) {\n        lvlIdx = parseInt(lvlNode) + 1\n      }\n      var lvlStr = 'a:lvl' + lvlIdx + 'pPr'\n      getAlgn = getTextByPathList(warpObj, ['slideLayoutTables', 'typeTable', type, 'p:txBody', 'a:lstStyle', lvlStr, 'attrs', 'algn'])\n      if (getAlgn === undefined) {\n        getAlgn = getTextByPathList(warpObj, ['slideMasterTables', 'typeTable', type, 'p:txBody', 'a:lstStyle', lvlStr, 'attrs', 'algn'])\n        if (getAlgn === undefined) {\n          getAlgn = getTextByPathList(warpObj, ['slideMasterTextStyles', 'p:titleStyle', lvlStr, 'attrs', 'algn'])\n          if (getAlgn === undefined && type === 'subTitle') {\n            getAlgn = getTextByPathList(warpObj, ['slideMasterTextStyles', 'p:bodyStyle', lvlStr, 'attrs', 'algn'])\n          }\n        }\n      }\n    } else if (type == 'body') {\n      getAlgn = getTextByPathList(warpObj, ['slideMasterTextStyles', 'p:bodyStyle', 'a:lvl1pPr', 'attrs', 'algn'])\n    } else {\n      getAlgn = getTextByPathList(warpObj, ['slideMasterTables', 'typeTable', type, 'p:txBody', 'a:lstStyle', 'a:lvl1pPr', 'attrs', 'algn'])\n    }\n\n  }\n\n  var align = 'inherit'\n  if (getAlgn !== undefined) {\n    switch (getAlgn) {\n      case 'l':\n        align = 'left'\n        break\n      case 'r':\n        align = 'right'\n        break\n      case 'ctr':\n        align = 'center'\n        break\n      case 'just':\n        align = 'justify'\n        break\n      case 'dist':\n        align = 'justify'\n        break\n      default:\n        align = 'inherit'\n    }\n  }\n  return align\n}\n/////////////////////////////////////////////////////////////////////\nfunction getTextVerticalAlign(node, type, slideMasterTextStyles) {\n  var baseline = getTextByPathList(node, ['a:rPr', 'attrs', 'baseline'])\n  return baseline === undefined ? 'baseline' : (parseInt(baseline) / 1000) + '%'\n}\n\nfunction getTableBorders(node, warpObj) {\n  var borderStyle = ''\n  if (node['a:bottom'] !== undefined) {\n    var obj = {\n      'p:spPr': {\n        'a:ln': node['a:bottom']['a:ln']\n      }\n    }\n    var borders = getBorder(obj, undefined, false, 'shape', warpObj)\n    borderStyle += borders.replace('border', 'border-bottom')\n  }\n  if (node['a:top'] !== undefined) {\n    var obj = {\n      'p:spPr': {\n        'a:ln': node['a:top']['a:ln']\n      }\n    }\n    var borders = getBorder(obj, undefined, false, 'shape', warpObj)\n    borderStyle += borders.replace('border', 'border-top')\n  }\n  if (node['a:right'] !== undefined) {\n    var obj = {\n      'p:spPr': {\n        'a:ln': node['a:right']['a:ln']\n      }\n    }\n    var borders = getBorder(obj, undefined, false, 'shape', warpObj)\n    borderStyle += borders.replace('border', 'border-right')\n  }\n  if (node['a:left'] !== undefined) {\n    var obj = {\n      'p:spPr': {\n        'a:ln': node['a:left']['a:ln']\n      }\n    }\n    var borders = getBorder(obj, undefined, false, 'shape', warpObj)\n    borderStyle += borders.replace('border', 'border-left')\n  }\n\n  return borderStyle\n}\n//////////////////////////////////////////////////////////////////\nfunction getBorder(node, pNode, isSvgMode, bType, warpObj) {\n  //console.log(\"getBorder\", node, pNode, isSvgMode, bType)\n  var cssText, lineNode, subNodeTxt\n\n  if (bType == 'shape') {\n    cssText = 'border: '\n    lineNode = node['p:spPr']['a:ln']\n    //subNodeTxt = \"p:spPr\";\n    //node[\"p:style\"][\"a:lnRef\"] =\n  } else if (bType == 'text') {\n    cssText = ''\n    lineNode = node['a:rPr']['a:ln']\n    //subNodeTxt = \"a:rPr\";\n  }\n\n  //var is_noFill = getTextByPathList(node, [\"p:spPr\", \"a:noFill\"]);\n  var is_noFill = getTextByPathList(lineNode, ['a:noFill'])\n  if (is_noFill !== undefined) {\n    return 'hidden'\n  }\n\n  //console.log(\"lineNode: \", lineNode)\n  if (lineNode == undefined) {\n    var lnRefNode = getTextByPathList(node, ['p:style', 'a:lnRef'])\n    if (lnRefNode !== undefined){\n      var lnIdx = getTextByPathList(lnRefNode, ['attrs', 'idx'])\n      //console.log(\"lnIdx:\", lnIdx, \"lnStyleLst:\", warpObj[\"themeContent\"][\"a:theme\"][\"a:themeElements\"][\"a:fmtScheme\"][\"a:lnStyleLst\"][\"a:ln\"][Number(lnIdx) -1])\n      lineNode = warpObj['themeContent']['a:theme']['a:themeElements']['a:fmtScheme']['a:lnStyleLst']['a:ln'][Number(lnIdx) - 1]\n    }\n  }\n  if (lineNode == undefined) {\n    //is table\n    cssText = ''\n    lineNode = node\n  }\n\n  var borderColor\n  if (lineNode !== undefined) {\n    // Border width: 1pt = 12700, default = 0.75pt\n    var borderWidth = parseInt(getTextByPathList(lineNode, ['attrs', 'w'])) / 12700\n    if (isNaN(borderWidth) || borderWidth < 1) {\n      cssText += (4/3) + 'px '//\"1pt \";\n    } else {\n      cssText += borderWidth + 'px '// + \"pt \";\n    }\n    // Border type\n    var borderType = getTextByPathList(lineNode, ['a:prstDash', 'attrs', 'val'])\n    if (borderType === undefined) {\n      borderType = getTextByPathList(lineNode, ['attrs', 'cmpd'])\n    }\n    var strokeDasharray = '0'\n    switch (borderType) {\n      case 'solid':\n        cssText += 'solid'\n        strokeDasharray = '0'\n        break\n      case 'dash':\n        cssText += 'dashed'\n        strokeDasharray = '5'\n        break\n      case 'dashDot':\n        cssText += 'dashed'\n        strokeDasharray = '5, 5, 1, 5'\n        break\n      case 'dot':\n        cssText += 'dotted'\n        strokeDasharray = '1, 5'\n        break\n      case 'lgDash':\n        cssText += 'dashed'\n        strokeDasharray = '10, 5'\n        break\n      case 'dbl':\n        cssText += 'double'\n        strokeDasharray = '0'\n        break\n      case 'lgDashDotDot':\n        cssText += 'dashed'\n        strokeDasharray = '10, 5, 1, 5, 1, 5'\n        break\n      case 'sysDash':\n        cssText += 'dashed'\n        strokeDasharray = '5, 2'\n        break\n      case 'sysDashDot':\n        cssText += 'dashed'\n        strokeDasharray = '5, 2, 1, 5'\n        break\n      case 'sysDashDotDot':\n        cssText += 'dashed'\n        strokeDasharray = '5, 2, 1, 5, 1, 5'\n        break\n      case 'sysDot':\n        cssText += 'dotted'\n        strokeDasharray = '2, 5'\n        break\n      case undefined:\n      //console.log(borderType);\n      default:\n        cssText += 'solid'\n        strokeDasharray = '0'\n    }\n    // Border color\n    var fillTyp = getFillType(lineNode)\n    //console.log(\"getBorder:node : fillTyp\", fillTyp)\n    if (fillTyp == 'NO_FILL') {\n      borderColor = isSvgMode ? 'none' : ''//\"background-color: initial;\";\n    } else if (fillTyp == 'SOLID_FILL') {\n      borderColor = getSolidFill(lineNode['a:solidFill'], undefined, undefined, warpObj)\n    } else if (fillTyp == 'GRADIENT_FILL') {\n      borderColor = getGradientFill(lineNode['a:gradFill'], warpObj)\n      //console.log(\"shpFill\",shpFill,grndColor.color)\n    } else if (fillTyp == 'PATTERN_FILL') {\n      borderColor = getPatternFill(lineNode['a:pattFill'], warpObj)\n    }\n\n  }\n\n  //console.log(\"getBorder:node : borderColor\", borderColor)\n  // 2. drawingML namespace\n  if (borderColor === undefined) {\n    //var schemeClrNode = getTextByPathList(node, [\"p:style\", \"a:lnRef\", \"a:schemeClr\"]);\n    // if (schemeClrNode !== undefined) {\n    //     var schemeClr = \"a:\" + getTextByPathList(schemeClrNode, [\"attrs\", \"val\"]);\n    //     var borderColor = getSchemeColorFromTheme(schemeClr, undefined, undefined);\n    // }\n    var lnRefNode = getTextByPathList(node, ['p:style', 'a:lnRef'])\n    //console.log(\"getBorder: lnRef : \", lnRefNode)\n    if (lnRefNode !== undefined) {\n      borderColor = getSolidFill(lnRefNode, undefined, undefined, warpObj)\n    }\n\n    // if (borderColor !== undefined) {\n    //     var shade = getTextByPathList(schemeClrNode, [\"a:shade\", \"attrs\", \"val\"]);\n    //     if (shade !== undefined) {\n    //         shade = parseInt(shade) / 10000;\n    //         var color = tinycolor(\"#\" + borderColor);\n    //         borderColor = color.darken(shade).toHex8();//.replace(\"#\", \"\");\n    //     }\n    // }\n\n  }\n\n  //console.log(\"getBorder: borderColor : \", borderColor)\n  if (borderColor === undefined) {\n    if (isSvgMode) {\n      borderColor = 'none'\n    } else {\n      borderColor = 'hidden'\n    }\n  } else {\n    borderColor = '#' + borderColor //wrong if not solid fill - TODO\n\n  }\n  cssText += ' ' + borderColor + ' '//wrong if not solid fill - TODO\n\n  if (isSvgMode) {\n    return { 'color': borderColor, 'width': borderWidth, 'type': borderType, 'strokeDasharray': strokeDasharray }\n  } else {\n    return cssText + ';'\n  }\n  // } else {\n  //     if (isSvgMode) {\n  //         return { \"color\": 'none', \"width\": '0', \"type\": 'none', \"strokeDasharray\": '0' };\n  //     } else {\n  //         return \"hidden\";\n  //     }\n  // }\n}\nasync function getBackground(warpObj, slideSize, index) {\n  //var rslt = \"\";\n  var slideContent = warpObj['slideContent']\n  var slideLayoutContent = warpObj['slideLayoutContent']\n  var slideMasterContent = warpObj['slideMasterContent']\n\n  var nodesSldLayout = getTextByPathList(slideLayoutContent, [ 'p:sldLayout', 'p:cSld', 'p:spTree' ])\n  var nodesSldMaster = getTextByPathList(slideMasterContent, [ 'p:sldMaster', 'p:cSld', 'p:spTree' ])\n  // console.log(\"slideContent : \", slideContent)\n  // console.log(\"slideLayoutContent : \", slideLayoutContent)\n  // console.log(\"slideMasterContent : \", slideMasterContent)\n  //console.log(\"warpObj : \", warpObj)\n  var showMasterSp = getTextByPathList(slideLayoutContent, [ 'p:sldLayout', 'attrs', 'showMasterSp' ])\n  //console.log(\"slideLayoutContent : \", slideLayoutContent, \", showMasterSp: \", showMasterSp)\n  var bgColor = await getSlideBackgroundFill(warpObj, index)\n  var result = '<div class=\\'slide-background-' + index + '\\' style=\\'width:' + slideSize.width + 'px; height:' + slideSize.height + 'px;' + bgColor + '\\'>'\n  var node_ph_type_ary = []\n  if (nodesSldLayout !== undefined) {\n    for (var nodeKey in nodesSldLayout) {\n      if (nodesSldLayout[nodeKey].constructor === Array) {\n        for (var i = 0; i < nodesSldLayout[nodeKey].length; i++) {\n          var ph_type = getTextByPathList(nodesSldLayout[nodeKey][i], [ 'p:nvSpPr', 'p:nvPr', 'p:ph', 'attrs', 'type' ])\n          // if (ph_type !== undefined && ph_type != \"pic\") {\n          //     node_ph_type_ary.push(ph_type);\n          // }\n          if (ph_type != 'pic') {\n            result += await processNodesInSlide(nodeKey, nodesSldLayout[nodeKey][i], nodesSldLayout, warpObj, 'slideLayoutBg') //slideLayoutBg , slideMasterBg\n          }\n        }\n      } else {\n        var ph_type = getTextByPathList(nodesSldLayout[nodeKey], [ 'p:nvSpPr', 'p:nvPr', 'p:ph', 'attrs', 'type' ])\n        // if (ph_type !== undefined && ph_type != \"pic\") {\n        //     node_ph_type_ary.push(ph_type);\n        // }\n        if (ph_type != 'pic') {\n          result += await processNodesInSlide(nodeKey, nodesSldLayout[nodeKey], nodesSldLayout, warpObj, 'slideLayoutBg') //slideLayoutBg, slideMasterBg\n        }\n      }\n    }\n  }\n  if (nodesSldMaster !== undefined && (showMasterSp == '1' || showMasterSp === undefined)) {\n    for (var nodeKey in nodesSldMaster) {\n      if (nodesSldMaster[nodeKey].constructor === Array) {\n        for (var i = 0; i < nodesSldMaster[nodeKey].length; i++) {\n          var ph_type = getTextByPathList(nodesSldMaster[nodeKey][i], [ 'p:nvSpPr', 'p:nvPr', 'p:ph', 'attrs', 'type' ])\n          //if (node_ph_type_ary.indexOf(ph_type) > -1) {\n          result += await processNodesInSlide(nodeKey, nodesSldMaster[nodeKey][i], nodesSldMaster, warpObj, 'slideMasterBg') //slideLayoutBg , slideMasterBg\n          //}\n        }\n      } else {\n        var ph_type = getTextByPathList(nodesSldMaster[nodeKey], [ 'p:nvSpPr', 'p:nvPr', 'p:ph', 'attrs', 'type' ])\n        //if (node_ph_type_ary.indexOf(ph_type) > -1) {\n        result += await processNodesInSlide(nodeKey, nodesSldMaster[nodeKey], nodesSldMaster, warpObj, 'slideMasterBg') //slideLayoutBg, slideMasterBg\n        //}\n      }\n    }\n  }\n  return result\n\n}\nasync function getSlideBackgroundFill(warpObj, index) {\n  var slideContent = warpObj['slideContent']\n  var slideLayoutContent = warpObj['slideLayoutContent']\n  var slideMasterContent = warpObj['slideMasterContent']\n\n  //console.log(\"slideContent: \", slideContent)\n  //console.log(\"slideLayoutContent: \", slideLayoutContent)\n  //console.log(\"slideMasterContent: \", slideMasterContent)\n  //getFillType(node)\n  var bgPr = getTextByPathList(slideContent, [ 'p:sld', 'p:cSld', 'p:bg', 'p:bgPr' ])\n  var bgRef = getTextByPathList(slideContent, [ 'p:sld', 'p:cSld', 'p:bg', 'p:bgRef' ])\n  //console.log(\"slideContent >> bgPr: \", bgPr, \", bgRef: \", bgRef)\n  var bgcolor\n  if (bgPr !== undefined) {\n    //bgcolor = \"background-color: blue;\";\n    var bgFillTyp = getFillType(bgPr)\n\n    if (bgFillTyp == 'SOLID_FILL') {\n      var sldFill = bgPr['a:solidFill']\n      var clrMapOvr\n      var sldClrMapOvr = getTextByPathList(slideContent, [ 'p:sld', 'p:clrMapOvr', 'a:overrideClrMapping', 'attrs' ])\n      if (sldClrMapOvr !== undefined) {\n        clrMapOvr = sldClrMapOvr\n      } else {\n        var sldClrMapOvr = getTextByPathList(slideLayoutContent, [ 'p:sldLayout', 'p:clrMapOvr', 'a:overrideClrMapping', 'attrs' ])\n        if (sldClrMapOvr !== undefined) {\n          clrMapOvr = sldClrMapOvr\n        } else {\n          clrMapOvr = getTextByPathList(slideMasterContent, [ 'p:sldMaster', 'p:clrMap', 'attrs' ])\n        }\n\n      }\n      var sldBgClr = getSolidFill(sldFill, clrMapOvr, undefined, warpObj)\n      //var sldTint = getColorOpacity(sldFill);\n      //console.log(\"bgColor: \", bgColor)\n      //bgcolor = \"background: rgba(\" + hexToRgbNew(bgColor) + \",\" + sldTint + \");\";\n      bgcolor = 'background: #' + sldBgClr + ';'\n\n    } else if (bgFillTyp == 'GRADIENT_FILL') {\n      bgcolor = getBgGradientFill(bgPr, undefined, slideMasterContent, warpObj)\n    } else if (bgFillTyp == 'PIC_FILL') {\n      //console.log(\"PIC_FILL - \", bgFillTyp, bgPr, warpObj);\n      bgcolor = await getBgPicFill(bgPr, 'slideBg', warpObj, undefined, index)\n\n    }\n    //console.log(slideContent,slideMasterContent,color_ary,tint_ary,rot,bgcolor)\n  } else if (bgRef !== undefined) {\n    //console.log(\"slideContent\",bgRef)\n    var clrMapOvr\n    var sldClrMapOvr = getTextByPathList(slideContent, [ 'p:sld', 'p:clrMapOvr', 'a:overrideClrMapping', 'attrs' ])\n    if (sldClrMapOvr !== undefined) {\n      clrMapOvr = sldClrMapOvr\n    } else {\n      var sldClrMapOvr = getTextByPathList(slideLayoutContent, [ 'p:sldLayout', 'p:clrMapOvr', 'a:overrideClrMapping', 'attrs' ])\n      if (sldClrMapOvr !== undefined) {\n        clrMapOvr = sldClrMapOvr\n      } else {\n        clrMapOvr = getTextByPathList(slideMasterContent, [ 'p:sldMaster', 'p:clrMap', 'attrs' ])\n      }\n\n    }\n    var phClr = getSolidFill(bgRef, clrMapOvr, undefined, warpObj)\n\n    // if (bgRef[\"a:srgbClr\"] !== undefined) {\n    //     phClr = getTextByPathList(bgRef, [\"a:srgbClr\", \"attrs\", \"val\"]); //#...\n    // } else if (bgRef[\"a:schemeClr\"] !== undefined) { //a:schemeClr\n    //     var schemeClr = getTextByPathList(bgRef, [\"a:schemeClr\", \"attrs\", \"val\"]);\n    //     phClr = getSchemeColorFromTheme(\"a:\" + schemeClr, slideMasterContent, undefined); //#...\n    // }\n    var idx = Number(bgRef['attrs']['idx'])\n\n\n    if (idx == 0 || idx == 1000) {\n      //no background\n    } else if (idx > 0 && idx < 1000) {\n      //fillStyleLst in themeContent\n      //themeContent[\"a:fmtScheme\"][\"a:fillStyleLst\"]\n      //bgcolor = \"background: red;\";\n    } else if (idx > 1000) {\n      //bgFillStyleLst  in themeContent\n      //themeContent[\"a:fmtScheme\"][\"a:bgFillStyleLst\"]\n      var trueIdx = idx - 1000\n      // themeContent[\"a:theme\"][\"a:themeElements\"][\"a:fmtScheme\"][\"a:bgFillStyleLst\"];\n      var bgFillLst = warpObj['themeContent']['a:theme']['a:themeElements']['a:fmtScheme']['a:bgFillStyleLst']\n      var sortblAry = []\n      Object.keys(bgFillLst).forEach(function (key) {\n        var bgFillLstTyp = bgFillLst[key]\n        if (key != 'attrs') {\n          if (bgFillLstTyp.constructor === Array) {\n            for (var i = 0; i < bgFillLstTyp.length; i++) {\n              var obj = {}\n              obj[key] = bgFillLstTyp[i]\n              obj['idex'] = bgFillLstTyp[i]['attrs']['order']\n              obj['attrs'] = {\n                'order': bgFillLstTyp[i]['attrs']['order']\n              }\n              sortblAry.push(obj)\n            }\n          } else {\n            var obj = {}\n            obj[key] = bgFillLstTyp\n            obj['idex'] = bgFillLstTyp['attrs']['order']\n            obj['attrs'] = {\n              'order': bgFillLstTyp['attrs']['order']\n            }\n            sortblAry.push(obj)\n          }\n        }\n      })\n      var sortByOrder = sortblAry.slice(0)\n      sortByOrder.sort(function (a, b) {\n        return a.idex - b.idex\n      })\n      var bgFillLstIdx = sortByOrder[trueIdx - 1]\n      var bgFillTyp = getFillType(bgFillLstIdx)\n      if (bgFillTyp == 'SOLID_FILL') {\n        var sldFill = bgFillLstIdx['a:solidFill']\n        var sldBgClr = getSolidFill(sldFill, clrMapOvr, undefined, warpObj)\n        //var sldTint = getColorOpacity(sldFill);\n        //bgcolor = \"background: rgba(\" + hexToRgbNew(phClr) + \",\" + sldTint + \");\";\n        bgcolor = 'background: #' + sldBgClr + ';'\n        //console.log(\"slideMasterContent - sldFill\",sldFill)\n      } else if (bgFillTyp == 'GRADIENT_FILL') {\n        bgcolor = getBgGradientFill(bgFillLstIdx, phClr, slideMasterContent, warpObj)\n      } else {\n        console.log(bgFillTyp)\n      }\n    }\n\n  } else {\n    bgPr = getTextByPathList(slideLayoutContent, [ 'p:sldLayout', 'p:cSld', 'p:bg', 'p:bgPr' ])\n    bgRef = getTextByPathList(slideLayoutContent, [ 'p:sldLayout', 'p:cSld', 'p:bg', 'p:bgRef' ])\n    //console.log(\"slideLayoutContent >> bgPr: \", bgPr, \", bgRef: \", bgRef)\n    var clrMapOvr\n    var sldClrMapOvr = getTextByPathList(slideLayoutContent, [ 'p:sldLayout', 'p:clrMapOvr', 'a:overrideClrMapping', 'attrs' ])\n    if (sldClrMapOvr !== undefined) {\n      clrMapOvr = sldClrMapOvr\n    } else {\n      clrMapOvr = getTextByPathList(slideMasterContent, [ 'p:sldMaster', 'p:clrMap', 'attrs' ])\n    }\n    if (bgPr !== undefined) {\n      var bgFillTyp = getFillType(bgPr)\n      if (bgFillTyp == 'SOLID_FILL') {\n        var sldFill = bgPr['a:solidFill']\n\n        var sldBgClr = getSolidFill(sldFill, clrMapOvr, undefined, warpObj)\n        //var sldTint = getColorOpacity(sldFill);\n        // bgcolor = \"background: rgba(\" + hexToRgbNew(bgColor) + \",\" + sldTint + \");\";\n        bgcolor = 'background: #' + sldBgClr + ';'\n      } else if (bgFillTyp == 'GRADIENT_FILL') {\n        bgcolor = getBgGradientFill(bgPr, undefined, slideMasterContent, warpObj)\n      } else if (bgFillTyp == 'PIC_FILL') {\n        bgcolor = await getBgPicFill(bgPr, 'slideLayoutBg', warpObj, undefined, index)\n\n      }\n      //console.log(\"slideLayoutContent\",bgcolor)\n    } else if (bgRef !== undefined) {\n      console.log('slideLayoutContent: bgRef', bgRef)\n      //bgcolor = \"background: white;\";\n      var phClr = getSolidFill(bgRef, clrMapOvr, undefined, warpObj)\n      var idx = Number(bgRef['attrs']['idx'])\n      //console.log(\"phClr=\", phClr, \"idx=\", idx)\n\n      if (idx == 0 || idx == 1000) {\n        //no background\n      } else if (idx > 0 && idx < 1000) {\n        //fillStyleLst in themeContent\n        //themeContent[\"a:fmtScheme\"][\"a:fillStyleLst\"]\n        //bgcolor = \"background: red;\";\n      } else if (idx > 1000) {\n        //bgFillStyleLst  in themeContent\n        //themeContent[\"a:fmtScheme\"][\"a:bgFillStyleLst\"]\n        var trueIdx = idx - 1000\n        var bgFillLst = warpObj['themeContent']['a:theme']['a:themeElements']['a:fmtScheme']['a:bgFillStyleLst']\n        var sortblAry = []\n        Object.keys(bgFillLst).forEach(function (key) {\n          //console.log(\"cubicBezTo[\" + key + \"]:\");\n          var bgFillLstTyp = bgFillLst[key]\n          if (key != 'attrs') {\n            if (bgFillLstTyp.constructor === Array) {\n              for (var i = 0; i < bgFillLstTyp.length; i++) {\n                var obj = {}\n                obj[key] = bgFillLstTyp[i]\n                obj['idex'] = bgFillLstTyp[i]['attrs']['order']\n                obj['attrs'] = {\n                  'order': bgFillLstTyp[i]['attrs']['order']\n                }\n                sortblAry.push(obj)\n              }\n            } else {\n              var obj = {}\n              obj[key] = bgFillLstTyp\n              obj['idex'] = bgFillLstTyp['attrs']['order']\n              obj['attrs'] = {\n                'order': bgFillLstTyp['attrs']['order']\n              }\n              sortblAry.push(obj)\n            }\n          }\n        })\n        var sortByOrder = sortblAry.slice(0)\n        sortByOrder.sort(function (a, b) {\n          return a.idex - b.idex\n        })\n        var bgFillLstIdx = sortByOrder[trueIdx - 1]\n        var bgFillTyp = getFillType(bgFillLstIdx)\n        if (bgFillTyp == 'SOLID_FILL') {\n          var sldFill = bgFillLstIdx['a:solidFill']\n          //console.log(\"sldFill: \", sldFill)\n          //var sldTint = getColorOpacity(sldFill);\n          //bgcolor = \"background: rgba(\" + hexToRgbNew(phClr) + \",\" + sldTint + \");\";\n          var sldBgClr = getSolidFill(sldFill, clrMapOvr, phClr, warpObj)\n          //console.log(\"bgcolor: \", bgcolor)\n          bgcolor = 'background: #' + sldBgClr + ';'\n        } else if (bgFillTyp == 'GRADIENT_FILL') {\n          //console.log(\"GRADIENT_FILL: \", bgFillLstIdx, phClr)\n          bgcolor = getBgGradientFill(bgFillLstIdx, phClr, slideMasterContent, warpObj)\n        } else if (bgFillTyp == 'PIC_FILL') {\n          //theme rels\n          //console.log(\"PIC_FILL - \", bgFillTyp, bgFillLstIdx, bgFillLst, warpObj);\n          bgcolor = await getBgPicFill(bgFillLstIdx, 'themeBg', warpObj, phClr, index)\n        } else {\n          console.log(bgFillTyp)\n        }\n      }\n    } else {\n      bgPr = getTextByPathList(slideMasterContent, [ 'p:sldMaster', 'p:cSld', 'p:bg', 'p:bgPr' ])\n      bgRef = getTextByPathList(slideMasterContent, [ 'p:sldMaster', 'p:cSld', 'p:bg', 'p:bgRef' ])\n\n      var clrMap = getTextByPathList(slideMasterContent, [ 'p:sldMaster', 'p:clrMap', 'attrs' ])\n      //console.log(\"slideMasterContent >> bgPr: \", bgPr, \", bgRef: \", bgRef)\n      if (bgPr !== undefined) {\n        var bgFillTyp = getFillType(bgPr)\n        if (bgFillTyp == 'SOLID_FILL') {\n          var sldFill = bgPr['a:solidFill']\n          var sldBgClr = getSolidFill(sldFill, clrMap, undefined, warpObj)\n          // var sldTint = getColorOpacity(sldFill);\n          // bgcolor = \"background: rgba(\" + hexToRgbNew(bgColor) + \",\" + sldTint + \");\";\n          bgcolor = 'background: #' + sldBgClr + ';'\n        } else if (bgFillTyp == 'GRADIENT_FILL') {\n          bgcolor = getBgGradientFill(bgPr, undefined, slideMasterContent, warpObj)\n        } else if (bgFillTyp == 'PIC_FILL') {\n          bgcolor = await getBgPicFill(bgPr, 'slideMasterBg', warpObj, undefined, index)\n        }\n      } else if (bgRef !== undefined) {\n        //var obj={\n        //    \"a:solidFill\": bgRef\n        //}\n        var phClr = getSolidFill(bgRef, clrMap, undefined, warpObj)\n        // var phClr;\n        // if (bgRef[\"a:srgbClr\"] !== undefined) {\n        //     phClr = getTextByPathList(bgRef, [\"a:srgbClr\", \"attrs\", \"val\"]); //#...\n        // } else if (bgRef[\"a:schemeClr\"] !== undefined) { //a:schemeClr\n        //     var schemeClr = getTextByPathList(bgRef, [\"a:schemeClr\", \"attrs\", \"val\"]);\n\n        //     phClr = getSchemeColorFromTheme(\"a:\" + schemeClr, slideMasterContent, undefined); //#...\n        // }\n        var idx = Number(bgRef['attrs']['idx'])\n        //console.log(\"phClr=\", phClr, \"idx=\", idx)\n\n        if (idx == 0 || idx == 1000) {\n          //no background\n        } else if (idx > 0 && idx < 1000) {\n          //fillStyleLst in themeContent\n          //themeContent[\"a:fmtScheme\"][\"a:fillStyleLst\"]\n          //bgcolor = \"background: red;\";\n        } else if (idx > 1000) {\n          //bgFillStyleLst  in themeContent\n          //themeContent[\"a:fmtScheme\"][\"a:bgFillStyleLst\"]\n          var trueIdx = idx - 1000\n          var bgFillLst = warpObj['themeContent']['a:theme']['a:themeElements']['a:fmtScheme']['a:bgFillStyleLst']\n          var sortblAry = []\n          Object.keys(bgFillLst).forEach(function (key) {\n            //console.log(\"cubicBezTo[\" + key + \"]:\");\n            var bgFillLstTyp = bgFillLst[key]\n            if (key != 'attrs') {\n              if (bgFillLstTyp.constructor === Array) {\n                for (var i = 0; i < bgFillLstTyp.length; i++) {\n                  var obj = {}\n                  obj[key] = bgFillLstTyp[i]\n                  obj['idex'] = bgFillLstTyp[i]['attrs']['order']\n                  obj['attrs'] = {\n                    'order': bgFillLstTyp[i]['attrs']['order']\n                  }\n                  sortblAry.push(obj)\n                }\n              } else {\n                var obj = {}\n                obj[key] = bgFillLstTyp\n                obj['idex'] = bgFillLstTyp['attrs']['order']\n                obj['attrs'] = {\n                  'order': bgFillLstTyp['attrs']['order']\n                }\n                sortblAry.push(obj)\n              }\n            }\n          })\n          var sortByOrder = sortblAry.slice(0)\n          sortByOrder.sort(function (a, b) {\n            return a.idex - b.idex\n          })\n          var bgFillLstIdx = sortByOrder[trueIdx - 1]\n          var bgFillTyp = getFillType(bgFillLstIdx)\n          //console.log(\"bgFillLstIdx: \", bgFillLstIdx, \", bgFillTyp: \", bgFillTyp, \", phClr: \", phClr);\n          if (bgFillTyp == 'SOLID_FILL') {\n            var sldFill = bgFillLstIdx['a:solidFill']\n            //console.log(\"sldFill: \", sldFill)\n            //var sldTint = getColorOpacity(sldFill);\n            //bgcolor = \"background: rgba(\" + hexToRgbNew(phClr) + \",\" + sldTint + \");\";\n            var sldBgClr = getSolidFill(sldFill, clrMap, phClr, warpObj)\n            //console.log(\"bgcolor: \", bgcolor)\n            bgcolor = 'background: #' + sldBgClr + ';'\n          } else if (bgFillTyp == 'GRADIENT_FILL') {\n            //console.log(\"GRADIENT_FILL: \", bgFillLstIdx, phClr)\n            bgcolor = getBgGradientFill(bgFillLstIdx, phClr, slideMasterContent, warpObj)\n          } else if (bgFillTyp == 'PIC_FILL') {\n            //theme rels\n            // console.log(\"PIC_FILL - \", bgFillTyp, bgFillLstIdx, bgFillLst, warpObj);\n            bgcolor = await getBgPicFill(bgFillLstIdx, 'themeBg', warpObj, phClr, index)\n          } else {\n            console.log(bgFillTyp)\n          }\n        }\n      }\n    }\n  }\n\n  //console.log(\"bgcolor: \", bgcolor)\n  return bgcolor\n}\nfunction getBgGradientFill(bgPr, phClr, slideMasterContent, warpObj) {\n  var bgcolor = ''\n  if (bgPr !== undefined) {\n    var grdFill = bgPr['a:gradFill']\n    var gsLst = grdFill['a:gsLst']['a:gs']\n    //var startColorNode, endColorNode;\n    var color_ary = []\n    var pos_ary = []\n    //var tint_ary = [];\n    for (var i = 0; i < gsLst.length; i++) {\n      var lo_tint\n      var lo_color = ''\n      var lo_color = getSolidFill(gsLst[i], slideMasterContent['p:sldMaster']['p:clrMap']['attrs'], phClr, warpObj)\n      var pos = getTextByPathList(gsLst[i], ['attrs', 'pos'])\n      //console.log(\"pos: \", pos)\n      if (pos !== undefined) {\n        pos_ary[i] = pos / 1000 + '%'\n      } else {\n        pos_ary[i] = ''\n      }\n      //console.log(\"lo_color\", lo_color)\n      color_ary[i] = '#' + lo_color\n      //tint_ary[i] = (lo_tint !== undefined) ? parseInt(lo_tint) / 100000 : 1;\n    }\n    //get rot\n    var lin = grdFill['a:lin']\n    var rot = 90\n    if (lin !== undefined) {\n      rot = angleToDegrees(lin['attrs']['ang'])// + 270;\n      //console.log(\"rot: \", rot)\n      rot = rot + 90\n    }\n    bgcolor = 'background: linear-gradient(' + rot + 'deg,'\n    for (var i = 0; i < gsLst.length; i++) {\n      if (i == gsLst.length - 1) {\n        //if (phClr === undefined) {\n        //bgcolor += \"rgba(\" + hexToRgbNew(color_ary[i]) + \",\" + tint_ary[i] + \")\" + \");\";\n        bgcolor += color_ary[i] + ' ' + pos_ary[i] + ');'\n        //} else {\n        //bgcolor += \"rgba(\" + hexToRgbNew(phClr) + \",\" + tint_ary[i] + \")\" + \");\";\n        // bgcolor += \"\" + phClr + \";\";;\n        //}\n      } else {\n        //if (phClr === undefined) {\n        //bgcolor += \"rgba(\" + hexToRgbNew(color_ary[i]) + \",\" + tint_ary[i] + \")\" + \", \";\n        bgcolor += color_ary[i] + ' ' + pos_ary[i] + ', '\n        //} else {\n        //bgcolor += \"rgba(\" + hexToRgbNew(phClr) + \",\" + tint_ary[i] + \")\" + \", \";\n        // bgcolor += phClr + \", \";\n        //}\n      }\n    }\n  } else {\n    if (phClr !== undefined) {\n      //bgcolor = \"rgba(\" + hexToRgbNew(phClr) + \",0);\";\n      //bgcolor = phClr + \");\";\n      bgcolor = 'background: #' + phClr + ';'\n    }\n  }\n  return bgcolor\n}\nasync function getBgPicFill(bgPr, sorce, warpObj, phClr, index) {\n  //console.log(\"getBgPicFill bgPr\", bgPr)\n  var bgcolor\n  var picFillBase64 = await getPicFill(sorce, bgPr['a:blipFill'], warpObj)\n  var ordr = bgPr['attrs']['order']\n  var aBlipNode = bgPr['a:blipFill']['a:blip']\n  //a:duotone\n  var duotone = getTextByPathList(aBlipNode, ['a:duotone'])\n  if (duotone !== undefined) {\n    //console.log(\"pic duotone: \", duotone)\n    var clr_ary = []\n    // duotone.forEach(function (clr) {\n    //     console.log(\"pic duotone clr: \", clr)\n    // })\n    Object.keys(duotone).forEach(function (clr_type) {\n      //console.log(\"pic duotone clr: clr_type: \", clr_type, duotone[clr_type])\n      if (clr_type != 'attrs') {\n        var obj = {}\n        obj[clr_type] = duotone[clr_type]\n        clr_ary.push(getSolidFill(obj, undefined, phClr, warpObj))\n      }\n      // Object.keys(duotone[clr_type]).forEach(function (clr) {\n      //     if (clr != \"order\") {\n      //         var obj = {};\n      //         obj[clr_type] = duotone[clr_type][clr];\n      //         clr_ary.push(getSolidFill(obj, undefined, phClr, warpObj));\n      //     }\n      // })\n    })\n    //console.log(\"pic duotone clr_ary: \", clr_ary);\n    //filter: url(file.svg#filter-element-id)\n    //https://codepen.io/bhenbe/pen/QEZOvd\n    //https://www.w3schools.com/cssref/css3_pr_filter.asp\n\n    // var color1 = clr_ary[0];\n    // var color2 = clr_ary[1];\n    // var cssName = \"\";\n\n    // var styleText_before_after = \"content: '';\" +\n    //     \"display: block;\" +\n    //     \"width: 100%;\" +\n    //     \"height: 100%;\" +\n    //     // \"z-index: 1;\" +\n    //     \"position: absolute;\" +\n    //     \"top: 0;\" +\n    //     \"left: 0;\";\n\n    // var cssName = \"slide-background-\" + index + \"::before,\" + \" .slide-background-\" + index + \"::after\";\n    // styleTable[styleText_before_after] = {\n    //     \"name\": cssName,\n    //     \"text\": styleText_before_after\n    // };\n\n\n    // var styleText_after = \"background-color: #\" + clr_ary[1] + \";\" +\n    //     \"mix-blend-mode: darken;\";\n\n    // cssName = \"slide-background-\" + index + \"::after\";\n    // styleTable[styleText_after] = {\n    //     \"name\": cssName,\n    //     \"text\": styleText_after\n    // };\n\n    // var styleText_before = \"background-color: #\" + clr_ary[0] + \";\" +\n    //     \"mix-blend-mode: lighten;\";\n\n    // cssName = \"slide-background-\" + index + \"::before\";\n    // styleTable[styleText_before] = {\n    //     \"name\": cssName,\n    //     \"text\": styleText_before\n    // };\n\n  }\n  //a:alphaModFix\n  var aphaModFixNode = getTextByPathList(aBlipNode, ['a:alphaModFix', 'attrs'])\n  var imgOpacity = ''\n  if (aphaModFixNode !== undefined && aphaModFixNode['amt'] !== undefined && aphaModFixNode['amt'] != '') {\n    var amt = parseInt(aphaModFixNode['amt']) / 100000\n    //var opacity = amt;\n    imgOpacity = 'opacity:' + amt + ';'\n\n  }\n  //a:tile\n\n  var tileNode = getTextByPathList(bgPr, ['a:blipFill', 'a:tile', 'attrs'])\n  var prop_style = ''\n  if (tileNode !== undefined && tileNode['sx'] !== undefined) {\n    var sx = (parseInt(tileNode['sx']) / 100000)\n    var sy = (parseInt(tileNode['sy']) / 100000)\n    var tx = (parseInt(tileNode['tx']) / 100000)\n    var ty = (parseInt(tileNode['ty']) / 100000)\n    var algn = tileNode['algn'] //tl(top left),t(top), tr(top right), l(left), ctr(center), r(right), bl(bottom left), b(bottm) , br(bottom right)\n    var flip = tileNode['flip'] //none,x,y ,xy\n\n    prop_style += 'background-repeat: round;' //repeat|repeat-x|repeat-y|no-repeat|space|round|initial|inherit;\n    //prop_style += \"background-size: 300px 100px;\"; size (w,h,sx, sy) -TODO\n    //prop_style += \"background-position: 50% 40%;\"; //offset (tx, ty) -TODO\n  }\n  //a:srcRect\n  //a:stretch => a:fillRect =>attrs (l:-17000, r:-17000)\n  var stretch = getTextByPathList(bgPr, ['a:blipFill', 'a:stretch'])\n  if (stretch !== undefined) {\n    var fillRect = getTextByPathList(stretch, ['a:fillRect', 'attrs'])\n    //console.log(\"getBgPicFill=>bgPr: \", bgPr)\n    // var top = fillRect[\"t\"], right = fillRect[\"r\"], bottom = fillRect[\"b\"], left = fillRect[\"l\"];\n    prop_style += 'background-repeat: no-repeat;'\n    prop_style += 'background-position: center;'\n    if (fillRect !== undefined) {\n      //prop_style += \"background-size: contain, cover;\";\n      prop_style += 'background-size:  100% 100%;;'\n    }\n  }\n  bgcolor = 'background: url(' + picFillBase64 + ');  z-index: ' + ordr + ';' + prop_style + imgOpacity\n\n  return bgcolor\n}\n// function hexToRgbNew(hex) {\n//     var arrBuff = new ArrayBuffer(4);\n//     var vw = new DataView(arrBuff);\n//     vw.setUint32(0, parseInt(hex, 16), false);\n//     var arrByte = new Uint8Array(arrBuff);\n//     return arrByte[1] + \",\" + arrByte[2] + \",\" + arrByte[3];\n// }\nasync function getShapeFill(node, pNode, isSvgMode, warpObj, source) {\n\n  // 1. presentationML\n  // p:spPr/ [a:noFill, solidFill, gradFill, blipFill, pattFill, grpFill]\n  // From slide\n  //Fill Type:\n  //console.log(\"getShapeFill ShapeFill: \", node, \", isSvgMode; \", isSvgMode)\n  var fillType = getFillType(getTextByPathList(node, [ 'p:spPr' ]))\n  //var noFill = getTextByPathList(node, [\"p:spPr\", \"a:noFill\"]);\n  var fillColor\n  var shpFill\n  if (fillType == 'NO_FILL') {\n    return isSvgMode ? 'none' : ''//\"background-color: initial;\";\n  } else if (fillType == 'SOLID_FILL') {\n    shpFill = node['p:spPr']['a:solidFill']\n    fillColor = getSolidFill(shpFill, undefined, undefined, warpObj)\n  } else if (fillType == 'GRADIENT_FILL') {\n    shpFill = node['p:spPr']['a:gradFill']\n    fillColor = getGradientFill(shpFill, warpObj)\n    //console.log(\"shpFill\",shpFill,grndColor.color)\n  } else if (fillType == 'PATTERN_FILL') {\n    shpFill = node['p:spPr']['a:pattFill']\n    fillColor = getPatternFill(shpFill, warpObj)\n  } else if (fillType == 'PIC_FILL') {\n    shpFill = node['p:spPr']['a:blipFill']\n    fillColor = await getPicFill(source, shpFill, warpObj)\n  }\n  //console.log(\"getShapeFill ShapeFill: \", node, \", isSvgMode; \", isSvgMode, \", fillType: \", fillType, \", fillColor: \", fillColor, \", source: \", source)\n\n\n  // 2. drawingML namespace\n  if (fillColor === undefined) {\n    var clrName = getTextByPathList(node, [ 'p:style', 'a:fillRef' ])\n    var idx = parseInt(getTextByPathList(node, [ 'p:style', 'a:fillRef', 'attrs', 'idx' ]))\n    if (idx == 0 || idx == 1000) {\n      //no fill\n      return isSvgMode ? 'none' : ''\n    } else if (idx > 0 && idx < 1000) {\n      // <a:fillStyleLst> fill\n    } else if (idx > 1000) {\n      //<a:bgFillStyleLst>\n    }\n    fillColor = getSolidFill(clrName, undefined, undefined, warpObj)\n  }\n  // 3. is group fill\n  if (fillColor === undefined) {\n    var grpFill = getTextByPathList(node, [ 'p:spPr', 'a:grpFill' ])\n    if (grpFill !== undefined) {\n      //fillColor = getSolidFill(clrName, undefined, undefined, undefined, warpObj);\n      //get parent fill style - TODO\n      //console.log(\"ShapeFill: grpFill: \", grpFill, \", pNode: \", pNode)\n      var grpShpFill = pNode['p:grpSpPr']\n      var spShpNode = { 'p:spPr': grpShpFill }\n      return await getShapeFill(spShpNode, node, isSvgMode, warpObj, source)\n    } else if (fillType == 'NO_FILL') {\n      return isSvgMode ? 'none' : ''\n    }\n  }\n  //console.log(\"ShapeFill: fillColor: \", fillColor, \", fillType; \", fillType)\n\n  if (fillColor !== undefined) {\n    if (fillType == 'GRADIENT_FILL') {\n      if (isSvgMode) {\n        // console.log(\"GRADIENT_FILL color\", fillColor.color[0])\n        return fillColor\n      } else {\n        var colorAry = fillColor.color\n        var rot = fillColor.rot\n\n        var bgcolor = 'background: linear-gradient(' + rot + 'deg,'\n        for (var i = 0; i < colorAry.length; i++) {\n          if (i == colorAry.length - 1) {\n            bgcolor += '#' + colorAry[i] + ');'\n          } else {\n            bgcolor += '#' + colorAry[i] + ', '\n          }\n\n        }\n        return bgcolor\n      }\n    } else if (fillType == 'PIC_FILL') {\n      if (isSvgMode) {\n        return fillColor\n      } else {\n\n        return 'background-image:url(' + fillColor + ');'\n      }\n    } else if (fillType == 'PATTERN_FILL') {\n      /////////////////////////////////////////////////////////////Need to check -----------TODO\n      // if (isSvgMode) {\n      //     var color = tinycolor(fillColor);\n      //     fillColor = color.toRgbString();\n\n      //     return fillColor;\n      // } else {\n      var bgPtrn = '', bgSize = '', bgPos = ''\n      bgPtrn = fillColor[0]\n      if (fillColor[1] !== null && fillColor[1] !== undefined && fillColor[1] != '') {\n        bgSize = ' background-size:' + fillColor[1] + ';'\n      }\n      if (fillColor[2] !== null && fillColor[2] !== undefined && fillColor[2] != '') {\n        bgPos = ' background-position:' + fillColor[2] + ';'\n      }\n      return 'background: ' + bgPtrn + ';' + bgSize + bgPos\n      //}\n    } else {\n      if (isSvgMode) {\n        var color = tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()(fillColor)\n        fillColor = color.toRgbString()\n\n        return fillColor\n      } else {\n        //console.log(node,\"fillColor: \",fillColor,\"fillType: \",fillType,\"isSvgMode: \",isSvgMode)\n        return 'background-color: #' + fillColor + ';'\n      }\n    }\n  } else {\n    if (isSvgMode) {\n      return 'none'\n    } else {\n      return 'background-color: inherit;'\n    }\n\n  }\n\n}\n///////////////////////Amir//////////////////////////////\nfunction getFillType(node = {}) {\n  //Need to test/////////////////////////////////////////////\n  //SOLID_FILL\n  //PIC_FILL\n  //GRADIENT_FILL\n  //PATTERN_FILL\n  //NO_FILL\n  var fillType = ''\n  if (node['a:noFill'] !== undefined) {\n    fillType = 'NO_FILL'\n  }\n  if (node['a:solidFill'] !== undefined) {\n    fillType = 'SOLID_FILL'\n  }\n  if (node['a:gradFill'] !== undefined) {\n    fillType = 'GRADIENT_FILL'\n  }\n  if (node['a:pattFill'] !== undefined) {\n    fillType = 'PATTERN_FILL'\n  }\n  if (node['a:blipFill'] !== undefined) {\n    fillType = 'PIC_FILL'\n  }\n  if (node['a:grpFill'] !== undefined) {\n    fillType = 'GROUP_FILL'\n  }\n\n\n  return fillType\n}\nfunction getGradientFill(node, warpObj) {\n  //console.log(\"getGradientFill: node\", node)\n  var gsLst = node['a:gsLst']['a:gs']\n  //get start color\n  var color_ary = []\n  var tint_ary = []\n  for (var i = 0; i < gsLst.length; i++) {\n    var lo_tint\n    var lo_color = getSolidFill(gsLst[i], undefined, undefined, warpObj)\n    //console.log(\"lo_color\",lo_color)\n    color_ary[i] = lo_color\n  }\n  //get rot\n  var lin = node['a:lin']\n  var rot = 0\n  if (lin !== undefined) {\n    rot = angleToDegrees(lin['attrs']['ang']) + 90\n  }\n  return {\n    'color': color_ary,\n    'rot': rot\n  }\n}\nasync function getPicFill(type, node, warpObj) {\n  //Need to test/////////////////////////////////////////////\n  //rId\n  //TODO - Image Properties - Tile, Stretch, or Display Portion of Image\n  //(http://officeopenxml.com/drwPic-tile.php)\n  var img\n  var rId = node['a:blip']['attrs']['r:embed']\n  var imgPath\n  //console.log(\"getPicFill(...) rId: \", rId, \", warpObj: \", warpObj, \", type: \", type)\n  if (type == 'slideBg' || type == 'slide') {\n    imgPath = getTextByPathList(warpObj, [ 'slideResObj', rId, 'target' ])\n  } else if (type == 'slideLayoutBg') {\n    imgPath = getTextByPathList(warpObj, [ 'layoutResObj', rId, 'target' ])\n  } else if (type == 'slideMasterBg') {\n    imgPath = getTextByPathList(warpObj, [ 'masterResObj', rId, 'target' ])\n  } else if (type == 'themeBg') {\n    imgPath = getTextByPathList(warpObj, [ 'themeResObj', rId, 'target' ])\n  } else if (type == 'diagramBg') {\n    imgPath = getTextByPathList(warpObj, [ 'diagramResObj', rId, 'target' ])\n  }\n  if (imgPath === undefined) {\n    return undefined\n  }\n  img = getTextByPathList(warpObj, [ 'loaded-images', imgPath ]) //, type, rId\n  if (img === undefined) {\n    imgPath = escapeHtml(imgPath)\n\n\n    var imgExt = imgPath.split('.').pop()\n    if (imgExt == 'xml') {\n      return undefined\n    }\n    var imgArrayBuffer = await warpObj['zip'].file(imgPath).async('arraybuffer')\n    var imgMimeType = getMimeType(imgExt)\n    img = 'data:' + imgMimeType + ';base64,' + base64ArrayBuffer(imgArrayBuffer)\n    //warpObj[\"loaded-images\"][imgPath] = img; //\"defaultTextStyle\": defaultTextStyle,\n    setTextByPathList(warpObj, [ 'loaded-images', imgPath ], img) //, type, rId\n  }\n  return img\n}\nfunction getPatternFill(node, warpObj) {\n  //https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Using_CSS_gradients\n  //https://cssgradient.io/blog/css-gradient-text/\n  //https://css-tricks.com/background-patterns-simplified-by-conic-gradients/\n  //https://stackoverflow.com/questions/6705250/how-to-get-a-pattern-into-a-written-text-via-css\n  //https://stackoverflow.com/questions/14072142/striped-text-in-css\n  //https://css-tricks.com/stripes-css/\n  //https://yuanchuan.dev/gradient-shapes/\n  var fgColor = '', bgColor = '', prst = ''\n  var bgClr = node['a:bgClr']\n  var fgClr = node['a:fgClr']\n  prst = node['attrs']['prst']\n  fgColor = getSolidFill(fgClr, undefined, undefined, warpObj)\n  bgColor = getSolidFill(bgClr, undefined, undefined, warpObj)\n  //var angl_ary = getAnglefromParst(prst);\n  //var ptrClr = \"repeating-linear-gradient(\" + angl + \"deg,  #\" + bgColor + \",#\" + fgColor + \" 2px);\"\n  //linear-gradient(0deg, black 10 %, transparent 10 %, transparent 90 %, black 90 %, black),\n  //linear-gradient(90deg, black 10 %, transparent 10 %, transparent 90 %, black 90 %, black);\n  var linear_gradient = getLinerGrandient(prst, bgColor, fgColor)\n  //console.log(\"getPatternFill: node:\", node, \", prst: \", prst, \", fgColor: \", fgColor, \", bgColor:\", bgColor, ', linear_gradient: ', linear_gradient)\n  return linear_gradient\n}\n\nfunction getLinerGrandient(prst, bgColor, fgColor) {\n  // dashDnDiag (Dashed Downward Diagonal)-V\n  // dashHorz (Dashed Horizontal)-V\n  // dashUpDiag(Dashed Upward DIagonal)-V\n  // dashVert(Dashed Vertical)-V\n  // diagBrick(Diagonal Brick)-V\n  // divot(Divot)-VX\n  // dkDnDiag(Dark Downward Diagonal)-V\n  // dkHorz(Dark Horizontal)-V\n  // dkUpDiag(Dark Upward Diagonal)-V\n  // dkVert(Dark Vertical)-V\n  // dotDmnd(Dotted Diamond)-VX\n  // dotGrid(Dotted Grid)-V\n  // horzBrick(Horizontal Brick)-V\n  // lgCheck(Large Checker Board)-V\n  // lgConfetti(Large Confetti)-V\n  // lgGrid(Large Grid)-V\n  // ltDnDiag(Light Downward Diagonal)-V\n  // ltHorz(Light Horizontal)-V\n  // ltUpDiag(Light Upward Diagonal)-V\n  // ltVert(Light Vertical)-V\n  // narHorz(Narrow Horizontal)-V\n  // narVert(Narrow Vertical)-V\n  // openDmnd(Open Diamond)-V\n  // pct10(10 %)-V\n  // pct20(20 %)-V\n  // pct25(25 %)-V\n  // pct30(30 %)-V\n  // pct40(40 %)-V\n  // pct5(5 %)-V\n  // pct50(50 %)-V\n  // pct60(60 %)-V\n  // pct70(70 %)-V\n  // pct75(75 %)-V\n  // pct80(80 %)-V\n  // pct90(90 %)-V\n  // smCheck(Small Checker Board) -V\n  // smConfetti(Small Confetti)-V\n  // smGrid(Small Grid) -V\n  // solidDmnd(Solid Diamond)-V\n  // sphere(Sphere)-V\n  // trellis(Trellis)-VX\n  // wave(Wave)-V\n  // wdDnDiag(Wide Downward Diagonal)-V\n  // wdUpDiag(Wide Upward Diagonal)-V\n  // weave(Weave)-V\n  // zigZag(Zig Zag)-V\n  // shingle(Shingle)-V\n  // plaid(Plaid)-V\n  // cross (Cross)\n  // diagCross(Diagonal Cross)\n  // dnDiag(Downward Diagonal)\n  // horz(Horizontal)\n  // upDiag(Upward Diagonal)\n  // vert(Vertical)\n  switch (prst) {\n    case 'smGrid':\n      return ['linear-gradient(to right,  #' + fgColor + ' -1px, transparent 1px ), ' +\n      'linear-gradient(to bottom,  #' + fgColor + ' -1px, transparent 1px)  #' + bgColor + ';', '4px 4px']\n      break\n    case 'dotGrid':\n      return ['linear-gradient(to right,  #' + fgColor + ' -1px, transparent 1px ), ' +\n      'linear-gradient(to bottom,  #' + fgColor + ' -1px, transparent 1px)  #' + bgColor + ';', '8px 8px']\n      break\n    case 'lgGrid':\n      return ['linear-gradient(to right,  #' + fgColor + ' -1px, transparent 1.5px ), ' +\n      'linear-gradient(to bottom,  #' + fgColor + ' -1px, transparent 1.5px)  #' + bgColor + ';', '8px 8px']\n      break\n    case 'wdUpDiag':\n      //return [\"repeating-linear-gradient(-45deg,  #\" + bgColor + \", #\" + bgColor + \" 1px,#\" + fgColor + \" 5px);\"];\n      return ['repeating-linear-gradient(-45deg, transparent 1px , transparent 4px, #' + fgColor + ' 7px)' + '#' + bgColor + ';']\n      // return [\"linear-gradient(45deg, transparent 0%, transparent calc(50% - 1px),  #\" + fgColor + \" 50%, transparent calc(50% + 1px),  transparent 100%) \" +\n      //     \"#\" + bgColor + \";\", \"6px 6px\"];\n      break\n    case 'dkUpDiag':\n      return ['repeating-linear-gradient(-45deg, transparent 1px , #' + bgColor + ' 5px)' + '#' + fgColor + ';']\n      break\n    case 'ltUpDiag':\n      return ['repeating-linear-gradient(-45deg, transparent 1px , transparent 2px, #' + fgColor + ' 4px)' + '#' + bgColor + ';']\n      break\n    case 'wdDnDiag':\n      return ['repeating-linear-gradient(45deg, transparent 1px , transparent 4px, #' + fgColor + ' 7px)' + '#' + bgColor + ';']\n      break\n    case 'dkDnDiag':\n      return ['repeating-linear-gradient(45deg, transparent 1px , #' + bgColor + ' 5px)' + '#' + fgColor + ';']\n      break\n    case 'ltDnDiag':\n      return ['repeating-linear-gradient(45deg, transparent 1px , transparent 2px, #' + fgColor + ' 4px)' + '#' + bgColor + ';']\n      break\n    case 'dkHorz':\n      return ['repeating-linear-gradient(0deg, transparent 1px , transparent 2px, #' + bgColor + ' 7px)' + '#' + fgColor + ';']\n      break\n    case 'ltHorz':\n      return ['repeating-linear-gradient(0deg, transparent 1px , transparent 5px, #' + fgColor + ' 7px)' + '#' + bgColor + ';']\n      break\n    case 'narHorz':\n      return ['repeating-linear-gradient(0deg, transparent 1px , transparent 2px, #' + fgColor + ' 4px)' + '#' + bgColor + ';']\n      break\n    case 'dkVert':\n      return ['repeating-linear-gradient(90deg, transparent 1px , transparent 2px, #' + bgColor + ' 7px)' + '#' + fgColor + ';']\n      break\n    case 'ltVert':\n      return ['repeating-linear-gradient(90deg, transparent 1px , transparent 5px, #' + fgColor + ' 7px)' + '#' + bgColor + ';']\n      break\n    case 'narVert':\n      return ['repeating-linear-gradient(90deg, transparent 1px , transparent 2px, #' + fgColor + ' 4px)' + '#' + bgColor + ';']\n      break\n    case 'lgCheck':\n    case 'smCheck':\n      var size = ''\n      var pos = ''\n      if (prst == 'lgCheck') {\n        size = '8px 8px'\n        pos = '0 0, 4px 4px, 4px 4px, 8px 8px'\n      } else {\n        size = '4px 4px'\n        pos = '0 0, 2px 2px, 2px 2px, 4px 4px'\n      }\n      return ['linear-gradient(45deg,  #' + fgColor + ' 25%, transparent 0, transparent 75%,  #' + fgColor + ' 0), ' +\n      'linear-gradient(45deg,  #' + fgColor + ' 25%, transparent 0, transparent 75%,  #' + fgColor + ' 0) ' +\n      '#' + bgColor + ';', size, pos]\n      break\n    // case \"smCheck\":\n    //     return [\"linear-gradient(45deg, transparent 0%, transparent calc(50% - 0.5px),  #\" + fgColor + \" 50%, transparent calc(50% + 0.5px),  transparent 100%), \" +\n    //         \"linear-gradient(-45deg, transparent 0%, transparent calc(50% - 0.5px) , #\" + fgColor + \" 50%, transparent calc(50% + 0.5px),  transparent 100%)  \" +\n    //         \"#\" + bgColor + \";\", \"4px 4px\"];\n    //     break\n\n    case 'dashUpDiag':\n      return ['repeating-linear-gradient(152deg, #' + fgColor + ', #' + fgColor + ' 5% , transparent 0, transparent 70%)' +\n      '#' + bgColor + ';', '4px 4px']\n      break\n    case 'dashDnDiag':\n      return ['repeating-linear-gradient(45deg, #' + fgColor + ', #' + fgColor + ' 5% , transparent 0, transparent 70%)' +\n      '#' + bgColor + ';', '4px 4px']\n      break\n    case 'diagBrick':\n      return ['linear-gradient(45deg, transparent 15%,  #' + fgColor + ' 30%, transparent 30%), ' +\n      'linear-gradient(-45deg, transparent 15%,  #' + fgColor + ' 30%, transparent 30%), ' +\n      'linear-gradient(-45deg, transparent 65%,  #' + fgColor + ' 80%, transparent 0) ' +\n      '#' + bgColor + ';', '4px 4px']\n      break\n    case 'horzBrick':\n      return ['linear-gradient(335deg, #' + bgColor + ' 1.6px, transparent 1.6px), ' +\n      'linear-gradient(155deg, #' + bgColor + ' 1.6px, transparent 1.6px), ' +\n      'linear-gradient(335deg, #' + bgColor + ' 1.6px, transparent 1.6px), ' +\n      'linear-gradient(155deg, #' + bgColor + ' 1.6px, transparent 1.6px) ' +\n      '#' + fgColor + ';', '4px 4px', '0 0.15px, 0.3px 2.5px, 2px 2.15px, 2.35px 0.4px']\n      break\n\n    case 'dashVert':\n      return ['linear-gradient(0deg,  #' + bgColor + ' 30%, transparent 30%),' +\n      'linear-gradient(90deg,transparent, transparent 40%, #' + fgColor + ' 40%, #' + fgColor + ' 60% , transparent 60%)' +\n      '#' + bgColor + ';', '4px 4px']\n      break\n    case 'dashHorz':\n      return ['linear-gradient(90deg,  #' + bgColor + ' 30%, transparent 30%),' +\n      'linear-gradient(0deg,transparent, transparent 40%, #' + fgColor + ' 40%, #' + fgColor + ' 60% , transparent 60%)' +\n      '#' + bgColor + ';', '4px 4px']\n      break\n    case 'solidDmnd':\n      return ['linear-gradient(135deg,  #' + fgColor + ' 25%, transparent 25%), ' +\n      'linear-gradient(225deg,  #' + fgColor + ' 25%, transparent 25%), ' +\n      'linear-gradient(315deg,  #' + fgColor + ' 25%, transparent 25%), ' +\n      'linear-gradient(45deg,  #' + fgColor + ' 25%, transparent 25%) ' +\n      '#' + bgColor + ';', '8px 8px']\n      break\n    case 'openDmnd':\n      return ['linear-gradient(45deg, transparent 0%, transparent calc(50% - 0.5px),  #' + fgColor + ' 50%, transparent calc(50% + 0.5px),  transparent 100%), ' +\n      'linear-gradient(-45deg, transparent 0%, transparent calc(50% - 0.5px) , #' + fgColor + ' 50%, transparent calc(50% + 0.5px),  transparent 100%) ' +\n      '#' + bgColor + ';', '8px 8px']\n      break\n\n    case 'dotDmnd':\n      return ['radial-gradient(#' + fgColor + ' 15%, transparent 0), ' +\n      'radial-gradient(#' + fgColor + ' 15%, transparent 0) ' +\n      '#' + bgColor + ';', '4px 4px', '0 0, 2px 2px']\n      break\n    case 'zigZag':\n    case 'wave':\n      var size = ''\n      if (prst == 'zigZag') size = '0'\n      else size = '1px'\n      return ['linear-gradient(135deg,  #' + fgColor + ' 25%, transparent 25%) 50px ' + size + ', ' +\n      'linear-gradient(225deg,  #' + fgColor + ' 25%, transparent 25%) 50px ' + size + ', ' +\n      'linear-gradient(315deg,  #' + fgColor + ' 25%, transparent 25%), ' +\n      'linear-gradient(45deg,  #' + fgColor + ' 25%, transparent 25%) ' +\n      '#' + bgColor + ';', '4px 4px']\n      break\n    case 'lgConfetti':\n    case 'smConfetti':\n      var size = ''\n      if (prst == 'lgConfetti') size = '4px 4px'\n      else size = '2px 2px'\n      return ['linear-gradient(135deg,  #' + fgColor + ' 25%, transparent 25%) 50px 1px, ' +\n      'linear-gradient(225deg,  #' + fgColor + ' 25%, transparent 25%), ' +\n      'linear-gradient(315deg,  #' + fgColor + ' 25%, transparent 25%) 50px 1px , ' +\n      'linear-gradient(45deg,  #' + fgColor + ' 25%, transparent 25%) ' +\n      '#' + bgColor + ';', size]\n      break\n    // case \"weave\":\n    //     return [\"linear-gradient(45deg,  #\" + bgColor + \" 5%, transparent 25%) 50px 0, \" +\n    //         \"linear-gradient(135deg,  #\" + bgColor + \" 25%, transparent 25%) 50px 0, \" +\n    //         \"linear-gradient(45deg,  #\" + bgColor + \" 25%, transparent 25%) \" +\n    //         \"#\" + fgColor + \";\", \"4px 4px\"];\n    //     //background: linear-gradient(45deg, #dca 12%, transparent 0, transparent 88%, #dca 0),\n    //     //linear-gradient(135deg, transparent 37 %, #a85 0, #a85 63 %, transparent 0),\n    //     //linear-gradient(45deg, transparent 37 %, #dca 0, #dca 63 %, transparent 0) #753;\n    //     // background-size: 25px 25px;\n    //     break;\n\n    case 'plaid':\n      return ['linear-gradient(0deg, transparent, transparent 25%, #' + fgColor + '33 25%, #' + fgColor + '33 50%),' +\n      'linear-gradient(90deg, transparent, transparent 25%, #' + fgColor + '66 25%, #' + fgColor + '66 50%) ' +\n      '#' + bgColor + ';', '4px 4px']\n      /**\n       background-color: #6677dd;\n       background-image:\n       repeating-linear-gradient(0deg, transparent, transparent 35px, rgba(255, 255, 255, 0.2) 35px, rgba(255, 255, 255, 0.2) 70px),\n       repeating-linear-gradient(90deg, transparent, transparent 35px, rgba(255,255,255,0.4) 35px, rgba(255,255,255,0.4) 70px);\n       */\n      break\n    case 'sphere':\n      return ['radial-gradient(#' + fgColor + ' 50%, transparent 50%),' +\n      '#' + bgColor + ';', '4px 4px']\n      break\n    case 'weave':\n    case 'shingle':\n      return ['linear-gradient(45deg, #' + bgColor + ' 1.31px , #' + fgColor + ' 1.4px, #' + fgColor + ' 1.5px, transparent 1.5px, transparent 4.2px, #' + fgColor + ' 4.2px, #' + fgColor + ' 4.3px, transparent 4.31px), ' +\n      'linear-gradient(-45deg,  #' + bgColor + ' 1.31px , #' + fgColor + ' 1.4px, #' + fgColor + ' 1.5px, transparent 1.5px, transparent 4.2px, #' + fgColor + ' 4.2px, #' + fgColor + ' 4.3px, transparent 4.31px) 0 4px, ' +\n      '#' + bgColor + ';', '4px 8px']\n      break\n    //background:\n    //linear-gradient(45deg, #708090 1.31px, #d9ecff 1.4px, #d9ecff 1.5px, transparent 1.5px, transparent 4.2px, #d9ecff 4.2px, #d9ecff 4.3px, transparent 4.31px),\n    //linear-gradient(-45deg, #708090 1.31px, #d9ecff 1.4px, #d9ecff 1.5px, transparent 1.5px, transparent 4.2px, #d9ecff 4.2px, #d9ecff 4.3px, transparent 4.31px)0 4px;\n    //background-color:#708090;\n    //background-size: 4px 8px;\n    case 'pct5':\n    case 'pct10':\n    case 'pct20':\n    case 'pct25':\n    case 'pct30':\n    case 'pct40':\n    case 'pct50':\n    case 'pct60':\n    case 'pct70':\n    case 'pct75':\n    case 'pct80':\n    case 'pct90':\n    //case \"dotDmnd\":\n    case 'trellis':\n    case 'divot':\n      var px_pr_ary\n      switch (prst) {\n        case 'pct5':\n          px_pr_ary = ['0.3px', '10%', '2px 2px']\n          break\n        case 'divot':\n          px_pr_ary = ['0.3px', '40%', '4px 4px']\n          break\n        case 'pct10':\n          px_pr_ary = ['0.3px', '20%', '2px 2px']\n          break\n        case 'pct20':\n          //case \"dotDmnd\":\n          px_pr_ary = ['0.2px', '40%', '2px 2px']\n          break\n        case 'pct25':\n          px_pr_ary = ['0.2px', '50%', '2px 2px']\n          break\n        case 'pct30':\n          px_pr_ary = ['0.5px', '50%', '2px 2px']\n          break\n        case 'pct40':\n          px_pr_ary = ['0.5px', '70%', '2px 2px']\n          break\n        case 'pct50':\n          px_pr_ary = ['0.09px', '90%', '2px 2px']\n          break\n        case 'pct60':\n          px_pr_ary = ['0.3px', '90%', '2px 2px']\n          break\n        case 'pct70':\n        case 'trellis':\n          px_pr_ary = ['0.5px', '95%', '2px 2px']\n          break\n        case 'pct75':\n          px_pr_ary = ['0.65px', '100%', '2px 2px']\n          break\n        case 'pct80':\n          px_pr_ary = ['0.85px', '100%', '2px 2px']\n          break\n        case 'pct90':\n          px_pr_ary = ['1px', '100%', '2px 2px']\n          break\n      }\n      return ['radial-gradient(#' + fgColor + ' ' + px_pr_ary[0] + ', transparent ' + px_pr_ary[1] + '),' +\n      '#' + bgColor + ';', px_pr_ary[2]]\n      break\n    default:\n      return [0, 0]\n  }\n}\n\nfunction getSolidFill(node, clrMap, phClr, warpObj) {\n\n  if (node === undefined) {\n    return undefined\n  }\n\n  //console.log(\"getSolidFill node: \", node)\n  var color = ''\n  var clrNode\n  if (node['a:srgbClr'] !== undefined) {\n    clrNode = node['a:srgbClr']\n    color = getTextByPathList(clrNode, ['attrs', 'val']) //#...\n  } else if (node['a:schemeClr'] !== undefined) { //a:schemeClr\n    clrNode = node['a:schemeClr']\n    var schemeClr = getTextByPathList(clrNode, ['attrs', 'val'])\n    color = getSchemeColorFromTheme('a:' + schemeClr, clrMap, phClr, warpObj)\n    //console.log(\"schemeClr: \", schemeClr, \"color: \", color)\n  } else if (node['a:scrgbClr'] !== undefined) {\n    clrNode = node['a:scrgbClr']\n    //<a:scrgbClr r=\"50%\" g=\"50%\" b=\"50%\"/>  //Need to test/////////////////////////////////////////////\n    var defBultColorVals = clrNode['attrs']\n    var red = (defBultColorVals['r'].indexOf('%') != -1) ? defBultColorVals['r'].split('%').shift() : defBultColorVals['r']\n    var green = (defBultColorVals['g'].indexOf('%') != -1) ? defBultColorVals['g'].split('%').shift() : defBultColorVals['g']\n    var blue = (defBultColorVals['b'].indexOf('%') != -1) ? defBultColorVals['b'].split('%').shift() : defBultColorVals['b']\n    //var scrgbClr = red + \",\" + green + \",\" + blue;\n    color = toHex(255 * (Number(red) / 100)) + toHex(255 * (Number(green) / 100)) + toHex(255 * (Number(blue) / 100))\n    //console.log(\"scrgbClr: \" + scrgbClr);\n\n  } else if (node['a:prstClr'] !== undefined) {\n    clrNode = node['a:prstClr']\n    //<a:prstClr val=\"black\"/>  //Need to test/////////////////////////////////////////////\n    var prstClr = getTextByPathList(clrNode, ['attrs', 'val']) //node[\"a:prstClr\"][\"attrs\"][\"val\"];\n    color = getColorName2Hex(prstClr)\n    //console.log(\"blip prstClr: \", prstClr, \" => hexClr: \", color);\n  } else if (node['a:hslClr'] !== undefined) {\n    clrNode = node['a:hslClr']\n    //<a:hslClr hue=\"14400000\" sat=\"100%\" lum=\"50%\"/>  //Need to test/////////////////////////////////////////////\n    var defBultColorVals = clrNode['attrs']\n    var hue = Number(defBultColorVals['hue']) / 100000\n    var sat = Number((defBultColorVals['sat'].indexOf('%') != -1) ? defBultColorVals['sat'].split('%').shift() : defBultColorVals['sat']) / 100\n    var lum = Number((defBultColorVals['lum'].indexOf('%') != -1) ? defBultColorVals['lum'].split('%').shift() : defBultColorVals['lum']) / 100\n    //var hslClr = defBultColorVals[\"hue\"] + \",\" + defBultColorVals[\"sat\"] + \",\" + defBultColorVals[\"lum\"];\n    var hsl2rgb = hslToRgb(hue, sat, lum)\n    color = toHex(hsl2rgb.r) + toHex(hsl2rgb.g) + toHex(hsl2rgb.b)\n    //defBultColor = cnvrtHslColor2Hex(hslClr); //TODO\n    // console.log(\"hslClr: \" + hslClr);\n  } else if (node['a:sysClr'] !== undefined) {\n    clrNode = node['a:sysClr']\n    //<a:sysClr val=\"windowText\" lastClr=\"000000\"/>  //Need to test/////////////////////////////////////////////\n    var sysClr = getTextByPathList(clrNode, ['attrs', 'lastClr'])\n    if (sysClr !== undefined) {\n      color = sysClr\n    }\n  }\n  //console.log(\"color: [%cstart]\", \"color: #\" + color, tinycolor(color).toHslString(), color)\n\n  //fix color -------------------------------------------------------- TODO\n  //\n  //1. \"alpha\":\n  //Specifies the opacity as expressed by a percentage value.\n  // [Example: The following represents a green solid fill which is 50 % opaque\n  // < a: solidFill >\n  //     <a:srgbClr val=\"00FF00\">\n  //         <a:alpha val=\"50%\" />\n  //     </a:srgbClr>\n  // </a: solidFill >\n  var isAlpha = false\n  var alpha = parseInt(getTextByPathList(clrNode, ['a:alpha', 'attrs', 'val'])) / 100000\n  //console.log(\"alpha: \", alpha)\n  if (!isNaN(alpha)) {\n    // var al_color = new colz.Color(color);\n    // al_color.setAlpha(alpha);\n    // var ne_color = al_color.rgba.toString();\n    // color = (rgba2hex(ne_color))\n    var al_color = tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()(color)\n    al_color.setAlpha(alpha)\n    color = al_color.toHex8()\n    isAlpha = true\n    //console.log(\"al_color: \", al_color, \", color: \", color)\n  }\n  //2. \"alphaMod\":\n  // Specifies the opacity as expressed by a percentage relative to the input color.\n  //     [Example: The following represents a green solid fill which is 50 % opaque\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"00FF00\">\n  //             <a:alphaMod val=\"50%\" />\n  //         </a:srgbClr>\n  //     </a: solidFill >\n  //3. \"alphaOff\":\n  // Specifies the opacity as expressed by a percentage offset increase or decrease to the\n  // input color.Increases never increase the opacity beyond 100 %, decreases never decrease\n  // the opacity below 0 %.\n  // [Example: The following represents a green solid fill which is 90 % opaque\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"00FF00\">\n  //             <a:alphaOff val=\"-10%\" />\n  //         </a:srgbClr>\n  //     </a: solidFill >\n\n  //4. \"blue\":\n  //Specifies the value of the blue component.The assigned value is specified as a\n  //percentage with 0 % indicating minimal blue and 100 % indicating maximum blue.\n  //  [Example: The following manipulates the fill from having RGB value RRGGBB = (00, FF, 00)\n  //      to value RRGGBB = (00, FF, FF)\n  //          <a: solidFill >\n  //              <a:srgbClr val=\"00FF00\">\n  //                  <a:blue val=\"100%\" />\n  //              </a:srgbClr>\n  //          </a: solidFill >\n  //5. \"blueMod\"\n  // Specifies the blue component as expressed by a percentage relative to the input color\n  // component.Increases never increase the blue component beyond 100 %, decreases\n  // never decrease the blue component below 0 %.\n  // [Example: The following manipulates the fill from having RGB value RRGGBB = (00, 00, FF)\n  //     to value RRGGBB = (00, 00, 80)\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"0000FF\">\n  //             <a:blueMod val=\"50%\" />\n  //         </a:srgbClr>\n  //     </a: solidFill >\n  //6. \"blueOff\"\n  // Specifies the blue component as expressed by a percentage offset increase or decrease\n  // to the input color component.Increases never increase the blue component\n  // beyond 100 %, decreases never decrease the blue component below 0 %.\n  // [Example: The following manipulates the fill from having RGB value RRGGBB = (00, 00, FF)\n  // to value RRGGBB = (00, 00, CC)\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"00FF00\">\n  //             <a:blueOff val=\"-20%\" />\n  //         </a:srgbClr>\n  //     </a: solidFill >\n\n  //7. \"comp\" - This element specifies that the color rendered should be the complement of its input color with the complement\n  // being defined as such.Two colors are called complementary if, when mixed they produce a shade of grey.For\n  // instance, the complement of red which is RGB(255, 0, 0) is cyan.(<a:comp/>)\n\n  //8. \"gamma\" - This element specifies that the output color rendered by the generating application should be the sRGB gamma\n  //              shift of the input color.\n\n  //9. \"gray\" - This element specifies a grayscale of its input color, taking into relative intensities of the red, green, and blue\n  //              primaries.\n\n  //10. \"green\":\n  // Specifies the value of the green component. The assigned value is specified as a\n  // percentage with 0 % indicating minimal green and 100 % indicating maximum green.\n  // [Example: The following manipulates the fill from having RGB value RRGGBB = (00, 00, FF)\n  // to value RRGGBB = (00, FF, FF)\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"0000FF\">\n  //             <a:green val=\"100%\" />\n  //         </a:srgbClr>\n  //     </a: solidFill >\n  //11. \"greenMod\":\n  // Specifies the green component as expressed by a percentage relative to the input color\n  // component.Increases never increase the green component beyond 100 %, decreases\n  // never decrease the green component below 0 %.\n  // [Example: The following manipulates the fill from having RGB value RRGGBB = (00, FF, 00)\n  // to value RRGGBB = (00, 80, 00)\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"00FF00\">\n  //             <a:greenMod val=\"50%\" />\n  //         </a:srgbClr>\n  //     </a: solidFill >\n  //12. \"greenOff\":\n  // Specifies the green component as expressed by a percentage offset increase or decrease\n  // to the input color component.Increases never increase the green component\n  // beyond 100 %, decreases never decrease the green component below 0 %.\n  // [Example: The following manipulates the fill from having RGB value RRGGBB = (00, FF, 00)\n  // to value RRGGBB = (00, CC, 00)\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"00FF00\">\n  //             <a:greenOff val=\"-20%\" />\n  //         </a:srgbClr>\n  //     </a: solidFill >\n\n  //13. \"hue\" (This element specifies a color using the HSL color model):\n  // This element specifies the input color with the specified hue, but with its saturation and luminance unchanged.\n  // < a: solidFill >\n  //     <a:hslClr hue=\"14400000\" sat=\"100%\" lum=\"50%\">\n  // </a:solidFill>\n  // <a:solidFill>\n  //     <a:hslClr hue=\"0\" sat=\"100%\" lum=\"50%\">\n  //         <a:hue val=\"14400000\"/>\n  //     <a:hslClr/>\n  // </a:solidFill>\n\n  //14. \"hueMod\" (This element specifies a color using the HSL color model):\n  // Specifies the hue as expressed by a percentage relative to the input color.\n  // [Example: The following manipulates the fill color from having RGB value RRGGBB = (00, FF, 00) to value RRGGBB = (FF, FF, 00)\n  //         < a: solidFill >\n  //             <a:srgbClr val=\"00FF00\">\n  //                 <a:hueMod val=\"50%\" />\n  //             </a:srgbClr>\n  //         </a: solidFill >\n\n  var hueMod = parseInt(getTextByPathList(clrNode, ['a:hueMod', 'attrs', 'val'])) / 100000\n  //console.log(\"hueMod: \", hueMod)\n  if (!isNaN(hueMod)) {\n    color = applyHueMod(color, hueMod, isAlpha)\n  }\n  //15. \"hueOff\"(This element specifies a color using the HSL color model):\n  // Specifies the actual angular value of the shift.The result of the shift shall be between 0\n  // and 360 degrees.Shifts resulting in angular values less than 0 are treated as 0. Shifts\n  // resulting in angular values greater than 360 are treated as 360.\n  // [Example:\n  //     The following increases the hue angular value by 10 degrees.\n  //     < a: solidFill >\n  //         <a:hslClr hue=\"0\" sat=\"100%\" lum=\"50%\"/>\n  //             <a:hueOff val=\"600000\"/>\n  //     </a: solidFill >\n  //var hueOff = parseInt(getTextByPathList(clrNode, [\"a:hueOff\", \"attrs\", \"val\"])) / 100000;\n  // if (!isNaN(hueOff)) {\n  //     //console.log(\"hueOff: \", hueOff, \" (TODO)\")\n  //     //color = applyHueOff(color, hueOff, isAlpha);\n  // }\n\n  //16. \"inv\" (inverse)\n  //This element specifies the inverse of its input color.\n  //The inverse of red (1, 0, 0) is cyan (0, 1, 1 ).\n  // The following represents cyan, the inverse of red:\n  // <a:solidFill>\n  //     <a:srgbClr val=\"FF0000\">\n  //         <a:inv />\n  //     </a:srgbClr>\n  // </a:solidFill>\n\n  //17. \"invGamma\" - This element specifies that the output color rendered by the generating application should be the inverse sRGB\n  //                  gamma shift of the input color.\n\n  //18. \"lum\":\n  // This element specifies the input color with the specified luminance, but with its hue and saturation unchanged.\n  // Typically luminance values fall in the range[0 %, 100 %].\n  // The following two solid fills are equivalent:\n  // <a:solidFill>\n  //     <a:hslClr hue=\"14400000\" sat=\"100%\" lum=\"50%\">\n  // </a:solidFill>\n  // <a:solidFill>\n  //     <a:hslClr hue=\"14400000\" sat=\"100%\" lum=\"0%\">\n  //         <a:lum val=\"50%\" />\n  //     <a:hslClr />\n  // </a:solidFill>\n  // [Example: The following manipulates the fill from having RGB value RRGGBB = (00, FF, 00)\n  // to value RRGGBB = (00, 66, 00)\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"00FF00\">\n  //             <a:lum val=\"20%\" />\n  //         </a:srgbClr>\n  //     </a: solidFill >\n  // end example]\n  //19. \"lumMod\":\n  // Specifies the luminance as expressed by a percentage relative to the input color.\n  // Increases never increase the luminance beyond 100 %, decreases never decrease the\n  // luminance below 0 %.\n  // [Example: The following manipulates the fill from having RGB value RRGGBB = (00, FF, 00)\n  //     to value RRGGBB = (00, 75, 00)\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"00FF00\">\n  //             <a:lumMod val=\"50%\" />\n  //         </a:srgbClr>\n  //     </a: solidFill >\n  // end example]\n  var lumMod = parseInt(getTextByPathList(clrNode, ['a:lumMod', 'attrs', 'val'])) / 100000\n  //console.log(\"lumMod: \", lumMod)\n  if (!isNaN(lumMod)) {\n    color = applyLumMod(color, lumMod, isAlpha)\n  }\n  //var lumMod_color = applyLumMod(color, 0.5);\n  //console.log(\"lumMod_color: \", lumMod_color)\n  //20. \"lumOff\"\n  // Specifies the luminance as expressed by a percentage offset increase or decrease to the\n  // input color.Increases never increase the luminance beyond 100 %, decreases never\n  // decrease the luminance below 0 %.\n  // [Example: The following manipulates the fill from having RGB value RRGGBB = (00, FF, 00)\n  //     to value RRGGBB = (00, 99, 00)\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"00FF00\">\n  //             <a:lumOff val=\"-20%\" />\n  //         </a:srgbClr>\n  //     </a: solidFill >\n  var lumOff = parseInt(getTextByPathList(clrNode, ['a:lumOff', 'attrs', 'val'])) / 100000\n  //console.log(\"lumOff: \", lumOff)\n  if (!isNaN(lumOff)) {\n    color = applyLumOff(color, lumOff, isAlpha)\n  }\n\n\n  //21. \"red\":\n  // Specifies the value of the red component.The assigned value is specified as a percentage\n  // with 0 % indicating minimal red and 100 % indicating maximum red.\n  // [Example: The following manipulates the fill from having RGB value RRGGBB = (00, FF, 00)\n  //     to value RRGGBB = (FF, FF, 00)\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"00FF00\">\n  //             <a:red val=\"100%\" />\n  //         </a:srgbClr>\n  //     </a: solidFill >\n  //22. \"redMod\":\n  // Specifies the red component as expressed by a percentage relative to the input color\n  // component.Increases never increase the red component beyond 100 %, decreases never\n  // decrease the red component below 0 %.\n  // [Example: The following manipulates the fill from having RGB value RRGGBB = (FF, 00, 00)\n  //     to value RRGGBB = (80, 00, 00)\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"FF0000\">\n  //             <a:redMod val=\"50%\" />\n  //         </a:srgbClr>\n  //     </a: solidFill >\n  //23. \"redOff\":\n  // Specifies the red component as expressed by a percentage offset increase or decrease to\n  // the input color component.Increases never increase the red component beyond 100 %,\n  //     decreases never decrease the red component below 0 %.\n  //     [Example: The following manipulates the fill from having RGB value RRGGBB = (FF, 00, 00)\n  //     to value RRGGBB = (CC, 00, 00)\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"FF0000\">\n  //             <a:redOff val=\"-20%\" />\n  //         </a:srgbClr>\n  //     </a: solidFill >\n\n  //23. \"sat\":\n  // This element specifies the input color with the specified saturation, but with its hue and luminance unchanged.\n  // Typically saturation values fall in the range[0 %, 100 %].\n  // [Example:\n  //     The following two solid fills are equivalent:\n  //     <a:solidFill>\n  //         <a:hslClr hue=\"14400000\" sat=\"100%\" lum=\"50%\">\n  //     </a:solidFill>\n  //     <a:solidFill>\n  //         <a:hslClr hue=\"14400000\" sat=\"0%\" lum=\"50%\">\n  //             <a:sat val=\"100000\" />\n  //         <a:hslClr />\n  //     </a:solidFill>\n  // [Example: The following manipulates the fill from having RGB value RRGGBB = (00, FF, 00)\n  //     to value RRGGBB = (40, C0, 40)\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"00FF00\">\n  //             <a:sat val=\"50%\" />\n  //         </a:srgbClr>\n  //     <a: solidFill >\n  // end example]\n\n  //24. \"satMod\":\n  // Specifies the saturation as expressed by a percentage relative to the input color.\n  // Increases never increase the saturation beyond 100 %, decreases never decrease the\n  // saturation below 0 %.\n  // [Example: The following manipulates the fill from having RGB value RRGGBB = (00, FF, 00)\n  //     to value RRGGBB = (66, 99, 66)\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"00FF00\">\n  //             <a:satMod val=\"20%\" />\n  //         </a:srgbClr>\n  //     </a: solidFill >\n  var satMod = parseInt(getTextByPathList(clrNode, ['a:satMod', 'attrs', 'val'])) / 100000\n  if (!isNaN(satMod)) {\n    color = applySatMod(color, satMod, isAlpha)\n  }\n  //25. \"satOff\":\n  // Specifies the saturation as expressed by a percentage offset increase or decrease to the\n  // input color.Increases never increase the saturation beyond 100 %, decreases never\n  // decrease the saturation below 0 %.\n  // [Example: The following manipulates the fill from having RGB value RRGGBB = (00, FF, 00)\n  //     to value RRGGBB = (19, E5, 19)\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"00FF00\">\n  //             <a:satOff val=\"-20%\" />\n  //         </a:srgbClr>\n  //     </a: solidFill >\n  // var satOff = parseInt(getTextByPathList(clrNode, [\"a:satOff\", \"attrs\", \"val\"])) / 100000;\n  // if (!isNaN(satOff)) {\n  //     console.log(\"satOff: \", satOff, \" (TODO)\")\n  // }\n\n  //26. \"shade\":\n  // This element specifies a darker version of its input color.A 10 % shade is 10 % of the input color combined with 90 % black.\n  // [Example: The following manipulates the fill from having RGB value RRGGBB = (00, FF, 00)\n  //     to value RRGGBB = (00, BC, 00)\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"00FF00\">\n  //             <a:shade val=\"50%\" />\n  //         </a:srgbClr>\n  //     </a: solidFill >\n  // end example]\n  var shade = parseInt(getTextByPathList(clrNode, ['a:shade', 'attrs', 'val'])) / 100000\n  if (!isNaN(shade)) {\n    color = applyShade(color, shade, isAlpha)\n  }\n  //27.  \"tint\":\n  // This element specifies a lighter version of its input color.A 10 % tint is 10 % of the input color combined with\n  // 90 % white.\n  // [Example: The following manipulates the fill from having RGB value RRGGBB = (00, FF, 00)\n  //     to value RRGGBB = (BC, FF, BC)\n  //     < a: solidFill >\n  //         <a:srgbClr val=\"00FF00\">\n  //             <a:tint val=\"50%\" />\n  //         </a:srgbClr>\n  //     </a: solidFill >\n  var tint = parseInt(getTextByPathList(clrNode, ['a:tint', 'attrs', 'val'])) / 100000\n  if (!isNaN(tint)) {\n    color = applyTint(color, tint, isAlpha)\n  }\n  //console.log(\"color [%cfinal]: \", \"color: #\" + color, tinycolor(color).toHslString(), color)\n\n  return color\n}\nfunction toHex(n) {\n  var hex = n.toString(16)\n  while (hex.length < 2) { hex = '0' + hex }\n  return hex\n}\nfunction hslToRgb(hue, sat, light) {\n  var t1, t2, r, g, b\n  hue = hue / 60\n  if (light <= 0.5) {\n    t2 = light * (sat + 1)\n  } else {\n    t2 = light + sat - (light * sat)\n  }\n  t1 = light * 2 - t2\n  r = hueToRgb(t1, t2, hue + 2) * 255\n  g = hueToRgb(t1, t2, hue) * 255\n  b = hueToRgb(t1, t2, hue - 2) * 255\n  return { r: r, g: g, b: b }\n}\nfunction hueToRgb(t1, t2, hue) {\n  if (hue < 0) hue += 6\n  if (hue >= 6) hue -= 6\n  if (hue < 1) return (t2 - t1) * hue + t1\n  else if (hue < 3) return t2\n  else if (hue < 4) return (t2 - t1) * (4 - hue) + t1\n  else return t1\n}\nfunction getColorName2Hex(name) {\n  var hex\n  var colorName = ['white', 'AliceBlue', 'AntiqueWhite', 'Aqua', 'Aquamarine', 'Azure', 'Beige', 'Bisque', 'black', 'BlanchedAlmond', 'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue', 'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk', 'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenRod', 'DarkGray', 'DarkGrey', 'DarkGreen', 'DarkKhaki', 'DarkMagenta', 'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed', 'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray', 'DarkSlateGrey', 'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray', 'DimGrey', 'DodgerBlue', 'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia', 'Gainsboro', 'GhostWhite', 'Gold', 'GoldenRod', 'Gray', 'Grey', 'Green', 'GreenYellow', 'HoneyDew', 'HotPink', 'IndianRed', 'Indigo', 'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen', 'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan', 'LightGoldenRodYellow', 'LightGray', 'LightGrey', 'LightGreen', 'LightPink', 'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray', 'LightSlateGrey', 'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen', 'Magenta', 'Maroon', 'MediumAquaMarine', 'MediumBlue', 'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue', 'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed', 'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite', 'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed', 'Orchid', 'PaleGoldenRod', 'PaleGreen', 'PaleTurquoise', 'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum', 'PowderBlue', 'Purple', 'RebeccaPurple', 'Red', 'RosyBrown', 'RoyalBlue', 'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'SeaShell', 'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'SlateGrey', 'Snow', 'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato', 'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow', 'YellowGreen']\n  var colorHex = ['ffffff', 'f0f8ff', 'faebd7', '00ffff', '7fffd4', 'f0ffff', 'f5f5dc', 'ffe4c4', '000000', 'ffebcd', '0000ff', '8a2be2', 'a52a2a', 'deb887', '5f9ea0', '7fff00', 'd2691e', 'ff7f50', '6495ed', 'fff8dc', 'dc143c', '00ffff', '00008b', '008b8b', 'b8860b', 'a9a9a9', 'a9a9a9', '006400', 'bdb76b', '8b008b', '556b2f', 'ff8c00', '9932cc', '8b0000', 'e9967a', '8fbc8f', '483d8b', '2f4f4f', '2f4f4f', '00ced1', '9400d3', 'ff1493', '00bfff', '696969', '696969', '1e90ff', 'b22222', 'fffaf0', '228b22', 'ff00ff', 'dcdcdc', 'f8f8ff', 'ffd700', 'daa520', '808080', '808080', '008000', 'adff2f', 'f0fff0', 'ff69b4', 'cd5c5c', '4b0082', 'fffff0', 'f0e68c', 'e6e6fa', 'fff0f5', '7cfc00', 'fffacd', 'add8e6', 'f08080', 'e0ffff', 'fafad2', 'd3d3d3', 'd3d3d3', '90ee90', 'ffb6c1', 'ffa07a', '20b2aa', '87cefa', '778899', '778899', 'b0c4de', 'ffffe0', '00ff00', '32cd32', 'faf0e6', 'ff00ff', '800000', '66cdaa', '0000cd', 'ba55d3', '9370db', '3cb371', '7b68ee', '00fa9a', '48d1cc', 'c71585', '191970', 'f5fffa', 'ffe4e1', 'ffe4b5', 'ffdead', '000080', 'fdf5e6', '808000', '6b8e23', 'ffa500', 'ff4500', 'da70d6', 'eee8aa', '98fb98', 'afeeee', 'db7093', 'ffefd5', 'ffdab9', 'cd853f', 'ffc0cb', 'dda0dd', 'b0e0e6', '800080', '663399', 'ff0000', 'bc8f8f', '4169e1', '8b4513', 'fa8072', 'f4a460', '2e8b57', 'fff5ee', 'a0522d', 'c0c0c0', '87ceeb', '6a5acd', '708090', '708090', 'fffafa', '00ff7f', '4682b4', 'd2b48c', '008080', 'd8bfd8', 'ff6347', '40e0d0', 'ee82ee', 'f5deb3', 'ffffff', 'f5f5f5', 'ffff00', '9acd32']\n  var findIndx = colorName.indexOf(name)\n  if (findIndx != -1) {\n    hex = colorHex[findIndx]\n  }\n  return hex\n}\nfunction getSchemeColorFromTheme(schemeClr, clrMap, phClr, warpObj) {\n  //<p:clrMap ...> in slide master\n  // e.g. tx2=\"dk2\" bg2=\"lt2\" tx1=\"dk1\" bg1=\"lt1\" slideLayoutClrOvride\n  //console.log(\"getSchemeColorFromTheme: schemeClr: \", schemeClr, \",clrMap: \", clrMap)\n  var slideLayoutClrOvride\n  if (clrMap !== undefined) {\n    slideLayoutClrOvride = clrMap//getTextByPathList(clrMap, [\"p:sldMaster\", \"p:clrMap\", \"attrs\"])\n  } else {\n    var sldClrMapOvr = getTextByPathList(warpObj['slideContent'], ['p:sld', 'p:clrMapOvr', 'a:overrideClrMapping', 'attrs'])\n    if (sldClrMapOvr !== undefined) {\n      slideLayoutClrOvride = sldClrMapOvr\n    } else {\n      var sldClrMapOvr = getTextByPathList(warpObj['slideLayoutContent'], ['p:sldLayout', 'p:clrMapOvr', 'a:overrideClrMapping', 'attrs'])\n      if (sldClrMapOvr !== undefined) {\n        slideLayoutClrOvride = sldClrMapOvr\n      } else {\n        slideLayoutClrOvride = getTextByPathList(warpObj['slideMasterContent'], ['p:sldMaster', 'p:clrMap', 'attrs'])\n      }\n\n    }\n  }\n  //console.log(\"getSchemeColorFromTheme slideLayoutClrOvride: \", slideLayoutClrOvride);\n  var schmClrName = schemeClr.substr(2)\n  if (schmClrName == 'phClr' && phClr !== undefined) {\n    color = phClr\n  } else {\n    if (slideLayoutClrOvride !== undefined) {\n      switch (schmClrName) {\n        case 'tx1':\n        case 'tx2':\n        case 'bg1':\n        case 'bg2':\n          schemeClr = 'a:' + slideLayoutClrOvride[schmClrName]\n          break\n      }\n    } else {\n      switch (schmClrName) {\n        case 'tx1':\n          schemeClr = 'a:dk1'\n          break\n        case 'tx2':\n          schemeClr = 'a:dk2'\n          break\n        case 'bg1':\n          schemeClr = 'a:lt1'\n          break\n        case 'bg2':\n          schemeClr = 'a:lt2'\n          break\n      }\n    }\n    //console.log(\"getSchemeColorFromTheme:  schemeClr: \", schemeClr);\n    var refNode = getTextByPathList(warpObj['themeContent'], ['a:theme', 'a:themeElements', 'a:clrScheme', schemeClr])\n    var color = getTextByPathList(refNode, ['a:srgbClr', 'attrs', 'val'])\n    //console.log(\"themeContent: color\", color);\n    if (color === undefined && refNode !== undefined) {\n      color = getTextByPathList(refNode, ['a:sysClr', 'attrs', 'lastClr'])\n    }\n  }\n  //console.log(color)\n  return color\n}\n\nfunction extractChartData(serNode) {\n\n  var dataMat = new Array()\n\n  if (serNode === undefined) {\n    return dataMat\n  }\n\n  if (serNode['c:xVal'] !== undefined) {\n    var dataRow = new Array()\n    eachElement(serNode['c:xVal']['c:numRef']['c:numCache']['c:pt'], function (innerNode, index) {\n      dataRow.push(parseFloat(innerNode['c:v']))\n      return ''\n    })\n    dataMat.push(dataRow)\n    dataRow = new Array()\n    eachElement(serNode['c:yVal']['c:numRef']['c:numCache']['c:pt'], function (innerNode, index) {\n      dataRow.push(parseFloat(innerNode['c:v']))\n      return ''\n    })\n    dataMat.push(dataRow)\n  } else {\n    eachElement(serNode, function (innerNode, index) {\n      var dataRow = new Array()\n      var colName = getTextByPathList(innerNode, ['c:tx', 'c:strRef', 'c:strCache', 'c:pt', 'c:v']) || index\n\n      // Category (string or number)\n      var rowNames = {}\n      if (getTextByPathList(innerNode, ['c:cat', 'c:strRef', 'c:strCache', 'c:pt']) !== undefined) {\n        eachElement(innerNode['c:cat']['c:strRef']['c:strCache']['c:pt'], function (innerNode, index) {\n          rowNames[innerNode['attrs']['idx']] = innerNode['c:v']\n          return ''\n        })\n      } else if (getTextByPathList(innerNode, ['c:cat', 'c:numRef', 'c:numCache', 'c:pt']) !== undefined) {\n        eachElement(innerNode['c:cat']['c:numRef']['c:numCache']['c:pt'], function (innerNode, index) {\n          rowNames[innerNode['attrs']['idx']] = innerNode['c:v']\n          return ''\n        })\n      }\n\n      // Value\n      if (getTextByPathList(innerNode, ['c:val', 'c:numRef', 'c:numCache', 'c:pt']) !== undefined) {\n        eachElement(innerNode['c:val']['c:numRef']['c:numCache']['c:pt'], function (innerNode, index) {\n          dataRow.push({ x: innerNode['attrs']['idx'], y: parseFloat(innerNode['c:v']) })\n          return ''\n        })\n      }\n\n      dataMat.push({ key: colName, values: dataRow, xlabels: rowNames })\n      return ''\n    })\n  }\n\n  return dataMat\n}\n\n// ===== Node functions =====\n/**\n * getTextByPathStr\n * @param {Object} node\n * @param {string} pathStr\n */\nfunction getTextByPathStr(node, pathStr) {\n  return getTextByPathList(node, pathStr.trim().split(/\\s+/))\n}\n\n/**\n * getTextByPathList\n * @param {Object} node\n * @param {string Array} path\n */\nfunction getTextByPathList(node, path) {\n\n  if (path.constructor !== Array) {\n    throw Error('Error of path type! path is not array.')\n  }\n\n  if (node === undefined) {\n    return undefined\n  }\n\n  const l = path.length\n  for (let i = 0; i < l; i++) {\n    node = node[path[i]]\n    if (node === undefined) {\n      return undefined\n    }\n  }\n\n  return node\n}\n/**\n * setTextByPathList\n * @param {Object} node\n * @param {string Array} path\n * @param {string} value\n */\nfunction setTextByPathList(node, path, value) {\n\n  if (path.constructor !== Array) {\n    throw Error('Error of path type! path is not array.')\n  }\n\n  if (node === undefined) {\n    return undefined\n  }\n\n  Object.prototype.set = function (parts, value) {\n    //var parts = prop.split('.');\n    var obj = this\n    var lent = parts.length\n    for (var i = 0; i < lent; i++) {\n      var p = parts[i]\n      if (obj[p] === undefined) {\n        if (i == lent - 1) {\n          obj[p] = value\n        } else {\n          obj[p] = {}\n        }\n      }\n      obj = obj[p]\n    }\n    return obj\n  }\n\n  node.set(path, value)\n}\n\n/**\n * eachElement\n * @param {Object} node\n * @param {function} doFunction\n */\nfunction eachElement(node, doFunction) {\n  if (node === undefined) {\n    return\n  }\n  var result = ''\n  if (node.constructor === Array) {\n    var l = node.length\n    for (var i = 0; i < l; i++) {\n      result += doFunction(node[i], i)\n    }\n  } else {\n    result += doFunction(node, 0)\n  }\n  return result\n}\n\n// ===== Color functions =====\n/**\n * applyShade\n * @param {string} rgbStr\n * @param {number} shadeValue\n */\nfunction applyShade(rgbStr, shadeValue, isAlpha) {\n  var color = tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()(rgbStr).toHsl()\n  //console.log(\"applyShade  color: \", color, \", shadeValue: \", shadeValue)\n  if (shadeValue >= 1) {\n    shadeValue = 1\n  }\n  var cacl_l = Math.min(color.l * shadeValue, 1)//;color.l * shadeValue + (1 - shadeValue);\n  // if (isAlpha)\n  //     return color.lighten(tintValue).toHex8();\n  // return color.lighten(tintValue).toHex();\n  if (isAlpha)\n    return tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()({ h: color.h, s: color.s, l: cacl_l, a: color.a }).toHex8()\n  return tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()({ h: color.h, s: color.s, l: cacl_l, a: color.a }).toHex()\n}\n\n/**\n * applyTint\n * @param {string} rgbStr\n * @param {number} tintValue\n */\nfunction applyTint(rgbStr, tintValue, isAlpha) {\n  var color = tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()(rgbStr).toHsl()\n  //console.log(\"applyTint  color: \", color, \", tintValue: \", tintValue)\n  if (tintValue >= 1) {\n    tintValue = 1\n  }\n  var cacl_l = color.l * tintValue + (1 - tintValue)\n  // if (isAlpha)\n  //     return color.lighten(tintValue).toHex8();\n  // return color.lighten(tintValue).toHex();\n  if (isAlpha)\n    return tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()({ h: color.h, s: color.s, l: cacl_l, a: color.a }).toHex8()\n  return tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()({ h: color.h, s: color.s, l: cacl_l, a: color.a }).toHex()\n}\n\n/**\n * applyLumOff\n * @param {string} rgbStr\n * @param {number} offset\n */\nfunction applyLumOff(rgbStr, offset, isAlpha) {\n  var color = tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()(rgbStr).toHsl()\n  //console.log(\"applyLumOff  color.l: \", color.l, \", offset: \", offset, \", color.l + offset : \", color.l + offset)\n  var lum = offset + color.l\n  if (lum >= 1) {\n    if (isAlpha)\n      return tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()({ h: color.h, s: color.s, l: 1, a: color.a }).toHex8()\n    return tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()({ h: color.h, s: color.s, l: 1, a: color.a }).toHex()\n  }\n  if (isAlpha)\n    return tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()({ h: color.h, s: color.s, l: lum, a: color.a }).toHex8()\n  return tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()({ h: color.h, s: color.s, l: lum, a: color.a }).toHex()\n}\n\n/**\n * applyLumMod\n * @param {string} rgbStr\n * @param {number} multiplier\n */\nfunction applyLumMod(rgbStr, multiplier, isAlpha) {\n  var color = tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()(rgbStr).toHsl()\n  //console.log(\"applyLumMod  color.l: \", color.l, \", multiplier: \", multiplier, \", color.l * multiplier : \", color.l * multiplier)\n  var cacl_l = color.l * multiplier\n  if (cacl_l >= 1) {\n    cacl_l = 1\n  }\n  if (isAlpha)\n    return tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()({ h: color.h, s: color.s, l: cacl_l, a: color.a }).toHex8()\n  return tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()({ h: color.h, s: color.s, l: cacl_l, a: color.a }).toHex()\n}\n\n\n// /**\n//  * applyHueMod\n//  * @param {string} rgbStr\n//  * @param {number} multiplier\n//  */\nfunction applyHueMod(rgbStr, multiplier, isAlpha) {\n  var color = tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()(rgbStr).toHsl()\n  //console.log(\"applyLumMod  color.h: \", color.h, \", multiplier: \", multiplier, \", color.h * multiplier : \", color.h * multiplier)\n\n  var cacl_h = color.h * multiplier\n  if (cacl_h >= 360) {\n    cacl_h = cacl_h - 360\n  }\n  if (isAlpha)\n    return tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()({ h: cocacl_h, s: color.s, l: color.l, a: color.a }).toHex8()\n  return tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()({ h: cacl_h, s: color.s, l: color.l, a: color.a }).toHex()\n}\n\n\n// /**\n//  * applyHueOff\n//  * @param {string} rgbStr\n//  * @param {number} offset\n//  */\n// function applyHueOff(rgbStr, offset, isAlpha) {\n//     var color = tinycolor(rgbStr).toHsl();\n//     //console.log(\"applyLumMod  color.h: \", color.h, \", offset: \", offset, \", color.h * offset : \", color.h * offset)\n\n//     var cacl_h = color.h * offset;\n//     if (cacl_h >= 360) {\n//         cacl_h = cacl_h - 360;\n//     }\n//     if (isAlpha)\n//         return tinycolor({ h: cocacl_h, s: color.s, l: color.l, a: color.a }).toHex8();\n//     return tinycolor({ h: cacl_h, s: color.s, l: color.l, a: color.a }).toHex();\n// }\n// /**\n//  * applySatMod\n//  * @param {string} rgbStr\n//  * @param {number} multiplier\n//  */\nfunction applySatMod(rgbStr, multiplier, isAlpha) {\n  var color = tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()(rgbStr).toHsl()\n  //console.log(\"applySatMod  color.s: \", color.s, \", multiplier: \", multiplier, \", color.s * multiplier : \", color.s * multiplier)\n  var cacl_s = color.s * multiplier\n  if (cacl_s >= 1) {\n    cacl_s = 1\n  }\n  //return;\n  // if (isAlpha)\n  //     return tinycolor(rgbStr).saturate(multiplier * 100).toHex8();\n  // return tinycolor(rgbStr).saturate(multiplier * 100).toHex();\n  if (isAlpha)\n    return tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()({ h: color.h, s: cacl_s, l: color.l, a: color.a }).toHex8()\n  return tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()({ h: color.h, s: cacl_s, l: color.l, a: color.a }).toHex()\n}\n\n/**\n * rgba2hex\n * @param {string} rgbaStr\n */\nfunction rgba2hex(rgbaStr) {\n  var a,\n    rgb = rgbaStr.replace(/\\s/g, '').match(/^rgba?\\((\\d+),(\\d+),(\\d+),?([^,\\s)]+)?/i),\n    alpha = (rgb && rgb[4] || '').trim(),\n    hex = rgb ?\n      (rgb[1] | 1 << 8).toString(16).slice(1) +\n      (rgb[2] | 1 << 8).toString(16).slice(1) +\n      (rgb[3] | 1 << 8).toString(16).slice(1) : rgbaStr\n\n  if (alpha !== '') {\n    a = alpha\n  } else {\n    a = 0o1\n  }\n  // multiply before convert to HEX\n  a = ((a * 255) | 1 << 8).toString(16).slice(1)\n  hex = hex + a\n\n  return hex\n}\n\n///////////////////////Amir////////////////\nfunction angleToDegrees(angle) {\n  if (angle == '' || angle == null) {\n    return 0\n  }\n  return Math.round(angle / 60000)\n}\n// function degreesToRadians(degrees) {\n//     //Math.PI\n//     if (degrees == \"\" || degrees == null || degrees == undefined) {\n//         return 0;\n//     }\n//     return degrees * (Math.PI / 180);\n// }\nfunction getMimeType(imgFileExt) {\n  var mimeType = ''\n  //console.log(imgFileExt)\n  switch (imgFileExt.toLowerCase()) {\n    case 'jpg':\n    case 'jpeg':\n      mimeType = 'image/jpeg'\n      break\n    case 'png':\n      mimeType = 'image/png'\n      break\n    case 'gif':\n      mimeType = 'image/gif'\n      break\n    case 'emf': // Not native support\n      mimeType = 'image/x-emf'\n      break\n    case 'wmf': // Not native support\n      mimeType = 'image/x-wmf'\n      break\n    case 'svg':\n      mimeType = 'image/svg+xml'\n      break\n    case 'mp4':\n      mimeType = 'video/mp4'\n      break\n    case 'webm':\n      mimeType = 'video/webm'\n      break\n    case 'ogg':\n      mimeType = 'video/ogg'\n      break\n    case 'avi':\n      mimeType = 'video/avi'\n      break\n    case 'mpg':\n      mimeType = 'video/mpg'\n      break\n    case 'wmv':\n      mimeType = 'video/wmv'\n      break\n    case 'mp3':\n      mimeType = 'audio/mpeg'\n      break\n    case 'wav':\n      mimeType = 'audio/wav'\n      break\n    case 'tif':\n    case 'tiff':\n      mimeType = 'image/tiff'\n      break\n  }\n  return mimeType\n}\nfunction getSvgGradient(w, h, angl, color_arry, shpId) {\n  var stopsArray = getMiddleStops(color_arry - 2)\n\n  var svgAngle = '',\n    svgHeight = h,\n    svgWidth = w,\n    svg = '',\n    xy_ary = SVGangle(angl, svgHeight, svgWidth),\n    x1 = xy_ary[0],\n    y1 = xy_ary[1],\n    x2 = xy_ary[2],\n    y2 = xy_ary[3]\n\n  var sal = stopsArray.length,\n    sr = sal < 20 ? 100 : 1000\n  svgAngle = ' gradientUnits=\"userSpaceOnUse\" x1=\"' + x1 + '%\" y1=\"' + y1 + '%\" x2=\"' + x2 + '%\" y2=\"' + y2 + '%\"'\n  svgAngle = '<linearGradient id=\"linGrd_' + shpId + '\"' + svgAngle + '>\\n'\n  svg += svgAngle\n\n  for (var i = 0; i < sal; i++) {\n    var tinClr = tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()('#' + color_arry[i])\n    var alpha = tinClr.getAlpha()\n    //console.log(\"color: \", color_arry[i], \", rgba: \", tinClr.toHexString(), \", alpha: \", alpha)\n    svg += '<stop offset=\"' + Math.round(parseFloat(stopsArray[i]) / 100 * sr) / sr + '\" style=\"stop-color:' + tinClr.toHexString() + '; stop-opacity:' + (alpha) + ';\"'\n    svg += '/>\\n'\n  }\n\n  svg += '</linearGradient>\\n' + ''\n\n  return svg\n}\nfunction getMiddleStops(s) {\n  var sArry = ['0%', '100%']\n  if (s == 0) {\n    return sArry\n  } else {\n    var i = s\n    while (i--) {\n      var middleStop = 100 - ((100 / (s + 1)) * (i + 1)), // AM: Ex - For 3 middle stops, progression will be 25%, 50%, and 75%, plus 0% and 100% at the ends.\n        middleStopString = middleStop + '%'\n      sArry.splice(-1, 0, middleStopString)\n    } // AM: add into stopsArray before 100%\n  }\n  return sArry\n}\nfunction SVGangle(deg, svgHeight, svgWidth) {\n  var w = parseFloat(svgWidth),\n    h = parseFloat(svgHeight),\n    ang = parseFloat(deg),\n    o = 2,\n    n = 2,\n    wc = w / 2,\n    hc = h / 2,\n    tx1 = 2,\n    ty1 = 2,\n    tx2 = 2,\n    ty2 = 2,\n    k = (((ang % 360) + 360) % 360),\n    j = (360 - k) * Math.PI / 180,\n    i = Math.tan(j),\n    l = hc - i * wc\n\n  if (k == 0) {\n    tx1 = w,\n      ty1 = hc,\n      tx2 = 0,\n      ty2 = hc\n  } else if (k < 90) {\n    n = w,\n      o = 0\n  } else if (k == 90) {\n    tx1 = wc,\n      ty1 = 0,\n      tx2 = wc,\n      ty2 = h\n  } else if (k < 180) {\n    n = 0,\n      o = 0\n  } else if (k == 180) {\n    tx1 = 0,\n      ty1 = hc,\n      tx2 = w,\n      ty2 = hc\n  } else if (k < 270) {\n    n = 0,\n      o = h\n  } else if (k == 270) {\n    tx1 = wc,\n      ty1 = h,\n      tx2 = wc,\n      ty2 = 0\n  } else {\n    n = w,\n      o = h\n  }\n  // AM: I could not quite figure out what m, n, and o are supposed to represent from the original code on visualcsstools.com.\n  var m = o + (n / i),\n    tx1 = tx1 == 2 ? i * (m - l) / (Math.pow(i, 2) + 1) : tx1,\n    ty1 = ty1 == 2 ? i * tx1 + l : ty1,\n    tx2 = tx2 == 2 ? w - tx1 : tx2,\n    ty2 = ty2 == 2 ? h - ty1 : ty2,\n    x1 = Math.round(tx2 / w * 100 * 100) / 100,\n    y1 = Math.round(ty2 / h * 100 * 100) / 100,\n    x2 = Math.round(tx1 / w * 100 * 100) / 100,\n    y2 = Math.round(ty1 / h * 100 * 100) / 100\n  return [x1, y1, x2, y2]\n}\nasync function getSvgImagePattern(node, fill, shpId, warpObj) {\n  const [ width, height ] = await getBase64ImageDimensions(fill)\n  //console.log(\"getSvgImagePattern node:\", node);\n  var blipFillNode = node['p:spPr']['a:blipFill']\n  var tileNode = getTextByPathList(blipFillNode, ['a:tile', 'attrs'])\n  if (tileNode !== undefined && tileNode['sx'] !== undefined) {\n    var sx = (parseInt(tileNode['sx']) / 100000) * width\n    var sy = (parseInt(tileNode['sy']) / 100000) * height\n  }\n\n  const blipNode = node['p:spPr']['a:blipFill']['a:blip']\n  var tialphaModFixNode = getTextByPathList(blipNode, ['a:alphaModFix', 'attrs'])\n  var imgOpacity = ''\n  if (tialphaModFixNode !== undefined && tialphaModFixNode['amt'] !== undefined && tialphaModFixNode['amt'] != '') {\n    var amt = parseInt(tialphaModFixNode['amt']) / 100000\n    var opacity = amt\n    imgOpacity = 'opacity=\\'' + opacity + '\\''\n  }\n  if (sx !== undefined && sx != 0) {\n    var ptrn = '<pattern id=\"imgPtrn_' + shpId + '\" x=\"0\" y=\"0\"  width=\"' + sx + '\" height=\"' + sy + '\" patternUnits=\"userSpaceOnUse\">'\n  } else {\n    var ptrn = '<pattern id=\"imgPtrn_' + shpId + '\"  patternContentUnits=\"objectBoundingBox\"  width=\"1\" height=\"1\">'\n  }\n  var duotoneNode = getTextByPathList(blipNode, ['a:duotone'])\n  var fillterNode = ''\n  var filterUrl = ''\n  if (duotoneNode !== undefined) {\n    //console.log(\"pic duotoneNode: \", duotoneNode)\n    var clr_ary = []\n    Object.keys(duotoneNode).forEach(function (clr_type) {\n      //Object.keys(duotoneNode[clr_type]).forEach(function (clr) {\n      //console.log(\"blip pic duotone clr: \", duotoneNode[clr_type][clr], clr)\n      if (clr_type != 'attrs') {\n        var obj = {}\n        obj[clr_type] = duotoneNode[clr_type]\n        //console.log(\"blip pic duotone obj: \", obj)\n        var hexClr = getSolidFill(obj, undefined, undefined, warpObj)\n        //clr_ary.push();\n\n        var color = tinycolor2__WEBPACK_IMPORTED_MODULE_0___default()('#' + hexClr)\n        clr_ary.push(color.toRgb()) // { r: 255, g: 0, b: 0, a: 1 }\n      }\n      // })\n    })\n\n    if (clr_ary.length == 2) {\n\n      fillterNode = '<filter id=\"svg_image_duotone\"> ' +\n        '<feColorMatrix type=\"matrix\" values=\".33 .33 .33 0 0' +\n        '.33 .33 .33 0 0' +\n        '.33 .33 .33 0 0' +\n        '0 0 0 1 0\">' +\n        '</feColorMatrix>' +\n        '<feComponentTransfer color-interpolation-filters=\"sRGB\">' +\n        //clr_ary.forEach(function(clr){\n        '<feFuncR type=\"table\" tableValues=\"' + clr_ary[0].r / 255 + ' ' + clr_ary[1].r / 255 + '\"></feFuncR>' +\n        '<feFuncG type=\"table\" tableValues=\"' + clr_ary[0].g / 255 + ' ' + clr_ary[1].g / 255 + '\"></feFuncG>' +\n        '<feFuncB type=\"table\" tableValues=\"' + clr_ary[0].b / 255 + ' ' + clr_ary[1].b / 255 + '\"></feFuncB>' +\n        //});\n        '</feComponentTransfer>' +\n        ' </filter>'\n    }\n\n    filterUrl = 'filter=\"url(#svg_image_duotone)\"'\n\n    ptrn += fillterNode\n  }\n\n  fill = escapeHtml(fill)\n  if (sx !== undefined && sx != 0) {\n    ptrn += '<image  xlink:href=\"' + fill + '\" x=\"0\" y=\"0\" width=\"' + sx + '\" height=\"' + sy + '\" ' + imgOpacity + ' ' + filterUrl + '></image>'\n  } else {\n    ptrn += '<image  xlink:href=\"' + fill + '\" preserveAspectRatio=\"none\" width=\"1\" height=\"1\" ' + imgOpacity + ' ' + filterUrl + '></image>'\n  }\n  ptrn += '</pattern>'\n\n  //console.log(\"getSvgImagePattern(...) pic_dim:\", pic_dim, \", fillColor: \", fill, \", blipNode: \", blipNode, \",sx: \", sx, \", sy: \", sy, \", clr_ary: \", clr_ary, \", ptrn: \", ptrn)\n\n  return ptrn\n}\n\nasync function getBase64ImageDimensions(imgSrc) {\n  const image = await self.createImageBitmap(dataURLtoBlob(imgSrc))\n  return [image.width, image.height]\n}\n\nfunction dataURLtoBlob(dataurl) {\n  let arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\n    bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n)\n  while(n--){\n    u8arr[n] = bstr.charCodeAt(n)\n  }\n  return new Blob([u8arr], {type:mime})\n}\n\nfunction processMsgQueue(queue) {\n  for (var i = 0; i < queue.length; i++) {\n    processSingleMsg(queue[i].data)\n  }\n}\n\nfunction processSingleMsg(d) {\n\n  var chartID = d.chartID\n  var chartType = d.chartType\n  var chartData = d.chartData\n\n  var data = []\n\n  var chart = null\n  switch (chartType) {\n    case 'lineChart':\n      data = chartData\n      chart = nvd3__WEBPACK_IMPORTED_MODULE_3___default.a.models.lineChart()\n        .useInteractiveGuideline(true)\n      chart.xAxis.tickFormat(function (d) { return chartData[0].xlabels[d] || d })\n      break\n    case 'barChart':\n      data = chartData\n      chart = nvd3__WEBPACK_IMPORTED_MODULE_3___default.a.models.multiBarChart()\n      chart.xAxis.tickFormat(function (d) { return chartData[0].xlabels[d] || d })\n      break\n    case 'pieChart':\n    case 'pie3DChart':\n      if (chartData.length > 0) {\n        data = chartData[0].values\n      }\n      chart = nvd3__WEBPACK_IMPORTED_MODULE_3___default.a.models.pieChart()\n      break\n    case 'areaChart':\n      data = chartData\n      chart = nvd3__WEBPACK_IMPORTED_MODULE_3___default.a.models.stackedAreaChart()\n        .clipEdge(true)\n        .useInteractiveGuideline(true)\n      chart.xAxis.tickFormat(function (d) { return chartData[0].xlabels[d] || d })\n      break\n    case 'scatterChart':\n\n      for (var i = 0; i < chartData.length; i++) {\n        var arr = []\n        for (var j = 0; j < chartData[i].length; j++) {\n          arr.push({ x: j, y: chartData[i][j] })\n        }\n        data.push({ key: 'data' + (i + 1), values: arr })\n      }\n\n      //data = chartData;\n      chart = nvd3__WEBPACK_IMPORTED_MODULE_3___default.a.models.scatterChart()\n        .showDistX(true)\n        .showDistY(true)\n        .color(d3__WEBPACK_IMPORTED_MODULE_2___default.a.scale.category10().range())\n      chart.xAxis.axisLabel('X').tickFormat(d3__WEBPACK_IMPORTED_MODULE_2___default.a.format('.02f'))\n      chart.yAxis.axisLabel('Y').tickFormat(d3__WEBPACK_IMPORTED_MODULE_2___default.a.format('.02f'))\n      break\n    default:\n  }\n\n  if (chart !== null) {\n\n    d3__WEBPACK_IMPORTED_MODULE_2___default.a.select(`#${chartID}`)\n      .append('svg')\n      .datum(data)\n      .transition()\n      .duration(500)\n      .call(chart)\n\n    nvd3__WEBPACK_IMPORTED_MODULE_3___default.a.utils.windowResize(chart.update)\n    isDone = true\n  }\n\n}\n\nfunction setNumericBullets(elem) {\n  var prgrphs_arry = elem\n  for (var i = 0; i < prgrphs_arry.length; i++) {\n    var buSpan = $(prgrphs_arry[i]).find('.numeric-bullet-style')\n    if (buSpan.length > 0) {\n      //console.log(\"DIV-\"+i+\":\");\n      var prevBultTyp = ''\n      var prevBultLvl = ''\n      var buletIndex = 0\n      var tmpArry = new Array()\n      var tmpArryIndx = 0\n      var buletTypSrry = new Array()\n      for (var j = 0; j < buSpan.length; j++) {\n        var bult_typ = $(buSpan[j]).data('bulltname')\n        var bult_lvl = $(buSpan[j]).data('bulltlvl')\n        //console.log(j+\" - \"+bult_typ+\" lvl: \"+bult_lvl );\n        if (buletIndex == 0) {\n          prevBultTyp = bult_typ\n          prevBultLvl = bult_lvl\n          tmpArry[tmpArryIndx] = buletIndex\n          buletTypSrry[tmpArryIndx] = bult_typ\n          buletIndex++\n        } else {\n          if (bult_typ == prevBultTyp && bult_lvl == prevBultLvl) {\n            prevBultTyp = bult_typ\n            prevBultLvl = bult_lvl\n            buletIndex++\n            tmpArry[tmpArryIndx] = buletIndex\n            buletTypSrry[tmpArryIndx] = bult_typ\n          } else if (bult_typ != prevBultTyp && bult_lvl == prevBultLvl) {\n            prevBultTyp = bult_typ\n            prevBultLvl = bult_lvl\n            tmpArryIndx++\n            tmpArry[tmpArryIndx] = buletIndex\n            buletTypSrry[tmpArryIndx] = bult_typ\n            buletIndex = 1\n          } else if (bult_typ != prevBultTyp && Number(bult_lvl) > Number(prevBultLvl)) {\n            prevBultTyp = bult_typ\n            prevBultLvl = bult_lvl\n            tmpArryIndx++\n            tmpArry[tmpArryIndx] = buletIndex\n            buletTypSrry[tmpArryIndx] = bult_typ\n            buletIndex = 1\n          } else if (bult_typ != prevBultTyp && Number(bult_lvl) < Number(prevBultLvl)) {\n            prevBultTyp = bult_typ\n            prevBultLvl = bult_lvl\n            tmpArryIndx--\n            buletIndex = tmpArry[tmpArryIndx] + 1\n          }\n        }\n        //console.log(buletTypSrry[tmpArryIndx]+\" - \"+buletIndex);\n        var numIdx = getNumTypeNum(buletTypSrry[tmpArryIndx], buletIndex)\n        $(buSpan[j]).html(numIdx)\n      }\n    }\n  }\n}\nfunction getNumTypeNum(numTyp, num) {\n  var rtrnNum = ''\n  switch (numTyp) {\n    case 'arabicPeriod':\n      rtrnNum = num + '. '\n      break\n    case 'arabicParenR':\n      rtrnNum = num + ') '\n      break\n    case 'alphaLcParenR':\n      rtrnNum = alphaNumeric(num, 'lowerCase') + ') '\n      break\n    case 'alphaLcPeriod':\n      rtrnNum = alphaNumeric(num, 'lowerCase') + '. '\n      break\n\n    case 'alphaUcParenR':\n      rtrnNum = alphaNumeric(num, 'upperCase') + ') '\n      break\n    case 'alphaUcPeriod':\n      rtrnNum = alphaNumeric(num, 'upperCase') + '. '\n      break\n\n    case 'romanUcPeriod':\n      rtrnNum = romanize(num) + '. '\n      break\n    case 'romanLcParenR':\n      rtrnNum = romanize(num) + ') '\n      break\n    case 'hebrew2Minus':\n      rtrnNum = hebrew2Minus.format(num) + '-'\n      break\n    default:\n      rtrnNum = num\n  }\n  return rtrnNum\n}\nfunction romanize(num) {\n  if (!+num)\n    return false\n  var digits = String(+num).split(''),\n    key = ['', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM',\n      '', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC',\n      '', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX'],\n    roman = '',\n    i = 3\n  while (i--)\n    roman = (key[+digits.pop() + (i * 10)] || '') + roman\n  return Array(+digits.join('') + 1).join('M') + roman\n}\n\nvar hebrew2Minus = archaicNumbers([\n  [1000, ''],\n  [400, 'ת'],\n  [300, 'ש'],\n  [200, 'ר'],\n  [100, 'ק'],\n  [90, 'צ'],\n  [80, 'פ'],\n  [70, 'ע'],\n  [60, 'ס'],\n  [50, 'נ'],\n  [40, 'מ'],\n  [30, 'ל'],\n  [20, 'כ'],\n  [10, 'י'],\n  [9, 'ט'],\n  [8, 'ח'],\n  [7, 'ז'],\n  [6, 'ו'],\n  [5, 'ה'],\n  [4, 'ד'],\n  [3, 'ג'],\n  [2, 'ב'],\n  [1, 'א'],\n  [/יה/, 'ט״ו'],\n  [/יו/, 'ט״ז'],\n  [/([א-ת])([א-ת])$/, '$1״$2'],\n  [/^([א-ת])$/, '$1׳']\n])\n\nfunction archaicNumbers(arr) {\n  var arrParse = arr.slice().sort(function (a, b) { return b[1].length - a[1].length })\n  return {\n    format: function (n) {\n      var ret = ''\n      jQuery.each(arr, function () {\n        var num = this[0]\n        if (parseInt(num) > 0) {\n          for (; n >= num; n -= num) ret += this[1]\n        } else {\n          ret = ret.replace(num, this[1])\n        }\n      })\n      return ret\n    }\n  }\n}\n\nfunction alphaNumeric(num, upperLower) {\n  num = Number(num) - 1\n  var aNum = ''\n  if (upperLower == 'upperCase') {\n    aNum = (((num / 26 >= 1) ? String.fromCharCode(num / 26 + 64) : '') + String.fromCharCode(num % 26 + 65)).toUpperCase()\n  } else if (upperLower == 'lowerCase') {\n    aNum = (((num / 26 >= 1) ? String.fromCharCode(num / 26 + 64) : '') + String.fromCharCode(num % 26 + 65)).toLowerCase()\n  }\n  return aNum\n}\nfunction base64ArrayBuffer(arrayBuffer) {\n  var base64 = ''\n  var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n  var bytes = new Uint8Array(arrayBuffer)\n  var byteLength = bytes.byteLength\n  var byteRemainder = byteLength % 3\n  var mainLength = byteLength - byteRemainder\n\n  var a, b, c, d\n  var chunk\n\n  for (var i = 0; i < mainLength; i = i + 3) {\n    chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2]\n    a = (chunk & 16515072) >> 18\n    b = (chunk & 258048) >> 12\n    c = (chunk & 4032) >> 6\n    d = chunk & 63\n    base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]\n  }\n\n  if (byteRemainder == 1) {\n    chunk = bytes[mainLength]\n    a = (chunk & 252) >> 2\n    b = (chunk & 3) << 4\n    base64 += encodings[a] + encodings[b] + '=='\n  } else if (byteRemainder == 2) {\n    chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1]\n    a = (chunk & 64512) >> 10\n    b = (chunk & 1008) >> 4\n    c = (chunk & 15) << 2\n    base64 += encodings[a] + encodings[b] + encodings[c] + '='\n  }\n\n  return base64\n}\n\nfunction IsVideoLink(vdoFile) {\n  /*\n            var ext = extractFileExtension(vdoFile);\n            if (ext.length == 3){\n                return false;\n            }else{\n                return true;\n            }\n            */\n  var urlregex = /^(https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?'\\\\+&%$#=~_-]+))*$/\n  return urlregex.test(vdoFile)\n}\n\nfunction extractFileExtension(filename) {\n  return filename.substr((~-filename.lastIndexOf('.') >>> 0) + 2)\n}\n\nfunction escapeHtml(text) {\n  var map = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    '\\'': '&#039;'\n  }\n  return text.replace(/[&<>\"']/g, function (m) { return map[m] })\n}\n\n\n//# sourceURL=webpack:///./packages/vendors/pptx/support/vendor.js?");

/***/ })

/******/ });